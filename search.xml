<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[iOS编译原理]]></title>
      <url>/2018/07/10/2015/iOS%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="关于指令集"><a href="#关于指令集" class="headerlink" title="关于指令集"></a>关于指令集</h3><p>模拟器跑在mac上，所以需要支持mac的处理器架构，而真机上就不需要。</p>
<p>armv7｜armv7s｜arm64都是ARM处理器的指令集</p>
<p>i386｜x86_64 是Mac处理器的指令集</p>
<p>这些指令集在那些设备中有用到呢？</p>
<pre><code>arm64：iPhone6s | iphone6s plus｜iPhone6｜ iPhone6 plus｜iPhone5S | iPad Air｜ iPad mini2(iPad mini with Retina Display)
armv7s：iPhone5｜iPhone5C｜iPad4(iPad with Retina Display)
armv7：iPhone4｜iPhone4S｜iPad｜iPad2｜iPad3(The New iPad)｜iPad mini｜iPod Touch 3G｜iPod Touch4
</code></pre><p>i386是针对intel通用微处理器32位处理器</p>
<p>x86_64是针对x86架构的64位处理器</p>
<ul>
<li>模拟器32位处理器测试需要i386架构，</li>
<li>模拟器64位处理器测试需要x86_64架构，</li>
<li>真机32位处理器需要armv7,或者armv7s架构，</li>
<li>真机64位处理器需要arm64架构。</li>
</ul>
<h3 id="C-C-编译过程"><a href="#C-C-编译过程" class="headerlink" title="C/C++编译过程:"></a>C/C++编译过程:</h3><p> 1、预处理阶段 ： 从hello.c变成hello.i文件，预处理一般就是将include或者define之类的东西，插入到代码中；</p>
<p> 2、编译 ： 从hello.i 变成hello.s文件，过程：检查语法、规范，在确定无误之后，将代码翻译成汇编语言。</p>
<p> 3、汇编 ： 从hello.s 变成hello.o文件，过程：将汇编代码转换成二进制文件。</p>
<p> 4、连接 ： 根据目标文件以及库文件，完成链接之后，生成可执行文件。</p>
 <a id="more"></a>
<p> <a href="https://blog.csdn.net/aas319/article/details/78606342" target="_blank" rel="external">iOS编译过程</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NSDictionary实现(转)]]></title>
      <url>/2018/07/10/2015/NSDictionary%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/d4b5542740d5" target="_blank" rel="external">原文链接</a></p>
<p>NSDictionary 内部结构、实现原理</p>
<p>不知道大家有没有思考过NSDictionary和NSArray内部是怎么实现的，那么今天就深挖一下NSDictionary&amp; NSArray的 内部结构。</p>
<p>首先咱们了解一下这几个概念：哈希表、时间复杂度、链表<br><a id="more"></a><br>看了上面的文章，估计大家都懵逼了。。。好吧，正文来了</p>
<p>NSDictionary<br>NSDictionary（字典）是使用 哈希表来实现key和value之间的映射和存储的， hash函数设计的好坏影响着数据的查找访问效率。数据在hash表中分布的越均匀，其访问效率越高。而在Objective-C中，通常都是利用NSString 来作为键值，其内部使用的hash函数也是通过使用 NSString对象作为键值来保证数据的各个节点在hash表中均匀分布。</p>
<p><code>- (void)setObject:(id)anObject forKey:(id &lt;NSCopying&gt;)aKey;</code><br>NSDictionary中的key是唯一的，key可以是遵循NSCopying 协议和重载- (NSUInteger)hash;、- (BOOL)isEqual:(id)object;方法的任何对象。也就是说在NSDictionary内部，会对 aKey 对象 copy 一份新的。而 anObject 对象在其内部是作为强引用（retain或strong)。</p>
<p>hash 方法是用来计算该对象的 hash 值，最终的 hash 值决定了该对象在 hash 表中存储的位置。所以同样，如果想重写该方法，我们尽量设计一个能让数据分布均匀的 hash 函数。<br>�isEqual : 方法是为了通过 hash 值来找到 对象 在hash �表中的位置。<br>在调用setObject: forKey: 后，内部会去调用 � key 对象的 hash 方法确定 object 在hash表内的入口位置，然后会调用 isEqual : 来确定该值是否已经存在于 NSDictionary中。<br>注：关于hash，isEqual :可以看看这篇文章 iOS开发 之 不要告诉我你真的懂isEqual与hash!</p>
<p>其实，NSDictionary使用NSMapTable实现。NSMapTable同样是一个key－value的容器，下面是NSMapTable的部分代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@interface NSMapTable : NSObject &#123;</div><div class="line">   NSMapTableKeyCallBacks   *keyCallBacks;</div><div class="line">   NSMapTableValueCallBacks *valueCallBacks;</div><div class="line">   NSUInteger             count;</div><div class="line">   NSUInteger             nBuckets;</div><div class="line">   struct _NSMapNode  **buckets;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出来NSMapTable是一个哈希＋链表的数据结构，因此在NSMapTable中插入或者删除一对对象时</p>
<p>寻找的时间是O（1）＋O（m），m最坏时可能为n。</p>
<ul>
<li>O（1）：为对key进行hash得到bucket的位置</li>
<li>O（m）：遍历该bucket后面冲突的value，通过链表连接起来。<br>NSDictionary中的key Value遍历时是无序的，至如按照什么样的顺序，跟hash函数相关。NSMapTable使用NSObject的哈希函数。</li>
</ul>
<p>-(NSUInteger)hash {<br>   return (NSUInteger)self&gt;&gt;4;<br>}<br>上述是NSObject的哈希值的计算方式，简单通过移位实现。右移4位，左边补0.<br>因为对象大多存于堆中，地址相差4位应该很正常。</p>
<p>补充一个小知识：iOS setValue和setObject的区别：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (void)setObject:(ObjectType)anObject forKey:(KeyType &lt;NSCopying&gt;)aKey;</div><div class="line">- (void)setValue:(nullable ObjectType)value forKey:(NSString *)key;</div></pre></td></tr></table></figure>
<p>首先：setObject: ForKey:是NSMutableDictionary特有的；setValue: ForKey:是KVC的主要方法。</p>
<p>区别：<br>&gt;<br>(1) setValue: ForKey:的value是可以为nil的（但是当value为nil的时候，会自动调用removeObject：forKey方法）；<br>setObject: ForKey:的value则不可以为nil。<br>(2) setValue: ForKey:的key必须是不为nil的字符串类型；<br>setObject: ForKey:的key可以是不为nil的所有继承NSCopying的类型。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NSNotificationCenter实现]]></title>
      <url>/2018/07/10/2015/NSNotification%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<ul>
<li>多次添加多次执行</li>
<li>iOS8之后不需要移除，移除方法自动添加</li>
<li>unsafe_unretained修饰</li>
</ul>
<p><a href="https://juejin.im/entry/5a8fe5c551882518c0797ebe" target="_blank" rel="external">原文链接</a></p>
<p>透彻理解 NSNotificationCenter 通知（含实现代码）</p>
<p>写在前面<br>NSNotificationCenter这个东西作为iOS工程师想必都不陌生，但是有人可能连参数的意义都没搞明白，写这篇文章的目的不止是为了让不会用的人会用，更是为了让会用的人理解得更透彻。本篇文章主要是梳理NSNotificationCenter的特性和值得注意的地方，并且在后面结合对其特性的分析手动利用代码来实现它。<br><a id="more"></a></p>
<h3 id="一、分析"><a href="#一、分析" class="headerlink" title="一、分析"></a>一、分析</h3><h4 id="1、-基本使用方法"><a href="#1、-基本使用方法" class="headerlink" title="1、 基本使用方法"></a>1、 基本使用方法</h4><p>直接进入NSNotification文件。<br>@property (class, readonly, strong) NSNotificationCenter *defaultCenter;<br>该属性是获取NSNotificationCenter唯一单例，它就是一个消息分发中心，通过使用这个唯一的实例我们进行添加通知、发送通知、移除通知。</p>
<p>#####(1) 添加通知</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(respondsToNotification:) name:@&quot;test0&quot; object:_obj0];</div></pre></td></tr></table></figure>
<p>_obj0是创建的一个实例，这里暂时不讨论object参数的用法。Observer即为响应者无需多说；selector即为一个响应通知的方法，需要SEL类型；name是一个标识，通知中心主要是通过它来实现消息的精确分发（当然object也有定位作用）。</p>
<p>#####(2) 发送通知</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//便利方法</div><div class="line">[[NSNotificationCenter defaultCenter] postNotificationName:@&quot;test0&quot; object:_obj0 userInfo:@&#123;@&quot;key&quot;:@&quot;_obj0&quot;&#125;];</div><div class="line">//使用NSNotification</div><div class="line">NSNotification *notification = [[NSNotification alloc] initWithName:@&quot;test0&quot; object:_obj2 userInfo:@&#123;@&quot;key&quot;:@&quot;_obj2&quot;&#125;];</div><div class="line"> [[NSNotificationCenter defaultCenter] postNotification:notification];</div></pre></td></tr></table></figure>
<p>发送通知和添加通知对应，需要name、object参数，这里多了一个userInfo，该参数可以把你需要携带的数据发送给该通知的响应者。<br>其实我们可以很轻易的想到，便利发送通知方法不过是对于使用NSNotification发送通知的一个语法糖，NSNotification才是消息体。</p>
<h5 id="3-移除通知"><a href="#3-移除通知" class="headerlink" title="(3) 移除通知"></a>(3) 移除通知</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//移除该响应者的全部通知</div><div class="line">[[NSNotificationCenter defaultCenter]  removeObserver:self];</div><div class="line">//移除该响应者 name==@&quot;test0&quot; 的全部通知</div><div class="line">[[NSNotificationCenter defaultCenter] removeObserver:self name:@&quot;test0&quot; object:nil];</div><div class="line">//移除该响应者 name==@&quot;test0&quot; 且 object==_obj0 的全部通知</div><div class="line">[[NSNotificationCenter defaultCenter] removeObserver:self name:@&quot;test0&quot; object:_obj0];</div></pre></td></tr></table></figure>
<p>移除通知这里有点讲究，从上至下越来越“精准”。<br>在合理的位置移除通知是至关重要的：</p>
<p>1、让不希望继续接受通知的响应者失去对该通知的响应；</p>
<p>2、避免重复添加相同通知（响应者的内存为同一块的时候）；</p>
<p>3、通知中心对响应者observer是使用unsafe_unretained修饰，当响应者释放会出现野指针，向野指针发送消息造成崩溃；在iOS n(更新的系统版本有待考证)之后，苹果对其做了优化，会在响应者调用dealloc方法的时候执行removeObserver:方法。<br>注意：在后文会详细分析该问题。</p>
<p>当然，常规的业务场景一般是在该响应者释放的时候移除。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)dealloc &#123;</div><div class="line">    [[NSNotificationCenter defaultCenter] removeObserver:self];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-响应通知"><a href="#4-响应通知" class="headerlink" title="(4) 响应通知"></a>(4) 响应通知</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (void)respondsToNotification:(NSNotification *)noti &#123;</div><div class="line">    id obj = noti.object;</div><div class="line">    NSDictionary *dic = noti.userInfo;</div><div class="line">    NSLog(@&quot;\n- self:%@ \n- obj:%@ \n- notificationInfo:%@&quot;, self, obj, dic);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>响应通知的时候会将NSNotification消息体传递过来，如代码所示。</p>
<h3 id="2、object-nullable-id-anObject参数"><a href="#2、object-nullable-id-anObject参数" class="headerlink" title="2、object:(nullable id)anObject参数"></a>2、object:(nullable id)anObject参数</h3><p>添加通知时，若指定了object参数，那么该响应者只会接收发送通知时object参数指定为同一实例的通知。<br>发送通知时，若指定了object参数，并不会影响添加通知时没有指定object参数的响应者接收通知。<br>如果感觉有点绕，看如下代码便知。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//添加通知</div><div class="line">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(respondsToNotification:) name:@&quot;test0&quot; object:nil];</div><div class="line">//发送通知</div><div class="line">    [[NSNotificationCenter defaultCenter] postNotificationName:@&quot;test0&quot; object:_obj0];</div></pre></td></tr></table></figure>
<p>//由于添加通知时，object==nil，所以该响应者仍然能接收到该通知。<br>复制代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//添加通知</div><div class="line">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(respondsToNotification:) name:@&quot;test0&quot; object: _obj0];</div><div class="line">//发送通知</div><div class="line">    [[NSNotificationCenter defaultCenter] postNotificationName:@&quot;test0&quot; object:nil];</div></pre></td></tr></table></figure>
<p>//由于添加通知时，指定了object==_obj0，而发送通知时，object==nil，所以无法接收到通知<br>//（只有当object==_obj0才能接收到通知）。<br>复制代码</p>
<h3 id="3、通知线程问题"><a href="#3、通知线程问题" class="headerlink" title="3、通知线程问题"></a>3、通知线程问题</h3><p>我们进入全局队列发送这个通知</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line">        NSLog(@&quot;发送通知 currentThread : %@&quot;, [NSThread currentThread]);</div><div class="line">        [[NSNotificationCenter defaultCenter] postNotificationName:@&quot;test0&quot; object:nil];</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在接收通知的地方将线程打印出来</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">发送通知 currentThread : &lt;NSThread: 0x60400046aec0&gt;&#123;number = 3, name = (null)&#125;</div><div class="line">响应通知 currentThread : &lt;NSThread: 0x60400046aec0&gt;&#123;number = 3, name = (null)&#125;</div></pre></td></tr></table></figure>
<p>结论：通知发送线程和通知接收线程是一致的。 由此看来，如果当我们不是百分之百确认通知的发送队列是在主队列中时，我们最好加上如下代码从而对我们的UI进行处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (strcmp(dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL), dispatch_queue_get_label(dispatch_get_main_queue())) == 0) &#123;</div><div class="line">        //UI处理</div><div class="line">&#125; else &#123;</div><div class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">        //UI处理</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4、是否需要移除通知？"><a href="#4、是否需要移除通知？" class="headerlink" title="4、是否需要移除通知？"></a>4、是否需要移除通知？</h4><p>以下代码模拟重复添加通知的情况，所以如果可能会重复添加通知，我们都应该做好相应的处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (int i = 0; i &lt; 3; i++) &#123;</div><div class="line">        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(respondsToNotification:) name:@&quot;test0&quot; object:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>//该代码导致的结果是，响应通知回调会走三次。<br>复制代码<br>可能有人会问，为什么系统库没有做个重复添加的判断？当然，这可能是为了让我们更灵活的运用，也可能是对时间复杂度的一种妥协吧😁。</p>
<p>有过比较长开发经验的同学应该都有过，没有及时的移除通知而导致意外崩溃的情况。前面也说过，通知中心对响应者observer是使用unsafe_unretained修饰，当响应者释放会出现野指针，如果向野指针发送消息造成崩溃。在iOS8系统之后（更早版本没有测试），[NSNotificationCenter defaultCenter]会在响应者observer调用-dealloc方法的时候执行-removeObserver:方法。</p>
<p>动手做个小实验：<br>新建一个NSNotificationCenter的分类，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@implementation NSNotificationCenter (YB)</div><div class="line">+ (void)load &#123;</div><div class="line">    Method origin = class_getInstanceMethod([self class], @selector(removeObserver:));</div><div class="line">    Method current = class_getInstanceMethod([self class], @selector(_removeObserver:));</div><div class="line">    method_exchangeImplementations(origin, current);</div><div class="line">&#125;</div><div class="line">- (void)_removeObserver:(id)observer &#123;</div><div class="line">    NSLog(@&quot;调用移除通知方法: %@&quot;, observer);</div><div class="line">//    [self _removeObserver:observer];</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>然后新建一个类正常的使用通知，但是请不要手动在-dealloc中释放通知（我们要做实验）。然后我们释放掉这个类（可以使用控制器present、dismiss）。</p>
<p>调用移除通知方法: <test_vc: 0x7f9a0a4d9240=""><br>复制代码<br>神奇的现象发生了，通过比较内存地址，[NSNotificationCenter defaultCenter]确实是调用了removeObserver :方法移除对应响应者的通知监听。</test_vc:></p>
<p>注意上面的代码中，我将[self _removeObserver:observer];注释掉了，意味着该方法已经被我截取了，我们再向该“移除通知未遂”的响应者observer发送通知，直接崩溃。当去除注释，正常运行，无需手动移除。</p>
<p>结论：如果iOS支持版本在iOS8以上，多数情况理论上可以不用移除通知，但是由于历史遗留、开发者习惯等因素，看个人喜好了</p>
<p>二、代码实现<br>NSNotification 代码实现地址<br>心血来潮，看着NSNotification.h的API和本着对其的理解，决定着手实现一波。<br>其实仔细一想，通知的功能类似于一个路由，它的基本实现思路并不复杂。我们要做的无非是“添加”、“发送”、“移除”三件事。<br>但是在具体实现中，还是有些比较麻烦的地方，下面具体叙述（最好下载demo便于理解）。</p>
<p>1、添加通知<br>首先，创建了一个YBNotificationCenter类，属性如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@property (class, strong) YBNotificationCenter *defaultCenter;</div><div class="line">@property (strong) NSMutableDictionary *observersDic;</div></pre></td></tr></table></figure>
<p>defaultCenter类属性不用说，它是唯一单例（具体实现看代码）；observersDic即为用来存储添加通知相关信息的字典。</p>
<p>然后创建了一个YBObserverInfoModel类，属性如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@property (weak) id observer;</div><div class="line">@property (strong) id observer_strong;</div><div class="line">@property (strong) NSString *observerId;</div><div class="line">@property (assign) SEL selector;</div><div class="line">@property (weak) id object;</div><div class="line">@property (copy) NSString *name;</div><div class="line">@property (strong) NSOperationQueue *queue;</div><div class="line">@property (copy) void(^block)(YBNotification *noti);</div></pre></td></tr></table></figure>
<p>该类就是响应者信息存储模型类，也就是会放在上面observersDic字典内的元素。先回忆一下，当我们使用<code>- (void)addObserver:(id)observer selector:(SEL)aSelector name:(nullable NSString *)aName object:(nullable id)anObject;或- (id&lt;NSObject&gt;)addObserverForName:(nullable NSString *)name object:(nullable id)obj queue:(nullable NSOperationQueue *)queue usingBlock:(void (^)(YBNotification *note))block;</code>方法时，这些配置的变量是不是在YBObserverInfoModel都有体现呢？</p>
<p>是的，添加通知的操作不过就是将我们需要配置的变量统统存储起来，但是注意几点：一是对observer和object不能强持有，否则其无法正常释放；二是对name属性最好使用copy修饰，保证其不会受外部干扰；三是observer_strong属性是在使用代码块回调的那个添加通知方法时，需要使用到的强引用属性；四是observerId属性会比较陌生，它的作用大家可以先不管，之后会有用处。</p>
<p>添加通知核心代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (void)addObserverInfo:(YBObserverInfoModel *)observerInfo &#123;</div><div class="line">    //添加进observersDic</div><div class="line">    NSMutableDictionary *observersDic = YBNotificationCenter.defaultCenter.observersDic;</div><div class="line">    @synchronized(observersDic) &#123;</div><div class="line">        NSString *key = (observerInfo.name &amp;&amp; [observerInfo.name isKindOfClass:NSString.class]) ? observerInfo.name : key_observersDic_noContent;</div><div class="line">        if ([observersDic objectForKey:key]) &#123;</div><div class="line">            NSMutableArray *tempArr = [observersDic objectForKey:key];</div><div class="line">            [tempArr addObject:observerInfo];</div><div class="line">        &#125; else &#123;</div><div class="line">            NSMutableArray *tempArr = [NSMutableArray array];</div><div class="line">            [tempArr addObject:observerInfo];</div><div class="line">            [observersDic setObject:tempArr forKey:key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们传入一个配置好的YBObserverInfoModel模型进入方法，构建一个树形结构，用传入的name作为key（如果name为空使用key_observersDic_noContent常量代替），把所有使用相同name的通知放进同一个数组作为value，并且添加了线程锁保证observersDic数据读写安全。</p>
<p>这么做的理由：在通知的整个功能体系中，“添加”、“发送”、“移除”哪一步对效率的要求最高？毫无疑问是“发送”的时候，我们通常使用- (void)postNotificationName:(NSString *)aName object:(nullable id)anObject方法发送通知，aName参数将是我们找到对应通知的第一匹配点。如果我们将其它参数作为observersDic的key，我们发送通知的时候不得不遍历整个observersDic；而如上代码实现，发送通知的时候，直接就能通过key直接找到对应的通知信息了，有效降低了时间复杂度。</p>
<p>使用代码块回调通知方法的实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (id&lt;NSObject&gt;)addObserverForName:(NSString *)name object:(id)obj queue:(NSOperationQueue *)queue usingBlock:(void (^)(YBNotification * _Nonnull))block &#123;</div><div class="line">    if (!block) &#123;</div><div class="line">        return nil;</div><div class="line">    &#125;</div><div class="line">    YBObserverInfoModel *observerInfo = [YBObserverInfoModel new];</div><div class="line">    observerInfo.object = obj;</div><div class="line">    observerInfo.name = name;</div><div class="line">    observerInfo.queue = queue;</div><div class="line">    observerInfo.block = block;</div><div class="line">    NSObject *observer = [NSObject new];</div><div class="line">    observerInfo.observer_strong = observer;</div><div class="line">    observerInfo.observerId = [NSString stringWithFormat:@&quot;%@&quot;, observer];</div><div class="line">    </div><div class="line">    [self addObserverInfo:observerInfo];</div><div class="line">    return observer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里有个地方需要提出来谈谈，在使用系统的这个方法的时候，一经实验就能发现，不管我们强引用或者弱引用这个返回值id<nsobject>时，都能在业务类dealloc释放的时候有效的移除该通知。</nsobject></p>
<p>由于使用该方法添加通知的时候不会传入observer参数，这里创建了一个observer，如果这里使用observerInfo.observer = observer;，而业务类没有强引用这个返回值observer，它将会自然释放。所以，这里做了一个特殊处理，让observerInfo实例强持有observer。</p>
<p>值得注意的是，外部如果强引用返回的id<nsobject>类型的observer，会造成observer无法及时的释放，但是这点内存我认为还是可以接受的，当然业务类使用弱引用该observer是最好的选择。</nsobject></p>
<p>2、发送通知<br>和系统通知一样，同样创建了一个类YBNotification发送通知消息体，属性就我们熟悉的几个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">@property (copy) NSString *name;</div><div class="line">@property (weak) id object;</div><div class="line">@property (copy) NSDictionary *userInfo;</div><div class="line">复制代码</div><div class="line">然后将&lt;NSCopying, NSCoding&gt;两个协议实现一下就好了，具体看demo。</div><div class="line"></div><div class="line">发送通知核心代码</div><div class="line">- (void)postNotification:(YBNotification *)notification &#123;</div><div class="line">    if (!notification) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    NSMutableDictionary *observersDic = YBNotificationCenter.defaultCenter.observersDic;</div><div class="line">    NSMutableArray *tempArr = [observersDic objectForKey:notification.name];</div><div class="line">    if (tempArr) &#123;</div><div class="line">        [tempArr enumerateObjectsUsingBlock:^(YBObserverInfoModel *obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</div><div class="line">            if (obj.block) &#123;</div><div class="line">                if (obj.queue) &#123;</div><div class="line">                    NSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^&#123;</div><div class="line">                        obj.block(notification);</div><div class="line">                    &#125;];</div><div class="line">                    NSOperationQueue *queue = obj.queue;</div><div class="line">                    [queue addOperation:operation];</div><div class="line">                &#125; else &#123;</div><div class="line">                    obj.block(notification);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                if (!obj.object || obj.object == notification.object) &#123;</div><div class="line">#pragma clang diagnostic push</div><div class="line">#pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;</div><div class="line">                    obj.observer?[obj.observer performSelector:obj.selector withObject:notification]:nil;</div><div class="line">#pragma clang diagnostic pop</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>发送通知相对简单，只需要分清是使用代码块回调，还是通过执行SEL回调。在使用代码块回调时，如果传入了队列queue，就让该代码块在该队列中执行，否则正常执行。<br>!obj.object || obj.object == notification.objectif语句中这个判断值得注意。</p>
<p>3、移除通知<br>移除通知本身简单，有些麻烦的是自动移除。先贴上移除代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">- (void)removeObserverId:(NSString *)observerId name:(NSString *)aName object:(id)anObject &#123;</div><div class="line">    if (!observerId) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    NSMutableDictionary *observersDic = YBNotificationCenter.defaultCenter.observersDic;</div><div class="line">    @synchronized(observersDic) &#123;</div><div class="line">        if (aName &amp;&amp; [aName isKindOfClass:[NSString class]]) &#123;</div><div class="line">            NSMutableArray *tempArr = [observersDic objectForKey:[aName mutableCopy]];</div><div class="line">            [self array_removeObserverId:observerId object:anObject array:tempArr];</div><div class="line">        &#125; else &#123;</div><div class="line">            [observersDic enumerateKeysAndObjectsUsingBlock:^(NSString *key, NSMutableArray *obj, BOOL * _Nonnull stop) &#123;</div><div class="line">                [self array_removeObserverId:observerId object:anObject array:obj];</div><div class="line">            &#125;];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">- (void)array_removeObserverId:(NSString *)observerId object:(id)anObject array:(NSMutableArray *)array &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        [array.copy enumerateObjectsUsingBlock:^(YBObserverInfoModel *obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</div><div class="line">            if ([obj.observerId isEqualToString:observerId] &amp;&amp; (!anObject || anObject == obj.object)) &#123;</div><div class="line">                [array removeObject:obj];</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有移除通知的方法，最终落脚点都是在这里。<br>上面方法中，如果aName不是合理的，就需要遍历observersDic移除对应的通知；如果aName是合理的，就直接查找对应的数组移除内容。<br>下面方法中，由于array.copy造成了局部变量，而上级可能是一个遍历，所以得加上自动释放池避免内存泄露。</p>
<p>使用observerId属性移除通知，而不用observer响应者来直接比较移除：<br>还记得添加通知时YBObserverInfoModel类的@property (strong) NSString *observerId;属性么？在添加通知的时候，我将响应者的地址信息作为该属性的值（保证其唯一性）：</p>
<p>observerInfo.observerId = [NSString stringWithFormat:@”%@”, observer];<br>复制代码<br>然后在移除的时候通过比较进行相应的操作。</p>
<p>实现自动移除通知（解释为何使用observerId移除通知而不用observer）<br>实现自动移除通知，思路是在响应者observer走dealloc的时候移除对应的通知，难点就是在ARC中是不允许对dealloc做继承和交换方法等操作的，所以我使用了一个缓兵之计——动态给observer添加一个属性，我们监听这个属性的dealloc方法移除对应的通知，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">- (void)addObserverInfo:(YBObserverInfoModel *)observerInfo &#123;</div><div class="line">    </div><div class="line">    //为observer关联一个释放监听器</div><div class="line">    id resultObserver = observerInfo.observer?observerInfo.observer:observerInfo.observer_strong;</div><div class="line">    if (!resultObserver) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    YBObserverMonitor *monitor = [YBObserverMonitor new];</div><div class="line">    monitor.observerId = observerInfo.observerId;</div><div class="line">    const char *keyOfmonitor = [[NSString stringWithFormat:@&quot;%@&quot;, monitor] UTF8String];</div><div class="line">    objc_setAssociatedObject(resultObserver, keyOfmonitor, monitor, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">    </div><div class="line">    //添加进observersDic</div><div class="line">    NSMutableDictionary *observersDic = YBNotificationCenter.defaultCenter.observersDic;</div><div class="line">    @synchronized(observersDic) &#123;</div><div class="line">        NSString *key = (observerInfo.name &amp;&amp; [observerInfo.name isKindOfClass:NSString.class]) ? observerInfo.name : key_observersDic_noContent;</div><div class="line">        if ([observersDic objectForKey:key]) &#123;</div><div class="line">            NSMutableArray *tempArr = [observersDic objectForKey:key];</div><div class="line">            [tempArr addObject:observerInfo];</div><div class="line">        &#125; else &#123;</div><div class="line">            NSMutableArray *tempArr = [NSMutableArray array];</div><div class="line">            [tempArr addObject:observerInfo];</div><div class="line">            [observersDic setObject:tempArr forKey:key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只不过在添加通知到observersDic之前，添加一个monitor实例，使用objc_setAssociatedObject动态关联方法给resultObserver添加一个强引用的属性，注意objc_setAssociatedObject方法的第二个参数必须保证其唯一性，因为同一个响应者可能添加多个通知。</p>
<p>好了，现在基本工作都完成了，只需要在这个YBObserverMonitor方法中做简单的移除逻辑就OK了，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//监听响应者释放类</div><div class="line">@interface YBObserverMonitor : NSObject</div><div class="line">@property (strong) NSString *observerId;</div><div class="line">@end</div><div class="line">@implementation YBObserverMonitor</div><div class="line">- (void)dealloc &#123;</div><div class="line">    NSLog(@&quot;%@ dealloc&quot;, self);</div><div class="line">    [YBNotificationCenter.defaultCenter removeObserverId:self.observerId];</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>机智的你发现了什么了么？<br>类释放的顺序是先自己释放然后其属性释放，也就是说理论上在走YBObserverMonitor的 dealloc时，observer响应者对象已经释放了。<br>这就是为什么不直接使用observer响应者对象对比做释放操作。</p>
<p>写在后面<br>关于实现部分，虽然我做了个大致的测试，可能还是会存在一些潜在的问题，希望各位大佬不惜笔墨点拨一番😁。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[opencv使用入门]]></title>
      <url>/2018/06/06/2018/opencv%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h4 id="DCT信息的获取"><a href="#DCT信息的获取" class="headerlink" title="DCT信息的获取"></a>DCT信息的获取</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import cv2</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">def dct(m):</div><div class="line">    # img = np.uint8(dst)*255.0</div><div class="line">    m = np.float32(m)/255.0</div><div class="line">    return cv2.dct(m)*255</div><div class="line"></div><div class="line">img = cv2.imread(&apos;new.jpeg&apos;,0)</div><div class="line">#cv2.IMREAD_COLOR，最后一个参数留空代表彩色，如果用0代表灰度载入</div><div class="line"></div><div class="line"></div><div class="line">cv2.namedWindow(&apos;image&apos;,cv2.WINDOW_NORMAL)</div><div class="line">cv2.imshow(&apos;image&apos;,img)#显示图像，</div><div class="line">cv2.waitKey(0)#等待键盘输入，为毫秒级</div><div class="line">cv2.destroyAllWindows()#可以轻易删除任何我们建立的窗口，括号内输入想删除的窗口名</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="分通道，合并，存储图片"><a href="#分通道，合并，存储图片" class="headerlink" title="分通道，合并，存储图片"></a>分通道，合并，存储图片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">import cv2  </div><div class="line">import numpy as np  </div><div class="line">import matplotlib.pyplot as plt  </div><div class="line"></div><div class="line">img = cv2.imread(&quot;new.jpeg&quot;) #全色彩</div><div class="line">b, g, r = cv2.split(img)#通道拆分</div><div class="line"></div><div class="line">out = cv2.merge([b,g,r])</div><div class="line"></div><div class="line">img1 = cv2.imread(&apos;new.jpeg&apos;,0) #一个通道的色彩</div><div class="line"></div><div class="line">def dct(m):</div><div class="line">    m = np.float32(m)/255.0</div><div class="line">    return cv2.dct(m)*255</div><div class="line"></div><div class="line">img_dct = dct(img1)         #进行离散余弦变换  </div><div class="line">  </div><div class="line">img_dct_log = np.log(abs(img_dct))  #进行log处理  </div><div class="line">  </div><div class="line">img_recor2 = cv2.idct(img_dct)    #进行离散余弦反变换  </div><div class="line"></div><div class="line">plt.subplot(121)  </div><div class="line">plt.imshow(img, &apos;gray&apos;)  </div><div class="line">plt.title(&apos;original image&apos;)  </div><div class="line">  </div><div class="line">plt.subplot(122)  </div><div class="line">plt.imshow(out,&apos;gray&apos;)  </div><div class="line">plt.title(&apos;IDCT2(cv2_idct)&apos;) </div><div class="line"></div><div class="line">cv2.imwrite(&quot;ouput.jpg&quot;,img) #存储要注意，只能存储为jpg格式，因为我解出来后没有进行压缩，不知道压缩后不能不能存储为jpeg，</div><div class="line">这里如果改为jpeg会报错 could not find a writer for the specified extensi</div><div class="line">on in function cv::imwrite_</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<h4 id="自行分离"><a href="#自行分离" class="headerlink" title="自行分离"></a>自行分离</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">自行分离三通道函数</div><div class="line">定义了三个函数来获取三个通道的子矩阵。</div><div class="line"></div><div class="line">获取红色通道：</div><div class="line"></div><div class="line">def get_red(img):</div><div class="line">    redImg = img[:,:,2]</div><div class="line">    return redImg</div><div class="line">获取绿色通道：</div><div class="line"></div><div class="line">def get_green(img):</div><div class="line">    greenImg = img[:,:,1]</div><div class="line">    return greenImg</div><div class="line">获取蓝色通道</div><div class="line"></div><div class="line">def get_blue(img):</div><div class="line">    blueImg = img[:,:,0]</div><div class="line">    return blueImg</div></pre></td></tr></table></figure>
<h4 id="opencv的DCT使用"><a href="#opencv的DCT使用" class="headerlink" title="opencv的DCT使用"></a>opencv的DCT使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">import cv2</div><div class="line">import numpy as np</div><div class="line"></div><div class="line">B = np.array([[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8]])</div><div class="line">#最少需要8*8</div><div class="line">B = B.astype(&apos;float&apos;) #int转float</div><div class="line"></div><div class="line">print B</div><div class="line"></div><div class="line">print type(B)</div><div class="line">print B.shape</div><div class="line"></div><div class="line">dctn = cv2.dct(B) #dct变换</div><div class="line"></div><div class="line">print dctn.shape</div><div class="line"></div><div class="line">print dctn</div><div class="line"></div><div class="line">B1 = cv2.idct(dctn) #逆dct变换成原来的数据</div><div class="line"></div><div class="line">print B1</div></pre></td></tr></table></figure>
<h4 id="opencv加载图像"><a href="#opencv加载图像" class="headerlink" title="opencv加载图像"></a>opencv加载图像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import cv2</div><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt  </div><div class="line"></div><div class="line">B=8 # blocksize (In Jpeg the</div><div class="line">img1 = cv2.imread(&quot;new.jpeg&quot;)</div><div class="line"></div><div class="line">h,w=np.array(img1.shape[:2])/B * B  #进行像素个数的格式化，因为这样就可以保证是8*8的个数配比了</div><div class="line">print h,w</div><div class="line">img1=img1[:h,:w] #这一步去掉无用的数据，而不是像我想的，增加像素</div><div class="line"></div><div class="line">#Convert BGR to RGB</div><div class="line">img2=np.zeros(img1.shape,np.uint8)</div><div class="line">img2[:,:,0]=img1[:,:,2]</div><div class="line">img2[:,:,1]=img1[:,:,1]</div><div class="line">img2[:,:,2]=img1[:,:,0]</div><div class="line"># plt.imshow(img1) #这个显示的时候是BGR颜色有点奇怪</div><div class="line">plt.imshow(img2)</div></pre></td></tr></table></figure>
<h4 id="完整例子"><a href="#完整例子" class="headerlink" title="完整例子"></a>完整例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">import cv2  </div><div class="line">import numpy as np  </div><div class="line">import matplotlib.pyplot as plt  </div><div class="line"></div><div class="line">img = cv2.imread(&quot;ori.jpg&quot;) #全色彩</div><div class="line"></div><div class="line">b,g,r = cv2.split(img)</div><div class="line"></div><div class="line">imgYCC = cv2.cvtColor(img, cv2.COLOR_BGR2YCR_CB)</div><div class="line"></div><div class="line">y,cr,cb = cv2.split(imgYCC)</div><div class="line"></div><div class="line">QY=np.array([[16,11,10,16,24,40,51,61],</div><div class="line">                             [12,12,14,19,26,48,60,55],</div><div class="line">                             [14,13,16,24,40,57,69,56],</div><div class="line">                             [14,17,22,29,51,87,80,62],</div><div class="line">                             [18,22,37,56,68,109,103,77],</div><div class="line">                             [24,35,55,64,81,104,113,92],</div><div class="line">                             [49,64,78,87,103,121,120,101],</div><div class="line">                             [72,92,95,98,112,100,103,99]])</div><div class="line"></div><div class="line">def compile(y):</div><div class="line">    print &apos;y&apos;</div><div class="line">    print y</div><div class="line">    b = y.astype(&apos;float&apos;)</div><div class="line">#     b = y.astype(&apos;float&apos;)</div><div class="line">    print type(b)</div><div class="line">    print &apos;b&apos;</div><div class="line">    print b</div><div class="line">    bd = b[:8,:8]</div><div class="line">    print bd.shape</div><div class="line">    print &apos;bd&apos;</div><div class="line">    print bd</div><div class="line">    bdct = cv2.dct(bd)</div><div class="line">    print &apos;bdct&apos;</div><div class="line">    print bdct</div><div class="line">    print &apos;8&apos;</div><div class="line">    print bdct.astype(&apos;int16&apos;)</div><div class="line">    # dct1 = np.uint8(bdct)</div><div class="line">    dct1 = bdct.astype(&apos;int16&apos;)</div><div class="line">    </div><div class="line">    dct1 = dct1 / QY</div><div class="line">    </div><div class="line">    print &apos;dct1&apos;</div><div class="line">    print dct1</div><div class="line">    </div><div class="line">    return dct1</div><div class="line"></div><div class="line">dct1 = compile(y)</div><div class="line"></div><div class="line">dct1 = dct1 * QY</div><div class="line"></div><div class="line">imgf = dct1.astype(&apos;float&apos;)</div><div class="line"># print &apos;imgf&apos;,imgf</div><div class="line">iTrans = cv2.idct(imgf)</div><div class="line"># print &apos;iTrans&apos;,iTrans</div><div class="line">y2 = iTrans.astype(&apos;int16&apos;)</div><div class="line">print &apos;y2&apos;,y2</div><div class="line"></div><div class="line">dct2 = compile(y2.astype(&apos;float&apos;))</div><div class="line"></div><div class="line">dst = cv2.cvtColor(img_YUV, cv2.COLOR_YUV2BGR)</div><div class="line"></div><div class="line"># dct2 = compile(y2)</div></pre></td></tr></table></figure>
<h4 id="基于DCT和RBG方差的隐写算法"><a href="#基于DCT和RBG方差的隐写算法" class="headerlink" title="基于DCT和RBG方差的隐写算法"></a>基于DCT和RBG方差的隐写算法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div></pre></td><td class="code"><pre><div class="line">import cv2</div><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">from compiler.ast import flatten</div><div class="line"></div><div class="line">QC=np.array([[17,18,24,47,99,99,99,99],</div><div class="line">                         [18,21,26,66,99,99,99,99],</div><div class="line">                         [24,26,56,99,99,99,99,99],</div><div class="line">                         [47,66,99,99,99,99,99,99],</div><div class="line">                         [99,99,99,99,99,99,99,99],</div><div class="line">                         [99,99,99,99,99,99,99,99],</div><div class="line">                         [99,99,99,99,99,99,99,99],</div><div class="line">                         [99,99,99,99,99,99,99,99]])</div><div class="line"></div><div class="line">QY=np.array([[16,11,10,16,24,40,51,61],</div><div class="line">             [12,12,14,19,26,48,60,55],</div><div class="line">             [14,13,16,24,40,57,69,56],</div><div class="line">             [14,17,22,29,51,87,80,62],</div><div class="line">             [18,22,37,56,68,109,103,77],</div><div class="line">             [24,35,55,64,81,104,113,92],</div><div class="line">             [49,64,78,87,103,121,120,101],</div><div class="line">             [72,92,95,98,112,100,103,99]])</div><div class="line"></div><div class="line"># QY=np.array([[8,1,1,1,1,1,1,1],</div><div class="line">#              [1,1,1,1,1,1,1,55],</div><div class="line">#              [1,1,1,1,1,1,69,56],</div><div class="line">#              [1,1,1,1,1,87,80,62],</div><div class="line">#              [1,1,1,1,68,109,103,77],</div><div class="line">#              [1,1,1,64,81,104,113,92],</div><div class="line">#              [1,1,78,87,103,121,120,101],</div><div class="line">#              [1,92,95,98,112,100,103,99]])</div><div class="line"></div><div class="line">zag = [(7,7),(7,6),(6,7),(5,7),(6,6),(7,5),(7,4),(6,5),</div><div class="line">       (5,6),(4,7),(3,7),(4,6),(5,5),(6,4),(7,3),(7,2),</div><div class="line">       (6,3),(5,4),(4,5),(3,6),(2,7),(1,7),(2,6),(3,5),</div><div class="line">       (4,4),(5,3),(6,2),(7,1),(7,0),(6,1),(5,2),(4,3),</div><div class="line">       (3,4),(2,5),(1,6),(0,7),(0,6),(1,5),(2,4),(3,3),</div><div class="line">       (4,2),(5,1),(6,0),(5,0),(4,1),(3,2),(2,3),(1,4),</div><div class="line">       (0,5),(0,4),(1,3),(2,2),(3,1),(4,0),(3,0),(2,1),</div><div class="line">       (1,2),(0,3),(0,2),(1,1),(2,0),(1,0),(0,1),(0,0)]</div><div class="line"></div><div class="line">singleO = &apos;0b&apos;</div><div class="line">output = &apos;&apos;</div><div class="line"></div><div class="line">printindex = []</div><div class="line"></div><div class="line">writeinfolist = []</div><div class="line">index = 0</div><div class="line"></div><div class="line">def convertcontenttobit(content): #把文字转化为二进制进行写入</div><div class="line">    global writeinfolist</div><div class="line">    strnew = content</div><div class="line">#     bits = []</div><div class="line">    for item in list(strnew):</div><div class="line">        bit = ord(item) #转位置编码</div><div class="line">        bitstring = bin(bit) #位置编码转二进制</div><div class="line">        bitnew = bitstring[2:]</div><div class="line">        bitnew = &apos;0&apos; * (8 - len(bitnew)) + bitnew</div><div class="line">        bitnewlist = []</div><div class="line">        for bi in bitnew:</div><div class="line">            bitnewlist.append(int(bi))</div><div class="line">        writeinfolist = writeinfolist + bitnewlist</div><div class="line">    end = [1,1,1,1,1,1,1,1]</div><div class="line">    writeinfolist = writeinfolist + end</div><div class="line">    print writeinfolist</div><div class="line">    </div><div class="line">def convertbittocontent(bit): #把二进制读取然后转化为文字   </div><div class="line">    </div><div class="line">    global singleO</div><div class="line">    global output</div><div class="line">    </div><div class="line">    bits = str(bit)</div><div class="line">    if len(singleO) == 9:</div><div class="line">        singleO = singleO + bits</div><div class="line">        if singleO.count(&apos;1&apos;) &gt; 6:</div><div class="line">            print &apos;eeeeeend&apos;,singleO</div><div class="line">            return False</div><div class="line">        inten = int(singleO,2)</div><div class="line">        output = output + chr(inten)</div><div class="line">        print &apos;*********&apos;,singleO,chr(inten)</div><div class="line">        singleO = &apos;0b&apos;</div><div class="line">    else:</div><div class="line">        singleO = singleO + bits</div><div class="line">    </div><div class="line">    return True  </div><div class="line">    </div><div class="line">def writeinfo(origin):</div><div class="line">    </div><div class="line">    global index</div><div class="line">    global writeinfolist</div><div class="line">    </div><div class="line">    if index &gt;= len(writeinfolist) - 1:</div><div class="line">        return origin</div><div class="line">    </div><div class="line">    data = writeinfolist[index]</div><div class="line">     </div><div class="line">#     data = 1</div><div class="line">    lower_bit=origin%2</div><div class="line">    </div><div class="line">#     print index,len(writeinfolist),lower_bit,data,origin</div><div class="line">    if lower_bit==data:</div><div class="line">#         print index,len(writeinfolist),lower_bit,data,origin</div><div class="line">#         print &apos;---------------&apos;</div><div class="line">        index = index + 1</div><div class="line">        return origin</div><div class="line">    elif origin&gt;0:</div><div class="line">        if (lower_bit,data) == (0,1):</div><div class="line">            origin = origin+1</div><div class="line">        elif (lower_bit,data) == (1,0):</div><div class="line">            origin = origin-1</div><div class="line">    elif origin&lt;0:</div><div class="line">        if (lower_bit,data) == (0,1):</div><div class="line">            origin=origin-1</div><div class="line">        elif (lower_bit,data) == (1,0):</div><div class="line">            origin=origin+1</div><div class="line">    </div><div class="line">#     print index,len(writeinfolist),lower_bit,data,origin</div><div class="line">#     print &apos;---------------&apos;</div><div class="line">    index = index + 1</div><div class="line">    return origin</div><div class="line"></div><div class="line">def findcanwritedct(dct):</div><div class="line">    global index</div><div class="line">    global writeinfolist</div><div class="line">    </div><div class="line">    change = False</div><div class="line">    </div><div class="line">#     if index == len(writeinfolist) - 1:</div><div class="line">#         return dct,change</div><div class="line">    </div><div class="line">    dcttemp = dct.copy()</div><div class="line">    dcttemp[0,0] = 0</div><div class="line">    </div><div class="line">    z = np.fabs(dcttemp)</div><div class="line">    z = flatten(z.tolist())</div><div class="line">    lenz = len(z)</div><div class="line">    zerocount = z.count(0)</div><div class="line">    sumz = np.sum(z)</div><div class="line">    total = sumz * 1.0 / (lenz - zerocount)</div><div class="line">#     if total &gt; 1 and dct[0,0] &lt; 100:</div><div class="line">    change = True</div><div class="line">    dct[0,0] = writeinfo(dct[0,0])</div><div class="line">#         for i in range(63):</div><div class="line">#             target = dct[zag[i]]</div><div class="line">#             if target not in [-1,0,1]:</div><div class="line">#                 dct[zag[i]] = writeinfo(target)</div><div class="line">#                 change = True</div><div class="line">#                 break</div><div class="line">                </div><div class="line">    return dct,change</div><div class="line"></div><div class="line">def findwriteddct(dct):</div><div class="line">    </div><div class="line">#     dcttemp = dct.copy()</div><div class="line">#     dcttemp[0,0] = 0</div><div class="line">    </div><div class="line">#     z = np.fabs(dcttemp)</div><div class="line">#     z = flatten(z.tolist())</div><div class="line">#     lenz = len(z)</div><div class="line">#     zerocount = z.count(0)</div><div class="line">#     sumz = np.sum(z)</div><div class="line">#     total = sumz * 1.0 / (lenz - zerocount)</div><div class="line">#     if total &gt; 1 and dct[0,0] &lt; 100:</div><div class="line">    change = True</div><div class="line">#         dct[0,0] = writeinfo(dct[0,0])</div><div class="line">    return dct[0,0]</div><div class="line">#         for i in range(63):</div><div class="line">#             if dct[zag[i]] not in [-1,0,1]:</div><div class="line">#                 return dct[zag[i]]</div><div class="line">#                 break</div><div class="line">                </div><div class="line">#     return None</div><div class="line"></div><div class="line">def converttodct(y):</div><div class="line">    global QY</div><div class="line">    </div><div class="line">    b = y.astype(&apos;float&apos;)</div><div class="line">    bdct = cv2.dct(b)</div><div class="line">    </div><div class="line">    dct1 = bdct.tolist()</div><div class="line">    dct1 = np.around(dct1) #四舍五入</div><div class="line">    dct1 = dct1 / QY</div><div class="line">    dct1 = dct1.tolist()</div><div class="line">    dct1 = np.around(dct1) #再次四舍五入</div><div class="line">    dct1 = dct1.astype(&apos;int16&apos;)</div><div class="line">    </div><div class="line">    dct1,change = findcanwritedct(dct1)</div><div class="line">    </div><div class="line">    return dct1,change</div><div class="line"></div><div class="line">def converttoycr(dct):</div><div class="line">    global QY</div><div class="line">    dct = dct * QY</div><div class="line">    imgf = dct.astype(&apos;float&apos;)</div><div class="line">    iTrans = cv2.idct(imgf)</div><div class="line">    iTrans = iTrans.tolist()</div><div class="line">    iTrans = np.around(iTrans)</div><div class="line">    cr = iTrans.astype(&apos;int16&apos;)</div><div class="line">    return cr</div><div class="line"></div><div class="line">def readinfofromyc(cr8):</div><div class="line">    global QY</div><div class="line">    global index</div><div class="line">    global printindex</div><div class="line">    global writeinfolist</div><div class="line">    </div><div class="line">    b = cr8.astype(&apos;float&apos;)</div><div class="line">    aver = b.mean()</div><div class="line">    </div><div class="line">    if aver &gt; 200 or aver &lt; 60:</div><div class="line">        return True</div><div class="line">    </div><div class="line">    bdct = cv2.dct(b)</div><div class="line">    </div><div class="line">    dct1 = bdct.tolist()</div><div class="line">    dct1 = np.around(dct1) #四舍五入</div><div class="line">    dct1 = dct1 / QY</div><div class="line">    dct1 = dct1.tolist()</div><div class="line">    dct1 = np.around(dct1) #再次四舍五入</div><div class="line">    dct1 = dct1.astype(&apos;int16&apos;)</div><div class="line">    </div><div class="line">    var = b.var()</div><div class="line">#     print var</div><div class="line">#     print dct1</div><div class="line"></div><div class="line">#     key = aver / 2</div><div class="line">#     topline = aver * 1.4</div><div class="line">#     m = b[np.where(b &lt; key)].shape[0]</div><div class="line">#     n = b[np.where(b &gt; topline)].shape[0]</div><div class="line">#     if var &gt; 5 or m &gt; 10 or n &gt; 5:</div><div class="line">#         return True</div><div class="line">    if var &gt; 1:</div><div class="line">        return True</div><div class="line">    </div><div class="line">#     if dct1[0,0] % 2 == 1:</div><div class="line">#         print &apos;aver&apos;,aver</div><div class="line">#         print &apos;shape+++++++&apos;,m</div><div class="line">#         print &apos;origin&apos;,b</div><div class="line">#         print &apos;dct&apos;,dct1</div><div class="line">#         print &apos;var&apos;,b.var()</div><div class="line"></div><div class="line">    if (index - 1) in printindex:</div><div class="line">        print &apos;new############start&apos;,writeinfolist[index - 1],index - 1</div><div class="line">        print dct1</div><div class="line">        print cr8</div><div class="line">        print &apos;new############end&apos;</div><div class="line"></div><div class="line">    origin = findwriteddct(dct1)</div><div class="line">    if (origin != None):</div><div class="line">        return convertbittocontent(origin % 2)</div><div class="line"></div><div class="line">def addinfotoyc(yc8):</div><div class="line">    global index</div><div class="line">    global printindex</div><div class="line">    global writeinfolist</div><div class="line">    </div><div class="line">    aver = yc8.mean()</div><div class="line">    </div><div class="line">    if aver &gt; 200 or aver &lt; 60:</div><div class="line">        return yc8</div><div class="line">    </div><div class="line">    var = yc8.var()</div><div class="line">#     key = aver / 2</div><div class="line">#     topline = aver * 1.4</div><div class="line">#     m = yc8[np.where(yc8 &lt; key)].shape[0]</div><div class="line">#     n = yc8[np.where(yc8 &gt; topline)].shape[0]</div><div class="line">#     if var &gt; 3 or m &gt; 10 or n &gt; 5:</div><div class="line">#         print yc8</div><div class="line">#         print &apos;var&apos;,var</div><div class="line">#         print &apos;m&apos;,m</div><div class="line">#         print &apos;n&apos;,n</div><div class="line">#         print &apos;topline&apos;,topline</div><div class="line">#         print &apos;key&apos;,key</div><div class="line">#         print &apos;aver&apos;,aver</div><div class="line">#         return yc8</div><div class="line">    if var &gt; 1:</div><div class="line">        return yc8</div><div class="line">    </div><div class="line">    dct,change = converttodct(yc8)</div><div class="line">    </div><div class="line">    if change == False:</div><div class="line">        return yc8</div><div class="line">    </div><div class="line">    cr = converttoycr(dct)</div><div class="line">    </div><div class="line">    if cr.var() &gt; 1:</div><div class="line">        index = index - 1</div><div class="line">#         print &apos;origin&apos;</div><div class="line">#         print yc8</div><div class="line">#         print &apos;oldvar&apos;,var</div><div class="line">#         print &apos;new&apos;</div><div class="line">#         print cr</div><div class="line">#         print &apos;newvar&apos;,cr.var()</div><div class="line">#         print &apos;index&apos;,index</div><div class="line">        return yc8</div><div class="line">    </div><div class="line">#     print dct</div><div class="line">#     print cr.var()</div><div class="line">    </div><div class="line">    </div><div class="line">    if (index - 1) in printindex:</div><div class="line">        print &apos;origin###########start&apos;,writeinfolist[index-1],index - 1</div><div class="line">        print dct</div><div class="line">        print cr</div><div class="line">        print &apos;origin###########end&apos;</div><div class="line">    </div><div class="line">    readinfofromyc(cr)</div><div class="line">    </div><div class="line">    cr[np.where(cr &gt; 254)] = 254</div><div class="line">    cr[np.where(cr &lt; 1)] = 0</div><div class="line">    </div><div class="line">    return cr</div><div class="line"></div><div class="line">def convertimg(img):</div><div class="line">    B = 8</div><div class="line">    imgYCC = cv2.cvtColor(img, cv2.COLOR_BGR2YCR_CB)</div><div class="line">    h,w=np.array(imgYCC.shape[:2])/B * B  #进行像素个数的格式化，因为这样就可以保证是8*8的个数配比了</div><div class="line">    imgYCC = imgYCC[:h,:w] #这一步去掉无用的数据，而不是像我想的，增加像素</div><div class="line">    y = imgYCC[:,:,0]</div><div class="line">    cr = imgYCC[:,:,1]</div><div class="line">    cb = imgYCC[:,:,2]</div><div class="line">    return y,cr,cb</div><div class="line"></div><div class="line">def scanpiex(cr):</div><div class="line">    global index</div><div class="line">    </div><div class="line">#     crn = np.zeros(cr.shape)</div><div class="line">    crn = cr.copy()</div><div class="line">    (h,w) = cr.shape</div><div class="line">    h = h/8</div><div class="line">    w = w/8</div><div class="line">    print h,w</div><div class="line">    for i in range(0,h):</div><div class="line">        for j in range(0,w):</div><div class="line">            cr8 = cr[i*8:i*8+8,j*8:j*8+8]</div><div class="line">            crn[i*8:i*8+8,j*8:j*8+8] = addinfotoyc(cr8)</div><div class="line">            if index &gt;= len(writeinfolist) - 1:</div><div class="line">                print &apos;stop&apos;,&apos;i=&apos;,i,&apos;j=&apos;,j,&apos;i*j=&apos;,i * j</div><div class="line">                index = 0</div><div class="line">                return crn</div><div class="line">    index = 0        </div><div class="line">    return crn</div><div class="line"></div><div class="line">def readinfo(cr):</div><div class="line">    global output</div><div class="line">    (h,w) = cr.shape</div><div class="line">    h = h/8</div><div class="line">    w = w/8</div><div class="line">    print h,w</div><div class="line">    for i in range(0,h):</div><div class="line">        for j in range(0,w):</div><div class="line">            cr8 = cr[i*8:i*8+8,j*8:j*8+8]</div><div class="line">            out = readinfofromyc(cr8)</div><div class="line">#             print &apos;stop&apos;,&apos;i=&apos;,i,&apos;j=&apos;,j,&apos;i*j=&apos;,i * j</div><div class="line">            if out == False or (i == (h - 1) and j == (w - 1)):</div><div class="line">                print output</div><div class="line">                break</div><div class="line"></div><div class="line">def test():            </div><div class="line">            </div><div class="line">    print &apos;write&apos;,writeinfolist       </div><div class="line">    img = cv2.imread(&quot;WechatIMG37.jpeg&quot;) #全色彩</div><div class="line"></div><div class="line">    y,cr,cb = convertimg(img)</div><div class="line"></div><div class="line">    y = scanpiex(y)</div><div class="line">    y = y.astype(&apos;uint8&apos;)</div><div class="line">    </div><div class="line">    print &apos;分割线分割线分割线&apos;</div><div class="line">    </div><div class="line">    img_YCbCr = cv2.merge([y,cr,cb])</div><div class="line">    imgnew = cv2.cvtColor(img_YCbCr, cv2.COLOR_YCR_CB2BGR)</div><div class="line"></div><div class="line">#     cv2.imwrite(&quot;newpress.jpg&quot;,imgnew,[cv2.IMWRITE_JPEG_QUALITY, 50])</div><div class="line">    cv2.imwrite(&quot;newpress.jpg&quot;,imgnew)</div><div class="line"></div><div class="line">    imgout = cv2.imread(&quot;newpress.jpg&quot;) #全色彩</div><div class="line"></div><div class="line">    y,cr,cb = convertimg(imgout)</div><div class="line">    print &apos;read&apos;</div><div class="line">    readinfo(y)</div><div class="line">    </div><div class="line">def writecontent():</div><div class="line">    global writeinfolist</div><div class="line">    global output</div><div class="line">    convertcontenttobit(&apos;wangxiugang618wangxiugang618wangxiugang618wangxiugang618wangxiugang618&apos;)   </div><div class="line"></div><div class="line">def readimage(imagename):</div><div class="line">    imgout = cv2.imread(imagename) #全色彩</div><div class="line">    y,cr,cb = convertimg(imgout)</div><div class="line">    print &apos;read&apos;</div><div class="line">    readinfo(y)</div><div class="line"></div><div class="line">writecontent()</div><div class="line">test()</div><div class="line"># readimage(&apos;WechatIMG65.jpeg’)</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS包大小计算备忘]]></title>
      <url>/2018/05/30/2018/iOS%E5%8C%85%E5%A4%A7%E5%B0%8F%E8%AE%A1%E7%AE%97%E5%A4%87%E5%BF%98/</url>
      <content type="html"><![CDATA[<p>首先需要LinkMap文件</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">#coding:utf-8</div><div class="line"></div><div class="line">import os,shutil</div><div class="line">import urllib2</div><div class="line">import time, sys,copy</div><div class="line">from pymongo import MongoClient</div><div class="line">from biplist import *</div><div class="line">from prettytable import PrettyTable</div><div class="line">from numpy import *</div><div class="line"># 0源码 1SDK</div><div class="line"># (projectname,sdkname,filename,size)</div><div class="line"></div><div class="line">projectNameList = []#记录工程名字列表</div><div class="line"></div><div class="line">def parItemText(text):</div><div class="line">    global projectNameList</div><div class="line">    fileNumberList = []#文件编号列表</div><div class="line">    fileSizeDic = &#123;&#125;#文件尺寸字典</div><div class="line"></div><div class="line">    projectNameDic = &#123;&#125;#工程名字字典，记录大小</div><div class="line">    </div><div class="line">    fileItems = text.split(&apos;\n&apos;)</div><div class="line">    count = 0</div><div class="line">    for singleItem in fileItems:</div><div class="line">        # 最后是括号</div><div class="line">        # 最后是.o</div><div class="line">        # 最后是</div><div class="line">        projectname = &apos;&apos; # 最外层name，比如Library</div><div class="line">        sdkname = &apos;&apos;     # 编译完之后的名字.a或者.framework</div><div class="line">        filename = &apos;&apos;    # .o的名字</div><div class="line"></div><div class="line">        if len(singleItem) &gt; 0 and singleItem[0] == &apos;[&apos;:</div><div class="line">           if singleItem[-1] == &apos;)&apos;:</div><div class="line">                if &apos;Analyse-iphoneos&apos; in singleItem:#源码</div><div class="line">                    # print singleItem + &apos;源码&apos;</div><div class="line">                    filenameitem = singleItem.split(&apos;/&apos;)[-1]</div><div class="line">                    count = count + 1</div><div class="line">                    nameL = filenameitem.split(&apos;(&apos;)[0].replace(&apos;.a&apos;,&apos;&apos;)</div><div class="line">                    nameR = filenameitem.split(&apos;(&apos;)[1].replace(&apos;.o&apos;,&apos;&apos;).replace(&apos;)&apos;,&apos;&apos;)</div><div class="line"></div><div class="line">                    filename = nameR</div><div class="line">                    if &apos;lib&apos; in nameL:</div><div class="line">                        nameL = nameL.replace(&apos;lib&apos;,&apos;&apos;)</div><div class="line">                        sdkname = nameL</div><div class="line">                    else:</div><div class="line">                        projectname = nameL</div><div class="line">                    </div><div class="line">                elif &apos;JRMobileAnalyse/&apos; in singleItem or &apos;../&apos; in singleItem:#SDK</div><div class="line">                    # print singleItem + &apos;SDK文件&apos;</div><div class="line">                    filenameitems = singleItem.split(&apos;/&apos;)</div><div class="line">                    filenameitem = filenameitems[-1]</div><div class="line">                    </div><div class="line">                    indexJR = -1</div><div class="line">                    indexVe = -1</div><div class="line">                    indexPods = -1</div><div class="line">                    if &apos;JRLibrary&apos; in filenameitems:</div><div class="line">                       indexJR = filenameitems.index(&apos;JRLibrary&apos;)</div><div class="line"></div><div class="line">                    if &apos;Vendors&apos; in filenameitems:</div><div class="line">                       indexVe = filenameitems.index(&apos;Vendors&apos;)</div><div class="line"></div><div class="line">                    if &apos;Pods&apos; in filenameitems:</div><div class="line">                       indexVe = filenameitems.index(&apos;Pods&apos;)   </div><div class="line">                    </div><div class="line">                    index = 0</div><div class="line">                    if indexJR != -1:</div><div class="line">                       index = indexJR + 1</div><div class="line">                    elif indexVe != -1:</div><div class="line">                       index = indexVe + 1</div><div class="line">                    elif indexPods != -1:</div><div class="line">                       index = indexPods + 1   </div><div class="line"></div><div class="line">                    count = count + 1</div><div class="line">                    nameL = filenameitem.split(&apos;(&apos;)[0].replace(&apos;.a&apos;,&apos;&apos;)</div><div class="line">                    nameR = filenameitem.split(&apos;(&apos;)[1].replace(&apos;.o&apos;,&apos;&apos;).replace(&apos;)&apos;,&apos;&apos;)  </div><div class="line">                    filename = nameR</div><div class="line">                    projectname = filenameitems[index]</div><div class="line">                    sdkname = nameL</div><div class="line">                else:</div><div class="line">                    # print singleItem + &apos;其他的&apos;</div><div class="line">                    filenameitem = singleItem.split(&apos;/&apos;)[-1]</div><div class="line">                    filename = filenameitem</div><div class="line">                    projectname = &apos;Apple&apos;</div><div class="line">                    sdkname = &apos;Apple&apos;</div><div class="line">                    count = count + 1</div><div class="line">           elif &apos;] /Applications&apos; in singleItem:</div><div class="line">               # print singleItem + &apos;系统文件&apos;</div><div class="line">               filenameitem = singleItem.split(&apos;/&apos;)[-1]</div><div class="line">               filename = filenameitem</div><div class="line">               projectname = &apos;Apple&apos;</div><div class="line">               sdkname = &apos;Apple&apos;</div><div class="line">               count = count + 1</div><div class="line">           else:    </div><div class="line">               if singleItem[-1] == &apos;o&apos;:</div><div class="line">                #   print singleItem + &apos;主工程&apos;</div><div class="line">                  count = count + 1</div><div class="line">                  projectname = &apos;JDMobile&apos;</div><div class="line">                  filename = singleItem.split(&apos;/&apos;)[-1].replace(&apos;.o&apos;,&apos;&apos;)</div><div class="line">                #   print &apos;-------&gt;&apos;,&apos;projectname,filename</div><div class="line"></div><div class="line">           filenumber = singleItem.split(&apos;] &apos;)[0] + &apos;]&apos;</div><div class="line">           if filenumber not in fileNumberList:</div><div class="line">              fileNumberList.append(filenumber) </div><div class="line">        #    print filenumber,projectname,sdkname,filename</div><div class="line">           fileSizeDic[filenumber] = [projectname,sdkname,filename,0]</div><div class="line">        elif singleItem[:2] == &apos;0x&apos;:</div><div class="line">            if chr(9) + &apos;[&apos; in singleItem:</div><div class="line">                sizestring = singleItem.split(chr(9)+&apos;[&apos;)[0].split(chr(9))[1]</div><div class="line">                size = int(sizestring,16)</div><div class="line">                filenumber = &apos;[&apos; + singleItem.split(chr(9)+&apos;[&apos;)[1].split(&apos;]&apos;)[0] + &apos;]&apos;</div><div class="line">                fileList = fileSizeDic.get(filenumber)</div><div class="line">                if type(fileList) != type(None):</div><div class="line">                   fileSize = fileList[3]</div><div class="line">                   fileList[3] = fileSize + size</div><div class="line">                else:</div><div class="line">                   print singleItem</div><div class="line">                   print filenumber   </div><div class="line">    </div><div class="line">    for item in fileNumberList:</div><div class="line">        fileList = fileSizeDic[item]</div><div class="line">        projectname = fileList[0]</div><div class="line">        sdkname = fileList[1]</div><div class="line">        size = fileList[3]</div><div class="line"></div><div class="line">        name = &apos;&apos;</div><div class="line">        if len(projectname) == 0:</div><div class="line">           name = sdkname</div><div class="line">        else:</div><div class="line">           name = projectname</div><div class="line"></div><div class="line">        if name not in projectNameList:</div><div class="line">           projectNameList.append(name)</div><div class="line"></div><div class="line">        objec = projectNameDic.get(name)</div><div class="line">        </div><div class="line">        if type(objec) == type(None):</div><div class="line">           projectNameDic[name] = (size,1)</div><div class="line">        else:</div><div class="line">           (projectSize,count) = objec</div><div class="line">           projectNameDic[name] = (size + projectSize,count + 1)</div><div class="line"></div><div class="line">    return projectNameDic</div><div class="line"></div><div class="line">def saveDataToMongo():</div><div class="line">    global projectNameList</div><div class="line">    mc = MongoClient(&quot;localhost&quot;,27017)</div><div class="line">    db = mc.classsize</div><div class="line">    baseinfo = db.baseinfo</div><div class="line"></div><div class="line">    sourceFileList = [&apos;JDMobile&apos;,&apos;Pods&apos;,&apos;CommunityTools&apos;,&apos;JRAssemblyUITools&apos;,&apos;JRBankCardModule&apos;,&apos;JRHomeChannel&apos;,&apos;RecognitionTools&apos;,&apos;MobileTopUpModule&apos;,&apos;ReactNative&apos;,&apos;TradeOrderModule&apos;,&apos;JRTemPlateTools&apos;,&apos;FinancingModule&apos;,&apos;JRWebViewTools&apos;,&apos;CrowdfundModule&apos;,&apos;JRBrickTools&apos;,&apos;IousModule&apos;,&apos;JROperateModule&apos;,&apos;JRContainerModule&apos;,&apos;JDWallet&apos;]</div><div class="line">    sdkFileList = [&apos;BankCard&apos;,&apos;LDBraceletSDK&apos;,&apos;TencentMapSDK&apos;,&apos;TencentMapSDK_2D&apos;,&apos;JDTDRisk&apos;,&apos;TSMKit&apos;,&apos;JRDnsAks&apos;,&apos;JRStat&apos;,&apos;JDMA_v13&apos;,&apos;JDPayJR&apos;,&apos;LiveSDK&apos;,&apos;Stock&apos;,&apos;React&apos;,&apos;SingularitySDK&apos;,&apos;UMSocial_Sdk&apos;,&apos;SouFang&apos;,&apos;MTASDK&apos;,&apos;JDKPL&apos;,&apos;FireEye&apos;,&apos;JDJROCRSDK&apos;,&apos;OCR&apos;,&apos;JDCNSDK&apos;,&apos;YITUSDK&apos;,&apos;BUGLY&apos;,&apos;Apple&apos;]</div><div class="line">    podFileList = []</div><div class="line"></div><div class="line">    appversion = &apos;&apos;</div><div class="line">    plistPath = os.popen(&apos;find /Users/jdjr/Documents/Build/JRMobileAnalyse -name JDMobile-Info.plist&apos;).read().split(&apos;\n&apos;)[0]</div><div class="line">    if os.path.exists(plistPath):</div><div class="line">       plist = readPlist(plistPath)</div><div class="line">       appversion = plist[&apos;CFBundleShortVersionString&apos;]</div><div class="line">    print appversion</div><div class="line">    time1 = time.time()</div><div class="line"></div><div class="line">    text1 = open(&apos;/Users/jdjr/Documents/Build/JRMobileAnalyse/Build/Products/JDMobile-LinkMap-normal-arm64.txt&apos;).read()</div><div class="line">    text2 = open(&apos;/Users/jdjr/Documents/Build/JRMobileAnalyse/Build/Products/JDMobile-LinkMap-normal-armv7.txt&apos;).read()</div><div class="line"></div><div class="line">    projectDic1 = parItemText(text1)</div><div class="line">    projectDic2 = parItemText(text2)</div><div class="line"></div><div class="line">    totalCount = 0</div><div class="line">    totalSize = 0</div><div class="line">    podsize = 0</div><div class="line">    podscount = 0</div><div class="line"></div><div class="line">    dataSoureList = []</div><div class="line">    dataSdkList = []</div><div class="line"></div><div class="line">    for item in projectNameList:</div><div class="line">        obj1 = projectDic1.get(item)</div><div class="line">        obj2 = projectDic2.get(item)</div><div class="line">        </div><div class="line">        if type(obj1) == type(None):</div><div class="line">            print item,0</div><div class="line">        else:</div><div class="line">            (size1,count1) = obj1</div><div class="line">            (size2,count2) = obj2</div><div class="line">            totalCount = totalCount + count2</div><div class="line">            totalSize = totalSize + size1 + size2</div><div class="line">            if item in sourceFileList:</div><div class="line">               dataSoureList.append((item,&apos;%.2fM&apos; % ((size1 + size2) / 1024.0 / 1024.0),&apos;%.2fK&apos; % ((size1 + size2) / 1024.0),size1 + size2,count2))</div><div class="line">            elif item in sdkFileList:</div><div class="line">               dataSdkList.append((item,&apos;%.2fM&apos; % ((size1 + size2) / 1024.0 / 1024.0),&apos;%.2fK&apos; % ((size1 + size2) / 1024.0),size1 + size2,count2))   </div><div class="line">            else:</div><div class="line">               podsize = podsize + size1 + size2</div><div class="line">               podscount = podscount + count2  </div><div class="line"></div><div class="line">    podString = &apos;Pods &apos; + &apos;%.2fM&apos; % (podsize / 1024.0 / 1024.0) + &apos;------&gt;&apos; + &apos;%.2fK&apos; % (podsize / 1024.0) + &apos;  文件个数%d&apos; % podscount</div><div class="line"></div><div class="line">    dataSoureList.append((&apos;Pods&apos;,&apos;%.2fM&apos; % (podsize / 1024.0 / 1024.0),&apos;%.2fK&apos; % (podsize / 1024.0),podsize,podscount))</div><div class="line">    print &apos;总文件个数%d&apos; % totalCount</div><div class="line">    print &apos;总文件体积%.2fM&apos; % (totalSize / 1024.0 / 1024.0)</div><div class="line"></div><div class="line">    dataSoureList = sorted(dataSoureList, key=lambda sortItem: sortItem[3],reverse=True)</div><div class="line">    dataSdkList = sorted(dataSdkList, key=lambda sortItem: sortItem[3],reverse=True)</div><div class="line"></div><div class="line">    lastinfoDict = &#123;&#125;</div><div class="line">    lastinfoDict[&apos;sorcedata&apos;] = dataSoureList</div><div class="line">    lastinfoDict[&apos;sdkdata&apos;] = dataSdkList</div><div class="line"></div><div class="line">    bds = baseinfo.find(&#123;&apos;appversion&apos;:appversion&#125;)</div><div class="line"></div><div class="line">    bdscount = 0</div><div class="line">    for item in bds:</div><div class="line">        bdscount = bdscount + 1</div><div class="line"></div><div class="line">    if bdscount &gt; 0 and len(dataSoureList) &gt; 0 and len(dataSdkList) &gt; 0:</div><div class="line">       baseinfo.remove(&#123;&apos;appversion&apos;:appversion&#125;) </div><div class="line"></div><div class="line">    baseinfo.save(&#123;&apos;appversion&apos;:appversion,&apos;lastinfo&apos;:lastinfoDict&#125;)</div><div class="line"></div><div class="line">def buildProject(branchName):</div><div class="line">    os.chdir(&apos;/Users/jdjr/Documents/Build/JRMobileAnalyse&apos;)</div><div class="line">    os.system(&apos;git add .&apos;)</div><div class="line">    os.system(&apos;git checkout -f&apos;)</div><div class="line">    os.system(&apos;git checkout &apos; + branchName)</div><div class="line">    os.system(&apos;git pull origin &apos; + branchName)</div><div class="line">    os.system(&apos;!wq&apos;)</div><div class="line">    os.system(&apos;xcodebuild -workspace JDFinance.xcworkspace -scheme JDMobile -configuration Analyse clean&apos;)</div><div class="line">    os.system(&apos;xcodebuild -workspace JDFinance.xcworkspace -scheme JDMobile -configuration Analyse build&apos;)</div><div class="line">    saveDataToMongo()</div><div class="line"></div><div class="line">def findHistoryData():</div><div class="line">    mc = MongoClient(&quot;localhost&quot;,27017)</div><div class="line">    db = mc.classsize</div><div class="line">    baseinfo = db.baseinfo</div><div class="line"></div><div class="line">    bds = baseinfo.find(&#123;&#125;).sort([(&apos;appversion&apos;, 1)])</div><div class="line"></div><div class="line">    ItemDataList = []#因为我们的bds用一次之后就会释放，所以我们需要把它保存起来</div><div class="line"></div><div class="line">    count = 0</div><div class="line">    lastItem = &apos;&apos;</div><div class="line"></div><div class="line">    TotalSize = []</div><div class="line">    for item in bds:</div><div class="line">        count = count + 1</div><div class="line">        lastItem = item#获得最后一个版本的数据，我们用这个作为标准排序的顺序</div><div class="line">        sdkList = item[&apos;lastinfo&apos;][&apos;sdkdata&apos;]</div><div class="line">        sorceList = item[&apos;lastinfo&apos;][&apos;sorcedata&apos;]</div><div class="line">        </div><div class="line">        total = 0</div><div class="line">        for obj in sdkList:</div><div class="line">            total = total + obj[3]</div><div class="line"></div><div class="line">        for obj in sorceList:</div><div class="line">            total = total + obj[3]</div><div class="line">        </div><div class="line">        TotalSize.append(total)</div><div class="line">        ItemDataList.append(item)#保存bds</div><div class="line"></div><div class="line">    if count == 0:</div><div class="line">       print &apos;没有数据&apos; </div><div class="line">       sys.exit(1) </div><div class="line"></div><div class="line">    showdataList = []</div><div class="line"></div><div class="line">    titlesdk = [&apos;sdk文件名字*版本&apos;]</div><div class="line">    titlesource = [&apos;源码文件名字*版本&apos;]</div><div class="line"></div><div class="line">    sourcetitleList = [&apos;JDMobile&apos;,&apos;CommunityTools&apos;,&apos;JRAssemblyUITools&apos;,&apos;JRBankCardModule&apos;,&apos;JRHomeChannel&apos;,&apos;Pods&apos;,&apos;RecognitionTools&apos;,&apos;MobileTopUpModule&apos;,&apos;ReactNative&apos;,&apos;TradeOrderModule&apos;,&apos;JRTemPlateTools&apos;,&apos;FinancingModule&apos;,&apos;JRWebViewTools&apos;,&apos;CrowdfundModule&apos;,&apos;JRBrickTools&apos;,&apos;IousModule&apos;,&apos;JROperateModule&apos;,&apos;JRContainerModule&apos;,&apos;JDWallet&apos;]</div><div class="line">    sdktitleList = [&apos;BankCard&apos;,&apos;LDBraceletSDK&apos;,&apos;TencentMapSDK&apos;,&apos;TencentMapSDK_2D&apos;,&apos;JDTDRisk&apos;,&apos;TSMKit&apos;,&apos;JRDnsAks&apos;,&apos;JRStat&apos;,&apos;JDMA_v13&apos;,&apos;JDPayJR&apos;,&apos;LiveSDK&apos;,&apos;Stock&apos;,&apos;React&apos;,&apos;SingularitySDK&apos;,&apos;UMSocial_Sdk&apos;,&apos;SouFang&apos;,&apos;MTASDK&apos;,&apos;JDKPL&apos;,&apos;FireEye&apos;,&apos;JDJROCRSDK&apos;,&apos;OCR&apos;,&apos;JDCNSDK&apos;,&apos;YITUSDK&apos;,&apos;BUGLY&apos;,&apos;Apple&apos;]</div><div class="line">    # sdktitleList = []#sdk的名字顺序</div><div class="line">    # sourcetitleList = []#源码文件的名字顺序</div><div class="line"></div><div class="line">    sdkitemList = lastItem[&apos;lastinfo&apos;][&apos;sdkdata&apos;]</div><div class="line">    sourceitemList = lastItem[&apos;lastinfo&apos;][&apos;sorcedata&apos;]</div><div class="line"></div><div class="line">    # for titleItem in sdkitemList:</div><div class="line">    #     sdktitleList.append(titleItem[0])</div><div class="line"></div><div class="line">    # for titleItem in sourceitemList:</div><div class="line">    #     sourcetitleList.append(titleItem[0])</div><div class="line"></div><div class="line">    for item in ItemDataList:</div><div class="line">        version = item[&apos;appversion&apos;]</div><div class="line">        titlesdk.append(version)</div><div class="line">        titlesource.append(version)</div><div class="line"></div><div class="line">    x = PrettyTable(titlesdk)</div><div class="line">    y = PrettyTable(titlesource)</div><div class="line"></div><div class="line">    for title in sdktitleList:</div><div class="line">        rowList = [title]</div><div class="line">        for item in ItemDataList:</div><div class="line">            sdkDataList = item[&apos;lastinfo&apos;][&apos;sdkdata&apos;]</div><div class="line">            hasAdd = False</div><div class="line">            for data in sdkDataList:</div><div class="line">                if data[0] == title:</div><div class="line">                   dataString = data[1].encode(&quot;utf-8&quot;) + &apos;    &apos; + data[2].encode(&quot;utf-8&quot;) + &apos;    &apos; + &apos;%d&apos; % data[4]</div><div class="line">                   rowList.append(dataString)</div><div class="line">                   hasAdd = True</div><div class="line">             </div><div class="line">            if hasAdd == False:</div><div class="line">               rowList.append(&apos;Nan&apos;) </div><div class="line"></div><div class="line">        x.add_row(rowList)</div><div class="line"></div><div class="line">    for title in sourcetitleList:</div><div class="line">        rowList = [title]</div><div class="line">        for item in ItemDataList:</div><div class="line">            sourceDataList = item[&apos;lastinfo&apos;][&apos;sorcedata&apos;]</div><div class="line">            </div><div class="line">            hasAdd = False</div><div class="line">            for data in sourceDataList:</div><div class="line">                if data[0] == title:</div><div class="line">                   dataString = data[1].encode(&quot;utf-8&quot;) + &apos;    &apos; + data[2].encode(&quot;utf-8&quot;) + &apos;    &apos; + &apos;%d&apos; % data[4]</div><div class="line">                   rowList.append(dataString)</div><div class="line">                   hasAdd = True</div><div class="line">            if hasAdd == False:</div><div class="line">               rowList.append(&apos;Nan&apos;)       </div><div class="line"></div><div class="line">        y.add_row(rowList) </div><div class="line"></div><div class="line">    print y</div><div class="line">    print x</div><div class="line"></div><div class="line">    print array(TotalSize)/1024.0/1024.0,&apos;M&apos;</div><div class="line"></div><div class="line">command = sys.argv[1]</div><div class="line"></div><div class="line">argv1 = &apos;&apos;</div><div class="line">argv2 = &apos;&apos;</div><div class="line">argv3 = &apos;&apos;</div><div class="line">argv4 = &apos;&apos;</div><div class="line">if (len(sys.argv) &gt;= 3):</div><div class="line">   argv1 = sys.argv[2]</div><div class="line"></div><div class="line">if (len(sys.argv) &gt;= 4):</div><div class="line">   argv2 = sys.argv[3]</div><div class="line"></div><div class="line">if command == &apos;--h&apos;:</div><div class="line">   print &apos;jdjr analyse branchname  分析某个分支&apos;</div><div class="line">   print &apos;jdjr history 查看历史数据&apos;</div><div class="line">elif command == &apos;analyse&apos;:</div><div class="line">   if len(argv1) == 0:</div><div class="line">      print &apos;请输入分支名称&apos;</div><div class="line">   else:</div><div class="line">      buildProject(argv1)</div><div class="line">      findHistoryData()</div><div class="line">elif command == &apos;history&apos;:</div><div class="line">   findHistoryData()</div><div class="line">elif command == &apos;analyseCommon&apos;:</div><div class="line">   saveDataToMongo()</div><div class="line">else:</div><div class="line">   print &apos;jdjr analyse branchname  分析某个分支&apos;</div><div class="line">   print &apos;jdjr history 查看历史数据&apos;</div><div class="line"></div><div class="line"></div><div class="line"># buildProject()</div><div class="line"># saveDataToMongo()</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端图片隐写术的实现思路]]></title>
      <url>/2018/04/17/2015/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E6%9C%AF%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/</url>
      <content type="html"><![CDATA[<h3 id="JPEG压缩算法理解"><a href="#JPEG压缩算法理解" class="headerlink" title="JPEG压缩算法理解"></a>JPEG压缩算法理解</h3><p>参考 <a href="https://thecodeway.com/blog/?p=69" target="_blank" rel="external">https://thecodeway.com/blog/?p=69</a></p>
<p>首先这是一种有损的信息压缩方式，压缩的核心原理是，将信息分为重要和不重要，然后舍弃掉不重要的信息，我们将会通过两部信息区分来完成这个任务，第一个是RGB转YCbCr，第二个是DCT转化和量化，这两步每一步都是有信息损耗，都是不可逆的，而哈夫曼编码和压缩是可逆的，要深刻的理解这些个点。</p>
<a id="more"></a>
<ul>
<li>图片会以不同的数据格式存在于不同的时刻，在屏幕中显示的时候肯定是RGB格式，在存储的时候却不是，是经过编码和压缩之后的数据</li>
<li>第一步，每一个点都是由RBG三个值组成，在移动端是四个值RGBA，每个值又由8位来存储，所以每个颜色内存中需要32位来存储，我们在压缩处理图片的时候并不是一个点一个点的处理，这样效率很低，我们是64个点作为一个单元去处理，8x8的矩阵</li>
<li>颜色空间转换RGB-&gt;YCbCr</li>
</ul>
<p>看一下RGB和YCbCr相互转化的c++代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">float computeY(float red,float green,float blue) &#123;</div><div class="line">    float Y = 0.299 * red + 0.587 * green + 0.114 * blue;</div><div class="line">    return float(roundfunc(Y));</div><div class="line">&#125;</div><div class="line"></div><div class="line">float computeCr(float red,float green,float blue) &#123;</div><div class="line">    float Cr = 0.500 * red - 0.419 * green - 0.081 * blue;</div><div class="line">    Cr = Cr + 128.0;</div><div class="line">    return float(roundfunc(Cr));</div><div class="line">&#125;</div><div class="line"></div><div class="line">float computeCb(float red,float green,float blue) &#123;</div><div class="line">    float Cb = 0.500 * blue - 0.169 * red - 0.331 * green;</div><div class="line">    Cb = Cb + 128.0;</div><div class="line">    return float(roundfunc(Cb));</div><div class="line">&#125;</div><div class="line"></div><div class="line">int16_t computeR(float Y,float Cb,float Cr) &#123;</div><div class="line">    float R = 1.000 * Y  + 0.000 * (Cb - 128) + 1.400 * (Cr - 128);</div><div class="line">    R = int16_t(roundfunc(R));</div><div class="line">    return int16_t(roundfunc(R));</div><div class="line">&#125;</div><div class="line"></div><div class="line">int16_t computeG(float Y,float Cb,float Cr) &#123;</div><div class="line">    float G = 1.000 * Y - 0.343 * (Cb - 128) - 0.711 * (Cr - 128);</div><div class="line">    return int16_t(roundfunc(G));</div><div class="line">&#125;</div><div class="line"></div><div class="line">int16_t computeB(float Y,float Cb,float Cr) &#123;</div><div class="line">    float B = 1.000 * Y + 1.765 * (Cb - 128) + 0.000 * (Cr - 128);</div><div class="line">    return int16_t(roundfunc(B));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>python代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BGR转化</div><div class="line">imgYCC = cv2.cvtColor(img, cv2.COLOR_BGR2YCR_CB)</div></pre></td></tr></table></figure>
<ul>
<li>DCT变换，这里转化的YCbCr数据，但是肯定是选择一个通道，不可能全都转换一遍，不过都转化也没啥问题，这样我们信息容量会更大</li>
<li>DCT量化，量化的理解是最大限度的去处不重要的信息，所以这个量化表本质是可选的，但是推荐官方的标准量化表</li>
<li>哈弗曼编码和压缩</li>
</ul>
<h3 id="JPEG载入信息方法理解"><a href="#JPEG载入信息方法理解" class="headerlink" title="JPEG载入信息方法理解"></a>JPEG载入信息方法理解</h3><p>方法有两种，第一种是直接在RGB信息中存入信息，第二种是在DCT信息中加入信息，下边来分别分析。</p>
<h4 id="在RGB中直接隐藏信息"><a href="#在RGB中直接隐藏信息" class="headerlink" title="在RGB中直接隐藏信息"></a>在RGB中直接隐藏信息</h4><p>这种做法是基于LBS，更改信息的最低有效位，首先不会更改人眼可分别的图片认知，因为颜色改变极小，但是如果是jpeg文件，存储再读取你写入的信息就会错乱，就是因为这是一种有损压缩，你把Red值改成了220，等你存储损失之后，再读取可能就变成了119，总之就是这个值不靠谱。</p>
<h4 id="基于DCT的隐藏"><a href="#基于DCT的隐藏" class="headerlink" title="基于DCT的隐藏"></a>基于DCT的隐藏</h4><p>DCT的信息是比较稳定的，但是仍然会有变化的情况，这是因为图像存在极值，比如一个255的色值，你藏信息的时候增加了这个值，但是返回回来之后计算的值是256，但是这个值是无效的，那么你怎么处理就很重要了，你如果直接将其约为255，那么你的数据将会错乱，如果你不采取这样的点，那么盲提取你仍然会错乱，因为如果你的判断标准是，这个值不能是255，你写的时候不是，更改之后读的时候可能就是了，这也是一种不稳定的处理方法。</p>
<p>解决办法就是将隐藏信息的处理扩张改为收缩，这样即使遇到极值情况，仍然不会被裁减，就这样轻松绕过这个问题，同时配合四舍五入的规则替换为退一的方法，这样我们能够保证所有的数据是缩减的，这样肯定不会触碰那个临界了，这样的话我们如果不考虑反检测的问题，我们可以大方的将信息写在DC数据上。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Seaborn数据展示入门]]></title>
      <url>/2018/03/21/2018/Seaborn%E6%95%B0%E6%8D%AE%E5%B1%95%E7%A4%BA%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<ul>
<li>都有什么类型的图</li>
<li>都能做哪几种分析</li>
</ul>
<p>Seaborn有五个预设好的主题：darkgrid, whitegrid, dark, white,和ticks</p>
<h3 id="distplot-kdeplot"><a href="#distplot-kdeplot" class="headerlink" title="distplot()  kdeplot()"></a>distplot()  kdeplot()</h3><p>distplot()为hist加强版，kdeplot()为密度曲线图 </p>
<h3 id="箱型图-boxplot"><a href="#箱型图-boxplot" class="headerlink" title="箱型图 boxplot()"></a>箱型图 boxplot()</h3><h3 id="联合分布jointplot"><a href="#联合分布jointplot" class="headerlink" title="联合分布jointplot()"></a>联合分布jointplot()</h3><h3 id="热点图heatmap"><a href="#热点图heatmap" class="headerlink" title="热点图heatmap()"></a>热点图heatmap()</h3><h3 id="Histograms直方图"><a href="#Histograms直方图" class="headerlink" title="Histograms直方图"></a>Histograms直方图</h3><h3 id="Kernel-density-estimaton核密度估计"><a href="#Kernel-density-estimaton核密度估计" class="headerlink" title="Kernel density estimaton核密度估计"></a>Kernel density estimaton核密度估计</h3>]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据挖掘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python的正则表达式使用]]></title>
      <url>/2018/03/20/2018/python%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>在正则表达式中，如果直接给出字符，就是精确匹配。用\d可以匹配一个数字，\w可以匹配一个字母或数字，所以：<br><a id="more"></a></p>
<ul>
<li>‘00\d’可以匹配’007’，但无法匹配’00A’；</li>
<li>‘\d\d\d’可以匹配’010’；</li>
<li>‘\w\w\d’可以匹配’py3’；</li>
<li>.可以匹配任意字符，所以：’py.’可以匹配’pyc’、’pyo’、’py!’等等。</li>
<li>要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个字符：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">来看一个复杂的例子：\d&#123;3&#125;\s+\d&#123;3,8&#125;。</div><div class="line"></div><div class="line">我们来从左到右解读一下：</div><div class="line"></div><div class="line">\d&#123;3&#125;表示匹配3个数字，例如&apos;010&apos;；</div><div class="line"></div><div class="line">\s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配&apos; &apos;，&apos; &apos;等；</div><div class="line"></div><div class="line">\d&#123;3,8&#125;表示3-8个数字，例如&apos;1234567&apos;。</div><div class="line"></div><div class="line">综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。</div><div class="line"></div><div class="line">如果要匹配&apos;010-12345&apos;这样的号码呢？由于&apos;-&apos;是特殊字符，在正则表达式中，要用&apos;\&apos;转义，所以，上面的正则是\d&#123;3&#125;\-\d&#123;3,8&#125;。</div><div class="line"></div><div class="line">但是，仍然无法匹配&apos;010 - 12345&apos;，因为带有空格。所以我们需要更复杂的匹配方式。</div></pre></td></tr></table></figure>
<p>进阶<br>要做更精确地匹配，可以用[]表示范围，比如：</p>
<p>[0-9a-zA-Z_]可以匹配一个数字、字母或者下划线；</p>
<p>[0-9a-zA-Z_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如’a100’，’0_Z’，’Py3000’等等；</p>
<p>[a-zA-Z_][0-9a-zA-Z_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；</p>
<p>[a-zA-Z_][0-9a-zA-Z_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。</p>
<p>A|B可以匹配A或B，所以(P|p)ython可以匹配’Python’或者’python’。</p>
<p>^表示行的开头，^\d表示必须以数字开头。</p>
<p>$表示行的结束，\d$表示必须以数字结束。</p>
<p>你可能注意到了，py也可以匹配’python’，但是加上^py$就变成了整行匹配，就只能匹配’py’了。</p>
<h3 id="python中的正则"><a href="#python中的正则" class="headerlink" title="python中的正则"></a>python中的正则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import re</div><div class="line"></div><div class="line">def handlere(rematchs, inputString):</div><div class="line">    for match in rematchs:</div><div class="line">        matchout = match.findall(inputString)</div><div class="line">        for item in matchout:</div><div class="line">            if type(item) == type((1, 2, 3)):</div><div class="line">                inputString = inputString.replace(item[0], &apos;&apos;)</div><div class="line">            else:</div><div class="line">                inputString = inputString.replace(item, &apos;&apos;)</div><div class="line"></div><div class="line">    return inputString</div><div class="line">    </div><div class="line">matchs = [re.compile(u&apos;周[一二三四五六日]&apos;),re.compile(r&apos;(\d&#123;1,2&#125;\:\d&#123;1,2&#125;)&apos;), re.compile(r&apos;(\d&#123;4&#125;(\.|\-|\/)\d&#123;1,2&#125;(\.|\-|\/)\d&#123;1,2&#125;)&apos;)]</div><div class="line">    comment = handlere(matchs, comment)</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[skleanrn文本分类代码记录]]></title>
      <url>/2018/03/19/2018/skleanrn%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>文本分类模型以及使用代码记录<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">import os,re  </div><div class="line">import sys,jieba</div><div class="line">import codecs,time</div><div class="line">import shutil</div><div class="line">import numpy as np</div><div class="line">import pandas as pd</div><div class="line">import matplotlib</div><div class="line">import scipy,json,pinyin</div><div class="line">from sklearn.externals import joblib</div><div class="line">from sklearn.svm import SVC</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">from sklearn.naive_bayes import MultinomialNB  </div><div class="line">from sklearn.naive_bayes import GaussianNB</div><div class="line">from sklearn.linear_model import Perceptron</div><div class="line">from sklearn.model_selection import train_test_split</div><div class="line">from sklearn import feature_extraction  </div><div class="line">from sklearn.feature_extraction.text import TfidfTransformer  </div><div class="line">from sklearn.feature_extraction.text import CountVectorizer</div><div class="line">from sklearn.feature_extraction.text import HashingVectorizer </div><div class="line">from pandas import DataFrame </div><div class="line">import enchant</div><div class="line">checkeng = enchant.Dict(&quot;en_US&quot;)</div><div class="line">    </div><div class="line">reload(sys) # Python2.5 初始化后会删除 sys.setdefaultencoding 这个方法，我们需要重新载入   </div><div class="line">sys.setdefaultencoding(&apos;utf-8&apos;)  </div><div class="line"></div><div class="line">jieba.load_userdict(&apos;customdict.txt&apos;)</div><div class="line">stopwords = open(&apos;stopwords.txt&apos;,&apos;r&apos;).read().split(&apos;\n&apos;)</div><div class="line">stopwordsadv = open(&apos;stopwordsadv.txt&apos;,&apos;r&apos;).read().split(&apos;\n&apos;)</div><div class="line">stopwords = open(&apos;teststopwords.txt&apos;,&apos;r&apos;).read().split(&apos;\n&apos;) + stopwords + stopwordsadv</div><div class="line"></div><div class="line">def handleadvkeywords(inputString):</div><div class="line">    if hasNumbers(inputString) == False:</div><div class="line">        return inputString</div><div class="line">    </div><div class="line">    pinyinlist = []</div><div class="line">    </div><div class="line">    for char in inputString:</div><div class="line">        pin = pinyin.get(char, format=&apos;strip&apos;, delimiter=&quot;&quot;)</div><div class="line">        pinyinlist.append(pin)</div><div class="line">    </div><div class="line">    setp = 2</div><div class="line">    </div><div class="line">    indexwei = 100</div><div class="line">    indexxin = 200</div><div class="line">    indexjia = 300</div><div class="line">    indexhao = 400</div><div class="line">    indexxing = 500</div><div class="line">    indexkou = 600</div><div class="line">    </div><div class="line">    if &apos;wei&apos; in pinyinlist:    </div><div class="line">        indexwei = pinyinlist.index(&apos;wei&apos;)</div><div class="line">        </div><div class="line">    if &apos;v&apos; in pinyinlist:    </div><div class="line">        indexwei = pinyinlist.index(&apos;v&apos;)    </div><div class="line">        </div><div class="line">    if &apos;xin&apos; in pinyinlist:    </div><div class="line">        indexxin = pinyinlist.index(&apos;xin&apos;)</div><div class="line">        </div><div class="line">    if &apos;xing&apos; in pinyinlist:    </div><div class="line">        indexxin = pinyinlist.index(&apos;xing&apos;)</div><div class="line">        </div><div class="line">    if &apos;hao&apos; in pinyinlist:    </div><div class="line">        indexhao = pinyinlist.index(&apos;hao&apos;)</div><div class="line">        </div><div class="line">    if &apos;jia&apos; in pinyinlist:    </div><div class="line">        indexjia = pinyinlist.index(&apos;jia&apos;)</div><div class="line">        </div><div class="line">    if &apos;zhao&apos; in pinyinlist:  </div><div class="line">        indexjia = pinyinlist.index(&apos;zhao&apos;)    </div><div class="line">    </div><div class="line">    if abs(indexxin - indexwei) &lt; setp:</div><div class="line">        inputString = u&apos;微信&apos; + inputString</div><div class="line">    </div><div class="line">    if abs(indexhao - indexwei) &lt; setp:</div><div class="line">        inputString = u&apos;微号&apos; + inputString</div><div class="line">    </div><div class="line">    if abs(indexwei - indexjia) &lt; setp:</div><div class="line">        inputString = u&apos;加微&apos; + inputString</div><div class="line">        </div><div class="line">#     if indexwei - indexjia &lt;= 2:</div><div class="line">#         inputString = &apos;加微&apos; + inputString</div><div class="line">        </div><div class="line">    if abs(indexxing - indexwei) &lt; setp:</div><div class="line">        inputString = u&apos;微信&apos; + inputString</div><div class="line">         </div><div class="line">    if  pinyinlist.count(&apos;kou&apos;) &gt;= 2:</div><div class="line">        inputString = &apos;qq&apos; + inputString</div><div class="line">    </div><div class="line">    if abs(indexkou - indexjia) &lt; setp:</div><div class="line">        inputString = u&apos;qq&apos; + inputString</div><div class="line">    </div><div class="line">    if &apos;加微微&apos; in inputString:</div><div class="line">        inputString = inputString.replace(&apos;加微微&apos;,&apos;加微&apos;)</div><div class="line">    </div><div class="line">    return inputString    </div><div class="line"></div><div class="line">def getwordcount(inputString):</div><div class="line">    df = pd.read_excel(&apos;lowfrequency.xls&apos;)</div><div class="line">    </div><div class="line">    negkeydicstring = open(&apos;negkeydic.json&apos;,&apos;r&apos;).read()</div><div class="line">    negkeydic = json.loads(negkeydicstring)</div><div class="line">    </div><div class="line">    count = 0</div><div class="line">    countdic = negkeydic.get(inputString)</div><div class="line">    if type(countdic) != type(None):</div><div class="line">        count = countdic[1]</div><div class="line">    print df[df[&apos;name&apos;] == inputString],count</div><div class="line"></div><div class="line">def cos_sim(vector_a, vector_b):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    计算两个向量之间的余弦相似度</div><div class="line">    :param vector_a: 向量 a </div><div class="line">    :param vector_b: 向量 b</div><div class="line">    :return: sim</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    vector_a = np.mat(vector_a)</div><div class="line">    vector_b = np.mat(vector_b)</div><div class="line">    num = float(vector_a * vector_b.T)</div><div class="line">    denom = np.linalg.norm(vector_a) * np.linalg.norm(vector_b)</div><div class="line">    cos = num / denom</div><div class="line">    sim = 0.5 + 0.5 * cos</div><div class="line">    return sim</div><div class="line"></div><div class="line">def hasNumbers(inputString):</div><div class="line">    return any(char.isdigit() for char in inputString)</div><div class="line">    </div><div class="line">def replacenum(inputString):</div><div class="line">    </div><div class="line">    replaceDic = &#123;&apos;yi&apos;:&apos;1&apos;,&apos;yao&apos;:&apos;1&apos;,&apos;er&apos;:&apos;2&apos;,&apos;san&apos;:&apos;3&apos;,&apos;si&apos;:&apos;4&apos;,&apos;wu&apos;:&apos;5&apos;,&apos;liu&apos;:&apos;6&apos;,&apos;qi&apos;:&apos;7&apos;,&apos;ba&apos;:&apos;8&apos;,&apos;jiu&apos;:&apos;9&apos;,&apos;ling&apos;:&apos;0&apos;&#125;</div><div class="line">#     .replace(u&apos;腰&apos;,&apos;1&apos;).replace(u&apos;一&apos;,&apos;1&apos;).replace(u&apos;二&apos;,&apos;2&apos;).replace(u&apos;三&apos;,&apos;3&apos;).replace(u&apos;斯&apos;,&apos;4&apos;).replace(u&apos;四&apos;,&apos;4&apos;).replace(u&apos;五&apos;,&apos;5&apos;).replace(u&apos;六&apos;,&apos;6&apos;).replace(u&apos;齐&apos;,&apos;7&apos;).replace(u&apos;七&apos;,&apos;7&apos;).replace(u&apos;扒&apos;,&apos;8&apos;).replace(u&apos;八&apos;,&apos;8&apos;).replace(u&apos;九&apos;,&apos;9&apos;).replace(u&apos;零&apos;,&apos;0&apos;)</div><div class="line">    returnString = &apos;&apos;</div><div class="line">    if len(inputString) &lt;= 2:</div><div class="line">        for item in inputString:</div><div class="line">            pin = pinyin.get(item, format=&apos;strip&apos;, delimiter=&quot;&quot;)</div><div class="line">            output = replaceDic.get(pin)</div><div class="line">            if type(output) == type(&apos;1&apos;):</div><div class="line">                returnString = returnString + output   </div><div class="line">    </div><div class="line">    if returnString == &apos;&apos; or len(returnString) &lt; len(inputString):</div><div class="line">        returnString = inputString</div><div class="line">    </div><div class="line">    return returnString</div><div class="line">    </div><div class="line">def handlenum(inputString):</div><div class="line">    </div><div class="line">    if inputString.count(&apos;0&apos;) &gt;= 2:</div><div class="line">        inputString = inputString.replace(&apos;0&apos;,&apos;&apos;)</div><div class="line">    </div><div class="line">    if hasNumbers(inputString):</div><div class="line">        s = re.findall(&quot;\d+&quot;,inputString)</div><div class="line">        for item in s:</div><div class="line">            if len(item) == 11:</div><div class="line">                inputString = inputString.replace(item,&apos;䞄&apos;) #电话</div><div class="line">            else:</div><div class="line">                if len(inputString.replace(&apos;0&apos;,&apos;&apos;).replace(&apos;g&apos;,&apos;&apos;)) &gt;= 5 and inputString[-1] != &apos;0&apos;:</div><div class="line">                    if &apos;988511&apos; in inputString:</div><div class="line">                        inputString = &apos;京东&apos;</div><div class="line">                    else:</div><div class="line">                        if len(item) &gt;= 2:</div><div class="line">                            inputString = inputString.replace(item,&apos;藨&apos;) #qq微信之类的</div><div class="line">                        else:</div><div class="line">                            inputString = inputString.replace(item,&apos;&apos;)</div><div class="line"> </div><div class="line">        outList = jieba.lcut(inputString)</div><div class="line">        if &apos;&apos; in outList:</div><div class="line">            outList.remove(&apos;&apos;)</div><div class="line">        if &apos; &apos; in outList:</div><div class="line">            outList.remove(&apos; &apos;)    </div><div class="line">        outListNew = []</div><div class="line">        </div><div class="line">        for item in outList:</div><div class="line">            if (&apos;䞄&apos; in item) or (&apos;藨&apos; in item) or (&apos;京东&apos; in item):</div><div class="line">                outListNew.append(item)</div><div class="line">            else:</div><div class="line">                if hasNumbers(item) == False:</div><div class="line">                    if checkeng.check(item):</div><div class="line">                        outListNew.append(&apos;isenglish&apos;)</div><div class="line">                    else:</div><div class="line">                        outListNew.append(item)</div><div class="line">                               </div><div class="line">        return outListNew</div><div class="line">    </div><div class="line">    if inputString.isalpha() == True and len(inputString) &gt; 5:#如果是纯英文，并且英文长度大于5</div><div class="line">        if &apos;jd&apos; in inputString:</div><div class="line">            inputString = &apos;京东&apos;</div><div class="line">        else:</div><div class="line">            if checkeng.check(inputString):</div><div class="line">                inputString = &apos;isallenglish&apos;</div><div class="line">    </div><div class="line">    return [inputString]</div><div class="line"></div><div class="line">def translate(comment):</div><div class="line">    testline = re.sub(u&quot;[\s+\.\!\/_,$%^*(+\&quot;\&apos;]+|[+——！，！。？、~@#￥%……&amp;*（）]+&quot;, &apos;&apos;, comment)</div><div class="line">    testline = testline.replace(u&apos;[&apos;,&apos;&apos;).replace(u&apos;丨&apos;,&apos;&apos;).replace(chr(32),&apos;&apos;).replace(u&apos;！&apos;, u&apos;&apos;).replace(u&apos;，&apos;, u&apos;&apos;).replace(u&apos;。&apos;, u&apos;&apos;).replace(u&apos;\n&apos;, u&apos;&apos;).replace(u&apos;\t&apos;, u&apos;&apos;).replace(</div><div class="line">        u&apos;?&apos;, u&apos;&apos;).replace(u&apos;【&apos;,&apos;&apos;).replace(u&apos;o&apos;,&apos;&apos;).replace(u&apos;O&apos;,&apos;&apos;).replace(u&apos;丶&apos;,&apos;&apos;).replace(u&apos;‘&apos;,&apos;&apos;).replace(&apos;:&apos;,&apos;&apos;).replace(u&apos;：&apos;,&apos;&apos;).replace(&apos;(&apos;,&apos;&apos;).replace(&apos;)&apos;,&apos;&apos;).replace(&apos;&#123;&apos;,&apos;&apos;).replace(&apos;&#125;&apos;,&apos;&apos;).replace(u&apos;？&apos;, u&apos;&apos;).replace(u&apos;-&apos;,&apos;&apos;)</div><div class="line">    </div><div class="line">    if &apos;危险性&apos; in testline:</div><div class="line">        testline = testline.replace(&apos;危险性&apos;,&apos;&apos;)</div><div class="line">    if &apos;2018&apos; in testline:</div><div class="line">        testline = testline.replace(&apos;2018&apos;,&apos;&apos;)</div><div class="line">    if &apos;行为&apos; in testline:</div><div class="line">        testline = testline.replace(&apos;行为&apos;,&apos;&apos;)</div><div class="line">    if &apos;vivox&apos; in testline:</div><div class="line">        testline = testline.replace(&apos;vivox&apos;,&apos;&apos;)  </div><div class="line">    if &apos;越来越扣&apos; in testline:</div><div class="line">        testline = testline.replace(&apos;越来越扣&apos;,&apos;&apos;)      </div><div class="line">    if &apos;weixin&apos; in testline:</div><div class="line">        testline = testline.replace(&apos;weixin&apos;, &apos;微信&apos;)</div><div class="line">    if &apos;vxin&apos; in testline:</div><div class="line">        testline = testline.replace(&apos;vxin&apos;,&apos;微信&apos;)</div><div class="line">    if &apos;wxin&apos; in testline:</div><div class="line">        testline = testline.replace(&apos;wxin&apos;,&apos;微信&apos;)</div><div class="line">    </div><div class="line">    testline = testline.lower()</div><div class="line">    return testline </div><div class="line"></div><div class="line">def changeToWords(sentence):</div><div class="line">    global stopwords</div><div class="line">    out = translate(sentence)</div><div class="line">    out = handleadvkeywords(out)</div><div class="line">    jiebalistnew = []</div><div class="line">    jiebalist = jieba.lcut(out)</div><div class="line">    </div><div class="line">    forcut = &apos;&apos;</div><div class="line">    for item in jiebalist:</div><div class="line">        item = replacenum(item)</div><div class="line">        forcut = forcut + item</div><div class="line">    </div><div class="line">    jiebalist = jieba.lcut(forcut)</div><div class="line">    </div><div class="line">    for item in jiebalist:</div><div class="line">        if item not in stopwords:</div><div class="line">            jiebalistnew = jiebalistnew + handlenum(item)</div><div class="line">    </div><div class="line">    if &apos;&apos; in jiebalistnew:</div><div class="line">        jiebalistnew.remove(&apos;&apos;) </div><div class="line">    if &apos; &apos; in jiebalistnew:</div><div class="line">        jiebalistnew.remove(&apos; &apos;)     </div><div class="line">    string = &apos; &apos;.join(jiebalistnew)</div><div class="line">    print string</div><div class="line">    return string</div><div class="line"></div><div class="line">def getkeywords(corpus): #应该是计算每个词个数除以我这个阵营的词总数，倒数，这样来衡量占的比重，如果两者比重接近，那么无意义</div><div class="line">    corpus = map(changeToWords,corpus)</div><div class="line">    vectorizer = CountVectorizer(token_pattern=u&apos;(?u)\w+&apos;)</div><div class="line">    X = vectorizer.fit_transform(corpus)</div><div class="line">    names = vectorizer.get_feature_names()</div><div class="line">    count = X.toarray().sum(axis=0)</div><div class="line">    dictn = &#123;&#125;</div><div class="line">    values = vectorizer.vocabulary_.values()</div><div class="line">    </div><div class="line">    sum = np.array(values).sum()</div><div class="line">    </div><div class="line">    for i in range(len(names)):</div><div class="line">        key = names[i]</div><div class="line">        value = sum * 1.0 / count[i]</div><div class="line">        valuenew = count[i]</div><div class="line">        dictn[key] = (value,valuenew)</div><div class="line">    </div><div class="line">    return dictn</div><div class="line"></div><div class="line">def getcompare(cols1,cols2):#比较两边的占比情况</div><div class="line">    coldic1 = getkeywords(cols1)</div><div class="line">    coldic2 = getkeywords(cols2)</div><div class="line">    </div><div class="line">    negkeydicstring = json.dumps(coldic1)</div><div class="line">    f = open(&apos;negkeydic.json&apos;,&apos;w&apos;)</div><div class="line">    f.write(negkeydicstring)</div><div class="line">    f.close()</div><div class="line">    </div><div class="line">    listn = sorted(coldic1.items(), key=lambda d: d[1][0], reverse=True) </div><div class="line">    </div><div class="line">    returnList = []</div><div class="line">    for item in listn:</div><div class="line">        name = item[0]</div><div class="line">        count = coldic1.get(name)[0]</div><div class="line">        if name in coldic2.keys():</div><div class="line">            count1 = coldic2.get(name)[0]</div><div class="line">            ratio = count * 1.0 / count1</div><div class="line">            if ratio &gt; 0.7 and ratio &lt; 1.5:</div><div class="line">                returnList.append(name)</div><div class="line">            </div><div class="line">            countppos = coldic2.get(name)[1]</div><div class="line">            countpneg = coldic1.get(name)[1]</div><div class="line">            </div><div class="line">            if countppos * 1.0 / countpneg &gt; 3:</div><div class="line">                returnList.append(name)</div><div class="line">        </div><div class="line">    return returnList</div><div class="line">    </div><div class="line"></div><div class="line">def trainmodel():</div><div class="line">    </div><div class="line">    #########################################################################</div><div class="line">    #                           第一步 计算TFIDF</div><div class="line">    #文档预料 空格连接</div><div class="line">    corpus = []</div><div class="line">    global stopwords</div><div class="line">    </div><div class="line">    #读取预料 一行预料为一个文档</div><div class="line">    neg = pd.read_excel(&apos;adver.xls&apos;)</div><div class="line">    negcontents = neg[&apos;content&apos;].dropna()</div><div class="line">    negcorpus = list(negcontents)</div><div class="line">    negcorpus = map(changeToWords,negcorpus)</div><div class="line">    </div><div class="line">    #读取预料 一行预料为一个文档</div><div class="line">    pos = pd.read_excel(&apos;notadver.xls&apos;)</div><div class="line">    poscontents = pos[&apos;content&apos;].dropna() </div><div class="line">    poscorpus = list(poscontents)</div><div class="line">    poscorpus = map(changeToWords,poscorpus)</div><div class="line">    </div><div class="line">    stopwords = getcompare(negcorpus,poscorpus) + stopwords #停止词，两边比重差不多或者正常的多的词</div><div class="line">    tostop = CountVectorizer(stop_words=stopwords,token_pattern=u&apos;(?u)\w+&apos;)</div><div class="line">    #第一个fit_transform是计算tf-idf 第二个fit_transform是将文本转为词频矩阵</div><div class="line">    tostopcount = tostop.fit_transform(poscorpus+negcorpus)</div><div class="line">    words = tostop.get_feature_names()</div><div class="line">    sumlist = list(tostopcount.toarray().sum(axis=0))</div><div class="line">    a1 = np.array([words,sumlist])</div><div class="line">    a1 = np.transpose(a1)</div><div class="line">    dfnew = DataFrame(a1,columns=[&apos;name&apos;,&apos;count&apos;])</div><div class="line">    dfnew[&apos;count&apos;] = dfnew[&apos;count&apos;].astype(int)</div><div class="line">    dfnew.to_excel(&apos;lowfrequency.xls&apos;)</div><div class="line">    tostopwords = list(dfnew[dfnew[&apos;count&apos;] &lt; 7][&apos;name&apos;]) #去除频次小于7的词组</div><div class="line"></div><div class="line">    stopwords = stopwords + tostopwords</div><div class="line">    if os.path.exists(&apos;teststopwords.txt&apos;):</div><div class="line">        os.popen(&apos;rm -rf teststopwords.txt&apos;)</div><div class="line">    f = open(&apos;teststopwords.txt&apos;,&apos;w&apos;)</div><div class="line">    for item in stopwords:</div><div class="line">        if item.isalpha() == False:</div><div class="line">            f.write(item + &apos;\n&apos;)</div><div class="line">    f.close()   </div><div class="line">    </div><div class="line">#     #该类会统计每个词语的tf-idf权值</div><div class="line">    transformer = TfidfTransformer()</div><div class="line">    vectorizer = CountVectorizer(token_pattern=u&apos;(?u)\w+&apos;)</div><div class="line">    count0 = vectorizer.fit_transform(poscorpus+negcorpus)</div><div class="line">    tfidf = transformer.fit_transform(count0)</div><div class="line">    </div><div class="line">    #将tf-idf矩阵抽取出来，元素w[i][j]表示j词在i类文本中的tf-idf权重</div><div class="line">    weight = tfidf.toarray()</div><div class="line">    </div><div class="line">    x = weight</div><div class="line">    y = np.concatenate((np.zeros(len(poscorpus)), np.ones(len(negcorpus))))</div><div class="line">    </div><div class="line">    list0 = list(poscontents) + list(negcontents)</div><div class="line">    list1 = list(poscorpus+negcorpus)</div><div class="line">    list2 = list(weight)</div><div class="line">   </div><div class="line">    list3 = []</div><div class="line">    for item in list2:</div><div class="line">        item = list(item)</div><div class="line">        list3.append(&apos;/&apos;.join(&apos;%s&apos; % id for id in item))</div><div class="line">    </div><div class="line">    a2 = np.array([list0,list1,list3,y])</div><div class="line">    a2 = np.transpose(a2)</div><div class="line"></div><div class="line">    dftosave = DataFrame(a2,columns=[&apos;content&apos;,&apos;name&apos;,&apos;weight&apos;,&apos;isadver&apos;])</div><div class="line">    dftosave.to_csv(&apos;vecdict.csv&apos;)</div><div class="line">    </div><div class="line">    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.01)</div><div class="line">    </div><div class="line">    # 构建支持向量机分类模型</div><div class="line">#     model = SVC(kernel=&apos;rbf&apos;, verbose=True)</div><div class="line">    </div><div class="line">#     model = GaussianNB()</div><div class="line">    modelnew = MultinomialNB()</div><div class="line">#     model = Perceptron()</div><div class="line">    </div><div class="line">#     model.fit(x_train, y_train)</div><div class="line">    modelnew.fit(x_train, y_train)</div><div class="line">    </div><div class="line">#     score = model.score(x_test, y_test)</div><div class="line">    scorenew = modelnew.score(x_test, y_test)</div><div class="line">#     print score</div><div class="line">    print scorenew</div><div class="line">    print &apos;donetest&apos;</div><div class="line">    joblib.dump(modelnew, &apos;bayes.pkl&apos;)</div><div class="line">    joblib.dump(transformer, &apos;transformer&apos;)</div><div class="line">    joblib.dump(vectorizer, &apos;vectorizer&apos;)</div><div class="line">    </div><div class="line">def testmodel(testString):</div><div class="line">    </div><div class="line">    isadver = False       </div><div class="line">    </div><div class="line">    testList = [testString]</div><div class="line">    negtestcorpus = map(changeToWords,testList)</div><div class="line">    </div><div class="line">    foruse = negtestcorpus[0].split(&apos; &apos;)</div><div class="line">    </div><div class="line">    nums = re.findall(r&apos;\d+&apos;, testString)</div><div class="line">    numstring = &apos;&apos;.join(nums)</div><div class="line">    count = len(numstring)</div><div class="line">    </div><div class="line">    forteststring = translate(testString) + &apos;&apos;.join(negtestcorpus)</div><div class="line">    </div><div class="line">    abList = [u&apos;微号&apos;,u&apos;QQ&apos;,u&apos;qq&apos;,u&apos;微我&apos;,u&apos;微信&apos;,u&apos;加微&apos;,u&apos;卫星&apos;,u&apos;*信&apos;,u&apos;维新&apos;,u&apos;企鹅&apos;,u&apos;加扣&apos;]</div><div class="line">    if count &gt;= 2:</div><div class="line">        for item in abList:</div><div class="line">            if item in forteststring:</div><div class="line">                isadver = True</div><div class="line">    </div><div class="line">    if (&apos;http&apos; in testString and &apos;jd&apos; not in testString) or (&apos;www&apos; in testString and &apos;jd&apos; not in testString) or ((&apos;com&apos; in testString and &apos;jd&apos; not in testString)):</div><div class="line">        isadver = True</div><div class="line">    </div><div class="line">    if isadver == True:</div><div class="line">        return isadver </div><div class="line">    </div><div class="line">    model = joblib.load(&apos;bayes.pkl&apos;)</div><div class="line">    vectorizer = joblib.load(&apos;vectorizer&apos;)</div><div class="line">    transformer = joblib.load(&apos;transformer&apos;)</div><div class="line">    </div><div class="line">    counts_train = vectorizer.transform(negtestcorpus)</div><div class="line">    testtfidf = transformer.transform(counts_train)</div><div class="line">    </div><div class="line">    result = model.predict(testtfidf.toarray())</div><div class="line">    </div><div class="line">    if result[0] == 0.0:</div><div class="line">        isadver = False</div><div class="line">    </div><div class="line">    if result[0] == 1.0:</div><div class="line">        isadver = True</div><div class="line">    </div><div class="line">    return isadver</div><div class="line"></div><div class="line">def tagalldata():</div><div class="line">    </div><div class="line">    negtest = pd.read_excel(&apos;notadver.xls&apos;)</div><div class="line">    print negtest.info()</div><div class="line">    negtest = negtest.dropna()</div><div class="line">    negtestcontents = negtest[&apos;content&apos;]</div><div class="line">    </div><div class="line">    df1 = map(testmodel,negtestcontents)</div><div class="line">    negtest[&apos;isadnew&apos;] = df1</div><div class="line">    </div><div class="line">    f = open(&apos;outputpos.txt&apos;,&apos;w&apos;)</div><div class="line">    for item in negtest[negtest[&apos;isadnew&apos;] == True][&apos;content&apos;]:</div><div class="line">        f.write(item + &apos;\n&apos;)</div><div class="line">    f.close()</div><div class="line">    print &apos;done&apos;</div><div class="line"></div><div class="line">def getsimiliar(testString):</div><div class="line">    vecdic = pd.read_csv(&apos;vecdict.csv&apos;)</div><div class="line">    namelist = list(vecdic[&apos;name&apos;])</div><div class="line">    weightlist = list(vecdic[&apos;weight&apos;])</div><div class="line">    contentlist = list(vecdic[&apos;content&apos;])</div><div class="line">    adverlist = list(vecdic[&apos;isadver&apos;])</div><div class="line"></div><div class="line">    weightlistnew = []</div><div class="line">    for item in weightlist:</div><div class="line">        itemlist = item.split(&apos;/&apos;)</div><div class="line">        outlist = []</div><div class="line">        for i in itemlist:</div><div class="line">            outlist.append(float(i))</div><div class="line">        weightlistnew.append(outlist)</div><div class="line">    </div><div class="line">    testList = [testString]</div><div class="line">    </div><div class="line">    negtestcorpus = map(changeToWords,testList)</div><div class="line">    </div><div class="line">    model = joblib.load(&apos;bayes.pkl&apos;)</div><div class="line">    transformer = joblib.load(&apos;transformer&apos;)</div><div class="line">    vectorizer = joblib.load(&apos;vectorizer&apos;)</div><div class="line">    </div><div class="line">    names = vectorizer.get_feature_names()</div><div class="line">    </div><div class="line">    counts_train = vectorizer.transform(negtestcorpus)</div><div class="line">    testtfidf = transformer.transform(counts_train)</div><div class="line">    </div><div class="line">    sentence = testtfidf.toarray()[0]</div><div class="line">    for item in weightlist:</div><div class="line">        itemlist = item.split(&apos;/&apos;)</div><div class="line">        outlist = []</div><div class="line">        for i in itemlist:</div><div class="line">            outlist.append(float(i))</div><div class="line">        similar = cos_sim(sentence,outlist)</div><div class="line">        if similar &gt; 0.65:</div><div class="line">            print contentlist[weightlist.index(item)],&apos;+++++++&apos;,namelist[weightlist.index(item)],&apos;------&apos;,adverlist[weightlist.index(item)]</div><div class="line">    </div><div class="line">def testsentence(inputString):</div><div class="line">    global contentlist</div><div class="line">    time1 = time.time()</div><div class="line">    print testmodel(inputString)</div><div class="line">    print time.time() - time1</div><div class="line">    getsimiliar(inputString)</div><div class="line">    print time.time() - time1</div><div class="line">    </div><div class="line">    </div><div class="line"># print testmodel(u&apos;京东，白，条好啊，白，条，可，以，唤，线，金。秒，到手。 有无，闪，付都一样，秒，到。还可以任，性，福，花，把。任，性，带。卫，星（q29206）&apos;)</div><div class="line"># tagalldata()</div><div class="line">print &apos;******&apos;</div><div class="line">time1 = time.time()</div><div class="line"># trainmodel()</div><div class="line"># tagalldata()</div><div class="line">testsentence(u&apos;我不相信weixinasdfasdf&apos;)</div><div class="line"># print getwordcount(u&apos;开户&apos;)</div><div class="line"># changeToWords(u&apos;想获得白条联系我qw6727444&apos;)</div><div class="line">print time.time() - time1</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> sklearn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS面试题总结]]></title>
      <url>/2018/03/17/2015/iOS%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>转点面试题<br><a id="more"></a></p>
<h3 id="中小型公司"><a href="#中小型公司" class="headerlink" title="中小型公司"></a>中小型公司</h3><p>谈下iOS开发中知道的哪些锁? 哪个性能最差?SD和AFN使用的哪个? 一般开发中你最常用哪个? 哪个锁apple存在问题又是什么问题?</p>
<p>iOS下如何实现指定线程数目的线程池?</p>
<p>如何用HTTP实现长连接？</p>
<p>http的post和get啥区别</p>
<p>使用atomic一定是线程安全的吗？</p>
<p>数据库建表的时候索引有什么用？</p>
<p>介绍下iOS设备获取唯一设备号的历史变迁</p>
<p>如何使用runtime hook一个class的某个方法，又如何hook某个instance的方法？</p>
<p>聊下HTTP的POST的body体使用form-urlencoded和multipart/form-data的区别。</p>
<p>通过[UIImage imageNamed:]生成的对象什么时候被释放？</p>
<p>applicationWillEnterForeground和applicationDidBecomeActive都会在哪些场景下被调用？举例越多越好。</p>
<p>如何终止正在运行的工作线程？</p>
<p>iOS下所有的本地持久化方案。</p>
<p>weak修饰的释放则自动被置为nil的实现原理</p>
<p>HTTPS的加密原理</p>
<p>网络通讯中加密方式有哪些，各自的原理?</p>
<p>谈下开发中iOS缓存的理解</p>
<p>你认为开发中那些导致crash?</p>
<p>分析下SDWebImage (q3:内部做Decoder的原因 (典型的空间换时间))</p>
<p>crash的收集和定位bug的方式谈下</p>
<p>SEL和Method和IMP分别说下再谈下对IMP的理解?</p>
<p>Autorelease的原理 ?</p>
<p>ARC的工作原理</p>
<p>weak弱引用的代码逻辑实现?</p>
<p>大文件离线下载怎么处理?会遇到哪些问题?又如何解决</p>
<p>Socket建立网络连接的步骤</p>
<p>用户需要上传和下载一个重要的资料文件，应该如何判断用户本次是否上传成功和下载成功了?</p>
<p>ReactiveCocoa(RAC)如何防止UIButton短时间内多次重复点击，大概思路?</p>
<p>倒计时如何实现 ？</p>
<p>熟悉 CocoaPods 么？能大概讲一下工作原理么？</p>
<p>使用SDWebImage内存爆涨的问题遇到没,怎么解决</p>
<p>isa指针的作用</p>
<p>测试都有哪些方式?优缺点呢</p>
<p>项目中你是怎么处理网络速度慢、中断抖动等网络请求中的问题?</p>
<p>对数组中的元素去重复 (四种)</p>
<p>请简单写出增、删、改、查的SQL语句</p>
<p>与 NSURLConnection 相比，NSURLsession 改进哪些?</p>
<p>使用drawRect有什么影响？</p>
<p>什么时候会报unrecognized selector的异常？如何避免?</p>
<p>界面多个网络请求,如何处理刷新的?</p>
<p>如果tableView界面网络请求有缓存数据逻辑?</p>
<p>init方法私有化?</p>
<p>线程中栈与堆是公有的还是私有的 ?</p>
<p>项目中的图片上传功能如何实现，为什么使用队列上传，为什么不用异步上传?</p>
<h3 id="去哪儿网一面"><a href="#去哪儿网一面" class="headerlink" title="去哪儿网一面"></a>去哪儿网一面</h3><p>自我介绍</p>
<p>atomic 和 nonatomic 的区别</p>
<p>手写@property (nonatomic, strong, readonly) NSString *context 的get 方法。前提是线程安全，lazy load的方式</p>
<p>@property (atomic, strong) NSString *str; 如果重写了str的set方法，那atomic还有效吗？</p>
<p>写一个method 能满足输入[6, 5, 4, 3, 2, 1]数组 输出 [1, 2, 3, 4, 5, 6]数组</p>
<p>http socket的区别，http是在网络里面的那一层。这里考的是网络传输的那7层。如何知道消息体的数据已经发送完成了。tcp udp的理解。</p>
<p>一个新的app的设计思路，主要看架构方面的想法</p>
<p>多个登录方式，比如qq， 微信，微博，手机号，邮箱等的登录，如果真对变化进行封装。这里考虑的更多的是设计模式上的问题。</p>
<p>事件响应链（比如点击事件）</p>
<p>GCD中group的优点，及串行，并行队列</p>
<p><a href="https://www.cnblogs.com/bboymars/p/4980754.html" target="_blank" rel="external">framework时动态链接库还是静态链接库，和.a的区别是什么</a></p>
<p>将对象加入字典，array时的引用计数是多少</p>
<p>weak的实现原理 strong的实现原理</p>
<p>关于引用计数的知识点</p>
<p>手写一个set方法</p>
<p>block中的弱引用强引用，什么情况会导致循环引用，什么时候需要__strong保持强引用</p>
<p>app的性能优化，都有哪些</p>
<p>对于image加载的优化方案有哪些</p>
<p>Runloop, runtime的理解</p>
<h3 id="阿里一面"><a href="#阿里一面" class="headerlink" title="阿里一面"></a>阿里一面</h3><p>第一组(p5)<br>Android的activity</p>
<p>Category支持添加属性与成员变量吗</p>
<p>是否了解设计模式, 用过哪些</p>
<p>iOS7之后, 蓝牙的围栏功能</p>
<p>MVC是否了解?介绍下使用情况。</p>
<p>MVC里面, View怎么通知到Model</p>
<p>了解delegate吗?并介绍</p>
<p>说说Cell重用原理</p>
<p>异步下载如何实现</p>
<p>做过最大的项目是什么?主要难点在哪里</p>
<p>如果现在要实现一个下载功能, 你要如何设计。说说每个类具体做什么</p>
<p>学过哪些语言</p>
<p>C++里面虚函数作用</p>
<p>对o2o有什么看法(他是o2o部门的)</p>
<p>有没有什么想问的</p>
<h3 id="第二组-p5"><a href="#第二组-p5" class="headerlink" title="第二组(p5)"></a>第二组(p5)</h3><p>MVC具有什么样的优势，各个模块之间怎么通信，比如点击 Button 后 怎么通知 Model？</p>
<p>两个无限长度链表（也就是可能有环） 判断有没有交点</p>
<p>UITableView的相关优化</p>
<p>KVO、Notification、delegate各自的优缺点，效率还有使用场景</p>
<p>如何手动通知KVO</p>
<p>Objective-C 中的copy方法</p>
<p>runtime 中，SEL和IMP的区别</p>
<p>autoreleasepool的使用场景和原理</p>
<p>RunLoop的实现原理和数据结构，什么时候会用到</p>
<p>block为什么会有循环引用</p>
<p>使用GCD如何实现这个需求：A、B、C 三个任务并发，完成后执行任务 D。</p>
<p>NSOperation和GCD的区别</p>
<p>CoreData的使用，如何处理多线程问题</p>
<p>如何设计图片缓存？</p>
<p>有没有自己设计过网络控件？</p>
<h3 id="第三组-p6"><a href="#第三组-p6" class="headerlink" title="第三组(p6)"></a>第三组(p6)</h3><p>介绍下内存的几大区域？</p>
<p>你是如何组件化解耦的？</p>
<p>runtime如何通过selector找到对应的IMP地址</p>
<p>runloop内部实现逻辑？</p>
<p>你理解的多线程？</p>
<p>GCD执行原理？</p>
<p>怎么防止别人反编译你的app？</p>
<p>YYAsyncLayer如何异步绘制？</p>
<p>优化你是从哪几方面着手？</p>
<h3 id="阿里二面"><a href="#阿里二面" class="headerlink" title="阿里二面"></a>阿里二面</h3><p>第一组(p5)<br>什么时候接触iOS</p>
<p>你的这些项目是外包还是自己开发的</p>
<p>OC允许多继承吗</p>
<p>要用什么方式实现多继承</p>
<p>了解内存管理吗, 吧唧吧唧…</p>
<p>了解设计模式吗</p>
<p>具体说说MVC</p>
<p>了解KVO吗</p>
<p>如果让你设计KVO, 要怎么设计</p>
<p>现在你是如何适配的</p>
<p>比较下storyboard和全代码</p>
<p>印象比较深的项目, 难点在哪</p>
<p>Cell重用机制具体怎么实现</p>
<p>如果有1w张图片要在屏幕滚动显示(每张图片满屏), 至少要几个cell, 如何实现循环滚动</p>
<p>平时是怎么进行测试的, 内存方面怎么测试</p>
<p>平时如何实现网络请求, 一般返回的数据是什么格式, 如何解析..</p>
<p>平时自己有没有封装过比较复杂的控件</p>
<p>在什么情况使用Notification</p>
<p>如何实现类似 “Find My iPhone” 这样功能</p>
<h3 id="第二组-p5-1"><a href="#第二组-p5-1" class="headerlink" title="第二组(p5)"></a>第二组(p5)</h3><p>怎么判断某个 cell 是否显示在屏幕上</p>
<p>进程和线程的区别</p>
<p>TCP 与 UDP 区别</p>
<p>TCP 流量控制</p>
<p>数组和链表的区别</p>
<p>UIView 生命周期</p>
<p>如果页面 A 跳转到 页面 B，A 的 viewDidDisappear 方法和 B 的 viewDidAppear 方法哪个先调用？</p>
<p>block 循环引用问题</p>
<p>ARC 的本质</p>
<p>RunLoop 的基本概念，它是怎么休眠的？</p>
<p>Autoreleasepool 什么时候释放，在什么场景下使用？</p>
<p>如何找到字符串中第一个不重复的字符</p>
<p>哈希表如何处理冲突</p>
<p>第三组(p6)<br>在一个app中间有一个button，在你手触摸屏幕点击后，到这个button收到点击事件，中间发生了什么</p>
<p>代码文件编译生成过程，做了哪些事情；</p>
<p>app启动做了哪些事情；</p>
<p>AFN原理</p>
<p>说说你项目中常用到的调试技巧？</p>
<h3 id="阿里三面"><a href="#阿里三面" class="headerlink" title="阿里三面"></a>阿里三面</h3><p>第一组(p5)<br>dSYM你是如何分析的？</p>
<p>多线程有哪几种？你更倾向于哪一种？</p>
<p>单例弊端？</p>
<p>如何把异步线程转换成同步任务进行单元测试？</p>
<p>介绍下App启动的完成过程？</p>
<p>比如App启动过慢，你可能想到的因素有哪些？</p>
<p>0x8badf00d表示是什么？</p>
<p>怎么防止反编译？</p>
<p>说说你遇到到的技术难点？</p>
<p>说说你了解的第三方原理或底层知识？</p>
<p>蚂蚁金服<br>在KVO中，他是怎么知道监听的对象发生了变化？</p>
<p>字典的工作原理 ？怎100w个中是怎么快速去取value？</p>
<p>一个上线的项目，知道这个方法可能会出问题，在不破坏改方法前提下，怎么搞？</p>
<p>Block和函数指针的区别？</p>
<h3 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h3><p>iOS多线程有哪些？他们之间各有什么区别，优劣性？</p>
<p>UIView和NSObject这两个类，所有里面的方法和原理都需要了解一下。</p>
<p>Runloop和线程的关系？</p>
<p>Runloop的作用？RunloopMode的原理？</p>
<h3 id="饿了么面试题"><a href="#饿了么面试题" class="headerlink" title="饿了么面试题"></a>饿了么面试题</h3><p>automic一定是线程安全的吗</p>
<p>iOS中的消息传递是怎么一步一步实现的</p>
<p>category和extension有什么区别</p>
<p>iOS中的私有属性如何设置</p>
<p>串行队列和同步锁两者在保护线程安全上的性能对比</p>
<p>并行队列是同时执行的吗</p>
<p>iOS中有哪些锁，你了解多少</p>
<p>iOS中UIKit框架的架构</p>
<p>UIView和CALayer之间的关系</p>
<p>UIView、CoreAnimation和CoreGraphics的关系</p>
<p>应该知道SegmentFault，这个在iOS中是什么错误，那StackOverFlow呢</p>
<p>GCD、NSThread、NSOperation性能上有何区别</p>
<h3 id="网易一面"><a href="#网易一面" class="headerlink" title="网易一面"></a>网易一面</h3><p>第一组<br>自我介绍</p>
<p>学习iOS动机</p>
<p>对iOS的看法</p>
<p>谈项目</p>
<p>怎么看待审核被拒</p>
<p>怎么完成后期检测, 优化</p>
<p>id ,NSObject, id区别</p>
<p>了解iOS内存管理吗</p>
<p>release 和 autorelease 区别</p>
<p>autorelease 和 @autorelease区别</p>
<p>weak什么时候用</p>
<p>unsafe_unretained , weak, assign 区别</p>
<p>__block什么时候用</p>
<p>在block里面, 对数组执行添加操作, 这个数组需要声明成 __block吗</p>
<p>在block里面, 对NSInteger进行修改, 这个NSInteger是否需要声明成__blcok</p>
<p>了解循环引用吗</p>
<p>NSThread, NSOperation, GCD区别</p>
<p>如何在异步下载时候, 取消下载, 保证流量不浪费</p>
<p>了解runtime吗</p>
<p>runtime什么时候用</p>
<p>通知和KVO区别</p>
<p>有序和无序set实现原理区别</p>
<p>深度遍历和广度遍历使用场景</p>
<p>算法题 * 2</p>
<p>常用的设计模式</p>
<p>哪些设计模式属于观察者模式</p>
<p>总结下刚才面试中哪些不足</p>
<p>自己有什么优点</p>
<p>有什么想问的</p>
<p>第二组<br>你一般学习iOS是如何学习的？</p>
<p>app内存你是如何分析的？</p>
<p>用过 TableView 吗，平时怎么解决 TableView 滑动卡顿问题的？</p>
<p>网络模型了解么？有哪几种？说说你的看法？</p>
<p>block本质是什么？</p>
<p>KVC机制是如何通过key找到value。</p>
<p>说说你最熟悉的第三方，知晓其原理么？</p>
<h3 id="网易二面"><a href="#网易二面" class="headerlink" title="网易二面"></a>网易二面</h3><p>第一组<br>如何实现一个数组每个元素依次向右移动k位。(后头的往前面补) 比如: [1, 2, 3, 4, 5] 挪两位变成[4, 5, 1, 2, 3]</p>
<p>实现连连看算法</p>
<p>T9算法如何实现, 全拼算法</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sklearn中文文本分类实战]]></title>
      <url>/2018/03/12/2018/sklearn%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<p>训练步骤</p>
<ul>
<li>数据集合</li>
<li>文本分词</li>
<li>去除停用词，低频词</li>
<li>抽取特征</li>
<li>计算特征向量权值</li>
<li>训练分类器</li>
</ul>
<p>使用模型步骤</p>
<ul>
<li>文本分词</li>
<li>去除停用词，低频词</li>
<li>计算特征向量权值</li>
<li>使用模型进行分类</li>
</ul>
<a id="more"></a>
<h3 id="去除停用词和低频词"><a href="#去除停用词和低频词" class="headerlink" title="去除停用词和低频词"></a>去除停用词和低频词</h3><p>因为在自然语言中每个词代表一个特征，所以自然语言注定了是一种超高纬特征的机器学习问题，但是在分类问题中很多词是不具备分类能力的，比如，啊，我等等，这些是要去除的停用词，这些词语在不同场景下可以是通用的。另外就是要去除低频词，如果某些词在在整个训练数据集中只出现了一两次，那么这样的特征将会导致表示向量大量的0000存在，是徒增加计算成本而不会对精准分类有什么贡献，所以最好的办法就是直接忽略这些词。</p>
<p>具体在sklearn中我们用到的是<code>from sklearn.feature_extraction.text import CountVectorizer</code>这个类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vectorizer = CountVectorizer(vocabulary=vocabularyDic,stop_words=[&apos;中国&apos;],token_pattern=u&apos;(?u)\w+&apos;,max_features=200)</div></pre></td></tr></table></figure>
<p>那么是不是使用stop_words这个参数呢，这个要区分，如果是英文文本分类是可以的，但是中文不行，这就是坑啊，所以中文去除停用词只能靠自己。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">def translate(comment):</div><div class="line">    testline = re.sub(u&quot;[\s+\.\!\/_,$%^*(+\&quot;\&apos;]+|[+——！，！。？、~@#￥%……&amp;*（）]+&quot;, &apos;&apos;, comment)</div><div class="line">    testline = testline.replace(chr(32),&apos;&apos;).replace(u&apos;！&apos;, u&apos;&apos;).replace(u&apos;，&apos;, u&apos;&apos;).replace(u&apos;。&apos;, u&apos;&apos;).replace(u&apos;\n&apos;, u&apos;&apos;).replace(u&apos;\t&apos;, u&apos;&apos;).replace(</div><div class="line">        u&apos;?&apos;, u&apos;&apos;).replace(u&apos;【&apos;,&apos;&apos;).replace(u&apos;o&apos;,&apos;&apos;).replace(u&apos;O&apos;,&apos;&apos;).replace(u&apos;丶&apos;,&apos;&apos;).replace(u&apos;‘&apos;,&apos;&apos;).replace(&apos;:&apos;,&apos;&apos;).replace(u&apos;：&apos;,&apos;&apos;).replace(&apos;(&apos;,&apos;&apos;).replace(&apos;)&apos;,&apos;&apos;).replace(&apos;&#123;&apos;,&apos;&apos;).replace(&apos;&#125;&apos;,&apos;&apos;).replace(u&apos;？&apos;, u&apos;&apos;).replace(u&apos;-&apos;,&apos;&apos;).replace(u&apos;一&apos;,&apos;1&apos;).replace(u&apos;二&apos;,&apos;2&apos;).replace(u&apos;三&apos;,&apos;3&apos;).replace(u&apos;四&apos;,&apos;4&apos;).replace(u&apos;五&apos;,&apos;5&apos;).replace(u&apos;六&apos;,&apos;6&apos;).replace(u&apos;七&apos;,&apos;7&apos;).replace(u&apos;八&apos;,&apos;8&apos;).replace(u&apos;九&apos;,&apos;9&apos;).replace(u&apos;零&apos;,&apos;0&apos;)</div><div class="line">    testline = testline.lower()</div><div class="line">    return testline</div><div class="line"></div><div class="line">def changeToWords(sentence):</div><div class="line">    global stopwords</div><div class="line">    out = translate(sentence)</div><div class="line">    jiebalistnew = []</div><div class="line">    jiebalist = jieba.lcut(out)</div><div class="line">    for item in jiebalist:</div><div class="line">        if item not in stopwords:#去除停用词</div><div class="line">            jiebalistnew = jiebalistnew + handlenum(item)</div><div class="line">    </div><div class="line">    if &apos;&apos; in jiebalistnew:</div><div class="line">        jiebalistnew.remove(&apos;&apos;) </div><div class="line">    if &apos; &apos; in jiebalistnew:</div><div class="line">        jiebalistnew.remove(&apos; &apos;)     </div><div class="line">    string = &apos; &apos;.join(jiebalistnew)</div><div class="line">#     return string,jiebalistnew</div><div class="line">    return string</div></pre></td></tr></table></figure>
<p>仔细看translate主要作用就是去除一些特殊字符，同时对大写数字进行转化，这个一个广告识别的预处理，因为好多广告要留下来号码什么的。</p>
<h3 id="抽取特征"><a href="#抽取特征" class="headerlink" title="抽取特征"></a>抽取特征</h3><p>抽取特征呢，主要是形成一个词典，然后把每句话对应到词典里的词，存在就是1，不存在就是0，通过这种方式把每句话转换成10100001这种向量。</p>
<h4 id="我们应该输入什么，输出的又是什么"><a href="#我们应该输入什么，输出的又是什么" class="headerlink" title="我们应该输入什么，输出的又是什么"></a>我们应该输入什么，输出的又是什么</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> #该类会统计每个词语的tf-idf权值</div><div class="line">transformer = TfidfTransformer()</div><div class="line">vectorizer = CountVectorizer(token_pattern=u&apos;(?u)\w+&apos;)</div><div class="line">#第一个fit_transform是计算tf-idf 第二个fit_transform是将文本转为词频矩阵</div><div class="line">count0 = vectorizer.fit_transform(inputList)</div><div class="line">tfidf = transformer.fit_transform(count0)</div></pre></td></tr></table></figure>
<p>看一下上边的代码，我们的输入是inputList，那么这个变量明显就是我们的一个个的句子了，这是list类型，每个元素是一个句子，如果是英文文本，这样直接输入就好了，但是中文要进行一个转换，参照英文的样式，用空格分隔开，所以输入是下边这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">inputList = [&apos;我 爱 中国&apos;,&apos;我 是 中国人&apos;]</div></pre></td></tr></table></figure></p>
<p>输出：</p>
<p>特征提取，输出的当然是特征了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">transformer = TfidfTransformer()</div><div class="line">vectorizer = CountVectorizer(token_pattern=u&apos;(?u)\w+&apos;)</div><div class="line">count0 = vectorizer.fit_transform(pos)</div><div class="line">tran = transformer.fit_transform(count0)</div><div class="line"></div><div class="line"></div><div class="line">print vectorizer.vocabulary_ #这个字典里边存储了我们的关键字，以关键词为key，然后后边的value是它在向量字典里边的位置索引</div><div class="line">names = vectorizer.get_feature_names() #这个就是我们的向量词典了</div><div class="line">print count0.toarray() #这个是将为本转换为了向量，比如[0,2,1,2]2呢代表出现了两次</div><div class="line"></div><div class="line"></div><div class="line">for item in names:</div><div class="line">    print item</div><div class="line">sumlist = list(count0.toarray().sum(axis=0))#这里呢是将所有的词以及出现的次数进行了加和，看看每个词一共出现了多少次，后边两行代码都是为了这个事</div><div class="line"></div><div class="line">a1 = np.array([names,sumlist])</div><div class="line">a1 = np.transpose(a1)</div><div class="line">df = DataFrame(a1,columns=[&apos;name&apos;,&apos;count&apos;])</div></pre></td></tr></table></figure>
<h4 id="token提取规则"><a href="#token提取规则" class="headerlink" title="token提取规则"></a>token提取规则</h4><p>这个说的是<code>token_pattern</code>这个参数，它决定了每个单独的特征是如何提取的，如果你不赋值，这个初始值是<code>&#39;(?u)\\b\\w\\w+\b&#39;</code>意思是，提取字符加空格，所以我们用空格来区分，但是这个有个坑，默认是提取两个以上的字符，这就意味着如果你的一些特征只有一个字符那么这个特征就被自动忽略了，因为我们已经有了停用词去除机制，所以这里尽量做个修改，<code>token_pattern=u&#39;(?u)\w+&#39;</code>这样写就能够提取一个的中文了，网上基本上都在说英文咋整，难道大家做的都是英文的文本分类….中文的表示心累…</p>
<h4 id="最大特征数"><a href="#最大特征数" class="headerlink" title="最大特征数"></a>最大特征数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vectorizer = CountVectorizer(token_pattern=u&apos;(?u)\w+&apos;，max_features=200)</div></pre></td></tr></table></figure>
<p>这个值可以和去除低频词是异曲同工，如果我们经过分析发现特征词有1000个，然后低频是300，这样直接设置这个值是700就好了，它会自动选取最高频的700个词作为特征</p>
<h3 id="训练模型以及使用模型"><a href="#训练模型以及使用模型" class="headerlink" title="训练模型以及使用模型"></a>训练模型以及使用模型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">pos = [u&apos;i&apos;,u&apos;中国/爱你 中国&apos;,u&apos;中国)爱谁 asf i&apos;,u&apos;我+爱你&apos;,u&apos;我+爱你&apos;]</div><div class="line"># pos = [&apos;this is a dog&apos;,&apos;the dog is cute,oh lovely dog&apos;,&apos;my dauter is smiling&apos;]</div><div class="line"># pos = [&apos;i love you&apos;, &apos;i hate you&apos;, &apos;i&apos;]</div><div class="line">#该类会统计每个词语的tf-idf权值</div><div class="line">transformer = TfidfTransformer()</div><div class="line">vectorizer = CountVectorizer(analyzer=&apos;word&apos;,token_pattern=u&apos;(?u)\w+&apos;)</div><div class="line"># u&apos;(?u)\\b\\w\\w+\\b&apos;</div><div class="line"># vectorizer = CountVectorizer()</div><div class="line">#第一个fit_transform是计算tf-idf 第二个fit_transform是将文本转为词频矩阵</div><div class="line">count0 = vectorizer.fit_transform(pos)</div><div class="line">tran = transformer.fit_transform(count0)</div><div class="line"></div><div class="line">x = weight</div><div class="line">y = np.concatenate((np.zeros(len(poscorpus)), np.ones(len(negcorpus))))</div><div class="line">    </div><div class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)</div><div class="line">    </div><div class="line">modelnew = MultinomialNB()</div><div class="line">modelnew.fit(x_train, y_train)</div><div class="line">scorenew = modelnew.score(x_test, y_test)</div><div class="line">print scorenew</div><div class="line">print &apos;donetest&apos;</div><div class="line"></div><div class="line"></div><div class="line">##必须要保存三个东西，一个是训练之后的模型，然后是</div><div class="line">joblib.dump(modelnew, &apos;bayes.pkl&apos;)</div><div class="line">joblib.dump(transformer, &apos;transformer&apos;)  # 保存分类器</div><div class="line">joblib.dump(vectorizer, &apos;vectorizer&apos;)  # 保存分类器</div><div class="line"></div><div class="line">print vectorizer.vocabulary_</div><div class="line">print count0.toarray()</div><div class="line"></div><div class="line">## 这里用于新数据的预测，我们需要训练好的模型，vec，tran这三个东西</div><div class="line">modelnew = joblib.load(&apos;bayes.pkl&apos;)</div><div class="line">transformer1 = joblib.load(&apos;transformer&apos;)</div><div class="line">vectorizer1 = joblib.load(&apos;vectorizer&apos;)</div><div class="line"></div><div class="line">CountVectorizer(vocabulary=vectorizer.vocabulary_,analyzer=&apos;word&apos;,token_pattern=u&apos;(?u)\w+&apos;) #注意这个会去除特殊字符</div><div class="line">count1 = vectorizer1.transform([u&apos;中国/爱你 中国&apos;])</div><div class="line">tran1 = transformer1.transform(count1)</div></pre></td></tr></table></figure>
<p>注意训练用<code>fit_transform</code>，而使用的时候我们用的是<code>transform</code></p>
<h3 id="模型的改进方法"><a href="#模型的改进方法" class="headerlink" title="模型的改进方法"></a>模型的改进方法</h3><blockquote>
<p>例如可以调节如下一些参数，观察它们对垃圾邮件过滤的实际效果的影响：</p>
</blockquote>
<ul>
<li><p>训练数据的大小</p>
</li>
<li><p>词典的大小</p>
</li>
<li><p>不同的机器学习模型，包括 GaussianNB，BernoulliNB，SVC</p>
</li>
<li><p>不同的 SVM 模型参数</p>
</li>
<li><p>删除无关紧要的词来改进词典 （例如手动删除）</p>
</li>
<li><p>采用其他特征模型 （寻找 td-idf）</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> sklearn </tag>
            
            <tag> 文本分类 </tag>
            
            <tag> 自然语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据科学-pandas]]></title>
      <url>/2018/02/28/2018/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6-pandas/</url>
      <content type="html"><![CDATA[<h4 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">In [28]: s1 = Series([1, 2, 3, 4, 5])</div><div class="line"></div><div class="line">In [29]: s1</div><div class="line">Out[29]:</div><div class="line">0    1</div><div class="line">1    2</div><div class="line">2    3</div><div class="line">3    4</div><div class="line">4    5</div><div class="line">dtype: int64</div><div class="line"></div><div class="line">In [30]: s2 = Series([1, 2, 3, 4, 5], index=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;])</div><div class="line"></div><div class="line">In [31]: s2</div><div class="line">Out[31]:</div><div class="line">a    1</div><div class="line">b    2</div><div class="line">c    3</div><div class="line">d    4</div><div class="line">e    5</div><div class="line">dtype: int64</div><div class="line"></div><div class="line">In [32]: s2.index.name = &apos;index&apos;</div><div class="line"></div><div class="line">In [33]: s2.index</div><div class="line">Out[33]: Index([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;], dtype=&apos;object&apos;, name=&apos;index&apos;)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h4><h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">#新建或者读取数据</div><div class="line"></div><div class="line">df1 = DataFrame(np.arange(9).reshape(3,3), colums=list(&apos;ABC&apos;), index = list(&apos;abc&apos;))</div><div class="line"></div><div class="line">df2 = pd.read_json(&quot;/Users/Hanxiaoyang/Titanic_data/Train.json&quot;) #读</div><div class="line">df = pd.read_csv(&quot;/Users/Hanxiaoyang/Titanic_data/Train.csv&quot;) #读</div><div class="line">import pandas as pd</div><div class="line"></div><div class="line"># JSON 文件</div><div class="line">pd.read_json</div><div class="line"></div><div class="line"># HTML 文件</div><div class="line">pd.read_html</div><div class="line"></div><div class="line"># 本地剪切板</div><div class="line">pd.read_clipboard</div><div class="line"></div><div class="line"># MS Excel 文件</div><div class="line">pd.read_excel</div><div class="line"></div><div class="line"># HDF5Format 文件</div><div class="line">pd.read_hdf    </div><div class="line"></div><div class="line"># Feather 格式</div><div class="line">pd.read_feather</div><div class="line"></div><div class="line">#Msgpack</div><div class="line">pd.read_msgpack</div><div class="line"></div><div class="line"># Stata</div><div class="line">pd.read_stata</div><div class="line"></div><div class="line"># SAS</div><div class="line">pd.read_sas     </div><div class="line"></div><div class="line"># Python Pickle 格式</div><div class="line">pd.read_pickle</div><div class="line"></div><div class="line"># SQL 数据库</div><div class="line">pd.read_sql</div><div class="line"></div><div class="line"># Google Big Query</div><div class="line">pd.read_gbq</div><div class="line"></div><div class="line">## 数据查看</div><div class="line">df.info()</div><div class="line">df.describe()</div><div class="line">df.head(10)</div><div class="line">df.info()</div><div class="line">df.describe()</div><div class="line">df.index</div><div class="line">df.columns</div><div class="line">len(df[df[&apos;Age&apos;] == 10].index)age=10的是多少行</div><div class="line"></div><div class="line"># 取数据</div><div class="line">df[0:3] #第一行到第三行</div><div class="line">df[&apos;Age&apos;][0:10] #pandas.core.series.Series Age这个列的第一行到第十行 </div><div class="line">df.Age[0:10] #Age这一列的前十个</div><div class="line">df[&apos;Age&apos;].mean() #平均值</div><div class="line">df[[&apos;Sex&apos;,&apos;Pclass&apos;,&apos;Age&apos;]] #显示多个列</div><div class="line">df[df.columns[0:2]] #显示多列</div><div class="line">df[df[&apos;Age&apos;]&gt;60][[&apos;Sex&apos;,&apos;Pclass&apos;,&apos;Age&apos;,&apos;Survived&apos;]] #大于60岁的</div><div class="line">df[df[&apos;Age&apos;].isnull()][[&apos;Sex&apos;, &apos;Pclass&apos;, &apos;Age&apos;]]#为空的</div><div class="line"></div><div class="line">df[&apos;Gender&apos;] = 4 #增加一列</div><div class="line">df[&apos;Gender&apos;] = df[&apos;Sex&apos;].map( &#123;&apos;female&apos;: 0, &apos;male&apos;: 1&#125; ).astype(int) #对应的把sex的female和male变换为0，1映射到对应的行</div><div class="line"></div><div class="line">df[&apos;FamilySize&apos;] = df[&apos;SibSp&apos;] + df[&apos;Parch&apos;] </div><div class="line">df[&apos;Age*Class&apos;] = df.FamilySize * df.Pclass  #构造新特征</div><div class="line"></div><div class="line">df = df.drop([&apos;Name&apos;, &apos;Sex&apos;, &apos;Ticket&apos;, &apos;Cabin&apos;, &apos;Embarked&apos;], axis=1)  #删除无用列</div><div class="line"></div><div class="line">df.loc[:,[&apos;Age&apos;,&apos;Pclass&apos;]] </div><div class="line">df.iloc[0:2,[0,2]] # 前边是行，后边是是列，loc必须用label，iloc可以用数字</div><div class="line">注意这里iloc和loc代表的是行</div><div class="line"></div><div class="line">known_age = age_df[age_df.Age.notnull()].as_matrix()</div><div class="line">unknown_age = age_df[age_df.Age.isnull()].as_matrix()</div><div class="line"></div><div class="line">import pylab as P  </div><div class="line">df[&apos;Age&apos;].dropna().hist(bins=16, range=(0,80), alpha = .5)  </div><div class="line">P.show() #画直方图</div><div class="line">##</div></pre></td></tr></table></figure>
<h5 id="修改列名称"><a href="#修改列名称" class="headerlink" title="修改列名称"></a>修改列名称</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">问题：</div><div class="line">有一个DataFrame，列名为：[&apos;$a&apos;, &apos;$b&apos;, &apos;$c&apos;, &apos;$d&apos;, &apos;$e&apos;]</div><div class="line">现需要改为：[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]</div><div class="line">有何办法？</div><div class="line"></div><div class="line">import pandas as pd</div><div class="line">df = pd.DataFrame(&#123;&apos;$a&apos;: [1], &apos;$b&apos;: [1], &apos;$c&apos;: [1], &apos;$d&apos;: [1], &apos;$e&apos;: [1]&#125;)</div><div class="line">解决：</div><div class="line"></div><div class="line">方式一：columns属性</div><div class="line"># ①暴力</div><div class="line">df.columns = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]</div><div class="line"></div><div class="line"># ②修改</div><div class="line">df.columns = df.columns.str.strip(&apos;$&apos;)</div><div class="line"></div><div class="line"># ③修改</div><div class="line">df.columns = df.columns.map(lambda x:x[1:])</div><div class="line">方式二：rename方法、columns参数</div><div class="line"># ④暴力（好处：也可只修改特定的列）</div><div class="line">df.rename(columns=(&apos;$a&apos;: &apos;a&apos;, &apos;$b&apos;: &apos;b&apos;, &apos;$c&apos;: &apos;c&apos;, &apos;$d&apos;: &apos;d&apos;, &apos;$e&apos;: &apos;e&apos;&#125;, inplace=True)</div></pre></td></tr></table></figure>
<h5 id="赋值替换"><a href="#赋值替换" class="headerlink" title="赋值替换"></a>赋值替换</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data[&quot;D&quot;] = data[&apos;class&apos;] #将class的给D</div><div class="line">data[&apos;D&apos;].replace([&apos;C1&apos;,&apos;C2&apos;], [0,1], inplace = True) #将class里边的C1和C2替换为0，1</div></pre></td></tr></table></figure>
<h5 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">train_data = df.values  #pandas转numpy数组</div><div class="line"></div><div class="line">Age = df[&apos;Age&apos;]</div><div class="line">Age = np.array(Age)</div><div class="line">Age = Age.reshape(Age.size,1) #Serise转numpy数组</div></pre></td></tr></table></figure>
<h5 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">data_train.Survived.value_counts().plot(kind=&apos;bar&apos;)# 柱状图</div><div class="line"></div><div class="line">plt.scatter(data_train.Survived, data_train.Age)# 散列</div><div class="line"></div><div class="line">data_train.Age[data_train.Pclass == 1].plot(kind=&apos;kde&apos;)   </div><div class="line">data_train.Age[data_train.Pclass == 2].plot(kind=&apos;kde&apos;)</div><div class="line">data_train.Age[data_train.Pclass == 3].plot(kind=&apos;kde&apos;)# 密度图</div><div class="line"></div><div class="line">Survived_0 = data_train.Pclass[data_train.Survived == 0].value_counts()</div><div class="line">Survived_1 = data_train.Pclass[data_train.Survived == 1].value_counts()</div><div class="line">df=pd.DataFrame(&#123;u&apos;获救&apos;:Survived_1, u&apos;未获救&apos;:Survived_0&#125;)</div><div class="line">df.plot(kind=&apos;bar&apos;, stacked=True)#柱状图</div></pre></td></tr></table></figure>
<h5 id="将dataformat的数据写入csv"><a href="#将dataformat的数据写入csv" class="headerlink" title="将dataformat的数据写入csv"></a>将dataformat的数据写入csv</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.to_csv(&apos;foo.csv&apos;)</div></pre></td></tr></table></figure>
<h5 id="将数据库的数据写入csv"><a href="#将数据库的数据写入csv" class="headerlink" title="将数据库的数据写入csv"></a>将数据库的数据写入csv</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import csv</div><div class="line"></div><div class="line"># 文件头，一般就是数据名</div><div class="line">fileHeader = [&quot;name&quot;, &quot;score&quot;]</div><div class="line"></div><div class="line"># 假设我们要写入的是以下两行数据</div><div class="line">d1 = [&quot;Wang&quot;, &quot;100&quot;]</div><div class="line">d2 = [&quot;Li&quot;, &quot;80&quot;]</div><div class="line"></div><div class="line"># 写入数据</div><div class="line"></div><div class="line">csvFile = open(&quot;instance.csv&quot;, &quot;w&quot;)</div><div class="line">writer = csv.writer(csvFile)</div><div class="line"></div><div class="line"># 写入的内容都是以列表的形式传入函数</div><div class="line">writer.writerow(fileHeader)</div><div class="line">writer.writerow(d1)</div><div class="line">writer.writerow(d1)</div><div class="line"></div><div class="line">csvFile.close()</div></pre></td></tr></table></figure>
<h4 id="统计信息"><a href="#统计信息" class="headerlink" title="统计信息"></a>统计信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- `count` 元素值的数量；</div><div class="line">- `mean` 平均值；</div><div class="line">- `std` 标准差；</div><div class="line">- `min` 最小值；</div><div class="line">- `25%` 下四分位数；</div><div class="line">- `50%` 中位数；</div><div class="line">- `75%` 上四分位数；</div><div class="line">- `max` 最大值；</div></pre></td></tr></table></figure>
<h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><p>这些数据集有相同的列</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pd.concat([df1, df2])</div><div class="line">pd.merge(df1, df2)</div></pre></td></tr></table></figure>
<h4 id="某个user-id的学习时间总和"><a href="#某个user-id的学习时间总和" class="headerlink" title="某个user_id的学习时间总和"></a>某个user_id的学习时间总和</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">In [471]: df[df[&apos;user_id&apos;] == 5348][&apos;minutes&apos;]</div><div class="line">Out[471]:</div><div class="line">0     9</div><div class="line">2    45</div><div class="line">Name: minutes, dtype: int64</div><div class="line"></div><div class="line">In [472]: df[df[&apos;user_id&apos;] == 5348]</div><div class="line">Out[472]:</div><div class="line">   course  minutes  user_id</div><div class="line">0      12        9     5348</div><div class="line">2      23       45     5348</div><div class="line"></div><div class="line">In [475]: df[df[&apos;user_id&apos;] == 5348][&apos;minutes&apos;]</div><div class="line">Out[475]:</div><div class="line">0     9</div><div class="line">2    45</div><div class="line">Name: minutes, dtype: int64</div><div class="line"></div><div class="line">In [476]: df[df[&apos;user_id&apos;] == 5348][&apos;minutes&apos;].sum()</div><div class="line">Out[476]: 54</div></pre></td></tr></table></figure>
<p>使用groupby</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">In [471]: df[df[&apos;user_id&apos;] == 5348][&apos;minutes&apos;]</div><div class="line">Out[471]:</div><div class="line">0     9</div><div class="line">2    45</div><div class="line">Name: minutes, dtype: int64</div><div class="line"></div><div class="line">In [472]: df[df[&apos;user_id&apos;] == 5348]</div><div class="line">Out[472]:</div><div class="line">   course  minutes  user_id</div><div class="line">0      12        9     5348</div><div class="line">2      23       45     5348</div><div class="line"></div><div class="line">In [475]: df[df[&apos;user_id&apos;] == 5348][&apos;minutes&apos;]</div><div class="line">Out[475]:</div><div class="line">0     9</div><div class="line">2    45</div><div class="line">Name: minutes, dtype: int64</div><div class="line"></div><div class="line">In [476]: df[df[&apos;user_id&apos;] == 5348][&apos;minutes&apos;].sum()</div><div class="line">Out[476]: 54</div></pre></td></tr></table></figure>
<h3 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h3><h4 id="查找缺失值"><a href="#查找缺失值" class="headerlink" title="查找缺失值"></a>查找缺失值</h4><p>查找缺失值，我们依旧可以使用 Pandas 进行处理。Pandas 中，缺失数据一般采用NaN标记NaN 代表 Not a Number。特别地，在时间序列里，时间戳的丢失采用 NaT 标记</p>
<p>Pandas 用于检测缺失值主要用到两个方法，分别是：isnull() 和 notnull()，故名思意就是「是缺失值」和「不是缺失值」。默认会返回布尔值用于判断</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(df.head(10).isnull())</div><div class="line">print(df.head(10).notnull())</div></pre></td></tr></table></figure>
<p>关于缺失值处理，主要有两种处理手段：删除缺失值所在的行或列或填充缺失值</p>
<h4 id="处理缺失值"><a href="#处理缺失值" class="headerlink" title="处理缺失值"></a>处理缺失值</h4><p>删除缺失值是最简单直接的办法之一。它适用于三种情况：</p>
<ul>
<li><p>缺失值少，对数据集的影响可以忽略不计。这句话的意思应该很好理解。比如一个数万行的数据集，恰好有某几行缺失了几个特征值。缺失的数据行远远小于全部数据的数量，且删除这几行之后，对原数据集的影响可以忽略。这时候，直接删除缺失值所在的行是最好的。</p>
</li>
<li><p>缺失数据量大，已无法挽救。举个例子，一个数据集有1 万行，存在 10 个特征列。其中某一项特征所在的列存在 9000 个空值。这也就表明该列存在的意义已经不大了。所以也需要删除数据。</p>
</li>
<li><p>该缺失值无法被填充。这种情况也很常见。就拿我们上面一直在用的 test_file.csv 数据集距离。该数据集实际为洛杉矶人口普查数据。我们可以看到数据集中有一列为 Zip Code，也就是邮编。邮编是客观存在的，也是不能随意更改的。如果某几项邮编缺失，你是无法随意通过一些数值来填充邮编。所以，对应这样的数据行已经没有意义，选择直接删除往往是最好的。<br>删除缺失值所在的列或行非常简单，使用Pandas提供的 dropna() 方法。dropna() 方法可以将有缺失值的行或列全部移除。当然，你可以使用 axis=0 参数指定行，或 axis=1 参数指定列</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import pandas as pd</div><div class="line"></div><div class="line">df = pd.read_csv(&quot;test_file_nan.csv&quot;)</div><div class="line"></div><div class="line">print(df.dropna(axis=0)) #这个会删除存在空值的行</div><div class="line">print(df.dropna(axis=1)) #这个会删除存在空值的列</div></pre></td></tr></table></figure>
<h4 id="填充缺失值"><a href="#填充缺失值" class="headerlink" title="填充缺失值"></a>填充缺失值</h4><p>除了删除缺失值，对缺失值处理的另外一种方法就是填充缺失值。如果你第一次接触缺失值处理，你可能会认为填充缺失值的处理好于直接删除缺失值。其实并不一定，原因在于填充缺失值会直接改变原有数据集，这可能会影响后续预测分析的结果。所以，使用填充缺失值时一定要更加谨慎。</p>
<p>一般情况下，填充缺失值有三种方法。</p>
<h5 id="手动填充"><a href="#手动填充" class="headerlink" title="手动填充"></a>手动填充</h5><p>手动填充虽然是笨办法，但往往是效果最好的方法。手动填充非常适合于一种情形，那就是数据可以被人为有效确定。举个例子：上面的洛杉矶人口普查数据表中，第一列为邮编，它用于标记不同的地区。如果邮编有几项数据缺失，那么通过手动筛选再填充邮编就是最适合的方法。原因在于，邮编和其他数据不一样，如果它不存在或不正确，就直接导致这行数据无效，甚至影响到其他数据。手动填充，充分展现了人的灵活性，但同样是一个费时费力的办法。</p>
<h5 id="临近填充"><a href="#临近填充" class="headerlink" title="临近填充"></a>临近填充</h5><p> 临近填充，故名思意就是采用与缺失值相邻的数据进行填充缺失值的方法。临近填充比较适合于零散的不确定数据。零散，指的是不会连续缺失数十个或上百个数据值。如果连续缺失的值太多，你用临近填充将其变为同一数据值，这对数据集整体的影响可想而知。不确定数据，就是通过视觉观察，无法发现相邻数据之间有什么联系，前后数据时大时小，无法被人为确定或找出规律。</p>
<p>Pandas 提供了用于临近填充的fillna()方法。该方法的使用示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import pandas as pd</div><div class="line"></div><div class="line">df = pd.read_csv(&quot;test_file_nan.csv&quot;)</div><div class="line"></div><div class="line">print(df.head(10).fillna(method=&apos;pad&apos;))</div></pre></td></tr></table></figure>
<p>我们可以对照缺失值数据，看到其被前面的临近值进行了填充。</p>
<p>我们也可以更换 method=’bfill’ 参数，使用后面的临近值进行填充。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(df.head(10).fillna(method=&apos;bfill&apos;))</div></pre></td></tr></table></figure>
<p>这里因为最后一项为缺失数据，所以有一部分缺失值无法被有效填充。</p>
<p>这里你也注意到，我们的数据其实有 200 多行，第三列的 4-9 行应该能被填充，但为什么还是 NaN ？这是因为，fillna()方法在填充时并不会影响原有数据集。</p>
<p>除了临近填充，有事我们还会用mean()进行平均值填充。</p>
<h5 id="3-插值填充"><a href="#3-插值填充" class="headerlink" title="3. 插值填充"></a>3. 插值填充</h5><p>插值填充就是采用数学的方法对数据进行插值。举个例子，有一列数据为 [2011, 2012, 2013, 缺失值, 缺失值, 2016, 2017] 。这里，无论你采用向前还是向后填充，其实都不是最好的。你可以发现数据是一个等差数列，缺失值应该分别为[2014, 2015]，这也就是一个线性插值的过程。</p>
<p>Pandas 提供了相关插值方法，通过interpolate()方法实现。默认为参数为线性插值，即 method=’linear’。举例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import pandas as pd</div><div class="line"></div><div class="line">df = pd.read_csv(&quot;test_file_nan.csv&quot;)</div><div class="line"></div><div class="line">print(df.interpolate().head(10))</div></pre></td></tr></table></figure>
<p>注意线性插值结果与前面临近插值结果的区别，第一列明显要好很多。</p>
<p>填充缺失值<br>除了删除缺失值，对缺失值处理的另外一种方法就是填充缺失值。如果你第一次接触缺失值处理，你可能会认为填充缺失值的处理好于直接删除缺失值。其实并不一定，原因在于填充缺失值会直接改变原有数据集，这可能会影响后续预测分析的结果。所以，使用填充缺失值时一定要更加谨慎。</p>
<p>一般情况下，填充缺失值有三种方法。</p>
<ol>
<li><p>手动填充。手动填充虽然是笨办法，但往往是效果最好的方法。手动填充非常适合于一种情形，那就是数据可以被人为有效确定。举个例子：上面的洛杉矶人口普查数据表中，第一列为邮编，它用于标记不同的地区。如果邮编有几项数据缺失，那么通过手动筛选再填充邮编就是最适合的方法。原因在于，邮编和其他数据不一样，如果它不存在或不正确，就直接导致这行数据无效，甚至影响到其他数据。手动填充，充分展现了人的灵活性，但同样是一个费时费力的办法。</p>
</li>
<li><p>临近填充。 临近填充，故名思意就是采用与缺失值相邻的数据进行填充缺失值的方法。临近填充比较适合于零散的不确定数据。零散，指的是不会连续缺失数十个或上百个数据值。如果连续缺失的值太多，你用临近填充将其变为同一数据值，这对数据集整体的影响可想而知。不确定数据，就是通过视觉观察，无法发现相邻数据之间有什么联系，前后数据时大时小，无法被人为确定或找出规律。</p>
</li>
</ol>
<p>Pandas 提供了用于临近填充的fillna()方法。该方法的使用示例如下：</p>
<p>import pandas as pd</p>
<p>df = pd.read_csv(“test_file_nan.csv”)</p>
<p>print(df.head(10).fillna(method=’pad’))<br>我们可以对照缺失值数据，看到其被前面的临近值进行了填充。</p>
<p>我们也可以更换 method=’bfill’ 参数，使用后面的临近值进行填充。</p>
<p>print(df.head(10).fillna(method=’bfill’))<br>这里因为最后一项为缺失数据，所以有一部分缺失值无法被有效填充。</p>
<p>这里你也注意到，我们的数据其实有 200 多行，第三列的 4-9 行应该能被填充，但为什么还是 NaN ？这是因为，fillna()方法在填充时并不会影响原有数据集。</p>
<p>除了临近填充，有事我们还会用mean()进行平均值填充。</p>
<ol>
<li>插值填充。插值填充就是采用数学的方法对数据进行插值。举个例子，有一列数据为 [2011, 2012, 2013, 缺失值, 缺失值, 2016, 2017] 。这里，无论你采用向前还是向后填充，其实都不是最好的。你可以发现数据是一个等差数列，缺失值应该分别为[2014, 2015]，这也就是一个线性插值的过程。</li>
</ol>
<p>Pandas 提供了相关插值方法，通过interpolate()方法实现。默认为参数为线性插值，即 method=’linear’。举例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import pandas as pd</div><div class="line"></div><div class="line">df = pd.read_csv(&quot;test_file_nan.csv&quot;)</div><div class="line"></div><div class="line">print(df.interpolate().head(10))</div></pre></td></tr></table></figure>
<p>注意线性插值结果与前面临近插值结果的区别，第一列明显要好很多。</p>
<h4 id="独热编码"><a href="#独热编码" class="headerlink" title="独热编码"></a>独热编码</h4><p>在对数据的预处理过程中，我们会遇到有一些特征列中的样本并不是连续存在的，而是以分类形式存在的情况。例如，某一装置的状态有三种情况，分别为：正常、机械故障、电路故障。如果我们要将这些数据运用到后续的预测分析中，就需要对文字状态进行转换。一般情况下，可以用 0 表示正常，1 代表机械故障，2 代表电路故障。</p>
<p>但是这种映射方式，往往会让学习器认为 2 代表电路故障比 1 代表机械故障更「大」，从而影响模型分析结果，这肯定是不行的。</p>
<p>所以，对于以分类形式存在的特征变量，我们会采用一种叫独热编码（One-Hot Encoding）的方式将其转换成二元特征编码，进一步对特征进行了稀疏处理。独热编码采用位状态寄存器来对个状态进行编码，每个状态都由他独立的寄存器位，并且在任意时候只有一位有效。举例如下：</p>
<p>Pandas 提供了更简单的方法来处理以分类形式的变量。我们可以通过 get_dummies() 将以分类形式存在的变量转换为独热编码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import pandas as pd</div><div class="line"></div><div class="line">df = pd.read_csv(&quot;one_hot_demo.csv&quot;, header=0)</div></pre></td></tr></table></figure></p>
<p>在此演示文件中，status 共有 none, electric, engine三类数值。color 有red 和 green两类。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">oneHot = pd.get_dummies(df[[&apos;status&apos;, &apos;color&apos;]])</div><div class="line">oneHot.head(10)</div></pre></td></tr></table></figure>
<p>我们可以看到，字符串被进行了独热编码，特征也从原先的 2 列拓充为 5 列。所以，独热编码的好处多多</p>
<h4 id="重复值处理"><a href="#重复值处理" class="headerlink" title="重复值处理"></a>重复值处理</h4><p>数据集中包含大量的重复数据也是数据预处理会经常面临的状况。接下来，我们来看一看 Pandas 提供了哪些用于处理重复数据的方法。</p>
<p>pandas.DataFrame.duplicated() 可以用来标识重复数据，数据集中重复数据行会返回布尔类型 True。上面的独热编码示例数据集中存在大量重复数据，我们就拿它举例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import pandas as pd</div><div class="line"></div><div class="line">df = pd.read_csv(&quot;one_hot_demo.csv&quot;, header=0)</div></pre></td></tr></table></figure>
<p>print(pd.DataFrame.duplicated(df).head(10))<br>我们可以看到，前 10 行数据中，就有 5 行为重复数据。当然这个是完整数据集的比对结果，这里只是显示了前 10 行。</p>
<p>pandas.DataFrame.drop_duplicates()可以返回一个去重后的数据集。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import pandas as pd</div><div class="line"></div><div class="line">df = pd.read_csv(&quot;one_hot_demo.csv&quot;, header=0)</div><div class="line"></div><div class="line">print(pd.DataFrame.drop_duplicates(df))</div></pre></td></tr></table></figure></p>
<p>去重后的数据集如下，仅有 6 行非重复项。</p>
<p>异常值检测<br>除了缺失值与重复值，在处理数值型数据时，我们还容易遇到一种状况，那就是异常值。异常值检测是处理数值型数据过程中必须重视的一项工作。那些在收集、录入过程中产生的异常数据，如果不及时剔除，很可能对后续的预测分析带来严重不良影响。</p>
<p>应用数学和统计学领域对异常值检测研究比较深入，目前存在的检测方法也非常多。大致来讲，有从概率方法入手的一元正态分布及多元高斯方法，还有通过矩阵分解和神经网络进行异常值检测的相关方法。</p>
<p>在这里，我们介绍一种简单直观的异常值检测方法，那就是通过箱形图（箱线图）来识别异常数据。箱形图是用来观测数据集分布的一种图形类型。箱形图中，从上到下依次有 6 个数据节点，分别是上界、上四分位、均值、中位数、下四分位、下界。而那些超过上界的值就会被标记为离群点，也就是异常数据。</p>
<p>下面我们使用上一节提到的洛杉矶人口数据进行箱形图绘制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">from matplotlib import pyplot as plt</div><div class="line">import pandas as pd</div><div class="line"></div><div class="line">data = pd.read_csv(&quot;test_file.csv&quot;, header=0)</div><div class="line"></div><div class="line">Total_Population = data[&quot;Total Population&quot;]</div><div class="line"></div><div class="line">plt.boxplot(Total_Population)</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<p>我们可以将离群点标记并导出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">from matplotlib import pyplot as plt</div><div class="line">import pandas as pd</div><div class="line"></div><div class="line">data = pd.read_csv(&quot;test_file.csv&quot;, header=0)</div><div class="line"></div><div class="line">Total_Population = data[&quot;Total Population&quot;]</div><div class="line"></div><div class="line">P = plt.boxplot(Total_Population)</div><div class="line"></div><div class="line">outlier = P[&apos;fliers&apos;][0].get_ydata()</div><div class="line"></div><div class="line">print(outlier)</div></pre></td></tr></table></figure>
<p>其实，DataFrame 带有 boxplot() 方法可以很方便地将所有列数据的箱形图画在一张图中对比：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">from matplotlib import pyplot as plt</div><div class="line">import pandas as pd</div><div class="line"></div><div class="line">data = pd.read_csv(&quot;test_file.csv&quot;, header=0)</div><div class="line"></div><div class="line">data.boxplot()</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<h3 id="异常值"><a href="#异常值" class="headerlink" title="异常值"></a>异常值</h3><p>在前面的实验中我们学习过四分位数。四分位数，是指将一组数据值按大小排序后分成四等分，每一部分包含 1/4 的数据，这种划分的分割点就是四分位数。其中第1部分和第2部分的分割点称为第1分位数 Q_1<br>, 也被称为第25百分位数（上四分位），第3部分和第4部分的分割点称为第3四分位数 Q_3​​ ，也被称为第75百分位数（下四分位）。而第二部分和第三部分的分割点是第2四分数，也就是中位数。其中四分位距 IQRIQR 是指第三四分位数和第一分四分位数的差，也就是 IQR = Q_3 - Q_1 IQR=Q3−Q1。所有小于 Q_1 - 1.5IQR 或 大于 Q_3 + 1.5IQR Q3​​ +1.5IQR 的数据项被称为异常值</p>
<p>异常值监测的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">import numpy as np</div><div class="line"></div><div class="line">def find_outlier(data):</div><div class="line">    outlier = []</div><div class="line">    a = np.array(data)</div><div class="line">    # 完成剩余代码</div><div class="line">    Q1 = np.percentile(a,25)</div><div class="line">    Q3 = np.percentile(a,75)</div><div class="line">    IQR = Q3 - Q1</div><div class="line"></div><div class="line">    condition = (a &lt; Q1 - 1.5*IQR)</div><div class="line">    ca = np.extract(condition, a)</div><div class="line">    b = np.extract(condition, a)</div><div class="line">    conditionb = (a &gt; Q3 +1.5*IQR)</div><div class="line">    c = np.extract(conditionb, a)</div><div class="line">    </div><div class="line">    outlier = np.concatenate((b,c))</div><div class="line"></div><div class="line">    return outlier</div></pre></td></tr></table></figure>
<p>Dx5Qup71pt</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据挖掘 </tag>
            
            <tag> pandas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据科学--绘图--matplotlib+Seaborn+Bokeh]]></title>
      <url>/2018/02/28/2018/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6-matplotlib/</url>
      <content type="html"><![CDATA[<p>matplotlib 是面向对象的绘图工具包，绘制的图形中每一个元素都是一个对象，比如线条，文字，刻度等信息，可以通过修改这些对象的属性，从而改变绘图样式。</p>
<p>matplotlib 中主要的绘图对象列表如下：<br>&gt;</p>
<ul>
<li>Figure 对象，可以想象为一张画布；</li>
<li>Axes 对象，字面理解为坐标轴（因为每一个 Axes 都有一套 X Y轴坐标系，绘制图形时基于此坐标系绘制。) 也可以认为是子图，在一个 Figure 对象中可以包含多个 Axes 对象，也就是说一张画布可以包含多个子图；可以通过 plt.gcf() 和 plt.gca() 分别获取当前用于绘图的 Figure 和 Axes 对象</li>
<li>Line2D 对象，代表线条；</li>
<li>Text 对象，代表了文字，比如一张子图需要标题，就可以使用一个 Text 对象；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fig.add_subplot(2, 2, 4）#意思是，添加一个坐标体系，两行两列，然后添加到第四个位置上</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line">fig1 = plt.figure()</div><div class="line"></div><div class="line">ax1 = fig1.add_subplot(2,2,1) #2行2列，我是第1个</div><div class="line">ax1.plot(np.random.randn(150).cumsum(), &apos;k--&apos;) #</div><div class="line"></div><div class="line">ax2 = fig1.add_subplot(2,2,2) #2行2列，我是第2个</div><div class="line">ax2.hist(np.random.randn(100), bins=20, color=&apos;k&apos;)</div><div class="line"></div><div class="line">ax3 = fig1.add_subplot(2,2,3) #2行2列，我是第3个</div><div class="line">ax3.scatter(np.arange(30), np.arange(30) + 3 * np.random.randn(30)) #散点</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p>其他的一些设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">import numpy as np                                                               </div><div class="line">import matplotlib.pyplot as plt                                                                                                                                 </div><div class="line"></div><div class="line">fig = plt.figure()                                                               </div><div class="line">ax = fig.add_subplot(1,1,1)                                                      </div><div class="line"></div><div class="line"># 设置标题</div><div class="line">ax.set_title(&quot;Axes Example&quot;)</div><div class="line"></div><div class="line">major_ticks = np.arange(0, 101, 20)                                              </div><div class="line">minor_ticks = np.arange(0, 101, 5)                                               </div><div class="line"></div><div class="line"># 设置刻度</div><div class="line">ax.set_xticks(major_ticks)                                                       </div><div class="line">ax.set_xticks(minor_ticks, minor=True)                                           </div><div class="line">ax.set_yticks(major_ticks)                                                       </div><div class="line">ax.set_yticks(minor_ticks, minor=True)                                         </div><div class="line"></div><div class="line"># 设置 X, Y 轴 标签</div><div class="line">ax.set_xlabel(&quot;X axis&quot;)</div><div class="line">ax.set_ylabel(&quot;Y axis&quot;)</div><div class="line"></div><div class="line"># 设置网格                                                                       </div><div class="line">ax.grid(which=&apos;minor&apos;, alpha=0.2)                                                </div><div class="line">ax.grid(which=&apos;major&apos;, alpha=0.5)</div><div class="line"></div><div class="line"># 添加文字</div><div class="line">ax.text(42.5, 50, &quot;shiyanlou&quot;)</div></pre></td></tr></table></figure>
<h3 id="常用图形"><a href="#常用图形" class="headerlink" title="常用图形"></a>常用图形</h3><h4 id="线性图"><a href="#线性图" class="headerlink" title="线性图"></a>线性图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line">fig = plt.figure()                                                               </div><div class="line">ax = fig.add_subplot(1,1,1)</div><div class="line"></div><div class="line">x = np.random.randn(100)</div><div class="line">y = np.random.randn(100)</div><div class="line"></div><div class="line">ax.plot(x, y)</div><div class="line">fig.show()</div></pre></td></tr></table></figure>
<h4 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">data = np.random.normal(0, 20, 1000)</div><div class="line">bins = np.arange(-100, 100, 5)</div><div class="line">ax.hist(data, bins=bins)</div><div class="line">fig.show()</div></pre></td></tr></table></figure>
<p>上面的代码首先通过 np.random.normal 方法，在 0 到 20 的范围产生 1000 个符合正态分布的数据值，然后通过 np.arange(-100, 100, 5) 创建了 X 轴的区间刻度</p>
<h4 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h4><p>散点图，将所有的数据值在图形中绘制成点，这样有多少数据值在图形中就会有多少个点。通过这些数据点可以看出数据值的分布模式，比如是否有聚类模式，或者相关关系或者发现离群点。在 matplotlib 中可以通过 Axes.scatter 绘制散点图：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">x = np.arange(1, 101)</div><div class="line">y = 20 + 3 * x + np.random.normal(0, 60, 100)</div><div class="line">ax.scatter(x, y)</div><div class="line">fig.show()</div></pre></td></tr></table></figure>
<p>为了模拟散点图，我们先通过 np.arange(1, 101) 创建了 100 个数据值，接着基于此创建了 100 个 Y 轴数据，可以看到这里两组数据值之间有相关关系，因为是基于线性关系然后加上随机数生成的，绘制的散点图也证明了这点（图形向上倾斜）</p>
<h4 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h4><p>箱线图可以看出数据的分散程度，异常值等信息，箱线图根据一组数据的以下 5 个统计值进行绘制：</p>
<p>最小值；<br>第1四分位数；<br>中位数；<br>第3四分位数；<br>最大值；<br>其中四分位数，是指将一组数据值按大小排序后分成四等分，每一部分包含 1/4 的数据，这种划分的分割点就是四分位数。其中第1部分和第2部分的分割点称为第1分位数 Q_1Q<br>​1<br>​​ , 也被称为第25百分位数，第3部分和第4部分的分割点称为第3四分位数 Q_3Q<br>​3<br>​​ ，也被称为第75百分位数。而第二部分和第三部分的分割点是第2四分数，也就是中位数。其中四分位距 IQRIQR 是指第三四分位数和第一分四分位数的差，也就是 IQR = Q_3 - Q_1 IQR=Q<br>​3<br>​​ −Q<br>​1<br>​​ 。四分位距反映了中间 50% 数据的离散程度，数值越小代表数据越集中，越大代表数据越分散。</p>
<p>在 matplotlib 中可以使用 Axes.boxplot 方法绘制箱线图：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 产生 50 个小于 100 的随机数</div><div class="line">spread = np.random.rand(50) * 100</div><div class="line"># 产生 25 个值为 50 的数据</div><div class="line">center = np.ones(25) * 50</div><div class="line"># 异常值</div><div class="line"></div><div class="line">outlier_high = np.random.rand(10) * 100 + 100</div><div class="line">outlier_low = np.random.rand(10) * -100</div><div class="line">data = np.concatenate((spread, center, outlier_high, outlier_low), 0)</div><div class="line">ax.boxplot(data)</div><div class="line">fig.show()</div></pre></td></tr></table></figure>
<p>上面的代码中，我们特意创建了 data 数据，可以推断出该数据的中位数是 50，还有一些其他异常值</p>
<h3 id="Seaborn"><a href="#Seaborn" class="headerlink" title="Seaborn"></a>Seaborn</h3><h3 id="Bokeh"><a href="#Bokeh" class="headerlink" title="Bokeh"></a>Bokeh</h3>]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[kaggle入门随笔]]></title>
      <url>/2018/02/26/2018/kaggle%E5%85%A5%E9%97%A8%E9%9A%8F%E7%AC%94/</url>
      <content type="html"><![CDATA[<h3 id="初级问题"><a href="#初级问题" class="headerlink" title="初级问题"></a>初级问题</h3><ul>
<li>在哪里编码<ul>
<li>无所谓，但是kaggle提供了kernal，可以直接使用其硬件资源</li>
</ul>
</li>
<li>在哪里提交，提交的是什么<ul>
<li>在问题页面的submit，然后提交的是最后你预测的结果，而不是代码<a id="more"></a>
<h3 id="一般流程"><a href="#一般流程" class="headerlink" title="一般流程"></a>一般流程</h3></li>
</ul>
</li>
</ul>
<p>数据集–&gt;认识数据–&gt;数据预处理–&gt;构建特征工程–&gt;选择算法–&gt;生成模型</p>
<h3 id="工具集"><a href="#工具集" class="headerlink" title="工具集"></a>工具集</h3><ul>
<li>sklearn 机器学习算法</li>
<li>pandas 数据处理</li>
<li>numpy 数据处理</li>
<li>matplotlib 作图</li>
<li>Seaborn 作图</li>
</ul>
<h4 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h4><h3 id="异常值监测-Outlier-detection"><a href="#异常值监测-Outlier-detection" class="headerlink" title="异常值监测(Outlier detection)"></a>异常值监测(Outlier detection)</h3><p>找到异常值，然后舍弃这些数据</p>
<h3 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h3><p>某些值可能和缺失值存在明显的相关性，所以我们可以通过这些值来推断缺失的值</p>
<h3 id="特征分析-Feature-analysis"><a href="#特征分析-Feature-analysis" class="headerlink" title="特征分析(Feature analysis)"></a>特征分析(Feature analysis)</h3><h3 id="算法比较"><a href="#算法比较" class="headerlink" title="算法比较"></a>算法比较</h3><p>好多算法都生成模型，然后来测一下这个值是多少，比较一下用哪个</p>
<h3 id="交叉验证-cross-validation"><a href="#交叉验证-cross-validation" class="headerlink" title="交叉验证(cross validation)"></a>交叉验证(cross validation)</h3><h3 id="模型融合-Combining-models"><a href="#模型融合-Combining-models" class="headerlink" title="模型融合(Combining models)"></a>模型融合(Combining models)</h3><h3 id="用到的新函数"><a href="#用到的新函数" class="headerlink" title="用到的新函数"></a>用到的新函数</h3><p>collections模块<br>Counter 统计关键字计数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">In [3]: collections.Counter([&apos;a&apos;,&apos;b&apos;,&apos;b&apos;,&apos;c&apos;,&apos;c&apos;,&apos;c&apos;])</div><div class="line">Out[3]: Counter(&#123;&apos;c&apos;: 3, &apos;b&apos;: 2, &apos;a&apos;: 1&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="常用单词"><a href="#常用单词" class="headerlink" title="常用单词"></a>常用单词</h3><p>gaussian distribution – 高斯分布<br>peak corresponding – 峰值<br>cross validation- 交叉验证</p>
]]></content>
      
        
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> kaggle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xcode证书相关]]></title>
      <url>/2018/02/24/2018/xcode%E8%AF%81%E4%B9%A6%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<p>1.如果你的profile文件始终找不到证书，但是这个证书明明在你的证书里边，这个时候查看全部证书，可能存在重名的证书<br><a id="more"></a><br>2.证书从网站上下载是不好使的，因为没有私钥，需要证书的创建者去给你导出一个p12，或者拥有p12证书的人给你导出一个p12，记得要带着里边的钥匙<br>3.appid是决定你的app是否唯一的东西，证书是决定的是哪台电脑有签名的能力，profile文件在创建的时候需要绑定id，证书，和设备id，它决定，这个电脑上能够签名哪个app，然后签名出来的app可以给谁安装</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[c++面试题汇总]]></title>
      <url>/2018/02/17/2015/c-%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/cc1bdada166f" target="_blank" rel="external">https://www.jianshu.com/p/cc1bdada166f</a><br><a href="https://www.jianshu.com/p/06d2f28d0747" target="_blank" rel="external">https://www.jianshu.com/p/06d2f28d0747</a><br><a href="https://www.cnblogs.com/fangyukuan/archive/2010/09/18/1829871.html" target="_blank" rel="external">https://www.cnblogs.com/fangyukuan/archive/2010/09/18/1829871.html</a><br><a href="https://github.com/huihut/interview" target="_blank" rel="external">https://github.com/huihut/interview</a></p>
]]></content>
      
        
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python/mongo常用记录]]></title>
      <url>/2018/02/05/2018/python%E8%BF%9B%E9%98%B6%E5%B8%B8%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="python常用"><a href="#python常用" class="headerlink" title="python常用"></a>python常用</h3><ul>
<li>多进程</li>
<li>排序</li>
<li>时间模块</li>
<li>查看帮助文档<code>dir(os)</code></li>
<li>单元测试</li>
</ul>
<h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><p>multiprocessing模块就是跨平台版本的多进程模块。<br>multiprocessing模块提供了一个Process类来代表一个进程对象，下面的例子演示了启动一个子进程并等待其结束</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line">from multiprocessing import Process</div><div class="line"></div><div class="line">def runfunction(d):</div><div class="line">    time.sleep(3)</div><div class="line">    print &apos;%s &apos; % (os.getpid()) + &apos;is the subprocess&apos;</div><div class="line">    </div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    print &apos;Parent is %s&apos; % os.getpid()</div><div class="line">    p = Process(target=runfunction, args=(&apos;1&apos;,))</div><div class="line">    print &apos;Process will start.&apos;</div><div class="line">    p.start()</div><div class="line">    p.join()#这样写其实是同步执行的肯定</div><div class="line">    print &apos;Process end.&apos;</div></pre></td></tr></table></figure>
<p>多个进程，但是异步执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"># !/usr/bin/env python  </div><div class="line"># -*- coding:utf-8 -*-  </div><div class="line">#</div><div class="line"># Copyright 2015 mimvp.com</div><div class="line">   </div><div class="line">import multiprocessing</div><div class="line">import time</div><div class="line">import os</div><div class="line">   </div><div class="line">def func(name, processName):</div><div class="line">    print &apos;Process[%s]  hello %s&apos; % (processName, name)</div><div class="line">    print &apos;sub pid: %d, ppid: %d&apos; % (os.getpid(), os.getppid())</div><div class="line">    time.sleep(0.1)</div><div class="line">   </div><div class="line">   </div><div class="line">def main():</div><div class="line">    print &apos;main pid: %d, ppid: %d&apos; % (os.getpid(), os.getppid())</div><div class="line">     </div><div class="line">    processList = []</div><div class="line">    for i in xrange(4):</div><div class="line">        pro = multiprocessing.Process(target=func, args=(i, &apos;Process-&apos; + str(i)))</div><div class="line">        pro.start()</div><div class="line">#         pro.join()      # 不要在此处阻塞子进程，否则子进程都将是线性顺序执行</div><div class="line">        processList.append(pro)</div><div class="line">         </div><div class="line">    for pro in processList:</div><div class="line">        pro.join()      # 在此处阻塞子进程，可实现异步执行效果，直至子进程全部完成后再继续执行父进程</div><div class="line">       </div><div class="line"># 测试</div><div class="line">if __name__ == &apos;__main__&apos;:  </div><div class="line">    main()</div><div class="line">    print(&apos;end.&apos;)</div></pre></td></tr></table></figure>
<p>同时创建多个进程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Pool</div><div class="line">import os, time, random</div><div class="line"></div><div class="line">def long_time_task(name):</div><div class="line">    print &apos;Run task %s (%s)...&apos; % (name, os.getpid())</div><div class="line">    start = time.time()</div><div class="line">    time.sleep(2)</div><div class="line">    end = time.time()</div><div class="line">    print &apos;Task %s runs %0.2f seconds.&apos; % (name, (end - start))</div><div class="line"></div><div class="line">if __name__==&apos;__main__&apos;:</div><div class="line">    print &apos;Parent process %s.&apos; % os.getpid()</div><div class="line">    p = Pool(10)</div><div class="line">    for i in range(10):</div><div class="line">        p.apply_async(long_time_task, args=(i,))</div><div class="line">    print &apos;Waiting for all subprocesses done...&apos;</div><div class="line">    p.close()</div><div class="line">    p.join()</div><div class="line">    print &apos;All subprocesses done.&apos;</div></pre></td></tr></table></figure>
<p>根据多个参数，创建多个进程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def sortwithnum():</div><div class="line">    pass</div><div class="line">    </div><div class="line">dataList = [1,2,3,4,5]    </div><div class="line"></div><div class="line">pool = Pool()  #创建拥有5个进程数量的进程池</div><div class="line">rl = pool.map(sortwithnum, dateList) </div><div class="line">pool.close()#关闭进程池，不再接受新的进程</div><div class="line">pool.join()#主进程阻塞等待子进程的退出</div></pre></td></tr></table></figure>
<p>进程通信</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">import multiprocessing</div><div class="line">import time</div><div class="line">import os</div><div class="line">   </div><div class="line"> </div><div class="line">lock = multiprocessing.Lock()</div><div class="line"> </div><div class="line">def func(name, processName, queue):</div><div class="line">    p_info = &apos;Process[%s]  hello %s&apos; % (processName, name)</div><div class="line">    queue.put(p_info)</div><div class="line">     </div><div class="line">    print &apos;queue put: &apos;, p_info</div><div class="line">    print &apos;sub pid: %d, ppid: %d&apos; % (os.getpid(), os.getppid())</div><div class="line">    time.sleep(0.5)</div><div class="line">   </div><div class="line">   </div><div class="line">def main():</div><div class="line">    print &apos;main pid: %d, ppid: %d&apos; % (os.getpid(), os.getppid())</div><div class="line">     </div><div class="line">    qu = multiprocessing.Queue()    </div><div class="line">     </div><div class="line">    processList = []</div><div class="line">    for i in xrange(4):</div><div class="line">        pro = multiprocessing.Process(target=func, args=(i, &apos;Process-&apos; + str(i), qu))</div><div class="line">        pro.start()</div><div class="line">        processList.append(pro)</div><div class="line">         </div><div class="line">    for pro in processList:</div><div class="line">        pro.join()  </div><div class="line">       </div><div class="line">    while not qu.empty():</div><div class="line">        p_info = qu.get(block=False)</div><div class="line">        print &apos;queue get: &apos;, p_info</div><div class="line">         </div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:  </div><div class="line">    main()</div><div class="line">    print(&apos;end.&apos;)</div></pre></td></tr></table></figure>
<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">itemList.sort(key=lambda k : (k.get(&apos;datetime&apos;,0),(&apos;createtime&apos;,0)), reverse=False)</div></pre></td></tr></table></figure>
<h4 id="时间模块"><a href="#时间模块" class="headerlink" title="时间模块"></a>时间模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">now_time = datetime.datetime.now()</div><div class="line">now_time_string = now_time.strftime(&apos;%Y-%m-%d&apos;)</div><div class="line">yes_time = now_time + datetime.timedelta(days=daysl)</div><div class="line">yes_time_nyr = yes_time.strftime(&apos;%Y-%m-%d&apos;)</div></pre></td></tr></table></figure>
<p>```</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS线程安全与原子属性]]></title>
      <url>/2018/01/29/2015/iOS%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E5%8E%9F%E5%AD%90%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>Objective-C 在声明一个属性的时候，想必大家都是不用经过大脑思考就会写 <code>@property (nonatomic, ...</code></p>
<p>我们都知道属性可以是 nonatomic 也可以使 atomic 的，但是好像几乎所有属性在声明的时候 nonatomic，atomic 的属性几乎没出现过。atomic 修饰符仿佛已被大家遗忘。</p>
<p>实际上，如果声明属性时既不写 atomic 也不写 nonatomic，那么这个属性默认是 atomic 的。</p>
<h3 id="atomic-的作用和工作原理"><a href="#atomic-的作用和工作原理" class="headerlink" title="atomic 的作用和工作原理"></a>atomic 的作用和工作原理</h3><p>从字面上来看 nonatomic 是非原子的，atomic 是原子的。</p>
<h3 id="atomic-的作用为："><a href="#atomic-的作用为：" class="headerlink" title="atomic 的作用为："></a>atomic 的作用为：</h3><p>atomic 修饰的属性的写操作是一个原子操作。</p>
<h3 id="什么是原子操作？"><a href="#什么是原子操作？" class="headerlink" title="什么是原子操作？"></a>什么是原子操作？</h3><p>原子操作就是指不会被线程调度机制打断的操作。这个操作是一个整体，CPU 一旦开始执行它，就会一直到执行结束，在这期间 CPU 不会转而去执行其它线程的操作。</p>
<h3 id="两种加锁的方式"><a href="#两种加锁的方式" class="headerlink" title="两种加锁的方式"></a>两种加锁的方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (void)setCount:(NSInteger)count &#123;</div><div class="line">    @synchronized (self) &#123;</div><div class="line">        _count = count;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码实现了和 atomic 相同的功能，但是底层的工作方式还是有区别的。我们常常用 @synchronized 来加锁，这种锁是互斥锁。而 atomic 修饰的属性自带了一把自旋锁。</p>
<ul>
<li>互斥锁    <code>当某个资源被先进入的线程上了锁以后，其它后面进入的线程会进入休眠状态。当锁释放后，进入休眠状态的线程变为唤醒状态。</code></li>
<li>自旋锁    <code>当某个资源被先进入的线程上了锁以后，其它后进入的线程会开启一个循环，不断检查锁有没有释放，当锁释放后，退出循环开始访问资源，整个过程中后进入的线程一直保持运行状态。</code></li>
</ul>
<h3 id="对比-nonatomic-和-atomic"><a href="#对比-nonatomic-和-atomic" class="headerlink" title="对比 nonatomic 和 atomic"></a>对比 nonatomic 和 atomic</h3><ul>
<li>nonatomic    执行效率高，性能好    不是线程安全的</li>
<li>atomic    线程安全，但是仅能保证写操作的线程安全    大幅降低执行效率</li>
</ul>
<h3 id="关于线程安全首先理解"><a href="#关于线程安全首先理解" class="headerlink" title="关于线程安全首先理解"></a>关于线程安全首先理解</h3><p>我们只有一个地址总线，一个内存。即使是在多线程的环境下，也不可能存在两个线程同时访问同一块内存区域的场景，内存的访问一定是通过一个地址总线串行排队访问的，所以在继续后续之前，我们先要明确几个结论：</p>
<p>结论一：内存的访问时串行的，并不会导致内存数据的错乱或者应用的crash。</p>
<p>结论二：如果读写（load or store）的内存长度小于等于地址总线的长度，那么读写的操作是原子的，一次完成。比如bool，int，long在64位系统下的单次读写都是原子操作。</p>
<h3 id="线程不安全举例"><a href="#线程不安全举例" class="headerlink" title="线程不安全举例"></a>线程不安全举例</h3><ul>
<li>针对int类型，可能出现，数值计算不对的情况</li>
<li>针对指针那就是，如果A线程获取了指针，但是在B线程对对这个指针的内存空间进行了释放，那么在A线程就会造成崩溃</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@property (atomic, strong) NSString*                 stringA;</div><div class="line"></div><div class="line">//thread A</div><div class="line">for (int i = 0; i &lt; 100000; i ++) &#123;</div><div class="line">    if (i % 2 == 0) &#123;</div><div class="line">        self.stringA = @&quot;a very long string&quot;;</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        self.stringA = @&quot;string&quot;;</div><div class="line">    &#125;</div><div class="line">    NSLog(@&quot;Thread A: %@\n&quot;, self.stringA);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//thread B</div><div class="line">for (int i = 0; i &lt; 100000; i ++) &#123;</div><div class="line">    if (self.stringA.length &gt;= 10) &#123;</div><div class="line">        NSString* subStr = [self.stringA substringWithRange:NSMakeRange(0, 10)];</div><div class="line">    &#125;</div><div class="line">    NSLog(@&quot;Thread B: %@\n&quot;, self.stringA);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正确做法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//thread A</div><div class="line">[_lock lock];</div><div class="line">for (int i = 0; i &lt; 100000; i ++) &#123;</div><div class="line">    if (i % 2 == 0) &#123;</div><div class="line">        self.stringA = @&quot;a very long string&quot;;</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        self.stringA = @&quot;string&quot;;</div><div class="line">    &#125;</div><div class="line">    NSLog(@&quot;Thread A: %@\n&quot;, self.stringA);</div><div class="line">&#125;</div><div class="line">[_lock unlock];</div><div class="line"></div><div class="line">//thread B</div><div class="line">[_lock lock];</div><div class="line">if (self.stringA.length &gt;= 10) &#123;</div><div class="line">    NSString* subStr = [self.stringA substringWithRange:NSMakeRange(0, 10)];</div><div class="line">&#125;</div><div class="line">[_lock unlock];</div></pre></td></tr></table></figure>
<p>虽然stringA是atomic的property，而且在取substring的时候做了length判断，线程B还是很容易crash，因为在前一刻读length的时候self.stringA = @”a very long string”;，下一刻取substring的时候线程A已经将self.stringA = @”string”;，立即出现out of bounds的Exception，crash，多线程不安全。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@property (atomic, strong) NSArray*                 arr;</div><div class="line"></div><div class="line">//thread A</div><div class="line">for (int i = 0; i &lt; 100000; i ++) &#123;</div><div class="line">    if (i % 2 == 0) &#123;</div><div class="line">        self.arr = @[@&quot;1&quot;, @&quot;2&quot;, @&quot;3&quot;];</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        self.arr = @[@&quot;1&quot;];</div><div class="line">    &#125;</div><div class="line">    NSLog(@&quot;Thread A: %@\n&quot;, self.arr);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//thread B</div><div class="line">for (int i = 0; i &lt; 100000; i ++) &#123;</div><div class="line">    if (self.arr.count &gt;= 2) &#123;</div><div class="line">        NSString* str = [self.arr objectAtIndex:1];</div><div class="line">    &#125;</div><div class="line">    NSLog(@&quot;Thread B: %@\n&quot;, self.arr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//thread A</div><div class="line">[_lock lock];</div><div class="line">for (int i = 0; i &lt; 100000; i ++) &#123;</div><div class="line">    if (i % 2 == 0) &#123;</div><div class="line">        self.arr = @[@&quot;1&quot;, @&quot;2&quot;, @&quot;3&quot;];</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        self.arr = @[@&quot;1&quot;];</div><div class="line">    &#125;</div><div class="line">    NSLog(@&quot;Thread A: %@\n&quot;, self.arr);</div><div class="line">&#125;</div><div class="line">[_lock unlock];</div><div class="line">    </div><div class="line">//thread B</div><div class="line">[_lock lock];</div><div class="line">if (self.arr.count &gt;= 2) &#123;</div><div class="line">    NSString* str = [self.arr objectAtIndex:1];</div><div class="line">&#125;</div><div class="line">[_lock unlock];</div></pre></td></tr></table></figure>
<p>同理，即使我们在访问objectAtIndex之前做了count的判断，线程B依旧很容易crash，原因也是由于前后两行代码之间arr所指向的内存区域被其他线程修改了。</p>
<p>所以你看，真正需要操心的是这一类内存区域的访问，即使声明为atomic也没有用，我们平常App出现莫名其妙难以重现的多线程crash多是属于这一类，一旦在多线程的场景下访问这类内存区域的时候，要提起十二分的小心。如何避免这类crash后面会谈到。</p>
<h3 id="Property多线程安全小结："><a href="#Property多线程安全小结：" class="headerlink" title="Property多线程安全小结："></a>Property多线程安全小结：</h3><p>简而言之，atomic的作用只是给getter和setter加了个锁，atomic只能保证代码进入getter或者setter函数内部时是安全的，一旦出了getter和setter，多线程安全只能靠程序员自己保障了。所以atomic属性和使用property的多线程安全并没什么直接的联系。另外，atomic由于加锁也会带来一些性能损耗，所以我们在编写iOS代码的时候，一般声明property为nonatomic，在需要做多线程安全的场景，自己去额外加锁做同步。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://mrpeak.cn/blog/ios-thread-safety/" target="_blank" rel="external">MrPeak</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用户行为路径分析思路]]></title>
      <url>/2018/01/23/2018/%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E8%B7%AF%E5%BE%84%E5%88%86%E6%9E%90%E6%80%9D%E8%B7%AF/</url>
      <content type="html"><![CDATA[<ul>
<li>用户特征分析</li>
<li>预测模型</li>
<li>活跃度定义</li>
<li>用户路径分析</li>
<li>交叉销售</li>
<li>用户分层</li>
</ul>
<p>Predict Customer Behaviour<br>customer’s classification</p>
<p>意图识别<br>确定哪些路径可以促进增长，客户忠诚度和满意度，哪些路径会增加用户的抱怨</p>
<p>发现。 机器学习揭示了客户跨越渠道和时间跨越的最关键途径，并识别客户旅程中的关键障碍和机会，以便将注意力集中在针头上。<br>目标。 使用人口统计特性和上下文属性，可以快速查明特定客户群的转换可能性最高。<br>从事。根据每位客户的个人行为，在正确的时间为合适的客户提供个性化的体验，利用Pointillist平台的智慧以及与技术栈中现有的营销工具的集成。<br>监控。评估营销活动和策略对您的KPI的影响并实时监控变化，以便您的团队能够迅速将洞察力转化为推动结果的行动</p>
<p>在一段时间内快速了解所有接触点和渠道中的客户行为<br>发现和预测高影响力的客户旅程<br>推动个性化，多渠道的客户体验 </p>
<p>用户分层，分类的依据</p>
<p>目的是什么，有没有达到他的目的</p>
<p>用户在如何使用我们的产品，在我们产品里干什么</p>
<p>通过使用配备先进的机器学习算法的客户旅程分析平台，您可以快速发现旅程中的重要事件，例如客户从旅程中的A点到B点最常见的路径。此外，它使您能够实时预测客户行为，并决定最合适的参与方式。<br>在上面的图表中，机器学习算法用于对数百万次实际旅程进行分类，以揭示客户在在线查看产品和退出之间所采用的最重要路径。</p>
<p>客户旅程分析使营销和CX团队不仅能够发现哪些旅程最重要，而且能够通过他们的首选渠道和相关的个性化方式，在最佳时间自动与每个客户进行互动。<br>通过在旅途中的任何事件中嵌入触发器，您可以在特定事件中激活参与（例如电子邮件发送）到目标客户群 - 转换的客户，向前移动的客户，甚至在特定的点旅程。 这些实时参与触发器比以往的基于规则的编码系统更容易管理和更有效。</p>
<p>高级客户旅程分析平台与常用的营销工具集成在一起，因此您可以使用现有的营销技术堆栈与您的客户进行互动。结果是营销和CX广告系列的性能提高了一个新的水平，通过更好的精度，目标和时间。</p>
<p>内容报告可帮助您了解网站的哪些部分效果理想、哪些页面最受欢迎，并据此为客户营造更佳的体验。</p>
<p>具体来说，目标是：</p>
<p>通过人物角色形象化和映射端到端的客户旅程<br>优化正确的旅程属性可以提高收益30％以上…发现最佳实现目标目标的网络，移动和实体渠道，内容和体验的正确组合<br>使营销人员能够识别个人和团体的旅程瓶颈<br>利用实际行为数据来增强和个性化每个客户的体验</p>
<p>简单的个性化…然后，我们通过简单的“个性化”客户体验，基于浅数据，如购买历史，性别，单身或结婚，住在哪里等等。<br>动态个性化…现在，我们正在进入一个新的阶段，重点是最佳消息+最佳通道+最佳时机+最佳设备。这主要是由预测分析（例如Next Next Offer），机器学习，兴趣图，位置感知上下文敏感度以及大规模个性化所驱动的。</p>
<p>更复杂的公司无缝地创建闭环（分析和参与和机器学习）。它们利用客户身份，位置，当前活动，物理状况（天气，交通等），购买历史，移动模式，隐含和明确的意图信号以及社交图形等实时信号。</p>
<p>几家公司正在将预测分析纳入移动营销平台。通过根据历史数据分析多个实时数据流，算法模型预测未来趋势，用户偏好和行动，让品牌知道客户在做什么之前要做的事情，比如放弃购物车，搅动或分享他们的体验？目标是介入正确的信息或提议来激励或改变他们的行为。</p>
<p>这种分析洞察力使零售商能够转移店内策略和运营，以匹配购物者的兴趣和行为，从而提高客户的忠诚度</p>
<p>客户流失通过收入损失降低盈利能力<br>客户流失导致更大的营销和重新购置成本<br>向现有客户销售的可能性远高于新的前景<br>了解客户流失率有助于计算客户的生命周期价值<br>这是衡量公司健康状况和长远前景的一个指标<br>客户流失决定了客户保留是否在改善<br>它有助于确定哪些客户和细分市场最适合您的产品</p>
<p>一个典型的顾客今天可能会首先通过社交媒体广告找到产品，在公司网站上查看并在实体店购买。但是，您是否有能力将这个客户视为一个人而不是三个不同的购物者？大多数公司仍将每个设备和每个交互作为一个单独的客户，将客户旅程分解成不同的碎片。</p>
<h3 id="用户路径分析"><a href="#用户路径分析" class="headerlink" title="用户路径分析"></a>用户路径分析</h3><ul>
<li>用户典型，频繁路径识别</li>
<li>用户行为特征识别</li>
</ul>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ul>
<li>活跃度定义，符合该分值的用户更容易转化为付费用户啊，新的标准更容易反应和衡量产品的运营效果和效率，比如目标是付费用户，那么符合该指标的用户应该越大程度属于付费用户，那么说明该指标的越合理(主成分析+决策归因)</li>
<li>基于行为路径的用户标签系统(用户分层/分类)可以提供给千人千面+运营 比如流失，付费，活动响应等维度(维度来源增量可以是用户反馈)<ul>
<li>实时预测客户行为，并决定最合适的参与方式<ul>
<li>通过在旅途中的任何事件中嵌入触发器，您可以在特定事件中激活参与（例如电子邮件发送）到目标客户群 - 转换的客户，向前移动的客户，甚至在特定的点旅程。 这些实时参与触发器比以往的基于规则的编码系统更容易管理和更有效 </li>
</ul>
</li>
</ul>
</li>
<li>实时的Journey Map(用户旅行地图)<ul>
<li>产品使用模式设计与实际情况对比，提前预想用户可能的操作模式，与实际的对比，如果发现不一致可以深入分析原因调整产品策略和运营策略，为什么这种设计是有效的，而那种是无效的(因素提炼)</li>
<li>频繁路径和典型路径揭示，揭示客户在在线查看产品和退出之间所采用的最重要路径:客户在做什么之前要做的事情，比如放弃购买或分享他们的体验？目标是介入正确的信息或提议来激励或改变他们的行为，具体比如说，通过聚类技术划分付费和非付费，对比两者路径优化页面布局，通过发现付费用户路径中的异常模式来对付费环境进行优化</li>
<li>发现冷僻功能点和路径</li>
</ul>
</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS编译过程详解]]></title>
      <url>/2018/01/22/2017/iOS%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>通过Xcode设置工程依赖之后，Xcode会先编译被依赖工程，最后编译有依赖工程。达到控制编译顺序的目的。</p>
<p>下面是编译过程完整步骤</p>
<ul>
<li>编译信息写入辅助文件，创建文件架构 .app 文件</li>
<li>处理文件打包信息</li>
<li>执行 CocoaPod 编译前脚本，checkPods Manifest.lock</li>
<li>编译.m文件，使用 CompileC 和 clang 命令</li>
<li>链接需要的 Framework</li>
<li>编译 xib</li>
<li>拷贝 xib ，资源文件</li>
<li>编译 ImageAssets</li>
<li>处理 info.plist</li>
<li>执行 CocoaPod 脚本</li>
<li>拷贝标准库</li>
<li>创建 .app 文件和签名</li>
</ul>
<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>在了解xcode构建原则之前，需要熟悉workspace相关的概念，即workspace,project和target。</p>
<h4 id="target"><a href="#target" class="headerlink" title="target"></a>target</h4><p>target指定了构建的product,包含将workspace或project中的一组文件构建成product的指令。单个target定义一个product,它将输入（源文件和处理这些源文件的指令（包含所设定的构建settings和phases））组织进构建系统中。project和target是一对多的关系。</p>
<p>target会继承project的build settings，但可以以target为粒度设置build settings,且Xcode中当前一次只会有一个有效target,此有效target在xcode scheme中标识。</p>
<p>若target A依赖target B的输出来构建，则A依赖B，当它们存在于一个xcode workspace中的时候，Xcode会发现此依赖关系并按顺序构建。这种依赖称为隐性依赖，当然也可以在build settings中声明显性依赖，也可将隐性依赖的两个target显性声明为没有依赖。比如可能在同一个workspace中同时构建一个库并构建一个依赖这个库的应用，则xcode会选择先构建库。但如果应用想链接库的某个特定版本，则可以显性声明这个依赖关系，此时隐性依赖即被覆盖了。</p>
<h4 id="project"><a href="#project" class="headerlink" title="project"></a>project</h4><p>xcode project是存储构建一个或多个软件产品所需的所有文件，资源和信息的仓库。<br>project包含构建product所需的所有要素并维护它们之间的关系，它包含一个或多个targets(target指定了构建product的方式)。<br>project定义了所有target的默认build settings，各target可以重载。Xcode project文件包含如下信息：源文件的引用：源代码（包括头文件和实现文件），library和framework(xcode内部或者外部),资源文件，interface builder文件文件结构列表中组织源文件的Groupsproject级别的build选项targetsdebug或测试program的可执行环境：从xcode运行或调试时启动哪些可以执行文件，传给可执行文件的命令行参数，程序运行时设置的环境变量总之，project可以单独存在也可以包含在workspace中，同时可以在Scheme中指定哪个Target、build配置、哪个可执行配置在某个时刻是有效的。</p>
<h4 id="build-settings"><a href="#build-settings" class="headerlink" title="build settings"></a>build settings</h4><p>一个build setting是一个指示产品某个方面构建方式的变量，比如决定xcode传给编译器的参数选项是怎样。其是一个常量或者一个公式供给xcode在构建的时候计算build setting。</p>
<h4 id="workspace"><a href="#workspace" class="headerlink" title="workspace"></a>workspace</h4><p>workspace 是组织projects和其他协同工作的文档的一份文档。除此之外，它还维护project和target之间的显性及隐性的依赖关系。默认workspace中的所有Xcode projects都在同一个目录下构建，称为workspace build directory，由于所有project的所有文件都在同一个目录下，所以所有文件都对每个project可见。<br>比如两个project使用同一个库，则不用复制到另一个project目录中。workspace中的每个project都有其独立id,同时project可以属于多个workspace，可以单独打开project或者在其他workspace中打开，且都不用重新配置project或者workspace。<br>可以使用workspace默认的build 目录，也可以指定一个。如果project指定了构建目录，这个目录会被project构建时所在的workspace的build目录覆盖。</p>
<h4 id="xcode-schemexcode"><a href="#xcode-schemexcode" class="headerlink" title="xcode schemexcode"></a>xcode schemexcode</h4><p>scheme定义了一系列构建的targets，构建时的配置，和一系列执行的测试。可以有很多scheme,但同一时刻只能有一个有效的。选择scheme时，意味着你也选择了一个运行目标（product构建的硬件平台)。可以指定scheme是否存储在project中，以便包含此project的所有workspace都可以使用些scheme,当然也可以指定只存储在某个workspace中。</p>
<p>一般的某个应用单独新建一个 project 就可以了，然后把所有的程序文件都放在里面，这个可以满足大部分普通的需求，但是有时候，项目有可能要使用其他的项目文件，或者引入其他的静态库文件，这个时候 workspace 就派上用场了，workspace 即可以单独管理多个项目，又可以通过配置，让各个项目相互依赖，如果不用 workspace，以前的做法是如果用到其他项目的文件，要手动 copy 文件到当前的项目，在 workspace 里这个步骤不需要了。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据科学numpy]]></title>
      <url>/2018/01/02/2018/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6numpy/</url>
      <content type="html"><![CDATA[<ul>
<li>数组的创建</li>
<li>有关数组的属性和函数</li>
<li>数组元素的获取–普通索引、切片、布尔索引和花式索引</li>
<li>统计函数与线性代数运算</li>
<li>随机数的生成</li>
<li>矩阵对象</li>
</ul>
<a id="more"></a>
<p>列表，数组，元组</p>
<h3 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h3><p>numpy中使用array()函数创建数组，array的首个参数一定是一个序列，可以是元组也可以是列表。</p>
<h4 id="arange-函数创建一维有序数组"><a href="#arange-函数创建一维有序数组" class="headerlink" title="arange()函数创建一维有序数组"></a>arange()函数创建一维有序数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import numpy as np</div><div class="line">&gt;&gt;&gt; ls1 = range(10)</div><div class="line">&gt;&gt;&gt; list(ls1)</div><div class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</div><div class="line">&gt;&gt;&gt; type(ls1)</div><div class="line">&lt;type &apos;list&apos;&gt;</div><div class="line">&gt;&gt;&gt; ls2 = np.arange(10)</div><div class="line">&gt;&gt;&gt; list(ls2)</div><div class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</div><div class="line">&gt;&gt;&gt; type(ls2)</div><div class="line">&lt;type &apos;numpy.ndarray&apos;&gt;</div></pre></td></tr></table></figure>
<p>从[2,20)间隔为3的等差数列</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a = np.arange(2,20,3)</div><div class="line">[ 2  5  8 11 14 17]</div></pre></td></tr></table></figure>
<h4 id="array-函数"><a href="#array-函数" class="headerlink" title="array()函数"></a>array()函数</h4><p>如果一维数组不是一个规律的有序元素，而是人为的输入，就需要array()函数创建了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; arr1 = np.array((1,20,13,28,22))</div><div class="line">&gt;&gt;&gt; arr1</div><div class="line">array([ 1, 20, 13, 28, 22])</div><div class="line">&gt;&gt;&gt; type(arr1)</div><div class="line">&lt;type &apos;numpy.ndarray&apos;&gt;</div></pre></td></tr></table></figure>
<p>上面是由元组序列构成的一维数组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; arr2 = np.array([1,1,2,3,5,8,13,21])</div><div class="line">&gt;&gt;&gt; arr2</div><div class="line">array([ 1,  1,  2,  3,  5,  8, 13, 21])</div><div class="line">&gt;&gt;&gt; type(arr2)</div><div class="line">&lt;type &apos;numpy.ndarray&apos;&gt;</div></pre></td></tr></table></figure>
<p>上面是由列表序列构成的一维数组。</p>
<h4 id="二维数组的创建"><a href="#二维数组的创建" class="headerlink" title="二维数组的创建"></a>二维数组的创建</h4><p>二维数组的创建，其实在就是列表套列表或元组套元组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; arr3 = np.array(((1,1,2,3),(5,8,13,21),(34,55,89,144)))</div><div class="line">&gt;&gt;&gt; arr3</div><div class="line">array([[  1,   1,   2,   3],</div><div class="line">       [  5,   8,  13,  21],</div><div class="line">       [ 34,  55,  89, 144]])</div><div class="line">```       </div><div class="line">上面使用元组套元组的方式。</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<blockquote>
<p>arr4 = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])<br>arr4<br>array([[ 1,  2,  3,  4],<br>       [ 5,  6,  7,  8],<br>       [ 9, 10, 11, 12]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">上面使用列表套列表的方式。</div><div class="line">对于高维数组在将来的数据分析中用的比较少，这里关于高维数组的创建就不赘述了。</div><div class="line"></div><div class="line">#### 特殊数组</div><div class="line">numpy中也提供了几种特殊的数组</div><div class="line"></div><div class="line">np.ones 返回一维元素全为1的数组</div></pre></td></tr></table></figure></p>
<p>np.ones(5)<br>array([ 1.,  1.,  1.,  1.,  1.])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">返回元素全为1的3×4二维数组</div></pre></td></tr></table></figure></p>
<p>np.ones([3,4])<br>array([[ 1.,  1.,  1.,  1.],<br>       [ 1.,  1.,  1.,  1.],<br>       [ 1.,  1.,  1.,  1.]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">np.zeros 返回一维元素全为0的数组</div></pre></td></tr></table></figure></p>
<p>np.zeros(3)<br>array([ 0.,  0.,  0.])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">返回元素全为0的3×4二维数组</div></pre></td></tr></table></figure></p>
<p>np.zeros([3,4])<br>array([[ 0.,  0.,  0.,  0.],<br>       [ 0.,  0.,  0.,  0.],<br>       [ 0.,  0.,  0.,  0.]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">np.empty 返回一维空数组</div></pre></td></tr></table></figure></p>
<p>np.empty(3)<br>array([ 0.,  0.,  0.])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">返回3×4二维空数组</div></pre></td></tr></table></figure></p>
<p>np.empty([3,4])<br>array([[ 0.,  0.,  0.,  0.],<br>       [ 0.,  0.,  0.,  0.],<br>       [ 0.,  0.,  0.,  0.]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 数组的属性</div><div class="line"></div><div class="line">arr3.shape 行列</div><div class="line">arr3.dtype 元素类型</div><div class="line">arr3.ndim 纬度</div><div class="line">arr3.size 元素总个数</div></pre></td></tr></table></figure></p>
<p>arr3<br>array([[  1,   1,   2,   3],<br>       [  5,   8,  13,  21],<br>       [ 34,  55,  89, 144]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shape方法返回数组的行数和列数</div></pre></td></tr></table></figure></p>
<p>arr3.shape<br>(3L, 4L)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dtype方法返回数组的数据类型</div></pre></td></tr></table></figure></p>
<p>arr3.dtype<br>dtype(‘int32’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">通过ravel的方法将数组拉直（多维数组降为一维数组）</div></pre></td></tr></table></figure></p>
<p>arr3.ravel()<br>array([  1,   1,   2,   3,   5,   8,  13,  21,  34,  55,  89, 144])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">通过flatten的方法将数组拉直</div></pre></td></tr></table></figure></p>
<p>b = arr3.flatten()<br>b<br>array([  1,   1,   2,   3,   5,   8,  13,  21,  34,  55,  89, 144])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">两者的区别在于ravel方法生成的是原数组的视图，无需占有内存空间，但视图的改变会影响到原数组的变化。而flatten方法返回的是真实值，其值的改变并不会影响原数组的更改。</div><div class="line">通过下面的例子也许就能明白了：</div></pre></td></tr></table></figure></p>
<p>b[:3] = 0<br>b<br>array([  0,   0,   0,   3,   5,   8,  13,  21,  34,  55,  89, 144])<br>arr3<br>array([[  1,   1,   2,   3],<br>       [  5,   8,  13,  21],<br>       [ 34,  55,  89, 144]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">通过更改b的值，原数组没有变化。</div></pre></td></tr></table></figure></p>
<p>a[:3] = 0<br>a<br>array([  0,   0,   0,   3,   5,   8,  13,  21,  34,  55,  89, 144])<br>arr3<br>array([[  0,   0,   0,   3],<br>       [  5,   8,  13,  21],<br>       [ 34,  55,  89, 144]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a的值变化后，会导致原数组跟着变化。</div></pre></td></tr></table></figure></p>
<p>arr4<br>array([[ 1,  2,  3,  4],<br>       [ 5,  6,  7,  8],<br>       [ 9, 10, 11, 12]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ndim 返回数组的维数</div></pre></td></tr></table></figure></p>
<p>arr4.ndim<br>2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">size 返回数组元素的个数</div></pre></td></tr></table></figure></p>
<p>arr4.size<br>12<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">T 返回数组的转置结果</div></pre></td></tr></table></figure></p>
<p>arr4.T<br>array([[ 1,  5,  9],<br>       [ 2,  6, 10],<br>       [ 3,  7, 11],<br>       [ 4,  8, 12]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">注： 如果数组的数据类型为复数的话，real方法可以返回复数的实部，imag方法返回复数的虚部</div><div class="line"></div><div class="line">### 数组函数</div><div class="line"></div><div class="line">reshape()函数和resize()函数可以重新设置数组的行数和列数：</div></pre></td></tr></table></figure></p>
<p>arr5 = np.array(np.arange(24))<br>arr5<br>array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,17, 18, 19, 20, 21, 22, 23])<br>a = arr5.reshape(4,6)<br>a<br>array([[ 0,  1,  2,  3,  4,  5],<br>       [ 6,  7,  8,  9, 10, 11],<br>       [12, 13, 14, 15, 16, 17],<br>       [18, 19, 20, 21, 22, 23]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">通过reshape函数将一维数组设置为二维数组，且为4行6列的数组。</div></pre></td></tr></table></figure></p>
<p>a.resize(6,4)<br>a<br>array([[ 0,  1,  2,  3],<br>       [ 4,  5,  6,  7],<br>       [ 8,  9, 10, 11],<br>       [12, 13, 14, 15],<br>       [16, 17, 18, 19],<br>       [20, 21, 22, 23]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">通过resize函数会直接改变原数组的形状。</div><div class="line"></div><div class="line">### 数组元素的获取</div><div class="line"></div><div class="line">#### 一维数组元素</div><div class="line">通过索引和切片的方式获取数组元素，一维数组元素的获取与列表、元组的获取方式一样：</div></pre></td></tr></table></figure></p>
<p>arr7 = np.array(np.arange(10))<br>arr7<br>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">获取第4个元素</div></pre></td></tr></table></figure></p>
<p>arr7[3]<br>3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">获取前3个元素</div></pre></td></tr></table></figure></p>
<p>arr7[:3]<br>array([0, 1, 2])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">获取第4个元素即之后的所有元素</div></pre></td></tr></table></figure></p>
<p>arr7[3:]<br>array([3, 4, 5, 6, 7, 8, 9])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">获取末尾的2个元素</div></pre></td></tr></table></figure></p>
<p>arr7[-2:]<br>array([8, 9])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">从第1个元素开始，获取步长为2的所有元素</div></pre></td></tr></table></figure></p>
<p>arr7[::2]<br>array([0, 2, 4, 6, 8])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 二维数组元素</div></pre></td></tr></table></figure></p>
<p>arr8 = np.array(np.arange(12)).reshape(3,4)<br>arr8<br>array([[ 0,  1,  2,  3],<br>       [ 4,  5,  6,  7],<br>       [ 8,  9, 10, 11]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">返回数组的第2行</div></pre></td></tr></table></figure></p>
<p>arr8[1]<br>array([4, 5, 6, 7])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">返回数组的前2行</div></pre></td></tr></table></figure></p>
<p>arr8[:2]<br>array([[0, 1, 2, 3],<br>       [4, 5, 6, 7]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">返回指定的第1行和第3行</div></pre></td></tr></table></figure></p>
<p>arr8[[0,2]]<br>array([[ 0,  1,  2,  3],<br>       [ 8,  9, 10, 11]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">返回数组的第1列</div></pre></td></tr></table></figure></p>
<p>arr8[:,0]<br>array([0, 4, 8])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">返回数组的后2列</div></pre></td></tr></table></figure></p>
<p>arr8[:,2:]<br>array([[ 2,  3],<br>       [ 6,  7],<br>       [10, 11]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">返回数组的第1列和第3列</div></pre></td></tr></table></figure></p>
<p>arr8[:,[0,2]]<br>array([[ 0,  2],<br>       [ 4,  6],<br>       [ 8, 10]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">返回数组中第2行第3列对应的元素</div></pre></td></tr></table></figure></p>
<p>arr8[1,2]<br>6<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">#### 布尔索引</div><div class="line">布尔索引，即索引值为True和False，需要注意的是布尔索引必须输数组对象。</div></pre></td></tr></table></figure></p>
<p>log = np.array([True,False,False,True,True,False])<br>arr9 = np.array(np.arange(24)).reshape(6,4)<br>arr9<br>array([[ 0,  1,  2,  3],<br>       [ 4,  5,  6,  7],<br>       [ 8,  9, 10, 11],<br>       [12, 13, 14, 15],<br>       [16, 17, 18, 19],<br>       [20, 21, 22, 23]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">返回所有为True的对应行</div></pre></td></tr></table></figure></p>
<p>arr9[log]<br>array([[ 0,  1,  2,  3],<br>       [12, 13, 14, 15],<br>       [16, 17, 18, 19]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">通过负号筛选出所有为False的对应行</div></pre></td></tr></table></figure></p>
<p>arr9[-log]<br>array([[ 4,  5,  6,  7],<br>       [ 8,  9, 10, 11],<br>       [20, 21, 22, 23]])</p>
</blockquote>
</blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">举一个场景，一维数组表示区域，二维数组表示观测值，如何选取目标区域的观测？</div></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<blockquote>
<p>area = np.array([‘A’,’B’,’A’,’C’,’A’,’B’,’D’])<br>area<br>array([‘A’, ‘B’, ‘A’, ‘C’, ‘A’, ‘B’, ‘D’],<br>      dtype=’|S1’)<br>observes = np.array(np.arange(21)).reshape(7,3)<br>observes<br>array([[ 0,  1,  2],<br>       [ 3,  4,  5],<br>       [ 6,  7,  8],<br>       [ 9, 10, 11],<br>       [12, 13, 14],<br>       [15, 16, 17],<br>       [18, 19, 20]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">返回所有A区域的观测。</div></pre></td></tr></table></figure></p>
<p>observes[area == ‘A’]<br>array([[ 0,  1,  2],<br>       [ 6,  7,  8],<br>       [12, 13, 14]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">返回所有A区域和D区域的观测。#条件值需要在&amp;(and),|(or)两端用圆括号括起来</div></pre></td></tr></table></figure></p>
<p>observes[(area == ‘A’)|(area == ‘D’)]<br>array([[ 0,  1,  2],<br>       [ 6,  7,  8],<br>       [12, 13, 14],<br>       [18, 19, 20]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">布尔索引也可以与普通索引或切片混合使用：</div><div class="line">返回A区域的所有行，且只获取第1列与第3列数据。</div></pre></td></tr></table></figure></p>
<p>observes[area == ‘A’][:,[0,2]]<br>array([[ 0,  2],<br>       [ 6,  8],<br>       [12, 14]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 花式索引</div><div class="line">花式索引：实际上就是将数组作为索引将原数组的元素提取出来</div></pre></td></tr></table></figure></p>
<p>arr10 = np.arange(1,29).reshape(7,4)<br>arr10<br>array([[ 1,  2,  3,  4],<br>       [ 5,  6,  7,  8],<br>       [ 9, 10, 11, 12],<br>       [13, 14, 15, 16],<br>       [17, 18, 19, 20],<br>       [21, 22, 23, 24],<br>       [25, 26, 27, 28]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">按照指定顺序返回指定行</div></pre></td></tr></table></figure></p>
<p>arr10[[4,1,3,5]]<br>array([[17, 18, 19, 20],<br>       [ 5,  6,  7,  8],<br>       [13, 14, 15, 16],<br>       [21, 22, 23, 24]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">返回指定的行与列</div></pre></td></tr></table></figure></p>
<p>arr10[[4,1,5]][:,[0,2,3]]<br>array([[17, 19, 20],<br>       [ 5,  7,  8],<br>       [21, 23, 24]])<br>arr10[[4,1,5],[0,2,3]]<br>array([17,  7, 24])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 数组运算</div><div class="line"></div><div class="line">#### 四则</div></pre></td></tr></table></figure></p>
</blockquote>
</blockquote>
</blockquote>
<p>a = np.array([1,2])<br>b= np.array([3,4])<br>print a+b<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 根号和指数</div></pre></td></tr></table></figure></p>
<p>import numpy as np<br>a = np.array([1,2])<br>print np.sqrt(a)<br>print np.exp(a)<br>print np.square(a)<br>print np.power(a,5)<br>print a <strong> 5        #可以用Power也可以直接 </strong> ,当然这么写比较爽<br>Output:<br>[ 1.          1.41421356]<br>[ 2.71828183  7.3890561 ]<br>[1 4]<br>[ 1 32]<br>[ 1 32]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 数组最大最小值</div></pre></td></tr></table></figure>
<p>import numpy as np<br>a = np.arange(20).reshape(4,5)<br>print a<br>print a.min()<br>print a.max()<br>print a.sum()<br>print a.min(axis=0) #minimun element in each column<br>print a.min(axis=1) #minimun element in each row<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 数组的均值/中位数</div></pre></td></tr></table></figure></p>
<p>import numpy<br>a =range(5) +[1000]<br>print a<br>print numpy.mean(a),numpy.median(a)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 矩阵对象</div><div class="line"></div><div class="line">&gt;矩阵对象和数组的主要有两点差别：</div><div class="line">矩阵是二维的，而数组的可以是任意正整数维</div><div class="line">矩阵的*操作符进行的是矩阵乘法，乘号左侧的矩阵列和乘号右侧的矩阵行要相等，而在数组中*操作符进行的是每一元素的对应相乘，乘号两侧的数组每一维大小需要一致</div><div class="line"></div><div class="line">#### 数组转矩阵</div></pre></td></tr></table></figure></p>
<p>a = np.ones(4)<br>np.asmatrix(a)<br>np.mat(np.ones((2,4)))<br>np.mat(np.random.rand(2,2))<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 逆矩阵</div></pre></td></tr></table></figure></p>
<p>arr_mat_i = arr_mat.I<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 矩阵乘法</div></pre></td></tr></table></figure></p>
<p>arr_mat * arr_mat_i<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### eye函数</div></pre></td></tr></table></figure></p>
<p>np.eye(4)</p>
<p>array([[ 1.,  0.,  0.,  0.],<br>       [ 0.,  1.,  0.,  0.],<br>       [ 0.,  0.,  1.,  0.],<br>       [ 0.,  0.,  0.,  1.]])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 矩阵最大值索引</div></pre></td></tr></table></figure></p>
<p>import numpy as np</p>
<p>a = np.array([[1,4,6,9,10],[3,6,2,8,12]])</p>
<p>a = a.flatten()#多维变1维度<br>print type(a)<br>print np.argmax(a)</p>
<p>print a<br>print a.reshape(2,5)#再变回来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 矩阵行相加</div></pre></td></tr></table></figure></p>
<p>X.toarray().sum(axis=0) #行<br>X.toarray().sum() #所有元素</p>
<p>```</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git库使用进阶]]></title>
      <url>/2017/12/20/2017/git%E5%BA%93%E4%BD%BF%E7%94%A8%E8%BF%9B%E9%98%B6/</url>
      <content type="html"><![CDATA[<p>Git在存储数据的时候，存储的都是完整的对象，并不是差异，叫做松散对象Loose Object，有时候你只改变了一点，但是同时会拥有近乎两倍大小的blob对象。<br><a id="more"></a><br>这样子做岂不是很不节省磁盘？所以Git会在每次push到远程的时候进行garbage collect操作，当然我们也可以自己手动改进行gc，如：<br>git gc<br>Counting objects: 6, done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (3/3), done.<br>Writing objects: 100% (6/6), done.<br>Total 6 (delta 0), reused 0 (delta 0)</p>
<p>然后查看一下.git/objects下有哪些文件：<br>find .git/objects -type f<br>发现多了一些pack文件：<br>.git/objects/info/packs<br>.git/objects/pack/pack-abcde.idx<br>.git/objects/pack/pack-abcde.pack<br>当然也还有可能还有一些dangling的对象，这些对象是没有被其它引用的对象，git不会对其进行pack。.pack文件存储了所有删除的对象， .idx文件是索引文件，存储相应的偏移信息。</p>
<p>我们可以使用verify-pack命令显示pack的信息：<br>git verify-pack -v .git/objects/pack/pack-abcde.idx<br>a35a7ea3f7b55be91743c708d150b573116515ec commit 239 160 12<br>fb1c75a143de21f30004dab829b39f99d225d292 commit 187 128 172<br>ca2b7d42454d33b31cfc810592e8bd47f811decd tree   70 76 300<br>fd5d73ef7deb282cbf47826c58448597f24453ba blob   18 28 376<br>56166dc42a6a2f694e088694a2a2c90606e28f2d blob   16 23 404<br>4e1ba2916b4b903d2e5a2209cdcca7129a891c2f tree   36 46 427<br>non delta: 6 objects<br>objects/pack/pack-83c7f603b25c063accec33ee8869a6afb1e9fd0a.pack: ok</p>
<p>第一列显示对象的指针，即Hash值，第二列展示是什么类型的对象，第三列展示占用了多少字节。</p>
<!--more-->
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/git filter-branch --force --index-filter &quot;/usr/bin/git rm --cached --ignore-unmatch JDMobile_2.0/Classes/Sections/BrickPlatForm/ViewController/BrickPFItemViewController.m&quot; --prune-empty --tag-name-filter cat -- --all</div></pre></td></tr></table></figure>
<h3 id="git提交压缩"><a href="#git提交压缩" class="headerlink" title="git提交压缩"></a>git提交压缩</h3><p><code>git gc  --prune=now</code></p>
<h3 id="删除tag"><a href="#删除tag" class="headerlink" title="删除tag"></a>删除tag</h3><p><code>git tag | xargs git tag -d</code></p>
<h3 id="一键瘦身代码"><a href="#一键瘦身代码" class="headerlink" title="一键瘦身代码"></a>一键瘦身代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">#coding:utf-8</div><div class="line">import os,sys,shutil,time</div><div class="line"></div><div class="line">def checksize():</div><div class="line">    systemPath = os.environ[&apos;HOME&apos;]</div><div class="line"></div><div class="line">    if os.path.exists(systemPath + &apos;/.gitthin&apos;):</div><div class="line">        pass</div><div class="line">    else:</div><div class="line">        tagetPath = systemPath + &apos;/.gitthin&apos;  </div><div class="line">        os.system(&apos;mkdir &apos; + tagetPath)</div><div class="line"></div><div class="line">    if os.path.exists(&apos;.git&apos;) == False: </div><div class="line">       print &apos;do not have .git&apos;</div><div class="line">       sys.exit(1)</div><div class="line"></div><div class="line">    fileLogPath = systemPath + &apos;/.gitthin/file_log&apos;</div><div class="line"></div><div class="line">    if os.path.exists(fileLogPath):</div><div class="line">      os.system(&apos;rm -rf fileLogPath&apos;)</div><div class="line"></div><div class="line">    os.system(&apos;git rev-list --objects --all &gt;&gt; &apos; + fileLogPath)</div><div class="line">    # print &apos;createNew &apos; + fileLogPath   </div><div class="line"></div><div class="line">    packLogPath = systemPath + &apos;/.gitthin/pack_log&apos;</div><div class="line"></div><div class="line">    if os.path.exists(packLogPath):</div><div class="line">      print packLogPath + &apos; exits&apos;</div><div class="line">    else: </div><div class="line">        os.system(&apos;git verify-pack -v .git/objects/pack/*.idx &gt;&gt; &apos; + packLogPath)</div><div class="line">        print &apos;createNew &apos; + packLogPath</div><div class="line"></div><div class="line">    outputlist = os.popen(&apos;sort -k 3 -n %s | tail -10&apos; % packLogPath).read().split(&apos;\n&apos;)</div><div class="line"></div><div class="line">    outputlist = list(reversed(outputlist))</div><div class="line"></div><div class="line">    for item in outputlist:</div><div class="line">        if len(item) &gt; 0:</div><div class="line">           items = item.split(&apos; &apos;)</div><div class="line">           hashstring = items[0]</div><div class="line">           filesize = items[4]</div><div class="line"></div><div class="line">           filename = os.popen(&apos;grep %s %s&apos; % (hashstring, fileLogPath)).read()</div><div class="line">           print filename.split(&apos;\n&apos;)[0],&apos;   &apos;,filesize</div><div class="line"></div><div class="line"></div><div class="line">command = &apos;&apos;</div><div class="line">filename = &apos;&apos;</div><div class="line">if (len(sys.argv)) &gt; 1:</div><div class="line">   command = sys.argv[1] </div><div class="line">else:   </div><div class="line">   print &apos;请输入参数&apos;</div><div class="line">   sys.exit(1)</div><div class="line"></div><div class="line">if command == &apos;checksize&apos;:</div><div class="line">   checksize()</div><div class="line"></div><div class="line">elif command == &apos;reset&apos;:</div><div class="line">   systemPath = os.environ[&apos;HOME&apos;]</div><div class="line">   thinpath = systemPath + &apos;/.gitthin&apos;</div><div class="line">   if os.path.exists:</div><div class="line">      os.system(&apos;rm -rf %s&apos; % thinpath)</div><div class="line"></div><div class="line">elif command == &apos;rewrite&apos;:</div><div class="line">   if len(sys.argv) &gt; 2:</div><div class="line">      filename = sys.argv[2]</div><div class="line">      print &apos;\033[1;31m&apos; + &apos;请确认当前为最新分支&apos; + &apos;\033[0m&apos;</div><div class="line">   else:</div><div class="line">      print &apos;请输入文件名&apos;</div><div class="line">      sys.exit(1)</div><div class="line">   </div><div class="line">   systemPath = os.environ[&apos;HOME&apos;]</div><div class="line">   copyfilePath = systemPath + &apos;/.gitthin/&apos; + filename.split(&apos;/&apos;)[-1]</div><div class="line">   copyfilePath = copyfilePath.replace(&apos;\n&apos;,&apos;&apos;)</div><div class="line"></div><div class="line">   if os.path.exists(copyfilePath):</div><div class="line">      os.system(&apos;rm -rf &apos; + copyfilePath)</div><div class="line">   </div><div class="line">   filenamePath = os.popen(&apos;find . -name &apos; + filename.split(&apos;/&apos;)[-1]).read().replace(&apos;\n&apos;,&apos;&apos;)</div><div class="line"></div><div class="line">   copyString = &apos;cp -R %s %s&apos; % (filenamePath,copyfilePath)</div><div class="line"></div><div class="line">   os.system(copyString)   </div><div class="line"></div><div class="line">   os.system(&apos;/usr/bin/git filter-branch --force --index-filter &quot;/usr/bin/git rm --cached --ignore-unmatch %s&quot; --prune-empty --tag-name-filter cat -- --all&apos; %  filename)</div><div class="line"></div><div class="line">   os.system(&apos;cp -R %s %s&apos; % (copyfilePath,filenamePath))</div><div class="line">   </div><div class="line">   text = os.popen(&apos;git diff&apos;).read()</div><div class="line">   print &apos;text&apos; + text</div><div class="line">   if len(text) &gt; 0:</div><div class="line">      os.system(&apos;git add .&apos;)</div><div class="line">      os.system(&apos;git commit -m &quot;git库瘦身，还原文件&quot;&apos;) </div><div class="line"></div><div class="line">elif command == &apos;--h&apos;:</div><div class="line">   print &apos;\033[1;31m&apos; + &apos;thingit checksize&apos; + &apos;\033[0m&apos;</div><div class="line">   print &apos;\033[1;34m&apos; + &apos;检查排名前十的大文件&apos; + &apos;\033[0m&apos;</div><div class="line"></div><div class="line">   print &apos;\033[1;31m&apos; + &apos;thingit rewrite filename&apos; + &apos;\033[0m&apos;</div><div class="line">   print &apos;\033[1;34m&apos; + &apos;删除大文件提交&apos; + &apos;\033[0m&apos;</div><div class="line"></div><div class="line">   print &apos;\033[1;31m&apos; + &apos;thingit reset&apos; + &apos;\033[0m&apos;</div><div class="line">   print &apos;\033[1;34m&apos; + &apos;初始化环境&apos; + &apos;\033[0m&apos;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mongo日常命令记录]]></title>
      <url>/2017/12/18/2018/pymongo/</url>
      <content type="html"><![CDATA[<h3 id="mongo常用"><a href="#mongo常用" class="headerlink" title="mongo常用"></a>mongo常用</h3><h4 id="mongo命令行"><a href="#mongo命令行" class="headerlink" title="mongo命令行"></a>mongo命令行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mongo jrappcomment:jrappcomment@xxxxxx:27017/jrappcomment?authSource=jrappcomment //连接远程数据库</div><div class="line"></div><div class="line">mongoexport -h xxxxxx --port 27017 -d jrappcomment -u jrappcomment -p jrappcomment -c jrcommentcategory -o goods2.json //导出</div><div class="line"></div><div class="line">mongoimport -h xxxxxx --port 27017 -d jrappcomment -u jrappcomment -p jrappcomment -c cachecomment --file goods2.json//导入</div></pre></td></tr></table></figure>
<ul>
<li>db.stats()</li>
<li>show dbs</li>
<li>show tables</li>
<li>show collections</li>
<li>db.collection.totalIndexSize()</li>
<li>db.collection.totalSize()</li>
<li>db.jrcomment.ensureIndex({id:1}) //mongo建立索引 </li>
</ul>
<h4 id="pymongo远程连接数据库"><a href="#pymongo远程连接数据库" class="headerlink" title="pymongo远程连接数据库"></a>pymongo远程连接数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dbs = comment.find(&#123;&#125;).sort([(&apos;datetime&apos;,1),(&apos;created_time&apos;,1)]).limit(10000)</div><div class="line">print type(list(dbs))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">import os, time, json ,sys</div><div class="line">from pymongo import MongoClient</div><div class="line">import urllib</div><div class="line"></div><div class="line">username = urllib.quote_plus(&apos;jrappcomment&apos;)</div><div class="line">password = urllib.quote_plus(&apos;jrappcomment&apos;)</div><div class="line"></div><div class="line">client = MongoClient(&apos;mongodb://%s:%s@xxxxxx:27017/jrappcomment?authSource=jrappcomment&apos; % (username, password))</div><div class="line"></div><div class="line"># client = MongoClient(&quot;mongodb://172.25.60.48:27017&quot;)</div><div class="line"># client.adb.authenticate(username, password, mechanism=&apos;SCRAM-SHA-1&apos;)</div><div class="line"></div><div class="line"># client = MongoClient(&apos;mongodb://jrappcomment:jrappcomment@172.25.60.48:27017/&apos;)</div><div class="line">db = client.jrappcomment</div><div class="line"></div><div class="line">comment = db.Comment</div><div class="line"></div><div class="line">comment.insert(&#123;&apos;name&apos;:&apos;ceshi&apos;&#125;)</div><div class="line"></div><div class="line">dbs = comment.find(&#123;&#125;)</div><div class="line"></div><div class="line">print dbs</div><div class="line">for item in dbs:</div><div class="line">    print &apos;ceshi&apos;</div><div class="line">    print item</div></pre></td></tr></table></figure>
<h4 id="pymongo常用命令"><a href="#pymongo常用命令" class="headerlink" title="pymongo常用命令"></a>pymongo常用命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">comment.update(&#123;&apos;name&apos;:&apos;hanshenghui&apos;&#125;,&#123;&apos;$set&apos;:&#123;&apos;age&apos;:30&#125;&#125;)</div></pre></td></tr></table></figure>
<p>不等于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; x : &#123; $ne : 3 &#125; &#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> mongo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos6配置]]></title>
      <url>/2017/12/15/2017/centos6%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<ul>
<li>首先需要python环境为2.7以上版本</li>
<li>需要yum版本为<code>3.4.3</code>及以上，因为这样才能安装httpd为<code>2.4</code>版本及以上</li>
<li>安装Django<code>sudo pip install --upgrade django==1.11</code></li>
<li>安装numpy<code>sudo pip install numpy</code></li>
<li>安装pymong<code>sudo pip install pymongo</code></li>
<li>lunix 安装apxs扩展<code>yum install httpd-devel</code>安装mod-wsgi需要</li>
<li>安装mod_wsgi<code>sudo pip install mod_wsgi</code>Django需要</li>
<li>安装mod_wsgi<code>sudo yum install mod_wsgi</code>这个模块会出现在./usr/lib64/httpd/modules/mod_wsgi.so这里</li>
<li>使用rz/sz来上传或者下载文件<code>yum install lrzsz</code><a id="more"></a>
</li>
</ul>
<h3 id="手动安装apache"><a href="#手动安装apache" class="headerlink" title="手动安装apache"></a>手动安装apache</h3><h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><ul>
<li><p>Apache HTTP Server</p>
<p>  截止目前为止，Apache HTTP Server 目前最新的版本是 Apache httpd 2.4.6 Released， 下载地址：<a href="http://httpd.apache.org/download.cgi#apache24" target="_blank" rel="external">http://httpd.apache.org/download.cgi#apache24</a></p>
</li>
<li><p>APR and APR-Util包</p>
<p>  截止目前为止，APR and APR-Util的最新版本如下，下载地址：<a href="http://apr.apache.org/download.cgi" target="_blank" rel="external">http://apr.apache.org/download.cgi</a></p>
</li>
</ul>
<p>APR 1.4.8, released June 21, 2013<br>APR-util 1.5.2, released April 4, 2013<br>APR-iconv 1.2.1, released November 26, 2007</p>
<ul>
<li><p>PCRE包</p>
<p> 截止目前为止，PCRE最新的包为8.33，下载地址如下</p>
</li>
</ul>
<p><a href="https://sourceforge.net/projects/pcre/files/pcre/" target="_blank" rel="external">https://sourceforge.net/projects/pcre/files/pcre/</a></p>
<h4 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h4><ul>
<li>1：安装包gcc或gcc-c++<code>yum install gcc-c++</code></li>
<li>2:安装devel<code>yum install expat-devel</code></li>
<li>3:安装apr<ul>
<li><code>mkdir /usr/local/apr</code></li>
<li><code>./configure --prefix=/usr/local/apr</code></li>
<li><code>make &amp;&amp; sudo make install</code></li>
</ul>
</li>
<li>4:安装apr-util<ul>
<li><code>mkdir /usr/local/apr-util</code></li>
<li><code>./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr/bin/apr-1-config</code></li>
<li><code>make &amp;&amp; sudo make install</code></li>
</ul>
</li>
<li>5:安装pcre<ul>
<li><code>mkdir /usr/local/pcre</code></li>
<li><code>./configure --prefix=/usr/local/pcre --with-apr=/usr/local/apr/bin/apr-1-config</code></li>
<li><code>make &amp;&amp; sudo make install</code></li>
</ul>
</li>
<li>6:安装apache<ul>
<li><code>./configure --prefix=/usr/local/apache --with-pcre=/usr/local/pcre --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util</code></li>
<li><code>make &amp;&amp; sudo make install</code></li>
</ul>
</li>
<li>6:将apachectl软链接到/usr/sbin/apachectl这个路径下</li>
<li>7:httpd也要软链到/usr/sbin/下</li>
<li>8:安装mod_wsgi<ul>
<li><code>https://github.com/GrahamDumpleton/mod_wsgi/releases</code>这个地址下载</li>
<li><code>tar –zxvf mod_wsgi-3.4.tar.gz</code></li>
<li><code>./configure --with-apxs=/usr/local/apache/bin/apxs --with-python=/usr/bin/python</code></li>
<li><code>make &amp;&amp; make install</code></li>
<li><code>chmod 755 /usr/local/apache/modules/mod_wsgi.so</code></li>
</ul>
</li>
</ul>
<h3 id="apache配置"><a href="#apache配置" class="headerlink" title="apache配置"></a>apache配置</h3><ul>
<li>apache路径<code>/etc/httpd/conf</code></li>
<li>重启 Apache：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service httpd restart</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="pip配置"><a href="#pip配置" class="headerlink" title="pip配置"></a>pip配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">trusted-host = 10.13.8.31</div><div class="line">index-url = http://10.13.8.31/simple/</div></pre></td></tr></table></figure>
<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><h4 id="error-while-loading-shared-libraries-libpython2-7-so-1-0-cannot-open-shared-object-file-No-such-file-or-directory"><a href="#error-while-loading-shared-libraries-libpython2-7-so-1-0-cannot-open-shared-object-file-No-such-file-or-directory" class="headerlink" title="error while loading shared libraries: libpython2.7.so.1.0: cannot open shared object file: No such file or directory"></a>error while loading shared libraries: libpython2.7.so.1.0: cannot open shared object file: No such file or directory</h4><p>sudo find . -name libpython2.7.so.1.0<br>找到路径，然后加入下边的文件</p>
<p>vi /etc/ld.so.conf<br>加入新行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/export/python/lib</div></pre></td></tr></table></figure></p>
<p>运行<code>sudo ldconfig</code></p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python-set的用法]]></title>
      <url>/2017/11/22/2018/python-set%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>python的set和其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素. 集合对象还支持union(联合), intersection(交), difference(差)和sysmmetric difference(对称差集)等数学运算.  </p>
<p>sets 支持 x in set, len(set),和 for x in set。作为一个无序的集合，sets不记录元素位置或者插入点。因此，sets不支持 indexing, slicing, 或其它类序列（sequence-like）的操作。<br><a id="more"></a></p>
<p>下面来点简单的小例子说明把。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">x = set(&apos;spam&apos;)  </div><div class="line">y = set([&apos;h&apos;,&apos;a&apos;,&apos;m&apos;])  </div><div class="line">x, y  </div><div class="line">(set([&apos;a&apos;, &apos;p&apos;, &apos;s&apos;, &apos;m&apos;]), set([&apos;a&apos;, &apos;h&apos;, &apos;m&apos;]))</div></pre></td></tr></table></figure></p>
<p>再来些小应用。  </p>
<pre><code>x &amp; y # 交集  
set([&apos;a&apos;, &apos;m&apos;])  

x | y # 并集  
set([&apos;a&apos;, &apos;p&apos;, &apos;s&apos;, &apos;h&apos;, &apos;m&apos;])  

x - y # 差集  
set([&apos;p&apos;, &apos;s&apos;])
</code></pre><p>记得以前个网友提问怎么去除海量列表里重复元素，用hash来解决也行，只不过感觉在性能上不是很高，用set解决还是很不错的，示例如下：  </p>
<pre><code>a = [11,22,33,44,11,22]  
b = set(a)  

set([33, 11, 44, 22])  
c = [i for i in b]  
c  
[33, 11, 44, 22]
</code></pre><p>很酷把，几行就可以搞定。  </p>
<p>1.8　集合   </p>
<p>集合用于包含一组无序的对象。要创建集合，可使用set()函数并像下面这样提供一系列的项：  </p>
<p>s = set([3,5,9,10])      #创建一个数值集合  </p>
<p>t = set(“Hello”)         #创建一个唯一字符的集合  </p>
<p>与列表和元组不同，集合是无序的，也无法通过数字进行索引。此外，集合中的元素不能重复。例如，如果检查前面代码中t集合的值，结果会是：<br>t<br>set([‘H’, ‘e’, ‘l’, ‘o’])  </p>
<p>注意只出现了一个’l’。  </p>
<p>集合支持一系列标准操作，包括并集、交集、差集和对称差集，例如：  </p>
<pre><code>a = t | s          # t 和 s的并集  

b = t &amp; s          # t 和 s的交集  

c = t – s          # 求差集（项在t中，但不在s中）  

d = t ^ s          # 对称差集（项在t或s中，但不会同时出现在二者中）
</code></pre><p>基本操作：  </p>
<p>t.add(‘x’)            # 添加一项  </p>
<p>s.update([10,37,42])  # 在s中添加多项  </p>
<p>使用remove()可以删除一项：  </p>
<p>t.remove(‘H’)  </p>
<p>len(s)<br>set 的长度  </p>
<p>x in s<br>测试 x 是否是 s 的成员  </p>
<p>x not in s<br>测试 x 是否不是 s 的成员  </p>
<p>s.issubset(t)<br>s &lt;= t<br>测试是否 s 中的每一个元素都在 t 中  </p>
<p>s.issuperset(t)<br>s &gt;= t<br>测试是否 t 中的每一个元素都在 s 中  </p>
<p>s.union(t)<br>s | t<br>返回一个新的 set 包含 s 和 t 中的每一个元素  </p>
<p>s.intersection(t)<br>s &amp; t<br>返回一个新的 set 包含 s 和 t 中的公共元素  </p>
<p>s.difference(t)<br>s - t<br>返回一个新的 set 包含 s 中有但是 t 中没有的元素  </p>
<p>s.symmetric_difference(t)<br>s ^ t<br>返回一个新的 set 包含 s 和 t 中不重复的元素  </p>
<p>s.copy()<br>返回 set “s”的一个浅复制  </p>
<p>请注意：union(), intersection(), difference() 和 symmetric_difference() 的非运算符（non-operator，就是形如 s.union()这样的）版本将会接受任何 iterable 作为参数。相反，它们的运算符版本（operator based counterparts）要求参数必须是 sets。这样可以避免潜在的错误，如：为了更可读而使用 set(‘abc’) &amp; ‘cbs’ 来替代 set(‘abc’).intersection(‘cbs’)。从 2.3.1 版本中做的更改：以前所有参数都必须是 sets。  </p>
<p>另外，Set 和 ImmutableSet 两者都支持 set 与 set 之间的比较。两个 sets 在也只有在这种情况下是相等的：每一个 set 中的元素都是另一个中的元素（二者互为subset）。一个 set 比另一个 set 小，只有在第一个 set 是第二个 set 的 subset 时（是一个 subset，但是并不相等）。一个 set 比另一个 set 打，只有在第一个 set 是第二个 set 的 superset 时（是一个 superset，但是并不相等）。  </p>
<p>子 set 和相等比较并不产生完整的排序功能。例如：任意两个 sets 都不相等也不互为子 set，因此以下的运算都会返回 False：a<b, a="=b," 或者a="">b。因此，sets 不提供 <strong>cmp</strong> 方法。  </b,></p>
<p>因为 sets 只定义了部分排序功能（subset 关系），list.sort() 方法的输出对于 sets 的列表没有定义。  </p>
<p>运算符<br>   运算结果  </p>
<p>hash(s)<br>   返回 s 的 hash 值  </p>
<p>下面这个表列出了对于 Set 可用二对于 ImmutableSet 不可用的运算：  </p>
<p>运算符（voperator）<br>等价于<br>运算结果  </p>
<p>s.update(t)<br>s |= t<br>返回增加了 set “t”中元素后的 set “s”  </p>
<p>s.intersection_update(t)<br>s &amp;= t<br>返回只保留含有 set “t”中元素的 set “s”  </p>
<p>s.difference_update(t)<br>s -= t<br>返回删除了 set “t”中含有的元素后的 set “s”  </p>
<p>s.symmetric_difference_update(t)<br>s ^= t<br>返回含有 set “t”或者 set “s”中有而不是两者都有的元素的 set “s”  </p>
<p>s.add(x)  </p>
<p>向 set “s”中增加元素 x  </p>
<p>s.remove(x)  </p>
<p>从 set “s”中删除元素 x, 如果不存在则引发 KeyError  </p>
<p>s.discard(x)  </p>
<p>如果在 set “s”中存在元素 x, 则删除  </p>
<p>s.pop()  </p>
<p>删除并且返回 set “s”中的一个不确定的元素, 如果为空则引发 KeyError  </p>
<p>s.clear()  </p>
<p>删除 set “s”中的所有元素  </p>
<p>请注意：非运算符版本的 update(), intersection_update(), difference_update()和symmetric_difference_update()将会接受任意 iterable 作为参数。从 2.3.1 版本做的更改：以前所有参数都必须是 sets。  </p>
<p>还请注意：这个模块还包含一个 union_update() 方法，它是 update() 方法的一个别名。包含这个方法是为了向后兼容。程序员们应该多使用 update() 方法，因为这个方法也被内置的 set() 和 frozenset() 类型支持。  </p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac-Vim使用教程]]></title>
      <url>/2017/11/11/2018/Mac-Vim%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h4 id="各种光标移动"><a href="#各种光标移动" class="headerlink" title="各种光标移动"></a>各种光标移动</h4><p>w     跳到下一个字首，按标点或单词分割<br>W     跳到下一个字首，长跳，如end-of-line被认为是一个字<br>e     跳到下一个字尾<br>E     跳到下一个字尾，长跳<br>b     跳到上一个字<br>B     跳到上一个字，长跳<br>0     跳至行首，不管有无缩进，就是跳到第0个字符</p>
<p>n+ 移n行行首<br>n- 移n行行首<br>n$ 移n行(1表示本行)行尾<br>0 所行行首<br>$ 所行行尾<br>^ 所行首字母<br>h,j,k,l 左移移移右移<br>H 前屏幕首行行首<br>M 屏幕显示文件间行行首<br>L 前屏幕底行行首</p>
<h4 id="各种删除"><a href="#各种删除" class="headerlink" title="各种删除"></a>各种删除</h4><p>dG    删除至文章结尾部<br>d1G   删除至文章开头部<br>2dd   删除两行<br>dd    删除光标所在行<br>dw    删除一个字(word)不适合中文<br>x     删除当前字符<br>10x   删除十个连续字符<br>X     删除前一个字符<br>D     删除到行末</p>
<h4 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h4><p>yy     复制一行，此命令前可跟数字，标识复制多行，如6yy，表示从当前行开始复制6行<br>yw     复制一个字<br>y$     复制到行末<br>p     粘贴粘贴板的内容到当前行的下面<br>P     粘贴粘贴板的内容到当前行的上面<br>]p     有缩进的粘贴，vim会自动调节代码的缩进<br>“a     将内容放入/存入a寄存器，可以支持多粘贴板<br>附：比如常用的一个寄存器就是系统寄存器，名称为+，所以从系统粘贴板粘贴到vim中的命令为”+p,注意此处的+不表示操作符，二十一个寄存器。<br>移动光标<br>在vim中移动光标跟其他的编辑器中有很大的区别，不过一旦学会了，就会飞速的在文本中移动了。</p>
<h4 id="光标快速移动"><a href="#光标快速移动" class="headerlink" title="光标快速移动"></a>光标快速移动</h4><p><code>gg</code>快速移动到头部<br><code>G</code>快速移动到尾部<br><code>10G</code>移动到第十行</p>
<blockquote>
<p>显示行号<br>:set number</p>
<p>永久显示行号:</p>
<p>$vi ~/.vimrc<br>往文件里面添加内容： set number , 保存退出。</p>
</blockquote>
<h4 id="行内光标跳转"><a href="#行内光标跳转" class="headerlink" title="行内光标跳转"></a>行内光标跳转</h4><ul>
<li><code>w</code>当前单词开头</li>
<li><code>e</code>当前单词末尾</li>
<li><code>b</code>前一个单词开头</li>
<li><code>ge</code>前一个单词末尾</li>
<li><code>o/^</code>行开始</li>
<li><code>$</code>行末尾</li>
<li><code>f&lt;name&gt;</code>向后搜索并且跳转到该字母</li>
<li><code>F&lt;name&gt;</code>向前搜索并且跳转到该字母</li>
</ul>
<h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p><code>/name</code>开始进行查找name，然后输入n继续向下查找，输入N继续向上查找</p>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux入门]]></title>
      <url>/2017/11/09/2018/lunix%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>查看linux版本 <code>lsb_release -a</code></p>
<p>Ctrl+a 移动到行初<br>Ctrl+e 移动到行末<br>Ctrl+k 删除从光标位置到行末<br>Alts+backspace 向前删除一个单词<br><a id="more"></a><br><code>ls *.txt</code>显示所有的.txt结尾的文件<br><code>touch love{1..10}.txt</code>创建了十个文件<br><code>touch today{name,hahm,ceshi}.txt</code>创建了三个文件</p>
<h3 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h3><p><code>who -a</code>打印全部<br><code>who -d</code>打印死掉的进程<br><code>who -m</code>或者<code>who am i</code>当前登录用户<br><code>who -q</code>打印当前登录用户数以及用户名<br><code>who -u</code>打印当前登录用户登录信息<br><code>who -r</code>打印运行等级</p>
<p><code>sudo adduser username</code>添加用户<br><code>su -l username</code>切换用户<br><code>exit</code>退出当前用户回到上一个用户</p>
<p>查看所有用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cat /etc/passwd 可以查看所有用户的列表</div><div class="line">w 可以查看当前活跃的用户列表</div><div class="line">cat /etc/group 查看用户组</div></pre></td></tr></table></figure></p>
<p>用户组<br><code>groups han</code>查看当前用户属于啥组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">han : han //前边是用户，后边是组</div></pre></td></tr></table></figure></p>
<p><code>chgrp -R</code></p>
<p>新建的用户会自动创建一个同名的组，注意这个新建的用户不在root用户组下边，那就意味着当你切换到han这个用户下边的时候，其实你是不能使用sudo的，那怎么将han添加到sudo下呢？<br><code>sudo usermod -G root han</code>添加han到用户组下边<br><code>sudo deluser han --remove-home</code>删除用户</p>
<h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p><code>ls -l</code></p>
<blockquote>
<p>-rw-r–r–  1 jrmacpro  staff  0 11  9 09:12 love1.txt<br>文件类型和权限 链接数 所有者 所有者用户组 文件大小 最后修改日期 文件名</p>
</blockquote>
<p>我们来看看用户权限<br>drwxr-xr-x<br>drwxr拥有者权限<br>第一个-xr用户组权限<br>第二个-x其他用户权限</p>
<p>r允许读<br>w允许写<br>x允许执行</p>
<ul>
<li>文件类型：lunix中一切皆文件</li>
<li>文件权限：<ul>
<li><code>cat filename</code>你可以使用这个命令来读</li>
<li>写表示你可以编辑和修改</li>
<li>执行权限通常指可以运行二进制程序文本或者脚本文件，一个目录同时具有读和执行权限你才可以打开并且查看内部文件，而一个目录要有写权限才能在其中创建其他文件</li>
</ul>
</li>
</ul>
<p><code>ls -lh</code>直观查看文件大小</p>
<h4 id="修改文件所有者"><a href="#修改文件所有者" class="headerlink" title="修改文件所有者"></a>修改文件所有者</h4><blockquote>
<p><code>sudo chown hanshenghui filename</code>改变文件所有者<br><code>sudo chgrp apache project</code>改变文件组</p>
</blockquote>
<h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><p>利用<code>+</code>和<code>-</code><br><code>chmod go-r filename</code><br>g/o/u分别代表group，others，user，上边那句的意思是说真对这个文件group和other去掉读权限</p>
<h3 id="查看进程和杀进程"><a href="#查看进程和杀进程" class="headerlink" title="查看进程和杀进程"></a>查看进程和杀进程</h3><p>1、先查看进程pid</p>
<p>ps -ef | grep 进程名</p>
<p>2、通过pid查看占用端口</p>
<p>netstat -nap | grep 进程pid</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">例：通过nginx进程查看对应的端口号</div><div class="line"></div><div class="line">查看nginx进程pid：</div><div class="line">命令：</div><div class="line">ps -ef | grep nginx</div><div class="line">结果：</div><div class="line">root      9836     1  0 Jul11 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</div><div class="line">nobody    9841  9836  0 Jul11 ?        00:00:09 nginx: worker process      </div><div class="line"></div><div class="line">通过nginx进程pid查看占用端口（进程pid为9836）</div><div class="line">命令：</div><div class="line">netstat -nap | grep 9836</div><div class="line">结果：</div><div class="line">tcp        0      0 0.0.0.0:8081                0.0.0.0:*                   LISTEN      9836/nginx          </div><div class="line">tcp        0      0 0.0.0.0:81                  0.0.0.0:*                   LISTEN      9836/nginx          </div><div class="line">tcp        0      0 0.0.0.0:8082                0.0.0.0:*                   LISTEN      9836/nginx          </div><div class="line">tcp        0      0 0.0.0.0:8083                0.0.0.0:*                   LISTEN      9836/nginx        </div><div class="line">复制代码</div></pre></td></tr></table></figure>
<p>3.杀进程<br><code>sudo kill -9 pid</code></p>
<h3 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h3><ul>
<li><code>tree</code>使用这个命令查看目录结构</li>
<li><code>ls -a</code>查看隐藏文件</li>
<li><code>cd ~</code>home</li>
<li><code>cd ..</code>上一级</li>
<li><code>pwd</code>当前路径</li>
<li><code>cd ..</code>上一层目录</li>
<li><code>cp test /opt/test</code>把test复制到opt下边的test</li>
<li><code>cp -r test /opt/test</code>把test这个文件夹复制到opt下，递归复制</li>
<li><code>rm filename</code></li>
<li><code>rm -f filename</code>忽略权限，强制删除</li>
<li><code>rm -r direction</code>递归删除</li>
<li><code>mv file1 file2</code>把file1移动到file2，或者说是重命名</li>
<li><code>rename file1 file2</code>将file1重命名为file2</li>
</ul>
<h4 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h4><ul>
<li><code>cat</code>正序</li>
<li><code>tac</code>倒序</li>
<li><code>nl</code>带着编号</li>
<li><code>more/less</code></li>
<li><code>head</code>查看头十行</li>
<li><code>tail</code>查看末尾几行</li>
<li><code>tail -f</code>可以实现实时查看日志</li>
<li><code>file</code>查看文件类型</li>
</ul>
<h3 id="环境变量和文件查找"><a href="#环境变量和文件查找" class="headerlink" title="环境变量和文件查找"></a>环境变量和文件查找</h3><p><code>~.profile</code>对当前用户生效<br><code>/etc/profile</code>所有用户生效</p>
<h4 id="环境变量PATH介绍"><a href="#环境变量PATH介绍" class="headerlink" title="环境变量PATH介绍"></a>环境变量PATH介绍</h4><p>当我们在shell中输入一个命令的时候，它怎么知道去哪里寻找该执行哪个命令呢，这些路径就存在PATH中。</p>
<p><code>echo $PATH</code>来查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/opt/swig@3.04/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</div></pre></td></tr></table></figure></p>
<h5 id="添加自定义的PATH"><a href="#添加自定义的PATH" class="headerlink" title="添加自定义的PATH"></a>添加自定义的PATH</h5><p><code>PATH=$PATH:/home/han/mybin</code>注意这里一定要用绝对路径</p>
<h3 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h3><h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">zip -r -9 -q -o shiyanlou.zip /home/shiyanlou -x ~/*.zip</div><div class="line">du -h shiyanlou.zip</div><div class="line">file shiyanlou.zip</div></pre></td></tr></table></figure>
<p><code>-r</code>递归压缩</p>
<p><code>-9/-1</code>压缩级别-9压缩最厉害，-1最不厉害</p>
<p><code>-q</code>静默，不输出到命令行</p>
<p><code>-o</code>输出文件名字</p>
<p><code>du</code>查看文件大小</p>
<h4 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h4><p><code>unzip -q ceshi.zip -d ceshiname</code>解压然后解压后叫啥名字</p>
<h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><p>压缩</p>
<p>tar -cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpg </p>
<p>tar -czf jpg.tar.gz *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</p>
<p> tar -cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</p>
<p>tar -cZf jpg.tar.Z *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</p>
<p>rar a jpg.rar *.jpg //rar格式的压缩，需要先下载rar for linux</p>
<p>zip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux</p>
<p>解压</p>
<p>tar -xvf file.tar //解压 tar包</p>
<p>tar -xzvf file.tar.gz //解压tar.gz</p>
<p>tar -xjvf file.tar.bz2   //解压 tar.bz2</p>
<p>tar -xZvf file.tar.Z   //解压tar.Z</p>
<p>unrar e file.rar //解压rar</p>
<p>unzip file.zip //解压zip</p>
<h3 id="磁盘相关"><a href="#磁盘相关" class="headerlink" title="磁盘相关"></a>磁盘相关</h3><p><code>df</code>查看磁盘容量<br><code>du</code> 查看该目录<br><code>du -h</code>更简单的方式来查看</p>
<h3 id="Linux任务计划crontab"><a href="#Linux任务计划crontab" class="headerlink" title="Linux任务计划crontab"></a>Linux任务计划crontab</h3><p><code>crontab -e</code>然后进入到了一个文件在这个文件中添加任务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*/1 * * * * * python /Users/jrmacpro/Desktop/ceshi.py &gt;&gt; /Users/jrmacpro/Desktop/log.txt</div></pre></td></tr></table></figure></p>
<p>一共有五个*分别代表：分，小时，几号，月份，星期几</p>
<p>&gt;<br>在以上各个字段中，还可以使用以下特殊字符：<br>&gt;</p>
<ul>
<li>星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</li>
<li>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</li>
<li>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</li>
<li>正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。</li>
</ul>
<p><code>sudo cron -f &amp;</code>    启动守护进程，我们的设置才能生效</p>
<h4 id="使用实例："><a href="#使用实例：" class="headerlink" title="使用实例："></a>使用实例：</h4><ul>
<li>实例1：每1分钟执行一次command<br>命令：</li>
</ul>
<ul>
<li><ul>
<li><ul>
<li><ul>
<li><ul>
<li>command</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>实例2：每小时的第3和第15分钟执行<br>命令：<br><code>3,15 * * * * command</code></p>
</li>
<li><p>实例3：在上午8点到11点的第3和第15分钟执行<br>命令：<br><code>3,15 8-11 * * * command</code></p>
</li>
<li><p>实例4：每隔两天的上午8点到11点的第3和第15分钟执行<br>命令：<br><code>3,15 8-11 */2 * * command</code></p>
</li>
<li><p>实例5：每个星期一的上午8点到11点的第3和第15分钟执行<br>命令：<br><code>3,15 8-11 * * 1 command</code></p>
</li>
<li><p>实例6：每晚的21:30重启smb<br>命令：<br><code>30 21 * * * /etc/init.d/smb restart</code></p>
</li>
<li><p>实例7：每月1、10、22日的4 : 45重启smb<br>命令：<br><code>45 4 1,10,22 * * /etc/init.d/smb restart</code></p>
</li>
<li><p>实例8：每周六、周日的1 : 10重启smb<br>命令：<br><code>10 1 * * 6,0 /etc/init.d/smb restart</code></p>
</li>
<li><p>实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb<br>命令：<br><code>0,30 18-23 * * * /etc/init.d/smb restart</code></p>
</li>
<li><p>实例10：每星期六的晚上11 : 00 pm重启smb<br>命令：<br><code>0 23 * * 6 /etc/init.d/smb restart</code></p>
</li>
<li><p>实例11：每一小时重启smb<br>命令：<br><code>* */1 * * * /etc/init.d/smb restart</code></p>
</li>
<li><p>实例12：晚上11点到早上7点之间，每隔一小时重启smb<br>命令：<br><code>* 23-7/1 * * * /etc/init.d/smb restart</code></p>
</li>
<li><p>实例13：每月的4号与每周一到周三的11点重启smb<br>命令：<br><code>0 11 4 * mon-wed /etc/init.d/smb restart</code></p>
</li>
<li><p>实例14：一月一号的4点重启smb<br>命令：<br><code>0 4 1 jan * /etc/init.d/smb restart</code></p>
</li>
<li><p>实例15：每小时执行/etc/cron.hourly目录内的脚本<br>命令：<br><code>01   *   *   *   *     root run-parts /etc/cron.hourly</code><br>说明：<br>run-parts这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是目录名了</p>
</li>
<li><p>实例16：以时间命名<br><code>01 * * * * touch $(date +%Y-%m-%d)</code></p>
</li>
</ul>
<h4 id="crontab设置"><a href="#crontab设置" class="headerlink" title="crontab设置"></a>crontab设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">1. 确认crontab是否安装：</div><div class="line"></div><div class="line">执行 crontab 命令如果报 command not found，就表明没有安装</div><div class="line"></div><div class="line">2. 安装 crontab</div><div class="line"></div><div class="line">执行 yum install -y vixie-cron</div><div class="line"></div><div class="line">3. 确认是否安装成功:</div><div class="line"></div><div class="line">执行 crontab -l</div><div class="line"></div><div class="line">4. 看是否设置了开机自动启动</div><div class="line"></div><div class="line">chkconfig --list crond</div><div class="line"></div><div class="line">5. 启动crontab</div><div class="line"></div><div class="line">service crond start</div></pre></td></tr></table></figure>
<p>看日志 /var/log/cron.log这个文件就可以，可以用tail -f /var/log/cron.log观察</p>
<h3 id="命令执行顺序和管道"><a href="#命令执行顺序和管道" class="headerlink" title="命令执行顺序和管道"></a>命令执行顺序和管道</h3><p>多命令一起输入选择性执行<br><code>which git &amp;&amp; echo &#39;YES&#39; || echo &#39;NO&#39;</code><br>这段话的意思是如果git存在就输出YES，否则输出NO<br><code>echo $?</code>查看程序执行结果</p>
<h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><p>将前一个命令的输出作为后一个命令的输入，以<code>|</code>作为表示符。<br><code>ls -la /etc | less</code><br>这个时候前一个命令输出了好多，无所谓我可以用less来一行一行的看</p>
<h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p>在文本中查找匹配关键字</p>
<h4 id="wc计数工具"><a href="#wc计数工具" class="headerlink" title="wc计数工具"></a>wc计数工具</h4><p><code>wc -l filename</code>文件行数<br><code>wc -w filename</code>单词数<br><code>wc -c filename</code>字节数<br><code>wc -m filename</code>字符数<br><code>wc -L filename</code>最长行字节数</p>
<h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p><code>cat /etc/passwd | sort -r</code>反序</p>
<h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><p><code>cut -f 1-3 text.txt</code><br><code>cut -f -3 text.txt</code><br><code>cut -f 3- text.txt</code></p>
<h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><p><code>join file1 file2</code>将行相同的合并在一起<br><code>paste file1 file2</code>直接合并</p>
<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p><code>echo &#39;hi&#39; &gt;&gt; text.txt</code><br><code>echo &#39;hi&#39; | tee text.txt</code>多向重定向</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><code>wget http://xxxx</code></p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习学习路径]]></title>
      <url>/2017/11/07/2018/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<h3 id="机器学习解决的问题"><a href="#机器学习解决的问题" class="headerlink" title="机器学习解决的问题"></a>机器学习解决的问题</h3><p>并非所有的问题都适合用机器学习解决(很多逻辑清晰的问题用规则能很高效和准确地处理)，也没有一个机器学习算法可以通用于所有问题。咱们先来了解了解，机器学习，到底关心和解决什么样的问题。<br><a id="more"></a><br>从功能的角度分类，机器学习在一定量级的数据上，可以解决下列问题：</p>
<ul>
<li>分类问题</li>
</ul>
<blockquote>
<p>根据数据样本上抽取出的特征，判定其属于有限个类别中的哪一个。比如： </p>
</blockquote>
<pre><code>- 垃圾邮件识别(结果类别：1、垃圾邮件 2、正常邮件)
- 文本情感褒贬分析(结果类别：1、褒 2、贬)
- 图像内容识别识别(结果类别：1、喵星人 2、汪星人 3、人类 4、草泥马 5、都不是)。
</code></pre><ul>
<li>回归问题</li>
</ul>
<blockquote>
<p>根据数据样本上抽取出的特征，预测一个连续值的结果。比如： </p>
</blockquote>
<pre><code>- 星爷《美人鱼》票房
- 大帝都2个月后的房价
- 隔壁熊孩子一天来你家几次，宠幸你多少玩具
</code></pre><ul>
<li>聚类等问题</li>
</ul>
<blockquote>
<p>根据数据样本上抽取出的特征，让样本抱抱团(相近/相关的样本在一团内)。比如： </p>
</blockquote>
<pre><code>- google的新闻分类
- 用户群体划分
</code></pre><p>我们再把上述常见问题划到机器学习最典型的2个分类上。</p>
<blockquote>
<ul>
<li>分类与回归问题需要用已知结果的数据做训练，属于“监督学习”</li>
<li>聚类的问题不需要已知标签，属于“非监督学习”。</li>
</ul>
</blockquote>
<p>如果在IT行业(尤其是互联网)里溜达一圈，你会发现机器学习在以下热点问题中有广泛应用：</p>
<p>1.计算机视觉</p>
<p>典型的应用包括：人脸识别、车牌识别、扫描文字识别、图片内容识别、图片搜索等等。</p>
<p>2.自然语言处理</p>
<p>典型的应用包括：搜索引擎智能匹配、文本内容理解、文本情绪判断，语音识别、输入法、机器翻译等等。</p>
<p>3.社会网络分析</p>
<p>典型的应用包括：用户画像、网络关联分析、欺诈作弊发现、热点发现等等。</p>
<p>4.推荐</p>
<p>典型的应用包括：虾米音乐的“歌曲推荐”，某宝的“猜你喜欢”等等。</p>
<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="阶段1：入门知识"><a href="#阶段1：入门知识" class="headerlink" title="阶段1：入门知识"></a>阶段1：入门知识</h4><ul>
<li><a href="https://www.shiyanlou.com/courses/1" target="_blank" rel="external">Lunix基础入门</a></li>
<li><a href="https://www.shiyanlou.com/courses/2" target="_blank" rel="external">Vim入门</a></li>
</ul>
<h4 id="阶段2-机器学习理论"><a href="#阶段2-机器学习理论" class="headerlink" title="阶段2: 机器学习理论"></a>阶段2: 机器学习理论</h4><p>这部分主要是要掌握一些典型的机器学习算法，如分类、聚类、推荐、概率图、神经网络。（可以分为初级、中级和高级三个阶段，每个阶段的侧重点不同。）</p>
<h5 id="初级阶段"><a href="#初级阶段" class="headerlink" title="初级阶段"></a>初级阶段</h5><p>初级阶段推荐可以看《机器学习算法原理与编程实践 》和《机器学习实战》这两本书。</p>
<p>这两本书更偏向于算法的应用方面，学习起来相对轻松一些。如果一上来直接就啃那些纯算法理论，估计很多人是坚持不下去的。</p>
<p>再者，一个东西，当你还不知道它是什么，有什么用，以及怎么用时，让你去硬着头皮啃，你一定会感觉很郁闷，并且根本不可能能够深入理解那些理论。</p>
<p>所以，个人强烈建议不要一上来就贪图那些算法理论的推导，先大胆的去了解各个算法的应用场合并尝试着应用，这对你入门机器学习是一个非常好的选择。</p>
<h5 id="中级阶段"><a href="#中级阶段" class="headerlink" title="中级阶段"></a>中级阶段</h5><p>中级阶段就要开始啃那些算法背后的理论了，前面应用是知其然，现在要开始知其所以然。</p>
<p>这个阶段重点推荐看林轩田的《机器学习基石》和《机器学习技法》视频，总共三十二课，每一课都相当精彩，细致学下来需要三个月，我指的是细致的看，每一课都应该写笔记，梳理脉络，强烈建议做笔记。</p>
<p>踏踏实实看完，面试中让你推个svm讲讲adboost，gbdt原理基本就是手到擒来，再辅以李航的《统计学习方法》和周志华的《机器学习》（俗称“西瓜书”）查漏补缺，基础就算比较扎实了。</p>
<h5 id="高级阶段"><a href="#高级阶段" class="headerlink" title="高级阶段"></a>高级阶段</h5><p>高级阶段就是要自己开始去灵活运用并组合各个算法了。这个阶段可以在网上找一些比较典型的项目来进行实战演练。</p>
<p>推荐学习资源：Kaggle、CCF、Datacastle、阿里云天池等。</p>
<p>kaggle是国外一个专门做数据挖掘比赛的地方，里面很多比赛比较适合新人，而且里面的氛围也比较好，每个比赛都有对应的论坛，时不时有人会发布自己的代码，大家集思广益一起讨论，可以学到很多。</p>
<p>如果你觉得上面的内容对你有帮助，或者你想要进一步了解和学习数据挖掘和机器学习等知识，欢迎关注我们的微信公众号“DT新纪元”。</p>
<p>【另外说明一下，我个人平时有广泛阅读和摘录经典的习惯，但有时可能由于时间久远不知道原文出处了，造成自己的文章中部分内容跟某些作者有重合和相似的，请您给我留言，我会及时做出改正，谢谢！目前确认的是此篇文章中的数据分析部分应该是在@秦路 某篇文章的基础上更改的，在此特别表示说明与感谢！】</p>
<h4 id="阶段3-基础项目"><a href="#阶段3-基础项目" class="headerlink" title="阶段3:基础项目"></a>阶段3:基础项目</h4><ul>
<li><a href="https://www.shiyanlou.com/courses/746" target="_blank" rel="external">人机对战初体验:Python基于Pygame实现四子棋游戏</a></li>
<li><a href="https://www.shiyanlou.com/courses/741" target="_blank" rel="external">Python 实现英文新闻摘要自动提取</a></li>
<li><a href="https://www.shiyanlou.com/courses/814" target="_blank" rel="external">使用 Python 实现深度神经网络</a></li>
<li><a href="https://www.shiyanlou.com/courses/820" target="_blank" rel="external">使用卷积神经网络进行图片分类</a></li>
<li><a href="https://www.shiyanlou.com/courses/861" target="_blank" rel="external">基于卷积神经网络实现图片风格的迁移</a></li>
</ul>
<h4 id="阶段4-进阶项目"><a href="#阶段4-进阶项目" class="headerlink" title="阶段4: 进阶项目"></a>阶段4: 进阶项目</h4><ul>
<li><a href="https://www.shiyanlou.com/courses/678" target="_blank" rel="external">Python应用马尔可夫链算法实现随机文本生成</a></li>
<li><a href="https://www.shiyanlou.com/courses/707" target="_blank" rel="external">神经网络实现人脸识别任务</a></li>
<li><a href="https://www.shiyanlou.com/courses/696" target="_blank" rel="external">基于无监督学习的自编码器实现</a></li>
<li><a href="https://www.shiyanlou.com/courses/782" target="_blank" rel="external">NBA常规赛结果预测——利用Python进行比赛数据分析</a></li>
<li><a href="https://www.shiyanlou.com/courses/780" target="_blank" rel="external">Python 气象数据分析 – 《Python 数据分析实战》</a></li>
<li><a href="https://www.shiyanlou.com/courses/722" target="_blank" rel="external">Twitter数据情感分析</a></li>
<li><a href="https://www.shiyanlou.com/courses/714" target="_blank" rel="external">ebay在线拍卖数据分析</a></li>
<li><a href="https://www.shiyanlou.com/courses/736" target="_blank" rel="external">大数据带你挖掘打车的秘籍</a></li>
<li><a href="https://www.shiyanlou.com/courses/610" target="_blank" rel="external">使用 Spark 和 D3.js 分析航班大数据</a></li>
</ul>
<h3 id="基本工作流程"><a href="#基本工作流程" class="headerlink" title="基本工作流程"></a>基本工作流程</h3><p>以上我们基本具备了机器学习的必要条件，剩下的就是怎么运用它们去做一个完整的机器学习项目。其工作流程如下:</p>
<ul>
<li>抽象成数学问题</li>
</ul>
<blockquote>
<p>明确问题是进行机器学习的第一步。机器学习的训练过程通常都是一件非常耗时的事情，胡乱尝试时间成本是非常高的。<br>这里的抽象成数学问题，指的我们明确我们可以获得什么样的数据，目标是一个分类还是回归或者是聚类的问题，如果都不是的话，如果划归为其中的某类问题。</p>
</blockquote>
<ul>
<li>获取数据</li>
</ul>
<blockquote>
<p>数据决定了机器学习结果的上限，而算法只是尽可能逼近这个上限。<br>数据要有代表性，否则必然会过拟合。<br>而且对于分类问题，数据偏斜不能过于严重，不同类别的数据数量不要有数个数量级的差距。<br>而且还要对数据的量级有一个评估，多少个样本，多少个特征，可以估算出其对内存的消耗程度，判断训练过程中内存是否能够放得下。如果放不下就得考虑改进算法或者使用一些降维的技巧了。如果数据量实在太大，那就要考虑分布式了。</p>
</blockquote>
<ul>
<li>特征预处理与特征选择</li>
</ul>
<blockquote>
<p>良好的数据要能够提取出良好的特征才能真正发挥效力。<br>特征预处理、数据清洗是很关键的步骤，往往能够使得算法的效果和性能得到显著提高。归一化、离散化、因子化、缺失值处理、去除共线性等，数据挖掘过程中很多时间就花在它们上面。这些工作简单可复制，收益稳定可预期，是机器学习的基础必备步骤。<br>筛选出显著特征、摒弃非显著特征，需要机器学习工程师反复理解业务。这对很多结果有决定性的影响。特征选择好了，非常简单的算法也能得出良好、稳定的结果。这需要运用特征有效性分析的相关技术，如相关系数、卡方检验、平均互信息、条件熵、后验概率、逻辑回归权重等方法。</p>
</blockquote>
<ul>
<li>训练模型与调优</li>
</ul>
<blockquote>
<p>直到这一步才用到我们上面说的算法进行训练。现在很多算法都能够封装成黑盒供人使用。但是真正考验水平的是调整这些算法的（超）参数，使得结果变得更加优良。这需要我们对算法的原理有深入的理解。理解越深入，就越能发现问题的症结，提出良好的调优方案。</p>
</blockquote>
<ul>
<li>模型诊断</li>
</ul>
<blockquote>
<p>如何确定模型调优的方向与思路呢？这就需要对模型进行诊断的技术。</p>
<p>过拟合、欠拟合 判断是模型诊断中至关重要的一步。常见的方法如交叉验证，绘制学习曲线等。过拟合的基本调优思路是增加数据量，降低模型复杂度。欠拟合的基本调优思路是提高特征数量和质量，增加模型复杂度。<br>误差分析 也是机器学习至关重要的步骤。通过观察误差样本，全面分析误差产生误差的原因:是参数的问题还是算法选择的问题，是特征的问题还是数据本身的问题……<br>诊断后的模型需要进行调优，调优后的新模型需要重新进行诊断，这是一个反复迭代不断逼近的过程，需要不断地尝试， 进而达到最优状态。</p>
</blockquote>
<ul>
<li>模型融合</li>
</ul>
<blockquote>
<p>一般来说，模型融合后都能使得效果有一定提升。而且效果很好。<br>工程上，主要提升算法准确度的方法是分别在模型的前端（特征清洗和预处理，不同的采样模式）与后端（模型融合）上下功夫。因为他们比较标准可复制，效果比较稳定。而直接调参的工作不会很多，毕竟大量数据训练起来太慢了，而且效果难以保证。</p>
</blockquote>
<ul>
<li>上线运行</li>
</ul>
<blockquote>
<p>这一部分内容主要跟工程实现的相关性比较大。工程上是结果导向，模型在线上运行的效果直接决定模型的成败。 不单纯包括其准确程度、误差等情况，还包括其运行的速度(时间复杂度)、资源消耗程度（空间复杂度）、稳定性是否可接受。<br>这些工作流程主要是工程实践上总结出的一些经验。并不是每个项目都包含完整的一个流程。这里的部分只是一个指导性的说明，只有大家自己多实践，多积累项目经验，才会有自己更深刻的认识。</p>
</blockquote>
<h3 id="关于积累项目经验"><a href="#关于积累项目经验" class="headerlink" title="关于积累项目经验"></a>关于积累项目经验</h3><p>初学机器学习可能有一个误区，就是一上来就陷入到对各种高大上算法的追逐当中。动不动就我能不能用深度学习去解决这个问题啊？我是不是要用boosting算法做一些模型融合啊？我一直持有一个观点，『脱离业务和数据的算法讨论是毫无意义的』。</p>
<p>实际上按我们的学习经验，从一个数据源开始，即使是用最传统，已经应用多年的机器学习算法，先完整地走完机器学习的整个工作流程，不断尝试各种算法深挖这些数据的价值，在运用过程中把数据、特征和算法搞透，真正积累出项目经验 才是最快、最靠谱的学习路径。</p>
<p>那如何获取数据和项目呢？一个捷径就是积极参加国内外各种数据挖掘竞赛，数据直接下载下来，按照竞赛的要求去不断优化，积累经验。国外的<a href="https://www.kaggle.com/" target="_blank" rel="external">Kaggle</a>和国内的<a href="http://www.pkbigdata.com/" target="_blank" rel="external">DataCastle</a> 以及<a href="https://tianchi.aliyun.com/" target="_blank" rel="external">阿里天池比赛</a>都是很好的平台，你可以在上面获取真实的数据和数据科学家们一起学习和进行竞赛，尝试使用已经学过的所有知识来完成这个比赛本身也是一件很有乐趣的事情。和其他数据科学家的讨论能开阔视野，对机器学习算法有更深层次的认识。</p>
<p>有意思的是，有些平台，比如阿里天池比赛，甚至给出了从数据处理到模型训练到模型评估、可视化到模型融合增强的全部组件，你要做的事情只是参与比赛，获取数据，然后使用这些组件去实现自己的idea即可。具体内容可以参见<a href="https://help.aliyun.com/document_detail/shujia/machine-learning/pai-quickstart.html" target="_blank" rel="external">阿里云机器学习文档</a>。</p>
<h3 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h3><ul>
<li>Mitchell 的《机器学习》。Mitchell是机器学习的鼻祖，第一个提出机器学习概念的人。这本书很薄，很简单。内容很陈旧，但是都是机器学习的经典问题。而且，这本书概念清晰正确(很可贵啊，又简单又正确的书，说明作者功力很强)</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lunix切换防火墙]]></title>
      <url>/2017/11/06/2018/lunix%E5%88%87%E6%8D%A2%E9%98%B2%E7%81%AB%E5%A2%99/</url>
      <content type="html"><![CDATA[<p>当然你可以还原传统的管理方式。</p>
<p>执行一下命令：</p>
<ul>
<li>停止原来的防火墙模式</li>
</ul>
<p><code>systemctl stop firewalld</code> </p>
<p><code>systemctl mask firewalld</code></p>
<ul>
<li><p>并且安装iptables-services：<br><code>yum install iptables-services</code></p>
</li>
<li><p>设置开机启动：</p>
</li>
</ul>
<p><code>systemctl enable iptables</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. systemctl stop iptables  </div><div class="line">2. systemctl start iptables  </div><div class="line">3. systemctl restart iptables  </div><div class="line">4. systemctl reload iptables</div></pre></td></tr></table></figure>
<p>OK，再试一下应该就好使了</p>
<h3 id="开放某个端口的两种方式"><a href="#开放某个端口的两种方式" class="headerlink" title="开放某个端口的两种方式"></a>开放某个端口的两种方式</h3><h4 id="直接编辑文件"><a href="#直接编辑文件" class="headerlink" title="直接编辑文件"></a>直接编辑文件</h4><p>开放某个端口 在/etc/sysconfig/iptables里添加<br>-A RH-Firewall-1-INPUT -m state –state NEW -m tcp -p tcp –dport 8080 -j ACCEPT</p>
<p>vim /etc/sysconfig/iptables<br>将上面的语句-A INPUT -p tcp -m state –state NEW -m tcp –dport 82 -j ACCEPT直接插入到上述文件中。 </p>
<p>这时候规则是不生效的，需要重启服务service iptables restart。之后这条规则就永久生效了</p>
<h4 id="用命令行添加"><a href="#用命令行添加" class="headerlink" title="用命令行添加"></a>用命令行添加</h4><p>添加input记录： iptables -A INPUT -p tcp –dport 22 -j ACCEPT<br>添加output记录： iptables -A OUTPUT -p tcp –sport 22 -j ACCEPT   </p>
<p>最后注意需要再执行一下 /etc/init.d/iptables save，这样这两条语句就保存到刚才那个/etc/sysconfig/iptables 文件中了</p>
<p>注意这两种方法二选一，不可同时使用</p>
]]></content>
      
        
        <tags>
            
            <tag> lunix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xcode自动创建结构化模版]]></title>
      <url>/2017/11/03/2018/xcode%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BA%E7%BB%93%E6%9E%84%E5%8C%96%E6%A8%A1%E7%89%88/</url>
      <content type="html"><![CDATA[<p>下边这个路径下的文件，是可以被xcode加载，然后形成一个模版的，我们现在具体来看看<br><code>&quot;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/File Templates/JDJRCustom&quot;</code></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Lunix-Centos7 scrapy实战]]></title>
      <url>/2017/11/02/2018/Lunix-Centos7-scrapy%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<h3 id="安装scrapy"><a href="#安装scrapy" class="headerlink" title="安装scrapy"></a>安装scrapy</h3><ul>
<li>centos7上软件管理工具为yum而不是apt-get</li>
<li>安装scrapy<code>sudo pip install scrapy</code>，这个时候可能报错，<code>fatal error: Python.h: No such file or directory</code>，这是因为缺少python-dev这个库，我们需要安装<code>sudo yum install python-dev</code>但是在centos7上会说找不到，是因为在该版本上不是python-dev而是<code>python-devel</code></li>
</ul>
<p>或者是使用另外一种方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root@localhost ~]# yum -y update</div><div class="line">安装gcc及扩展包</div><div class="line">[root@localhost ~]# yum install gcc libffi-devel python-devel openssl-devel</div><div class="line">安装开发工具包</div><div class="line">[root@localhost ~]# yum groupinstall -y development</div><div class="line">安装libxslt-devel支持lxml</div><div class="line">[root@localhost ~]# yum install libxslt-devel</div><div class="line">安装pip</div><div class="line">[root@localhost ~]# yum -y install python-pip</div><div class="line">安装Scrapy</div><div class="line">[root@localhost ~]# pip install scrapy</div></pre></td></tr></table></figure>
<h3 id="配置mongo"><a href="#配置mongo" class="headerlink" title="配置mongo"></a>配置mongo</h3><h4 id="安装环境及配置yum"><a href="#安装环境及配置yum" class="headerlink" title="安装环境及配置yum"></a>安装环境及配置yum</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># more /etc/redhat-release </div><div class="line">CentOS Linux release 7.2.1511 (Core)</div><div class="line"></div><div class="line"># vi /etc/yum.repos.d/mongodb-org-3.2.repo </div><div class="line">[mongodb-org-3.2]</div><div class="line">name=MongoDB Repository</div><div class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.2/x86_64/</div><div class="line">gpgcheck=1</div><div class="line">enabled=1</div><div class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.2.asc</div></pre></td></tr></table></figure>
<h4 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install mongodb-org</div></pre></td></tr></table></figure>
<h4 id="创建data文件和log文件并且启动"><a href="#创建data文件和log文件并且启动" class="headerlink" title="创建data文件和log文件并且启动"></a>创建data文件和log文件并且启动</h4><ul>
<li>先在同级目录下创建数据文件和日志文件mkdir data和mkdir log</li>
<li>启动mongodb服务mongod –dbpath data –logpath log/mongod.log –logappend –fork</li>
<li>再次mongo如果显示connecting to test说明启动成功，输入exit;退出mongo</li>
</ul>
<h3 id="Lunix长时间运行命令行方法"><a href="#Lunix长时间运行命令行方法" class="headerlink" title="Lunix长时间运行命令行方法"></a>Lunix长时间运行命令行方法</h3><p>使用screen</p>
<p>常用命令</p>
<blockquote>
<ul>
<li><code>screen -ls</code>查看当前的screen</li>
<li><code>screen -S screenname</code>创建一个新的screen并且给命名，这个名字可以后期用以恢复screen</li>
<li><code>control+a----&gt;d</code>退出当前screen并且挂起</li>
<li><code>screen -r number/name</code>进入某个screen</li>
</ul>
</blockquote>
<h3 id="定时运行任务"><a href="#定时运行任务" class="headerlink" title="定时运行任务"></a>定时运行任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">while True:  </div><div class="line">    print time.strftime(&apos;%Y-%m-%d %X&apos;,time.localtime())  </div><div class="line">    yourTask() # 此处为要执行的任务  </div><div class="line">    time.sleep(n)</div></pre></td></tr></table></figure>
<h3 id="输出到log"><a href="#输出到log" class="headerlink" title="输出到log"></a>输出到log</h3><p>直接用print来输出，正常在terminal运行就可以看到打印输出但是如果用下面这种方式来输出就会直接输出到log中<br><code>python test.py &gt;&gt; test.log</code>这样就print到logle</p>
<h3 id="Scrapy详解"><a href="#Scrapy详解" class="headerlink" title="Scrapy详解"></a>Scrapy详解</h3><p>主要是三个文件</p>
<ul>
<li>items.py</li>
<li>pipelines.py</li>
<li>xxx_spider.py(这个文件是自己创建的，在spiders这个文件夹下边)</li>
</ul>
<p>下边分别说明文件以及其整体关系</p>
<h4 id="xxx-spider-py"><a href="#xxx-spider-py" class="headerlink" title="xxx_spider.py"></a>xxx_spider.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">import scrapy</div><div class="line">import json</div><div class="line">from tutorial.items import JdjrItem#这里倒入的是一个相当于ios中的model一样的东西，是定义于items.py这个文件</div><div class="line"></div><div class="line">class DmozSpider(scrapy.Spider):</div><div class="line">    name = &quot;spider&quot;#这个名字相当重要，它是爬虫的唯一标示，你运行命令行的时候，它识别的也是这个名字，跟你外边文件叫啥没关系，跟你这个类叫啥也没有关系</div><div class="line">    allowed_domains = [&quot;itunes.apple.com&quot;]</div><div class="line">    start_urls = []</div><div class="line">    start = 0</div><div class="line">    for i in range(0,2):</div><div class="line">        end = start + 100</div><div class="line">        endString = &apos;%d&apos; % end</div><div class="line">        startString = &apos;%d&apos; % start</div><div class="line">        start = end + 1</div><div class="line">#       url1 = &quot;https://itunes.apple.com/WebObjects/MZStore.woa/wa/userReviewsRow?id=895682747&amp;displayable-kind=11&amp;startIndex=%s&amp;endIndex=%s&amp;sort=1&amp;appVersion=all&quot; % (startString,endString)</div><div class="line">        url2 = &quot;https://itunes.apple.com/WebObjects/MZStore.woa/wa/userReviewsRow?id=895682747&amp;displayable-kind=11&amp;startIndex=%s&amp;endIndex=%s&amp;sort=1&amp;appVersion=current&quot; % (startString,endString)</div><div class="line">#       start_urls.append(url1)</div><div class="line">        start_urls.append(url2)</div><div class="line"></div><div class="line">#     start_urls = [</div><div class="line">#         # &quot;https://itunes.apple.com/WebObjects/MZStore.woa/wa/userReviewsRow?id=895682747&amp;displayable-kind=11&amp;startIndex=0&amp;endIndex=50&amp;sort=1&amp;appVersion=cureent&quot;</div><div class="line"># # ,</div><div class="line">#             &quot;https://itunes.apple.com/WebObjects/MZStore.woa/wa/userReviewsRow?id=895682747&amp;displayable-kind=11&amp;startIndex=0&amp;endIndex=50&amp;sort=1&amp;appVersion=all&quot;</div><div class="line"># ]</div><div class="line">    def parse(self, response):</div><div class="line">        sites = json.loads(response.body_as_unicode())#前边的url请求成功之后就是调用这个parse方法，这里的response的处理相当关键，但总结来看主要分为两种，一种是json，一种是html，这里举例的是json的处理方式</div><div class="line">        siteitems = sites[&apos;userReviewList&apos;]</div><div class="line">        for item in siteitems:</div><div class="line">            JrItem = JdjrItem()</div><div class="line">            JrItem[&apos;userReviewId&apos;] = item[&apos;userReviewId&apos;].encode(&quot;utf-8&quot;)</div><div class="line">            JrItem[&apos;body&apos;] = item[&apos;body&apos;].encode(&quot;utf-8&quot;)</div><div class="line">            dateString = item[&apos;date&apos;].encode(&quot;utf-8&quot;)</div><div class="line">            dateStringList = dateString.split(&apos;T&apos;)</div><div class="line">            date = dateStringList[0]</div><div class="line">            time = dateStringList[1]</div><div class="line">            JrItem[&apos;date&apos;] = date</div><div class="line">            JrItem[&apos;time&apos;] = time</div><div class="line">            JrItem[&apos;name&apos;] = item[&apos;name&apos;].encode(&quot;utf-8&quot;)</div><div class="line">            JrItem[&apos;rating&apos;] = item[&apos;rating&apos;]</div><div class="line">            JrItem[&apos;title&apos;] = item[&apos;title&apos;].encode(&quot;utf-8&quot;)</div><div class="line">            yield JrItem#我们把数据做一个解析，然后把数据装入我们的JrItem这个Model里边，进行返回，进行下一步的处理</div></pre></td></tr></table></figure>
<h4 id="pipelines-py"><a href="#pipelines-py" class="headerlink" title="pipelines.py"></a>pipelines.py</h4><p>这里是接收上一步<code>yield JrItem</code>的内容，然后进行进一步的处理，具体来讲就是我们初始化了mongo，然后把数据存入mongo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import pymongo</div><div class="line">from scrapy.conf import settings</div><div class="line"></div><div class="line">class TutorialPipeline(object):</div><div class="line"></div><div class="line">    def __init__(self):#在这里很重要的一步是我们初始化了mongo，然后把数据存入mongo</div><div class="line">        # 链接数据库</div><div class="line">        self.client = pymongo.MongoClient(host=settings[&apos;MONGO_HOST&apos;], port=settings[&apos;MONGO_PORT&apos;])</div><div class="line">        # 数据库登录需要帐号密码的话</div><div class="line">        # self.client.admin.authenticate(settings[&apos;MINGO_USER&apos;], settings[&apos;MONGO_PSW&apos;])</div><div class="line">        self.db = self.client[settings[&apos;MONGO_DB&apos;]]  # 获得数据库的句柄</div><div class="line">        self.coll = self.db[settings[&apos;MONGO_COLL&apos;]]  # 获得collection的句柄</div><div class="line"></div><div class="line">    def process_item(self, item, spider):</div><div class="line">        dbs = self.coll.find(&#123;&apos;userReviewId&apos;:item[&apos;userReviewId&apos;]&#125;)</div><div class="line">        count = 0</div><div class="line">        for itemnew in dbs:#进行了一个去重</div><div class="line">            count = count + 1</div><div class="line">        if count == 0: </div><div class="line">           postItem = dict(item)  # 把item转化成字典形式</div><div class="line">           self.coll.insert(postItem)  # 向数据库插入一条记录</div><div class="line">        return item</div></pre></td></tr></table></figure>
<h4 id="item-py"><a href="#item-py" class="headerlink" title="item.py"></a>item.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import scrapy</div><div class="line"></div><div class="line">class JdjrItem(scrapy.Item):</div><div class="line">    # define the fields for your item here like:</div><div class="line">    userReviewId = scrapy.Field()</div><div class="line">    body = scrapy.Field()</div><div class="line">    date = scrapy.Field()</div><div class="line">    name = scrapy.Field()</div><div class="line">    rating = scrapy.Field()</div><div class="line">    title = scrapy.Field()</div><div class="line">    time = scrapy.Field()</div></pre></td></tr></table></figure>
<h3 id="自定义header"><a href="#自定义header" class="headerlink" title="自定义header"></a>自定义header</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">class AppstoreSpider(scrapy.Spider):</div><div class="line">    name = &quot;ios&quot;</div><div class="line">    allowed_domains = [&quot;itunes.apple.com&quot;]</div><div class="line">    start_urls = []</div><div class="line">    start = 0</div><div class="line">    for i in range(10,12):</div><div class="line">        end = start + 100</div><div class="line">        endString = &apos;%d&apos; % end</div><div class="line">        startString = &apos;%d&apos; % start</div><div class="line">        start = end + 1</div><div class="line">        url1 = &quot;https://itunes.apple.com/WebObjects/MZStore.woa/wa/userReviewsRow?id=895682747&amp;displayable-kind=11&amp;startIndex=%s&amp;endIndex=%s&amp;sort=1&amp;appVersion=all&quot; % (startString,endString)</div><div class="line">        url2 = &quot;https://itunes.apple.com/WebObjects/MZStore.woa/wa/userReviewsRow?id=895682747&amp;displayable-kind=11&amp;startIndex=%s&amp;endIndex=%s&amp;sort=1&amp;appVersion=current&quot; % (startString,endString)</div><div class="line">        start_urls.append(url1)</div><div class="line">        start_urls.append(url2)</div><div class="line"></div><div class="line">    def start_requests(self):</div><div class="line"></div><div class="line">        headers = &#123;</div><div class="line">            &quot;Host&quot;: &quot;itunes.apple.com&quot;,</div><div class="line">            &quot;X-Apple-Tz&quot;: &quot;28800&quot;,</div><div class="line">            &quot;Connection&quot;: &quot;keep-alive&quot;,</div><div class="line">            &quot;Accept&quot;: &quot;*/*&quot;,</div><div class="line">            &quot;X-Apple-Store-Front&quot;: &quot;143465-19,32&quot;,</div><div class="line">            &quot;Proxy-Connection&quot;: &quot;keep-alive&quot;,</div><div class="line">            &quot;If-Modified-Since&quot;: &quot;Mon, 30 Oct 2017 05:09:14 GMT&quot;,</div><div class="line">            &quot;Accept-Language&quot;: &quot;zh-Hans;q=1.0, en;q=0.9&quot;,</div><div class="line">            &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</div><div class="line">            &quot;X-Apple-I-MD-RINFO&quot;: &quot;17106176&quot;,</div><div class="line">            &quot;X-Apple-I-MD-M&quot;: &quot;4yta1gxLU2/1yorU7oVB982KDbxQfTgDNV0Kx6rMh83dcH6GSFvvMX4j2xTK1pydINZyrdPRmrAqnMrx&quot;,</div><div class="line">            &quot;User-Agent&quot;: &quot;iTunes/12.5.5 (Macintosh; OS X 10.11.6) AppleWebKit/601.7.7&quot;,</div><div class="line">            &quot;X-Apple-I-Client-Time&quot;: &quot;2017-10-30T06:38:41Z&quot;,</div><div class="line">            &quot;Referer&quot;: &quot;https://itunes.apple.com/cn/app/%E4%BA%AC%E4%B8%9C%E9%87%91%E8%9E%8D-%E6%96%B0%E4%BA%BA%E9%A2%86666%E5%85%83%E5%A4%A7%E7%A4%BC%E5%8C%85/id895682747?mt=8&quot;,</div><div class="line">            &quot;X-Apple-I-MD&quot;: &quot;AAAABQAAABB/8E70ajsA2bpSsQneRzRzAAAAAQ==&quot;,</div><div class="line">            &quot;X-Dsid&quot;: &quot;1851386458&quot;,</div><div class="line">            &quot;Cookie&quot;: &quot;groupingPillToken=1_iphone; mt-asn-1851386458=5; mt-asn-1952598692=5; mt-tkn-1851386458=AquPBN7pBVJrtDMwCG1MrwviP60xe4f/EE45hsAOovLfR/ovUuHxcsKrlj2pxor0U9F3HIkuroemH+0MuFQnpjqUFC4oYoymULT5CpIKnJ3VpDni/Y/moZel5PjbSHG4GD+Ijl5r7uyk/NbjAbcP2c6m643pr8/RJ8pEGPfTmpVhsZJWGga7Uku1jMcsYZwUcq4thww=; mt-tkn-1952598692=AmPsxyX+Zm3hcSBdOCr1LAg942a/+QI1OZsorJ+0WD2wkyUHZ6Dv3jDaRipaZfgo7xzHgpeVUdtG70RFfh0FA5pOHGZGJ/5b/MiFc4VGex0OtgQ9XasD8i89/gI1Ai21Fi7kJkngVal3DewE6NPKYC8difiYN7R7wY/nH/Z3bcgGM9wio22SK/ZdDyrs38XhS717EKw=; X-Dsid=1851386458; itspod=24; mz_at0-1851386458=AwQAAAEBAAHWuQAAAABZo5zH8UZyjuA18kRtUGbvu8lLlA89jpk=; mz_at0-1952598692=AwQAAAEBAAHWUwAAAABX91VVP4AXK30/tKDBEUr2V9fwfUERl9A=; mz_at_ssl-1851386458=AwUAAAEBAAHWUwAAAABYFwZni0EdGJhw1mXiPHOZnkeCs8m3DaU=; mz_at_ssl-1952598692=AwUAAAEBAAHWUQAAAABXfIMB4QjT3cNSHm+BuLBHSWqkz1Ndd0g=; s_vi=[CS]v1|2B45BA5205011739-600001038013C541[CE]; xp_ab=1#isj11bm+3579+17Eg4xa0; xp_abc=17Eg4xa0; xp_ci=3z34ZpILzCUZz4Vrz9pTzlq8yrxrJ&quot;,</div><div class="line">            &quot;iCloud-DSID&quot;: &quot;1851386458&quot;</div><div class="line">        &#125;</div><div class="line">        for url in self.start_urls:</div><div class="line">            yield scrapy.Request(url,</div><div class="line">                                   headers=headers,</div><div class="line">                                       callback=self.parse)</div></pre></td></tr></table></figure>
<h3 id="定时跑多个spider"><a href="#定时跑多个spider" class="headerlink" title="定时跑多个spider"></a>定时跑多个spider</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">class AppstoreSpider(scrapy.Spider):</div><div class="line">    name = &quot;ios&quot;</div></pre></td></tr></table></figure>
<p>重点是这里的name，我们可以通过命令行来驱动这个name的spider</p>
<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="查看-新建-删除用户"><a href="#查看-新建-删除用户" class="headerlink" title="查看/新建/删除用户"></a>查看/新建/删除用户</h4><ul>
<li>cat /etc/passwd 可以查看所有用户的列表</li>
<li>cat /etc/group 查看用户组</li>
<li>userdel peter 删除用户</li>
<li>useradd phpq 增加用户</li>
<li>passwd xxx  该用户密码</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python输出表格]]></title>
      <url>/2017/10/31/2018/python%E8%BE%93%E5%87%BA%E8%A1%A8%E6%A0%BC/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">from prettytable import PrettyTable  </div><div class="line">x = PrettyTable([&quot;City name&quot;, &quot;Area&quot;, &quot;Population&quot;, &quot;Annual Rainfall&quot;])  </div><div class="line">x.align[&quot;City name&quot;] = &quot;l&quot;# Left align city names</div><div class="line">x.padding_width = 1# One space between column edges and contents (default)</div><div class="line">x.add_row([&quot;Adelaide&quot;,1295, 1158259, 600.5])  </div><div class="line">x.add_row([&quot;Brisbane&quot;,5905, 1857594, 1146.4])  </div><div class="line">x.add_row([&quot;Darwin&quot;, 112, 120900, 1714.7])  </div><div class="line">x.add_row([&quot;Hobart&quot;, 1357, 205556, 619.5])  </div><div class="line">x.add_row([&quot;Sydney&quot;, 2058, 4336374, 1214.8])  </div><div class="line">x.add_row([&quot;Melbourne&quot;, 1566, 3806092, 646.9])  </div><div class="line">x.add_row([&quot;Perth&quot;, 5386, 1554769, 869.4])  </div><div class="line">print x</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[appstroe评论爬取]]></title>
      <url>/2017/10/30/2018/appstroe%E8%AF%84%E8%AE%BA%E7%88%AC%E5%8F%96/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># coding:utf-8</div><div class="line">import requests</div><div class="line"></div><div class="line"># 禁用安全请求警告</div><div class="line">from requests.packages.urllib3.exceptions import InsecureRequestWarning</div><div class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</div><div class="line"></div><div class="line">url = &apos;https://itunes.apple.com/WebObjects/MZStore.woa/wa/userReviewsRow?id=895682747&amp;displayable-kind=11&amp;startIndex=600&amp;endIndex=800&amp;sort=1&amp;appVersion=all&apos;</div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">&quot;Host&quot;: &quot;itunes.apple.com&quot;,</div><div class="line">&quot;X-Apple-Tz&quot;: &quot;28800&quot;,</div><div class="line">&quot;Connection&quot;: &quot;keep-alive&quot;,</div><div class="line">&quot;Accept&quot;: &quot;*/*&quot;,</div><div class="line">&quot;X-Apple-Store-Front&quot;: &quot;143465-19,32&quot;,</div><div class="line">&quot;Proxy-Connection&quot;: &quot;keep-alive&quot;,</div><div class="line">&quot;If-Modified-Since&quot;: &quot;Mon, 30 Oct 2017 05:09:14 GMT&quot;,</div><div class="line">&quot;Accept-Language&quot;: &quot;zh-Hans;q=1.0, en;q=0.9&quot;,</div><div class="line">&quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</div><div class="line">&quot;X-Apple-I-MD-RINFO&quot;: &quot;17106176&quot;,</div><div class="line">&quot;X-Apple-I-MD-M&quot;: &quot;4yta1gxLU2/1yorU7oVB982KDbxQfTgDNV0Kx6rMh83dcH6GSFvvMX4j2xTK1pydINZyrdPRmrAqnMrx&quot;,</div><div class="line">&quot;User-Agent&quot;: &quot;iTunes/12.5.5 (Macintosh; OS X 10.11.6) AppleWebKit/601.7.7&quot;,</div><div class="line">&quot;X-Apple-I-Client-Time&quot;: &quot;2017-10-30T06:38:41Z&quot;,</div><div class="line">&quot;Referer&quot;: &quot;https://itunes.apple.com/cn/app/%E4%BA%AC%E4%B8%9C%E9%87%91%E8%9E%8D-%E6%96%B0%E4%BA%BA%E9%A2%86666%E5%85%83%E5%A4%A7%E7%A4%BC%E5%8C%85/id895682747?mt=8&quot;,</div><div class="line">&quot;X-Apple-I-MD&quot;: &quot;AAAABQAAABB/8E70ajsA2bpSsQneRzRzAAAAAQ==&quot;,</div><div class="line">&quot;X-Dsid&quot;: &quot;1851386458&quot;,</div><div class="line">&quot;Cookie&quot;: &quot;groupingPillToken=1_iphone; mt-asn-1851386458=5; mt-asn-1952598692=5; mt-tkn-1851386458=AquPBN7pBVJrtDMwCG1MrwviP60xe4f/EE45hsAOovLfR/ovUuHxcsKrlj2pxor0U9F3HIkuroemH+0MuFQnpjqUFC4oYoymULT5CpIKnJ3VpDni/Y/moZel5PjbSHG4GD+Ijl5r7uyk/NbjAbcP2c6m643pr8/RJ8pEGPfTmpVhsZJWGga7Uku1jMcsYZwUcq4thww=; mt-tkn-1952598692=AmPsxyX+Zm3hcSBdOCr1LAg942a/+QI1OZsorJ+0WD2wkyUHZ6Dv3jDaRipaZfgo7xzHgpeVUdtG70RFfh0FA5pOHGZGJ/5b/MiFc4VGex0OtgQ9XasD8i89/gI1Ai21Fi7kJkngVal3DewE6NPKYC8difiYN7R7wY/nH/Z3bcgGM9wio22SK/ZdDyrs38XhS717EKw=; X-Dsid=1851386458; itspod=24; mz_at0-1851386458=AwQAAAEBAAHWuQAAAABZo5zH8UZyjuA18kRtUGbvu8lLlA89jpk=; mz_at0-1952598692=AwQAAAEBAAHWUwAAAABX91VVP4AXK30/tKDBEUr2V9fwfUERl9A=; mz_at_ssl-1851386458=AwUAAAEBAAHWUwAAAABYFwZni0EdGJhw1mXiPHOZnkeCs8m3DaU=; mz_at_ssl-1952598692=AwUAAAEBAAHWUQAAAABXfIMB4QjT3cNSHm+BuLBHSWqkz1Ndd0g=; s_vi=[CS]v1|2B45BA5205011739-600001038013C541[CE]; xp_ab=1#isj11bm+3579+17Eg4xa0; xp_abc=17Eg4xa0; xp_ci=3z34ZpILzCUZz4Vrz9pTzlq8yrxrJ&quot;,</div><div class="line">&quot;iCloud-DSID&quot;: &quot;1851386458&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">r = requests.get(url, headers=headers, verify=True)</div><div class="line"># print(r.status_code)</div><div class="line">respose = r.text</div><div class="line">print(type(respose))</div><div class="line">print respose</div></pre></td></tr></table></figure>
<p>先说一下坑在哪里，那就是最新版本的ituns没有应用搜索这个功能，而appstroe的接口完全抓不到，这里要记住我们要使用10.11.6以前的系统版本，然后使用12.5.5.5以前的itunes版本</p>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS可执行文件分析记录系统构建]]></title>
      <url>/2017/10/25/2017/iOS%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%E8%AE%B0%E5%BD%95%E7%B3%BB%E7%BB%9F%E6%9E%84%E5%BB%BA/</url>
      <content type="html"><![CDATA[<ul>
<li>配置文件选项构建</li>
<li>设置文件路径和linkmap选项为YES</li>
<li>编写自动化解析脚本</li>
<li>编写自动打包脚本</li>
<li>将脚本进行编译，并且在服务器上进行安装</li>
<li>搭建可视化界面</li>
<li>将任务开始命令植入git</li>
<li>历史数据展示</li>
</ul>
<h3 id="配置文件选项构建"><a href="#配置文件选项构建" class="headerlink" title="配置文件选项构建"></a>配置文件选项构建</h3><p><img src="/25/2017/iOS可执行文件分析记录系统构建/../../../images/configImage.png" alt="Alt text"><br>重点：<br>所有的工程都要添加一个Analyse这个项，否则你选择这个进行编译，就会报错</p>
<h3 id="设置文件路径和linkmap选项为YES"><a href="#设置文件路径和linkmap选项为YES" class="headerlink" title="设置文件路径和linkmap选项为YES"></a>设置文件路径和linkmap选项为YES</h3><p><img src="/25/2017/iOS可执行文件分析记录系统构建/../../../images/linkmapconfig.png" alt="Alt text"></p>
<blockquote>
<ul>
<li>$(TARGET_TEMP_DIR)/$(PRODUCT_NAME)-LinkMap-$(CURRENT_VARIANT)-$(CURRENT_ARCH).txt</li>
<li>$(BUILD_DIR)/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)<br>我们可以设置路径为BUILD_DIR，这样就直接出现在Build这个目录下了</li>
</ul>
</blockquote>
<h3 id="编写自动化解析脚本"><a href="#编写自动化解析脚本" class="headerlink" title="编写自动化解析脚本"></a>编写自动化解析脚本</h3><h3 id="编写自动打包脚本"><a href="#编写自动打包脚本" class="headerlink" title="编写自动打包脚本"></a>编写自动打包脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcodebuild -workspace JDFinance.xcworkspace -scheme JDMobile -configuration Analyse build</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS安全点罗列]]></title>
      <url>/2017/10/23/2017/iOS%E5%AE%89%E5%85%A8%E7%82%B9%E7%BD%97%E5%88%97/</url>
      <content type="html"><![CDATA[<p>针对可执行文件去除符号表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strip JDMobile</div></pre></td></tr></table></figure>
<p>这样就去除了符号表，防止他人查看我们使用的类和方法，但是需要重新签名我们的包才能发出去</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据科学入门]]></title>
      <url>/2017/10/23/2018/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>产品本质上承载的是数据，通过对数据的挖掘然后不断的优化产品，从而达到变现的目的</p>
<p>关于大数据：</p>
<ul>
<li>数据来源 <ul>
<li>交易数据：业务开展必须记录的数据，比如基金交易数据，比如病例</li>
<li>行为数据：日志数据，这是最关键的点，比如操作习惯，什么时候喜欢使用，什么地点，一个没有病的人每天干什么，一个有病的人每天干什么</li>
</ul>
</li>
<li>全量加工<ul>
<li>无法通过采样的方式来达到目的，比如统计使用联通卡的用户比例，采某几个特征区域数据，然后加权后你发现放到全国大差不差，但是行为数据千差万别，并且对细分人群意义重大</li>
<li>分布式的必要性</li>
</ul>
</li>
<li>自动化应用<ul>
<li>相对于洞察应用而言，将数据总结为报表，然后决策人员根据数据进行决策，比如财务报表和运营报表，本质是数据到人再到人的决策，数据到机器然后到机器自动决策，这是自动化应用</li>
<li>比如广告系统和征信系统和自动补货系统，在人进行浏览的时候广告策略就会自动调整</li>
</ul>
</li>
</ul>
<p>具备了上边的特点才是一个典型的大数据问题</p>
<h3 id="落地"><a href="#落地" class="headerlink" title="落地"></a>落地</h3><p>具体到落地的时候，需要以下步骤：</p>
<ul>
<li>收集</li>
<li>数据转化为信息</li>
<li>挖掘</li>
<li>变现</li>
</ul>
<h3 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h3><p>目的：数据和流量或者IP变现</p>
<ul>
<li>流量变现：正常内容夹带付费内容或者可转化的内容</li>
<li>数据变现：根据用户偏好或者叫画像提高付费内容或者渠道的投放或者说由于数据的存在，流量的单位变现能力变强</li>
<li>品牌变现：利用熟悉的形象提高关注度和接受度，增加转化率，延伸利用熟悉品牌进行再营销</li>
</ul>
<p>举例1：广告位定价1万，这是流量变现，现在我们利用数据一个广告位一分为二，上边卖剃须刀下边卖护肤品，每个广告位卖6千，多卖2千，多的收入便是数据收入。大家双赢<br>举例2:网红，自媒体</p>
<p>原则：</p>
<ul>
<li>数据优于经验</li>
<li>自动先于人工</li>
</ul>
<h3 id="行为数据具体"><a href="#行为数据具体" class="headerlink" title="行为数据具体"></a>行为数据具体</h3><ul>
<li>屏幕拖动快慢</li>
<li>gg</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[图片压缩工具ImageOptim在git的集成]]></title>
      <url>/2017/10/23/2018/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7ImageOptim%E5%9C%A8git%E7%9A%84%E9%9B%86%E6%88%90/</url>
      <content type="html"><![CDATA[<p>过程是看看有没有装这个软件，如果没有装就先下载再装上，然后开始进行检索所有的图片，然后把图片传入这个软件，打开进行压缩</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">#coding:utf-8</div><div class="line"></div><div class="line">import sys,os,time,shutil</div><div class="line">import urllib </div><div class="line">import urllib2</div><div class="line">import zipfile</div><div class="line">import tarfile</div><div class="line"></div><div class="line">def un_tar(file_name):</div><div class="line">    tar = tarfile.open(file_name)</div><div class="line">    names = tar.getnames()</div><div class="line">    if os.path.isdir(file_name + &quot;_files&quot;):</div><div class="line">        pass</div><div class="line">    else:</div><div class="line">        os.mkdir(file_name + &quot;_files&quot;)</div><div class="line">    #因为解压后是很多文件，预先建立同名目录</div><div class="line">    for name in names:</div><div class="line">        tar.extract(name, file_name + &quot;_files/&quot;)</div><div class="line">    tar.close()</div><div class="line"></div><div class="line">if os.path.exists(&apos;/Applications/ImageOptim.app&apos;) == False:</div><div class="line">   print &apos;下载&apos;	</div><div class="line">   un_tar(&apos;ImageOptim.tar&apos;)</div><div class="line">   shutil.copytree(&apos;ImageOptim.tar_files/ImageOptim.app&apos;,&apos;/Applications/ImageOptim.app&apos;)</div><div class="line"></div><div class="line">text = os.popen(&apos;find . -name *.png&apos;).read()</div><div class="line">images = text.split(&apos;\n&apos;)</div><div class="line"></div><div class="line">imagepaths = &apos;&apos;</div><div class="line"></div><div class="line">for x in xrange(1,200):</div><div class="line">    image = images[x]</div><div class="line">    if chr(32) in image:</div><div class="line">       print &apos;该文件不可用，请去除文件名字的空格&apos; + image	</div><div class="line">       continue</div><div class="line"></div><div class="line">    imagepaths = imagepaths + &apos; &apos; + image</div><div class="line"></div><div class="line">os.system(&apos;open -a ImageOptim &apos; + imagepaths)</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS安全--符号表]]></title>
      <url>/2017/10/20/2017/iOS%E5%AE%89%E5%85%A8-%E7%AC%A6%E5%8F%B7%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>符号表中有些符号是必须的，但是很多符号都是去掉的。</p>
<p>先来看一个正常的二进制文件的符号表：</p>
<p>IOS安全–使用strip从符号表中去掉不需要的符号</p>
<p>从上面我们可以看到很多暴露的类名、函数名等，这让攻击者很容易看出你的程序中有哪些关键的逻辑。但是我们对该文件strip后，再来看它的符号表：</p>
<p><code>strip JDMobile</code></p>
<p>IOS安全–使用strip从符号表中去掉不需要的符号</p>
<p>这时我们看到程序中定义的函数在符号表中都没有了。</p>
<p>而且这样在反汇编的代码中也不会存在符号。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ios编译过程]]></title>
      <url>/2017/10/20/2017/ios%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>看一下ios项目的归档构建流程:</p>
<ul>
<li><p>准备构建环境，构建目录</p>
</li>
<li><p>编译主工程依赖的Pods工程的静态库或者Framework (=== BUILD TARGET Aspects OF PROJECT Pods WITH CONFIGURATION Debug ===)</p>
</li>
<li><p>编译主工程的源代码文件 (CompileC)</p>
</li>
<li><p>链接生成主工程对应的可执行文件 (Ld)</p>
</li>
<li><p>拷贝图片，localized字符串等资源文件 (CpResource)</p>
</li>
<li><p>编译storyboard文件 (CompileStoryboard)</p>
</li>
<li><p>CompileAssetCatalog</p>
</li>
<li><p>处理pinfo.list文件 (ProcessInfoPlistFile)</p>
</li>
<li><p>生成符号表文件(GenerateDSYMFile)</p>
</li>
<li><p>链接StoryBoard(LinkStoryboards)</p>
</li>
<li><p>执行配置的脚本文件(PhaseScriptExecution)</p>
</li>
<li><p>打包生成app文件，不是ipa文件(ProcessProductPackaging)</p>
</li>
<li><p>签名 (CodeSign)</p>
</li>
<li><p>校验 (Validate)</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ipa自动创建上传功能构建]]></title>
      <url>/2017/10/16/2017/ipa%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BA%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E6%9E%84%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>我们其实是对Application Loader功能进行脚本化<br><a id="more"></a></p>
<ul>
<li><p>做一个软链首先<code>ln -s /Applications/Xcode.app/Contents/Applications/Application\ Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool /usr/local/bin/altool</code></p>
</li>
<li><p>增加关联项目<code>ln -s /Applications/Xcode.app/Contents/Applications/Application\ Loader.app/Contents/itms /usr/local/itms</code></p>
</li>
<li><p>打包脚本<code>xcodebuild -workspace JDFinance.xcworkspace -scheme JDMobile -configuration Beta build</code></p>
</li>
<li><p>打包脚本<code>xcodebuild archive -workspace JDFinance.xcworkspace -scheme JDMobile -configuration Beta -archivePath JDMobile.xcarchive</code></p>
</li>
<li><p><code>altool -v -f JDMobile.ipa -u xxxxxxxx@126.com -p xxxxxx -t ios</code>检验是否可以进行上传</p>
</li>
<li><p><code>altool --upload-app -f JDMobile.ipa -u xxxxxxxx@126.com -p xxxxxxxx -t ios</code>上传</p>
</li>
</ul>
<p><code>ERROR ITMS-90535: &quot;Unexpected CFBundleExecutable Key. The bundle at &#39;Payload/JDMobile.app/CBPResource.bundle&#39; does not contain a bundle executable. If this bundle intentionally does not contain an executable, consider removing the CFBundleExecutable key</code>出现这个错误的时候删除这个key就好</p>
<p><code>ERROR ITMS-90207: &quot;Invalid Bundle. The bundle at &#39;JDMobile.app&#39; does not contain a bundle executable.&quot;</code>出现这个错误的时候看看里边是不是存在一个可执行文件，当然如果你编译一个bundle是完全可能的，这个时候你就要先手动编译，然后删除可执行文件，然后在手动加入进去就好了</p>
<p>签名失败，codesign那么看一看你的证书是不是在钥匙串里边，要做的就是把它弄到系统里边</p>
]]></content>
      
        
        <tags>
            
            <tag> 自动化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo多端同步错误解决方案]]></title>
      <url>/2017/10/11/2017/hexo%E5%A4%9A%E7%AB%AF%E5%90%8C%E6%AD%A5%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p><code>hexo d</code>这个命令是相当于直接<code>git push</code>，如果只有一台机器那么是没有问题，但是如果是两台机器，那么还少一步<code>git pull</code>，所以如果是两台机器同时维护一个库的时候需要</p>
<ul>
<li>进入到<code>.deploy_git</code>这个目录下</li>
<li>然后执行<code>git pull origin master --allow-unrelated-histories</code></li>
<li>然后再push</li>
<li>执行<code>hexo d</code>就好了</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2017/10/11/2016/%E8%BD%AC-block%E8%BF%9B%E9%98%B61-block%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<hr>
<p>title: (转)block进阶1–block实现<br>date: 2016-06-29 14:15:20<br>tags:</p>
<ul>
<li>iOS基础<br>categories: iOS</li>
</ul>
<hr>
<p>本系列博文总结自《Pro Multithreading and Memory Management for iOS and OS X with ARC》</p>
<a id="more"></a>
<p>block 顾名思义就是代码块，将同一逻辑的代码放在一个块，使代码更简洁紧凑，易于阅读，而且它比函数使用更方便，代码更美观，因而广受开发者欢迎。但同时 block 也是 iOS 开发中坑最多的地方之一，因此有必要了解下 block 的实现原理，知其然，更知其所以然，才能从根本上避免挖坑和踩坑。</p>
<p>需要知道的是，block 只是 Objective-C 对闭包的实现，并不是 iOS 独有的概念，在 C++、Java 等语言也有实现闭包，名称不同而已。</p>
<blockquote>
<p>以下研究所用的过程代码由 clang 编译前端生成，仅作理解之用。实际上 clang 根本不会将 block 转换成人类可读的代码，它对 block 到底做了什么，谁也不知道。</p>
</blockquote>
<p>所以，切勿将过程代码当做block的实际实现，切记切记！！！</p>
<p>将下面的 <code>test.m</code> 代码用 clang 工具翻译 <code>test.cpp</code> 代码</p>
<blockquote>
<p>clang -rewrite-objc test.m</p>
</blockquote>
<p><code>test.m 代码</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/************* Objective-C 源码 *************/</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    void (^blk)(void) = ^&#123; printf(&quot;Block\n&quot;); &#125;; </div><div class="line">    blk();</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>test.cpp</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">/************* 使用 clang 翻译后如下 *************/</div><div class="line">struct __block_impl</div><div class="line">&#123;</div><div class="line">    void *isa;</div><div class="line">    int Flags;</div><div class="line">    int Reserved;</div><div class="line">    void *FuncPtr;</div><div class="line">&#125;;</div><div class="line">struct __main_block_impl_0</div><div class="line">&#123;</div><div class="line">    struct __block_impl impl;</div><div class="line">    struct __main_block_desc_0* Desc;</div><div class="line">    __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0)</div><div class="line">    &#123;</div><div class="line">        impl.isa = &amp;_NSConcreteStackBlock;</div><div class="line">        impl.Flags = flags;</div><div class="line">        impl.FuncPtr = fp;</div><div class="line">        Desc = desc;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself)</div><div class="line">&#123;</div><div class="line">    printf(&quot;Block\n&quot;);</div><div class="line">&#125;</div><div class="line">static struct __main_block_desc_0</div><div class="line">&#123;</div><div class="line">    size_t reserved;</div><div class="line">    size_t Block_size;</div><div class="line">&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0) &#125;;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    void (*blk)(void) = (void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA);</div><div class="line">    ((void (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着，我们逐一来看下这些函数和结构体</p>
<h2 id="block-结构体信息详解"><a href="#block-结构体信息详解" class="headerlink" title="block 结构体信息详解"></a>block 结构体信息详解</h2><h3 id="struct-block-impl"><a href="#struct-block-impl" class="headerlink" title="struct __block_impl"></a>struct __block_impl</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// __block_impl 是 block 实现的结构体</div><div class="line">struct __block_impl</div><div class="line">&#123;</div><div class="line">    void *isa;</div><div class="line">    int Flags;</div><div class="line">    int Reserved;</div><div class="line">    void *FuncPtr;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li><p><code>isa</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">impl.isa = &amp;_NSConcreteStackBlock; </div><div class="line">impl.isa = &amp;_NSConcreteMallocBlock; </div><div class="line">impl.isa = &amp;_NSConcreteGlobalBlock;</div></pre></td></tr></table></figure>
</li>
<li><p>Flags<br>按位承载 block 的附加信息；</p>
</li>
<li><p>Reserved<br>保留变量；</p>
</li>
<li><p>FuncPtr<br>函数指针，指向 Block 要执行的函数，即{ printf(“Block\n”) };</p>
</li>
</ul>
<h3 id="struct-main-block-impl-0"><a href="#struct-main-block-impl-0" class="headerlink" title="struct __main_block_impl_0"></a>struct __main_block_impl_0</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// __main_block_impl_0 是 block 实现的结构体，也是 block 实现的入口</div><div class="line">struct __main_block_impl_0</div><div class="line">&#123;</div><div class="line">    struct __block_impl impl;</div><div class="line">    struct __main_block_desc_0* Desc;</div><div class="line">    __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0)</div><div class="line">    &#123;</div><div class="line">        impl.isa = &amp;_NSConcreteStackBlock;</div><div class="line">        impl.Flags = flags;</div><div class="line">        impl.FuncPtr = fp;</div><div class="line">        Desc = desc;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li><p>impl<br>block 实现的结构体变量，该结构体前面已说明；</p>
</li>
<li><p>Desc<br>描述 block 的结构体变量；</p>
</li>
<li><p>__main_block_impl_0<br>结构体的构造函数，初始化结构体变量 impl、Desc；</p>
</li>
</ul>
<h3 id="static-void-main-block-func-0"><a href="#static-void-main-block-func-0" class="headerlink" title="static void __main_block_func_0"></a>static void __main_block_func_0</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// __main_block_func_0 是 block 要最终要执行的函数代码</div><div class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself)</div><div class="line">&#123;</div><div class="line">    printf(&quot;Block\n&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="static-struct-main-block-desc-0"><a href="#static-struct-main-block-desc-0" class="headerlink" title="static struct __main_block_desc_0"></a>static struct __main_block_desc_0</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// __main_block_desc_0 是 block 的描述信息结构体</div><div class="line">static struct __main_block_desc_0</div><div class="line">&#123;</div><div class="line">    size_t reserved;</div><div class="line">    size_t Block_size;</div><div class="line">&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0) &#125;;</div></pre></td></tr></table></figure>
<ul>
<li><p>reserved<br>结构体信息保留字段</p>
</li>
<li><p>Block_size<br>结构体大小</p>
</li>
</ul>
<p>此处已定义了一个该结构体类型的变量 __main_block_desc_0_DATA</p>
<blockquote>
<p><img src="http://i4.piimg.com/567571/75ff5f7241b14097.png" alt="block执行过程"></p>
</blockquote>
<p>接着再看 block 获取外部变量</p>
<h2 id="block-获取外部变量"><a href="#block-获取外部变量" class="headerlink" title="block 获取外部变量"></a>block 获取外部变量</h2><p>运行下面的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int intValue = 1;</div><div class="line">    void (^blk)(void) = ^&#123; printf(&quot;intValue = %d\n&quot;, intValue); &#125;;</div><div class="line">    blk();</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>打印结果</p>
<p>intValue = 1<br>和第一段源码不同的是，这里多了个局部变量 intValue，而且还在 block 里面获取到了。</p>
<p>通过前一段对 block 源码的学习，我们已经了解到 block 的函数定义在 main() 函数之外，那它又是如何获取 main() 里面的局部变量呢？为了解开疑惑，我们再次用 clang 重写这段代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">struct __block_impl</div><div class="line">&#123;</div><div class="line">    void *isa;</div><div class="line">    int Flags;</div><div class="line">    int Reserved;</div><div class="line">    void *FuncPtr;</div><div class="line">&#125;;</div><div class="line">struct __main_block_impl_0</div><div class="line">&#123;</div><div class="line">    struct __block_impl impl;</div><div class="line">    struct __main_block_desc_0* Desc;</div><div class="line">    int intValue;</div><div class="line">    __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _intValue, int flags=0) : intValue(_intValue)</div><div class="line">    &#123;</div><div class="line">        impl.isa = &amp;_NSConcreteStackBlock;</div><div class="line">        impl.Flags = flags;</div><div class="line">        impl.FuncPtr = fp;</div><div class="line">        Desc = desc;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself)</div><div class="line">&#123;</div><div class="line">    int intValue = __cself-&gt;intValue; // bound by copy</div><div class="line">    printf(&quot;intValue = %d\n&quot;, intValue);</div><div class="line">&#125;</div><div class="line">static struct __main_block_desc_0</div><div class="line">&#123;</div><div class="line">    size_t reserved;</div><div class="line">    size_t Block_size;</div><div class="line">&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0)&#125;;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int intValue = 1;</div><div class="line">    void (*blk)(void) = (void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, intValue);</div><div class="line">    ((void (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>原来 block 通过参数值传递获取到 intValue 变量，通过函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">__main_block_impl_0 (void *fp, struct __main_block_desc_0 *desc, int _intValue, int flags=0) : intValue(_intValue)</div><div class="line">保存到 __main_block_impl_0 结构体的同名变量 intValue，通过代码 int intValue = __cself-&gt;intValue; 取出 intValue，打印出来。</div><div class="line"></div><div class="line">构造函数 __main_block_impl_0 冒号后的表达式 intValue(_intValue) 的意思是，用 _intValue 初始化结构体成员变量 intValue。</div></pre></td></tr></table></figure></p>
<p>有四种情况下应该使用初始化表达式来初始化成员：<br>1：初始化const成员<br>2：初始化引用成员<br>3：当调用基类的构造函数，而它拥有一组参数时<br>4：当调用成员类的构造函数，而它拥有一组参数时</p>
<p>至此，我们已经了解了block 的实现，以及获取外部变量的原理。但是，我们还不能在 block 内修改 intValue 变量。如果你有心试下，在 block 内部修改 intValue 的值，会报编译错误</p>
<p>Variable is not assignable(missing __block type specifier)</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[python学习环境搭建-jupyter notebook]]></title>
      <url>/2017/10/11/2018/python%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-jupyter-notebook/</url>
      <content type="html"><![CDATA[<h3 id="先说一下好处："><a href="#先说一下好处：" class="headerlink" title="先说一下好处："></a>先说一下好处：</h3><p>我们学习python可以在命令行输入python直接进入python环境进行练习，但是问题是多行运行比较繁琐，这里我们推荐使用jupyter来运行代码</p>
<h3 id="再说一下环境-："><a href="#再说一下环境-：" class="headerlink" title="再说一下环境 ："></a>再说一下环境 ：</h3><p>MAC台式机</p>
<p>python:mac下自带Python 2.7.10</p>
<ul>
<li><p>1.先升级了pip安装工具：sudo python -m pip install –upgrade –force pip</p>
</li>
<li><p>2.安装setuptools 工具：sudo pip install setuptools==33.1.1</p>
</li>
<li><p>3.安装 Python-dateutil:sudo pip install python-dateutil==2.2</p>
</li>
<li><p>4.安装six:sudo pip install –ignore-installed six</p>
</li>
<li><p>5.安装jupyter：sudo install jupyter</p>
</li>
</ul>
<p>启动命令：直接在终端输入jupyter notebook</p>
<p>折腾了半天，才搞好，以上命令是在安装的时候遇到各种问题时使用的，下面写记录一下遇到的问题 以及对应的解决办法</p>
<p>1.ImportError: cannot import name _thread  报这个错误 解决办法：</p>
<p>sudo pip uninstall python-dateutil<br>sudo pip install python-dateutil==2.2<br>2.File “/Library/Python/2.7/site-packages/dateutil/tz/_common.py”, line 2, in <module></module></p>
<p>from six.moves import _thread<br>ImportError: cannot import name _thread</p>
<p>解决办法：安装six 命令再上方</p>
<p>解决了上面的问题 启动的时候 还是会报错这是个顽固的错误：</p>
<p>  File “/Library/Python/2.7/site-packages/packaging/requirements.py”, line 59, in <module></module></p>
<pre><code>MARKER_EXPR = originalTextFor(MARKER_EXPR())(&quot;marker&quot;)
</code></pre><p>TypeError: <strong>call</strong>() takes exactly 2 arguments (1 given)</p>
<p>解决办法：根据错误信息直接找到路径中的文件，打开文件将 59 行中的函数修改</p>
<p>59：#MARKER_EXPR = originalTextFor(MARKER_EXPR())(“marker”)<br>60：MARKER_EXPR = originalTextFor(MARKER_EXPR(“marker”))</p>
<p>修改好之后直接保存文件 再次运行jupyter notebook 命令 即可启动jupyter </p>
<p>关于six那个问题，还有一点 需要删除我们默认路径下的six 否则 即使更新成功了 也不会使用最新的six</p>
<p>方法：先查看一下默认的six路径</p>
<p> import six</p>
<h3 id="最后说一下怎么使用"><a href="#最后说一下怎么使用" class="headerlink" title="最后说一下怎么使用"></a>最后说一下怎么使用</h3><p>file–&gt;new–&gt;python2</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python发送邮件代码记录]]></title>
      <url>/2017/10/10/2018/python%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">#coding:utf-8</div><div class="line"></div><div class="line">from email import encoders</div><div class="line">from email.header import Header</div><div class="line">from email.mime.text import MIMEText</div><div class="line">from email.mime.multipart import MIMEMultipart</div><div class="line">from email.mime.application import MIMEApplication</div><div class="line">from email.utils import parseaddr, formataddr</div><div class="line">import smtplib,os</div><div class="line"></div><div class="line">def _format_addr(s):</div><div class="line">    name, addr = parseaddr(s)</div><div class="line">    return formataddr(( \</div><div class="line">        Header(name, &apos;utf-8&apos;).encode(), \</div><div class="line">        addr.encode(&apos;utf-8&apos;) if isinstance(addr, unicode) else addr))</div><div class="line"></div><div class="line">def sendMail():</div><div class="line">    username = &apos;hanshenghui&apos;</div><div class="line">    password = &apos;11111111111&apos;</div><div class="line"></div><div class="line">    from_addr = &apos;hanshenghui@jd.com&apos;</div><div class="line">    to_addr = &apos;hanshenghui@jd.com&apos;</div><div class="line">    # to_addrList = [&apos;hanshenghui@jd.com&apos;,&apos;gaixutian@jd.com&apos;,&apos;wangzhenyang1@jd.com&apos;]</div><div class="line">    to_addrList = [&apos;hanshenghui@jd.com&apos;,&apos;wangxiugang@jd.com&apos;,&apos;dingchao1@jd.com&apos;]</div><div class="line">    smtp_server = &apos;smtp.jd.local&apos;</div><div class="line"></div><div class="line">    msg = MIMEMultipart()</div><div class="line">    part = MIMEText(&quot;这是一封测试邮件\n\n现在主要有以下几个待确定点:\n1.我们可以通过对数据进行提取，做一些分析和简介作为邮件的正文，或者是一些其他什么内容\n2.现在邮箱我添加了名字为JDJRMobile，实际上是我自己的邮箱，用哪个邮箱来发送比较合适\n3.检测哪个分支\n4.检测频率\n\n&quot;)</div><div class="line">    msg.attach(part)</div><div class="line">    </div><div class="line">    basePath = os.environ[&apos;HOME&apos;]</div><div class="line">    reportPath = basePath + &apos;/Documents/Build/JDJRAPPAndroid/infer-out/report.csv&apos;</div><div class="line">    if os.path.exists(reportPath):    </div><div class="line">       part1 = MIMEApplication(open(reportPath,&apos;rb&apos;).read())</div><div class="line">       part1.add_header(&apos;Content-Disposition&apos;, &apos;attachment&apos;, filename=&quot;report.csv&quot;)</div><div class="line">       msg.attach(part1)</div><div class="line"></div><div class="line">    # part2 = MIMEApplication(open(&apos;cesh.png&apos;,&apos;rb&apos;).read())</div><div class="line">    # part2.add_header(&apos;Content-Disposition&apos;, &apos;attachment&apos;, filename=&quot;cesh.png&quot;)</div><div class="line">    # msg.attach(part2)</div><div class="line"></div><div class="line">    msg[&apos;From&apos;] = _format_addr(u&apos;JDJRMobile &lt;%s&gt;&apos; % from_addr)</div><div class="line">    msg[&apos;To&apos;] = _format_addr(&apos;JDJR&apos;)</div><div class="line">    msg[&apos;Subject&apos;] = Header(u&apos;JDJR安卓源码检测报告&apos;, &apos;utf-8&apos;).encode()</div><div class="line"></div><div class="line">    server = smtplib.SMTP(smtp_server,25)</div><div class="line">    server.set_debuglevel(1)</div><div class="line">    server.sendmail(from_addr, to_addrList, msg.as_string())</div><div class="line">    server.quit()</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xcode工程加密思路]]></title>
      <url>/2017/10/10/2018/xcode%E5%B7%A5%E7%A8%8B%E5%8A%A0%E5%AF%86%E6%80%9D%E8%B7%AF/</url>
      <content type="html"><![CDATA[<p>现在有这么一个需求，如何做到如果不安装我们的开发环境，就无法查看iOS工程。<br>首先我们如果对所有的代码进行加密这肯定是一个浩大的工程，所以我们选择是对project加密，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">/usr/bin/env python</div><div class="line">#coding:utf-8</div><div class="line"></div><div class="line">from Crypto.Cipher import AES  </div><div class="line">from binascii import b2a_hex,a2b_hex  </div><div class="line">  </div><div class="line">class prpcrypt():   #定义一个类  </div><div class="line">    def __init__(self,key):  </div><div class="line">        self.key=key  </div><div class="line">        self.mode=AES.MODE_CBC  </div><div class="line">    def encrypt(self,text):  </div><div class="line">        cryptor=AES.new(self.key,self.mode,self.key)  </div><div class="line">        x = len(text) % 16  </div><div class="line">        if x != 0:  </div><div class="line">            text = text + &apos;0&apos; * (16 - x)     #不满16，32，64位补0  </div><div class="line">        self.ciphertext=cryptor.encrypt(text)  </div><div class="line">        return b2a_hex(self.ciphertext)  </div><div class="line">    def decrypt(self,text):  </div><div class="line">        cryptor=AES.new(self.key,self.mode,self.key)  </div><div class="line">        plain_text=cryptor.decrypt(a2b_hex(text))  </div><div class="line">        return plain_text.rstrip(&apos;\0&apos;)  </div><div class="line">  </div><div class="line">pc=prpcrypt(&apos;tecentbluewhaleA&apos;) #自己设定的密钥</div><div class="line"></div><div class="line">f = open(&apos;project.pbxproj&apos;,&apos;r&apos;)</div><div class="line">text = f.read()</div><div class="line">liens = text.split(&apos;\n&apos;)</div><div class="line"></div><div class="line">if len(liens) &gt; 10:</div><div class="line">    item = liens[10]</div><div class="line">    print item</div><div class="line">    # item = pc.decrypt(item)</div><div class="line">    item = pc.encrypt(item)</div><div class="line">    item = item.replace(&apos;000000000000000&apos;,&apos;&apos;)</div><div class="line">    print item</div><div class="line">    liens[10] = item</div><div class="line"></div><div class="line">for i in range(0,len(liens) - 1):</div><div class="line">    liens[i] = liens[i] + &apos;\n&apos;</div><div class="line"></div><div class="line">strings = &apos;&apos;.join(liens)</div><div class="line"></div><div class="line">f = open(&apos;project.pbxproj&apos;,&apos;w&apos;)</div><div class="line">f.writelines(strings)</div><div class="line">f.close()</div></pre></td></tr></table></figure>
<p>这里我们使用到了pycrypto库，安装的时候需要先卸载<br><code>sudo pip uninstall crypto</code><br><code>sudo pip uninstall pycrypto</code></p>
<p>然后<br><code>sudo pip install pycrypto</code>这样就安装好了需要的库</p>
<p>关于我们加密那哪些东西，其实主要是project文件里边的解析文件，将一些关键是被符号进行加密，其实如果查看git操作记录是可以发现该如何还原的，这个时候就需要靠多行替换来增大替换的工作量来人为设置门槛</p>
<p>另外需要配合改装的git，在commit的时候进行加密然后commit，在pull的时候也是解密然后commit一下，这样我们就做到了，在远端库里边是不能被直接有序查看的代码，在本地需要配合我们的git才能被顺畅的使用</p>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xcode多版本自动化打包设置]]></title>
      <url>/2017/10/10/2018/xcode%E5%A4%9A%E7%89%88%E6%9C%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>如果你升级了xcode但是这个时候你又想降级回去，你发现appstore已经不要指望了，我们需要下载一个你需要版本的xcode。<br>下载各个Xcode版本的地址<code>https://developer.apple.com/download/more</code><br>然后放置到我们的程序目录下，改个名字比如说叫Xcode2<br>但是现在问题又来了，加入你是个打包服务器，你使用的是xcodebuild来打包的，这个时候两个版本的xcode同时存在，它如何选择sdk进行打包呢？</p>
<ul>
<li>首先查看sdk版本     <code>xcodebuild -showsdks</code></li>
<li>然后切换默认的xcode <code>sudo xcode-select -switch /Applications/Xcode2.app</code></li>
<li>然后在执行<code>xcodebuild -showsdks</code></li>
</ul>
<p>你会发现sdk已经变了，这个时候你使用xcodebuild来打包可以选择你需要的这个版本的sdk了</p>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac中的二进制文件]]></title>
      <url>/2017/10/09/2018/Mach-O%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>在Unix系统中，任何文件都可以通过chmod+x命令来标记为可执行文件，但是这并不能保证这个文件是能够被执行的，这个标志只是告诉系统这个文件可以读入内容，然后寻找一个头签名，据此可以确定精确的可执行文件格式，这个文件签名通常称为”magic”。<br>例如:</p>
<ul>
<li>#!脚本</li>
<li>0xcafebabe/0xbebafeca包含多种架构支持的二进制，又被称为通用二进制或者胖二进制</li>
<li>0xfeedface(32位)，0xfeedfacf(64位)Mach-O格式或者叫OSX原生二进制格式</li>
</ul>
<h3 id="胖二进制"><a href="#胖二进制" class="headerlink" title="胖二进制"></a>胖二进制</h3><p>通用二进制只不过是其支持的各种架构的二进制文件的打包文件，这种格式的文件包含一个文件头，然后文件头后面依次拷贝了每一种支持架构的二进制文件。</p>
<ul>
<li>通用二进制文件的处理工具叫做<code>lipo</code>脂肪的意思，对应胖二进制的意思</li>
<li>这个工具可以提取，删除和替换通用二进制文件中制定架构的二进制代码，因此可以通过这个工具对二进制文件进行瘦身</li>
</ul>
<h3 id="Mach-O"><a href="#Mach-O" class="headerlink" title="Mach-O"></a>Mach-O</h3><p>首先看mach_header<br><code>otool -hV JDMobile</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Mach header</div><div class="line"></div><div class="line">magic cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags</div><div class="line"></div><div class="line">MH_MAGIC_64   ARM64        ALL  0x00     EXECUTE    68       7464   NOUNDEFS DYLDLINK TWOLEVEL WEAK_DEFINES BINDS_TO_WEAK PIE</div></pre></td></tr></table></figure></p>
<ul>
<li>magic魔数代表32或者64位</li>
<li>cputype和subcuptype代表cup类型</li>
<li>filetype代表文件类型(可执行文件，库文件，核心转储文件，内核扩展)</li>
<li>ncmds和sizeofcmds用于加载的家在命令的条数和大小</li>
<li>flags代表动态连接器(dyld)的标志</li>
</ul>
<h3 id="分析方法"><a href="#分析方法" class="headerlink" title="分析方法"></a>分析方法</h3><p>stings<br>otool<br>nm</p>
<h4 id="otool"><a href="#otool" class="headerlink" title="otool"></a>otool</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">-f print the fat headers</div><div class="line">-a print the archive header</div><div class="line">-h print the mach header</div><div class="line">-l print the load commands</div><div class="line">-L print shared libraries used #使用到的库</div><div class="line">-D print shared library id name #支持的架构arm64 armv7</div><div class="line">-t print the text section (disassemble with -v)#查看数据段，基本无用</div><div class="line">-p &lt;routine name&gt;  start dissassemble from routine name#无用</div><div class="line">-s &lt;segname&gt; &lt;sectname&gt; print contents of section</div><div class="line">-d print the data section</div><div class="line">-o print the Objective-C segment</div><div class="line">-r print the relocation entries</div><div class="line">-S print the table of contents of a library</div><div class="line">-T print the table of contents of a dynamic shared library</div><div class="line">-M print the module table of a dynamic shared library</div><div class="line">-R print the reference table of a dynamic shared library</div><div class="line">-I print the indirect symbol table</div><div class="line">-H print the two-level hints table</div><div class="line">-G print the data in code table</div><div class="line">-v print verbosely (symbolically) when possible</div><div class="line">-V print disassembled operands symbolically</div><div class="line">-c print argument strings of a core file</div><div class="line">-X print no leading addresses or headers</div><div class="line">-m don&apos;t use archive(member) syntax</div><div class="line">-B force Thumb disassembly (ARM objects only)</div><div class="line">-q use llvm&apos;s disassembler (the default)</div><div class="line">-Q use otool(1)&apos;s disassembler</div><div class="line">-mcpu=arg use `arg&apos; as the cpu for disassembly</div><div class="line">-j print opcode bytes</div><div class="line">-P print the info plist section as strings</div><div class="line">-C print linker optimization hints</div></pre></td></tr></table></figure>
<h3 id="瘦身实战"><a href="#瘦身实战" class="headerlink" title="瘦身实战"></a>瘦身实战</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"># Address	Size    	Segment	Section</div><div class="line">0x1000070C0	0x02C814F0	__TEXT	__text</div><div class="line">0x102C885B0	0x00005C58	__TEXT	__stubs</div><div class="line">0x102C8E208	0x0000420C	__TEXT	__stub_helper</div><div class="line">0x102C92420	0x002C8B1F	__TEXT	__const</div><div class="line">0x102F5AF3F	0x0012A102	__TEXT	__objc_methname</div><div class="line">0x103085050	0x0017170F	__TEXT	__cstring</div><div class="line">0x1031F6760	0x000120F8	__TEXT	__ustring</div><div class="line">0x103208858	0x0002402D	__TEXT	__objc_classname</div><div class="line">0x10322C885	0x00028B82	__TEXT	__objc_methtype</div><div class="line">0x103255408	0x000C4E54	__TEXT	__gcc_except_tab</div><div class="line">0x10331A25C	0x00055918	__TEXT	__unwind_info</div><div class="line">0x10336FB78	0x00000464	__TEXT	__eh_frame</div><div class="line">0x103370000	0x00001910	__DATA	__got</div><div class="line">0x103371910	0x00003D90	__DATA	__la_symbol_ptr</div><div class="line">0x1033756A0	0x00000438	__DATA	__mod_init_func</div><div class="line">0x103375AE0	0x000DF810	__DATA	__const</div><div class="line">0x1034552F0	0x000BA100	__DATA	__cfstring</div><div class="line">0x10350F3F0	0x0000BAB0	__DATA	__objc_classlist</div><div class="line">0x10351AEA0	0x00000428	__DATA	__objc_nlclslist</div><div class="line">0x10351B2C8	0x00001120	__DATA	__objc_catlist</div><div class="line">0x10351C3E8	0x000000C0	__DATA	__objc_nlcatlist</div><div class="line">0x10351C4A8	0x000015E0	__DATA	__objc_protolist</div><div class="line">0x10351DA88	0x00000008	__DATA	__objc_imageinfo</div><div class="line">0x10351DA90	0x004ECB80	__DATA	__objc_const</div><div class="line">0x103A0A610	0x00047820	__DATA	__objc_selrefs</div><div class="line">0x103A51E30	0x00000148	__DATA	__objc_protorefs</div><div class="line">0x103A51F78	0x0000AA08	__DATA	__objc_classrefs</div><div class="line">0x103A5C980	0x00007DC8	__DATA	__objc_superrefs</div><div class="line">0x103A64748	0x0001E8A0	__DATA	__objc_ivar</div><div class="line">0x103A82FE8	0x00074B30	__DATA	__objc_data</div><div class="line">0x103AF7B20	0x002FCC08	__DATA	__data</div><div class="line">0x103DF4740	0x00489580	__DATA	__bss</div><div class="line">0x10427E000	0x000AD71C	__DATA	__common</div></pre></td></tr></table></figure>
<h4 id="查看所有编译进去的方法"><a href="#查看所有编译进去的方法" class="headerlink" title="查看所有编译进去的方法"></a>查看所有编译进去的方法</h4><p><code>nm JDMobile</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="查看所有被使用的方法"><a href="#查看所有被使用的方法" class="headerlink" title="查看所有被使用的方法"></a>查看所有被使用的方法</h4><p><code>otool -v -s __DATA  __objc_selrefs JDMobile-build-beta</code><br>-s 是说我要看这个seg下的这个section<br>-v 是说尽可能展示可识别内容</p>
<p><code>GetFileInfo filename| grep modified</code>查看文件信息，包括</p>
<blockquote>
<ul>
<li>directory: “/Users/jrmacpro/Library/Developer/Xcode/DerivedData/JDFinance-eqeqtaeyecxhiqgogjuodubajlyt/Build/Products/Beta-iphoneos/JDMobile.app”</li>
<li>attributes: avbstclinmedz</li>
<li>created: 10/18/2017 12:55:09</li>
<li>modified: 10/18/2017 12:59:11</li>
</ul>
</blockquote>
<h3 id="nm的使用"><a href="#nm的使用" class="headerlink" title="nm的使用"></a>nm的使用</h3><p>nm [option(s)] [file(s)]<br>有用的options:</p>
<p>-A 在每个符号信息的前面打印所在对象文件名称；</p>
<p>-C 输出demangle过了的符号名称；</p>
<p>-D 打印动态符号；</p>
<p>-l 使用对象文件中的调试信息打印出所在源文件及行号；</p>
<p>-n 按照地址/符号值来排序；</p>
<p>-u 打印出那些未定义的符号；</p>
<p>常见的符号类型:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">A 该符号的值在今后的链接中将不再改变；</div><div class="line">B 该符号放在BSS段中，通常是那些未初始化的全局变量；</div><div class="line">D 该符号放在普通的数据段中，通常是那些已经初始化的全局变量；</div><div class="line">T 该符号放在代码段中，通常是那些全局非静态函数；</div><div class="line">U 该符号未定义过，需要自其他对象文件中链接进来；</div><div class="line">W 未明确指定的弱链接符号；同链接的其他对象文件中有它的定义就用上，</div><div class="line">否则就用一个系统特别指定的默认值。</div></pre></td></tr></table></figure>
<p>注意几点：<br>-C 总是适用于c++编译出来的对象文件。还记得c++中有重载么？为了区分重载函数，c++编译器会将函数返回值/参数等信息附加到函数名称中去形成一个mangle过的符号，那用这个选项列出符号的时候，做一个逆操作，输出那些原始的、我们可理解的符号名称。<br>使用 -l 时，必须保证你的对象文件中带有符号调式信息，这一般要求你在编译的时候指定一个 -g 选项，见 Linux:Gcc。<br>使用nm前，最好先用Linux:File查看对象文件所属处理器架构，然后再用相应交叉版本的nm工具。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS进阶 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[otool作用以及使用]]></title>
      <url>/2017/09/28/2018/otool%E4%BD%9C%E7%94%A8%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>首先来看看那些命令<br><a id="more"></a></p>
<ul>
<li>-h print the mach header打印头部</li>
<li></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[find与grep命令]]></title>
      <url>/2017/09/22/2017/find%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul>
<li>find命令是根据文件的属性进行查找，如文件名，文件大小，所有者，所属组，是否为空，访问时间，修改时间等。 </li>
<li>grep是根据文件的内容进行查找，会对文件的每一行按照给定的模式(patter)进行匹配查找。</li>
</ul>
<h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>基本格式：find  path expression</p>
<h3 id="按照文件名查找"><a href="#按照文件名查找" class="headerlink" title="按照文件名查找"></a>按照文件名查找</h3><ul>
<li><code>find / -name httpd.conf</code> #在根目录下查找文件httpd.conf，表示在整个硬盘查找</li>
<li><code>find /etc -name httpd.conf</code> #在/etc目录下文件httpd.conf</li>
<li><code>find /etc -name &#39;*srm*&#39;</code> #使用通配符*(0或者任意多个)。表示在/etc目录下查找文件名中含有字符串‘srm’的文件</li>
<li><code>find . -name &#39;srm*&#39;</code> #表示当前目录下查找文件名开头是字符串‘srm’的文件</li>
</ul>
<h3 id="按照文件特征查找"><a href="#按照文件特征查找" class="headerlink" title="按照文件特征查找 　　　　"></a>按照文件特征查找 　　　　</h3><ul>
<li><code>find / -amin -10</code> 　　# 查找在系统中最后10分钟访问的文件(access time)</li>
<li><code>find / -atime -2</code>　　 # 查找在系统中最后48小时访问的文件</li>
<li><code>find / -empty</code> 　　# 查找在系统中为空的文件或者文件夹</li>
<li><code>find / -group cat</code> 　　# 查找在系统中属于 group为cat的文件</li>
<li><code>find / -mmin -5</code> 　　# 查找在系统中最后5分钟里修改过的文件(modify time)</li>
<li><code>find / -mtime -1</code> 　　#查找在系统中最后24小时里修改过的文件</li>
<li><code>find / -user fred</code> 　　#查找在系统中属于fred这个用户的文件</li>
<li><code>find / -size +10000c</code>　　#查找出大于10000000字节的文件(c:字节，w:双字，k:KB，M:MB，G:GB)</li>
<li><code>find / -size -1000k</code> 　　#查找出小于1000KB的文件</li>
</ul>
<h3 id="使用混合查找方式查找文件"><a href="#使用混合查找方式查找文件" class="headerlink" title="使用混合查找方式查找文件"></a>使用混合查找方式查找文件</h3><p>参数有： ！，-and(-a)，-or(-o)。</p>
<ul>
<li><code>find /tmp -size +10000c -and -mtime +2</code> #在/tmp目录下查找大于10000字节并在最后2分钟内修改的文件</li>
<li><code>find / -user fred -or -user george</code> 　#在/目录下查找用户是fred或者george的文件文件</li>
<li><code>find /tmp ! -user panda</code>　#在/tmp目录中查找所有不属于panda用户的文件</li>
</ul>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p><code>grep &#39;^[0-9]&#39; text.txt</code>返回以数字开头的行<br><code>grep &#39;@&#39; text.txt</code>返回包含@的行</p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[c++ string用法]]></title>
      <url>/2017/09/06/2017/c-string%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="C-string的用法和例子-转-Mark一下"><a href="#C-string的用法和例子-转-Mark一下" class="headerlink" title="C++ string的用法和例子(转)Mark一下"></a>C++ string的用法和例子(转)Mark一下</h2><h3 id="使用场合："><a href="#使用场合：" class="headerlink" title="使用场合："></a>使用场合：</h3><p>string是C++标准库的一个重要的部分，主要用于字符串处理。可以使用输入输出流方式直接进行操作，也可以通过文件等手段进行操作。同时C++的算法库对string也有着很好的支持，而且string还和c语言的字符串之间有着良好的接口。虽然也有一些弊端，但是瑕不掩瑜。<br>其中使用的代码多数都是来自cpp官网，因为例子非常全。<br><a id="more"></a></p>
<h4 id="声明和初始化方法："><a href="#声明和初始化方法：" class="headerlink" title="声明和初始化方法："></a>声明和初始化方法：</h4><p>想使用string首先要在头文件当中加入&lt; string &gt;<br>声明方式也很简单</p>
<h4 id="声明："><a href="#声明：" class="headerlink" title="声明："></a>声明：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">string s;//声明一个string 对象</div><div class="line">string ss[10];//声明一个string对象的数组</div></pre></td></tr></table></figure>
<h4 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h4><p>使用等号的初始化叫做拷贝初始化，不使用等号的初始化叫做直接初始化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">#include &lt;bits/stdc++.h&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    ios::sync_with_stdio(false);</div><div class="line">    string s;//默认初始化，一个空字符串</div><div class="line">    string s1(&quot;ssss&quot;);//s1是字面值“ssss”的副本</div><div class="line">    string s2(s1);//s2是s1的副本</div><div class="line">    string s3=s2;//s3是s2的副本</div><div class="line">    string s4(10,&apos;c&apos;);//把s4初始化</div><div class="line">    string s5=&quot;hiya&quot;;//拷贝初始化</div><div class="line">    string s6=string(10,&apos;c&apos;);//拷贝初始化，生成一个初始化好的对象，拷贝给s6</div><div class="line"></div><div class="line">    //string s(cp,n)</div><div class="line">    char cs[]=&quot;12345&quot;;</div><div class="line">    string s7(cs,3);//复制字符串cs的前3个字符到s当中</div><div class="line"></div><div class="line">    //string s(s2,pos2)</div><div class="line">    string s8=&quot;asac&quot;;</div><div class="line">    string s9(s8,2);//从s2的第二个字符开始拷贝，不能超过s2的size</div><div class="line"></div><div class="line">    //string s(s2,pos2,len2)</div><div class="line">    string s10=&quot;qweqweqweq&quot;;</div><div class="line">    string s11(s10,3,4);//s4是s3从下标3开始4个字符的拷贝，超过s3.size出现未定义</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="字符串处理："><a href="#字符串处理：" class="headerlink" title="字符串处理："></a>字符串处理：</h3><h4 id="substr操作："><a href="#substr操作：" class="headerlink" title="substr操作："></a>substr操作：</h4><p>注意substr没有迭代器作为参数的操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#include &lt;bits/stdc++.h&gt;</div><div class="line">using namespace std;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    ios::sync_with_stdio(false);</div><div class="line">    string s=&quot;abcdefg&quot;;</div><div class="line"></div><div class="line">    //s.substr(pos1,n)返回字符串位置为pos1后面的n个字符组成的串</div><div class="line">    string s2=s.substr(1,5);//abcde</div><div class="line"></div><div class="line">    //s.substr(pos)//得到一个pos到结尾的串</div><div class="line">    string s3=s.substr(4);//efg</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果输入的位置超过字符的长度，会抛出一个out_of_range的异常</p>
<h4 id="insert操作"><a href="#insert操作" class="headerlink" title="insert操作:"></a>insert操作:</h4><p>代码来自cpp官网，经过自己的整理<br>注意用迭代器当参数和无符号数当参数的区别</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">#include &lt;bits/stdc++.h&gt;</div><div class="line">using namespace std;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    ios::sync_with_stdio(false);</div><div class="line">    string str=&quot;to be question&quot;;</div><div class="line">    string str2=&quot;the &quot;;</div><div class="line">    string str3=&quot;or not to be&quot;;</div><div class="line">    string::iterator it;</div><div class="line"></div><div class="line">    //s.insert(pos,str)//在s的pos位置插入str</div><div class="line">    str.insert(6,str2);                 // to be the question</div><div class="line"></div><div class="line">    //s.insert(pos,str,a,n)在s的pos位置插入str中插入位置a到后面的n个字符</div><div class="line">    str.insert(6,str3,3,4);             // to be not the question</div><div class="line"></div><div class="line">    //s.insert(pos,cstr,n)//在pos位置插入cstr字符串从开始到后面的n个字符</div><div class="line">    str.insert(10,&quot;that is cool&quot;,8);    // to be not that is the question</div><div class="line"></div><div class="line">    //s.insert(pos,cstr)在s的pos位置插入cstr</div><div class="line">    str.insert(10,&quot;to be &quot;);            // to be not to be that is the question</div><div class="line"></div><div class="line">    //s.insert(pos,n,ch)在s.pos位置上面插入n个ch</div><div class="line">    str.insert(15,1,&apos;:&apos;);               // to be not to be: that is the question</div><div class="line"></div><div class="line">    //s.insert(s.it,ch)在s的it指向位置前面插入一个字符ch，返回新插入的位置的迭代器</div><div class="line">    it = str.insert(str.begin()+5,&apos;,&apos;); // to be, not to be: that is the question</div><div class="line"></div><div class="line">    //s.insert(s.it,n,ch)//在s的it所指向位置的前面插入n个ch</div><div class="line">    str.insert (str.end(),3,&apos;.&apos;);       // to be, not to be: that is the question...</div><div class="line"></div><div class="line">    //s.insert(it,str.ita,str.itb)在it所指向的位置的前面插入[ita,itb)的字符串</div><div class="line">    str.insert (it+2,str3.begin(),str3.begin()+3); // to be, or not to be: that is the question...</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="erase操作："><a href="#erase操作：" class="headerlink" title="erase操作："></a>erase操作：</h4><p>用来执行删除操作<br>删除操作有三种</p>
<p>指定pos和len，其中pos为为起始位置，pos以及后面len-1个字符串都删除<br>迭代器，删除迭代器指向的字符<br>迭代器范围，删除这一范围的字符串，范围左闭右开<br>代码来自cpp官网</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line"></div><div class="line">int main ()</div><div class="line">&#123;</div><div class="line">  std::string str (&quot;This is an example sentence.&quot;);</div><div class="line">  std::cout &lt;&lt; str &lt;&lt; &apos;\n&apos;;</div><div class="line">                          // &quot;This is an example sentence.&quot;</div><div class="line">  str.erase (10,8);       //            ^^^^^^^^</div><div class="line">  //直接指定删除的字符串位置第十个后面的8个字符</div><div class="line">  std::cout &lt;&lt; str &lt;&lt; &apos;\n&apos;;</div><div class="line">                            // &quot;This is an sentence.&quot;</div><div class="line">  str.erase (str.begin()+9);//           ^</div><div class="line">  //删除迭代器指向的字符</div><div class="line">  std::cout &lt;&lt; str &lt;&lt; &apos;\n&apos;;</div><div class="line">                            // &quot;This is a sentence.&quot;</div><div class="line">                            //       ^^^^^</div><div class="line">  str.erase (str.begin()+5, str.end()-9);</div><div class="line">  //删除迭代器范围的字符</div><div class="line">  std::cout &lt;&lt; str &lt;&lt; &apos;\n&apos;;</div><div class="line">                            // &quot;This sentence.&quot;</div><div class="line">  return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="append和replace操作"><a href="#append和replace操作" class="headerlink" title="append和replace操作:"></a>append和replace操作:</h4><p>append函数可以用来在字符串的末尾追加字符和字符串。由于string重载了运算符，也可以用+=操作实现<br>repalce顾名思义，就是替换的意思，先删除，后增加。<br>代码来自cpp官网，附上自己的解释</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line"></div><div class="line">int main ()</div><div class="line">&#123;</div><div class="line">    std::string str;</div><div class="line">    std::string str2=&quot;Writing &quot;;</div><div class="line">    std::string str3=&quot;print 10 and then 5 more&quot;;</div><div class="line"></div><div class="line">    //直接追加一个str2的字符串</div><div class="line">    str.append(str2);                       // &quot;Writing &quot;</div><div class="line">    //后面追加str3第6个字符开始的3个字符串</div><div class="line">    str.append(str3,6,3);                   // &quot;10 &quot;</div><div class="line">    //追加字符串形参的前5个字符</div><div class="line">    str.append(&quot;dots are cool&quot;,5);          // &quot;dots &quot;</div><div class="line">    //直接添加</div><div class="line">    str.append(&quot;here: &quot;);                   // &quot;here: &quot;</div><div class="line">    //添加10个&apos;.&apos;</div><div class="line">    str.append(10u,&apos;.&apos;);                    // &quot;..........&quot;</div><div class="line">    //添加str3迭代器范围的字符串</div><div class="line">    str.append(str3.begin()+8,str3.end());  // &quot; and then 5 more&quot;</div><div class="line">    //最后这个比较特殊，意思是添加5个&apos;A&apos;，实际上参数里面的65对应的asc码就是65</div><div class="line">    str.append&lt;int&gt;(5,65);                // &quot;.....&quot;</div><div class="line">    //字符串追加也可以用重载运算符实现</div><div class="line">    str+=&quot;lalala&quot;;</div><div class="line">    std::cout &lt;&lt; str &lt;&lt; &apos;\n&apos;;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>replace的使用方法，replace支持使用无符号整数寻找位置，也支持用迭代器寻找位置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line"></div><div class="line">int main ()</div><div class="line">&#123;</div><div class="line">    std::string base=&quot;this is a test string.&quot;;</div><div class="line">    std::string str2=&quot;n example&quot;;</div><div class="line">    std::string str3=&quot;sample phrase&quot;;</div><div class="line">    std::string str4=&quot;useful.&quot;;</div><div class="line"></div><div class="line">    // replace signatures used in the same order as described above:</div><div class="line"></div><div class="line">    // Using positions:                 0123456789*123456789*12345</div><div class="line">    std::string str=base;           // &quot;this is a test string.&quot;</div><div class="line">    //第9个字符以及后面的4个字符被str2代替</div><div class="line">    str.replace(9,5,str2);          // &quot;this is an example string.&quot; (1)</div><div class="line">    //第19个字符串以及后面的5个字符用str的第7个字符以及后面的5个字符代替</div><div class="line">    str.replace(19,6,str3,7,6);     // &quot;this is an example phrase.&quot; (2)</div><div class="line">    //第8个字符以及后面的9个字符用字符串参数代替</div><div class="line">    str.replace(8,10,&quot;just a&quot;);     // &quot;this is just a phrase.&quot;     (3)</div><div class="line">    //第8个字符以及后面的5个字符用字符串参数的前7个字符替换</div><div class="line">    str.replace(8,6,&quot;a shorty&quot;,7);  // &quot;this is a short phrase.&quot;    (4)</div><div class="line">    //第22以及后面的0个字符用3个叹号替换</div><div class="line">    str.replace(22,1,3,&apos;!&apos;);        // &quot;this is a short phrase!!!&quot;  (5)</div><div class="line">    //迭代器的原理同上</div><div class="line">    // Using iterators:                                               0123456789*123456789*</div><div class="line">    str.replace(str.begin(),str.end()-3,str3);                    // &quot;sample phrase!!!&quot;      (1)</div><div class="line">    str.replace(str.begin(),str.begin()+6,&quot;replace&quot;);             // &quot;replace phrase!!!&quot;     (3)</div><div class="line">    str.replace(str.begin()+8,str.begin()+14,&quot;is coolness&quot;,7);    // &quot;replace is cool!!!&quot;    (4)</div><div class="line">    str.replace(str.begin()+12,str.end()-4,4,&apos;o&apos;);                // &quot;replace is cooool!!!&quot;  (5)</div><div class="line">    str.replace(str.begin()+11,str.end(),str4.begin(),str4.end());// &quot;replace is useful.&quot;    (6)</div><div class="line">    std::cout &lt;&lt; str &lt;&lt; &apos;\n&apos;;   </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上的replace操作可以用insert和erase的操作组合替换，但是replace操作更加方便。</p>
<h4 id="assign操作："><a href="#assign操作：" class="headerlink" title="assign操作："></a>assign操作：</h4><p>assign操作在一起列容器当中都存在，比如vector等等。是一个很基本的操作函数，string使用assign可以灵活的对其进行赋值。<br>代码来自cpp官网</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line"></div><div class="line">int main ()</div><div class="line">&#123;</div><div class="line">    std::string str;</div><div class="line">    std::string base=&quot;The quick brown fox jumps over a lazy dog.&quot;;</div><div class="line"></div><div class="line">    // used in the same order as described above:</div><div class="line">    //直接把base赋值给str</div><div class="line">    str.assign(base);</div><div class="line">    std::cout &lt;&lt; str &lt;&lt; &apos;\n&apos;;</div><div class="line">    //把base第10个字符以及后面的8个字符赋给str</div><div class="line">    str.assign(base,10,9);</div><div class="line">    std::cout &lt;&lt; str &lt;&lt; &apos;\n&apos;;         // &quot;brown fox&quot;</div><div class="line">    //把参数中的0到6个字符串赋给str</div><div class="line">    str.assign(&quot;pangrams are cool&quot;,7);</div><div class="line">    std::cout &lt;&lt; str &lt;&lt; &apos;\n&apos;;         // &quot;pangram&quot;</div><div class="line">    //直接使用参数赋值</div><div class="line">    str.assign(&quot;c-string&quot;);</div><div class="line">    std::cout &lt;&lt; str &lt;&lt; &apos;\n&apos;;         // &quot;c-string&quot;</div><div class="line">    //给str赋值10个&apos;*&apos;字符</div><div class="line">    str.assign(10,&apos;*&apos;);</div><div class="line">    std::cout &lt;&lt; str &lt;&lt; &apos;\n&apos;;         // &quot;**********&quot;</div><div class="line">    //赋值是10个&apos;-&apos;</div><div class="line">    str.assign&lt;int&gt;(10,0x2D);</div><div class="line">    std::cout &lt;&lt; str &lt;&lt; &apos;\n&apos;;         // &quot;----------&quot;</div><div class="line">    //指定base迭代器范围的字符串</div><div class="line">    str.assign(base.begin()+16,base.end()-12);</div><div class="line">    std::cout &lt;&lt; str &lt;&lt; &apos;\n&apos;;         // &quot;fox jumps over&quot;</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="string的搜索操作"><a href="#string的搜索操作" class="headerlink" title="string的搜索操作:"></a>string的搜索操作:</h4><p>string类中提供了很多性能优秀，使用方便的成员方法。而且在泛型算法当中也有很多实用的技巧。</p>
<p>find和rfind函数:</p>
<p>find函数主要是查找一个字符串是否在调用的字符串中出现过，大小写敏感。<br>代码来自cpp官网</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#include &lt;bits/stdc++.h&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    ios::sync_with_stdio(false);</div><div class="line">    std::string str (&quot;There are two needles in this haystack with needles.&quot;);</div><div class="line">    std::string str2 (&quot;needle&quot;);</div><div class="line"></div><div class="line">    // different member versions of find in the same order as above:</div><div class="line">    //在str当中查找第一个出现的needle，找到则返回出现的位置，否则返回结尾</div><div class="line">    std::size_t found = str.find(str2);</div><div class="line">    if (found!=std::string::npos)</div><div class="line">    std::cout &lt;&lt; &quot;first &apos;needle&apos; found at: &quot; &lt;&lt; found &lt;&lt; &apos;\n&apos;;</div><div class="line">    //在str当中，从第found+1的位置开始查找参数字符串的前6个字符</div><div class="line">    found=str.find(&quot;needles are small&quot;,found+1,6);</div><div class="line">    if (found!=std::string::npos)</div><div class="line">    std::cout &lt;&lt; &quot;second &apos;needle&apos; found at: &quot; &lt;&lt; found &lt;&lt; &apos;\n&apos;;</div><div class="line">    //在str当中查找参数中的字符串</div><div class="line">    found=str.find(&quot;haystack&quot;);</div><div class="line">    if (found!=std::string::npos)</div><div class="line">    std::cout &lt;&lt; &quot;&apos;haystack&apos; also found at: &quot; &lt;&lt; found &lt;&lt; &apos;\n&apos;;</div><div class="line">    //查找一个字符</div><div class="line">    found=str.find(&apos;.&apos;);</div><div class="line">    if (found!=std::string::npos)</div><div class="line">    std::cout &lt;&lt; &quot;Period found at: &quot; &lt;&lt; found &lt;&lt; &apos;\n&apos;;</div><div class="line">    //组合使用，把str2用参数表中的字符串代替</div><div class="line">    // let&apos;s replace the first needle:</div><div class="line">    str.replace(str.find(str2),str2.length(),&quot;preposition&quot;);</div><div class="line">    std::cout &lt;&lt; str &lt;&lt; &apos;\n&apos;;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>rfind函数就是找最后一个出现的匹配字符串，返回的位置仍然是从前往后数的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#include &lt;bits/stdc++.h&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    ios::sync_with_stdio(false);</div><div class="line">    std::string str (&quot;The sixth sick sheik&apos;s sixth sheep&apos;s sick.&quot;);</div><div class="line">    std::string key (&quot;sixth&quot;);//                    ^</div><div class="line">    //rfind是找最后一个出现的匹配字符串</div><div class="line">    std::size_t found = str.rfind(key);</div><div class="line">    if (found!=std::string::npos)</div><div class="line">    &#123;</div><div class="line">        cout&lt;&lt;found&lt;&lt;endl;//输出23</div><div class="line">        str.replace (found,key.length(),&quot;seventh&quot;);//找到的sixth替换成seventh</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    std::cout &lt;&lt; str &lt;&lt; &apos;\n&apos;;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查找的效率非常高，我没看过stl源码剖析，但是感觉是用kmp实现的。呵呵，可以自己写一个。</p>
<p>find_….of函数:</p>
<p>find_first_of(args) 查找args中任何一个字符第一次出现的位置<br>find_last_of(args) 最后一个出现的位置<br>find_fist_not_of(args) 查找第一个不在args中的字符<br>find_last_not_of 查找最后一个不在args中出现的字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#include &lt;bits/stdc++.h&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    ios::sync_with_stdio(false);</div><div class="line">    std::string str1 (&quot;Please, replace the vowels in this sentence by asterisks.&quot;);</div><div class="line">    std::size_t found1 = str1.find_first_of(&quot;aeiou&quot;);</div><div class="line">    //把所有元音找出来用*代替</div><div class="line">    while (found1!=std::string::npos)</div><div class="line">    &#123;</div><div class="line">        str1[found1]=&apos;*&apos;;</div><div class="line">        found1=str1.find_first_of(&quot;aeiou&quot;,found1+1);</div><div class="line">    &#125;</div><div class="line">    std::cout &lt;&lt; str1 &lt;&lt; &apos;\n&apos;;</div><div class="line"></div><div class="line">    //在str2中找到第一个不是消协英文字母和空格的字符</div><div class="line">    std::string str2 (&quot;look for non-alphabetic characters...&quot;);</div><div class="line">    std::size_t found2 = str2.find_first_not_of(&quot;abcdefghijklmnopqrstuvwxyz &quot;);</div><div class="line">    if (found2!=std::string::npos)</div><div class="line">    &#123;</div><div class="line">        std::cout &lt;&lt; &quot;The first non-alphabetic character is &quot; &lt;&lt; str2[found2];</div><div class="line">        std::cout &lt;&lt; &quot; at position &quot; &lt;&lt; found2 &lt;&lt; &apos;\n&apos;;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>find_last_of和find_last_not_of与first基本相同，就不写例子代码了。</p>
<p>比较与转换:</p>
<p>类似c语言的字符串比较函数strcmp函数一样，支持字符串比较操作，同时也类似python、C#语言中的函数一样，支持把数字和字符串转换。有些特性是C++11当中才有。<br>注意编译器bug：<br>在MinGW编译器当中如果版本低于3.8，虽然支持c++11但是里面有一个bug，就是不支持字符串和数组的转换！要更新MinGW的版本才可以，或者直接使用g++。</p>
<h4 id="compare函数"><a href="#compare函数" class="headerlink" title="compare函数:"></a>compare函数:</h4><p>和strcmp函数一样，如果两个字符串相等，那么返回0，调用对象大于参数返回1，小于返回-1。<br>在compare当中还支持部分比较，里面有6个参数可以设置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">#include &lt;bits/stdc++.h&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    ios::sync_with_stdio(false);</div><div class="line">    string s1=&quot;123&quot;,s2=&quot;123&quot;;</div><div class="line">    cout&lt;&lt;s1.compare(s2)&lt;&lt;endl;//0</div><div class="line"></div><div class="line">    s1=&quot;123&quot;,s2=&quot;1234&quot;;</div><div class="line">    cout&lt;&lt;s1.compare(s2)&lt;&lt;endl;//-1</div><div class="line"></div><div class="line">    s1=&quot;1234&quot;,s2=&quot;123&quot;;</div><div class="line">    cout&lt;&lt;s1.compare(s2)&lt;&lt;endl;//1</div><div class="line"></div><div class="line">    std::string str1 (&quot;green apple&quot;);</div><div class="line">    std::string str2 (&quot;red apple&quot;);</div><div class="line"></div><div class="line">    if (str1.compare(str2) != 0)</div><div class="line">    std::cout &lt;&lt; str1 &lt;&lt; &quot; is not &quot; &lt;&lt; str2 &lt;&lt; &apos;\n&apos;;</div><div class="line">    //str1的第6个字符以及后面的4个字符和参数比较</div><div class="line">    if (str1.compare(6,5,&quot;apple&quot;) == 0)</div><div class="line">    std::cout &lt;&lt; &quot;still, &quot; &lt;&lt; str1 &lt;&lt; &quot; is an apple\n&quot;;</div><div class="line"></div><div class="line">    if (str2.compare(str2.size()-5,5,&quot;apple&quot;) == 0)</div><div class="line">    std::cout &lt;&lt; &quot;and &quot; &lt;&lt; str2 &lt;&lt; &quot; is also an apple\n&quot;;</div><div class="line">    //str1的第6个字符以及后面的4个字符和str2的第4个字符以及后面的4个字符比较</div><div class="line">    if (str1.compare(6,5,str2,4,5) == 0)</div><div class="line">    std::cout &lt;&lt; &quot;therefore, both are apples\n&quot;;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于string重载了运算符，可以直接用&gt;,&lt;，==来进行比较，也很方便。</p>
<h4 id="数值转换："><a href="#数值转换：" class="headerlink" title="数值转换："></a>数值转换：</h4><p>在io的部分有过数值和字符串相互转换的例子，使用的是stringstream函数，在c++11当中有定义好的现成的函数取调用，非常方便。</p>
<p>string和数值转换<br>to_string(val)    把val转换成string<br>stoi(s,p,b)    把字符串s从p开始转换成b进制的int<br>stol(s,p,b)    long<br>stoul(s,p,b)    unsigned long<br>stoll(s,p,b)    long long<br>stoull(s,p,b)    unsigned long long<br>stof(s,p)    float<br>stod(s,p)    double<br>stold(s,p)    long double<br>//注意，下段代码在MinGw中会报错！即使使用c++11编译也一样，无法识别to_string！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#include &lt;bits/stdc++.h&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    ios::sync_with_stdio(false);</div><div class="line">    string s1;</div><div class="line">    s1=to_string(100);</div><div class="line">    cout&lt;&lt;s1&lt;&lt;endl;</div><div class="line">    int a=stoi(s1,0,10)+1;</div><div class="line">    cout&lt;&lt;a&lt;&lt;endl;</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[clang插件开发]]></title>
      <url>/2017/09/05/2017/clang%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<h2 id="资源准备-amp-amp-编译源文件"><a href="#资源准备-amp-amp-编译源文件" class="headerlink" title="资源准备&amp;&amp;编译源文件"></a>资源准备&amp;&amp;编译源文件</h2><p>我们需要llvm和clang的源文件，而且这些文件都存在于github上，我们如果直接从github下载会很慢，所以第一步是制作国内源。</p>
<a id="more"></a>
<ul>
<li>制作国内源<code>http://jingyan.baidu.com/article/f79b7cb367e72e9145023e40.html</code></li>
</ul>
<p>还有就是不要把这些源文件放到一些需要权限执行的文件里，这样在编译过程中你会发现各种问题。</p>
<ul>
<li>下载源码的时候注意点就是要对照你的xcode的版本:<code>https://trac.macports.org/wiki/XcodeVersionInfo</code></li>
<li>然后找到对应的clang版本<code>https://opensource.apple.com/source/clang/clang-800.0.42.1/src/configure.auto.html</code></li>
</ul>
<p>经过对比我们发现我们需要的是39版本</p>
<p>比如现在我们在一个叫做GitHub的文件夹下遍建立了一个叫做llvm的文件<br>按照顺序执行以后代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">cd GitHub</div><div class="line">sudo mkdir llvm</div><div class="line">sudo chown `whoami` llvm</div><div class="line">cd llvm</div><div class="line">export LLVM_HOME=`pwd`</div><div class="line"></div><div class="line">git clone -b release_39 https://git.coding.net/hanshenghui/llvm.git llvm</div><div class="line">git clone -b release_39 https://git.coding.net/hanshenghui/clangnew.git llvm/tools/clang</div><div class="line">git clone -b release_39 https://git.coding.net/hanshenghui/clang-tools-extra.git llvm/tools/clang/tools/extra</div><div class="line">git clone -b release_39 https://git.coding.net/hanshenghui/compiler-rt.git llvm/projects/compiler-rt</div><div class="line"></div><div class="line">mkdir llvm_build</div><div class="line">cd llvm_build</div><div class="line">cmake -G Xcode ../llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel</div></pre></td></tr></table></figure>
<p>最后一句<code>cmake -G Xcode</code>是关键，用这种方式cmake的话，我们就可以用Xcode来编译后边的工程<br>执行完毕之后你会发现，在llvm_build这个文件夹下边你会发现有一个LLVM.xcodeproj的文件，有了这个我们可以像iOS开发样去编译任何一个库了</p>
<h2 id="编写插件代码"><a href="#编写插件代码" class="headerlink" title="编写插件代码"></a>编写插件代码</h2><ul>
<li>进入文件<code>/llvm/tools/clang/examples</code>在里面新建一个目录如MyPlugin</li>
<li><p>然后修改example目录的CMakeLists.txt文件，添加一项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add_subdirectory(MyPlugin)</div></pre></td></tr></table></figure>
</li>
<li><p>然后进入创建的MyPlugin目录，生成三个文件，分别是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CodingStyleUtil.hpp</div><div class="line">MyPlugin.cpp</div><div class="line">CMakeLists.txt</div></pre></td></tr></table></figure>
</li>
</ul>
<p>CMakeLists.txt中的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">add_llvm_loadable_module(MyPlugin MyPlugin.cpp PLUGIN_TOOL clang)</div><div class="line"></div><div class="line">if(LLVM_ENABLE_PLUGINS AND (WIN32 OR CYGWIN))</div><div class="line">  target_link_libraries(MyPlugin $&#123;cmake_2_8_12_PRIVATE&#125;</div><div class="line">    clangAST</div><div class="line">    clangBasic</div><div class="line">    clangFrontend</div><div class="line">    LLVMSupport</div><div class="line">    )</div><div class="line">endif()</div></pre></td></tr></table></figure></p>
<p>CodingStyleUtil.hpp<br>主要是一些处理字符串的函数</p>
<p>MyPlugin.cpp<br>这个文件是关键所在，当我们编译插件的时候，主要就是这里的代码在起作用，先来个简化版的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &quot;clang/Frontend/FrontendPluginRegistry.h&quot;</div><div class="line">#include &quot;clang/AST/AST.h&quot;</div><div class="line">#include &quot;clang/AST/ASTConsumer.h&quot;</div><div class="line">#include &quot;clang/Frontend/CompilerInstance.h&quot;</div><div class="line">#include &quot;clang/AST/RecursiveASTVisitor.h&quot;</div><div class="line">#include &quot;CodingStyleUtil.hpp&quot;</div><div class="line">#include &lt;fstream&gt;</div><div class="line"></div><div class="line">using namespace clang;</div><div class="line">using namespace std;</div><div class="line">using namespace llvm;</div><div class="line"></div><div class="line">string gSrcRootPath;</div><div class="line">static string kClassInterfPrefix = &quot;JR&quot;;</div><div class="line">static int kMethodParamMaxLen = 15;</div><div class="line">//static int kMethodParamMaxParamsSingleLine = 3;</div><div class="line">static int kMethodBodyMaxLines = 500;</div><div class="line"></div><div class="line">namespace MyPlugin</div><div class="line"> &#123;</div><div class="line"></div><div class="line">class MyPluginVisitor : public RecursiveASTVisitor&lt;MyPluginVisitor&gt;//这里我们要声明一个class，这个class是继承自RecursiveASTVisitor的，可以随便取名字，尖括号里边就是这个visitor的名字</div><div class="line">    &#123;</div><div class="line">    private:</div><div class="line">        CompilerInstance &amp;Instance;</div><div class="line">        ASTContext *Context;</div><div class="line">        string objcClsImpl;</div><div class="line">        bool objcIsInstanceMethod;</div><div class="line">        string objcSelector;</div><div class="line">        string objcMethodSrcCode;</div><div class="line">        </div><div class="line">    public:</div><div class="line">        </div><div class="line">        void setASTContext (ASTContext &amp;context)//这里定义了一个能方法，用来便捷的对context进行赋值操作</div><div class="line">        &#123;</div><div class="line">            this -&gt; Context = &amp;context;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        MyPluginVisitor (CompilerInstance &amp;Instance)</div><div class="line">        :Instance(Instance)</div><div class="line">        &#123;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        bool VisitDecl(Decl *decl) &#123;//所有的声明分析都需要重载这个方法</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    class MyPluginConsumer : public ASTConsumer</div><div class="line">    &#123;</div><div class="line">        CompilerInstance &amp;Instance;</div><div class="line">        std::set&lt;std::string&gt; ParsedTemplates;</div><div class="line">    public:</div><div class="line">        MyPluginConsumer(CompilerInstance &amp;Instance,</div><div class="line">                         std::set&lt;std::string&gt; ParsedTemplates)</div><div class="line">        : Instance(Instance), ParsedTemplates(ParsedTemplates), visitor(Instance) &#123;&#125;</div><div class="line">        </div><div class="line">        bool HandleTopLevelDecl(DeclGroupRef DG) override</div><div class="line">        &#123;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        void HandleTranslationUnit(ASTContext&amp; context) override</div><div class="line">        &#123;</div><div class="line">            visitor.setASTContext(context);</div><div class="line">            visitor.TraverseDecl(context.getTranslationUnitDecl());</div><div class="line">        &#125;</div><div class="line">    private:</div><div class="line">        MyPluginVisitor visitor;</div><div class="line">    &#125;;</div><div class="line">    //这里是所有处理逻辑的入口，在这里调用了consumer</div><div class="line">    class MyPluginASTAction : public PluginASTAction</div><div class="line">    &#123;</div><div class="line">        std::set&lt;std::string&gt; ParsedTemplates;</div><div class="line">    protected:</div><div class="line">        std::unique_ptr&lt;ASTConsumer&gt; CreateASTConsumer(CompilerInstance &amp;CI,</div><div class="line">                                                       llvm::StringRef) override</div><div class="line">        &#123;</div><div class="line">            return llvm::make_unique&lt;MyPluginConsumer&gt;(CI, ParsedTemplates);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        bool ParseArgs(const CompilerInstance &amp;CI,</div><div class="line">                       const std::vector&lt;std::string&gt; &amp;args) override &#123;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>现在先回到源码根目录，使用同样的cmake语句来更新Xcode项目，更新完成后原来的项目会多出一个叫MyPlugin的插件项目，然后对这个插件项目进行编译。编译成功后会在Debug/lib目录中多出一个名字叫做MyPlugin.dylib文件</p>
<p>只有这个plugin文件是不够的，我们还需要一个对应的clang和clang++，那么这个文件是哪里来的呢，答案就是我们自己编译的，这个插件和clang版本必须是对应的，否则在运行工程的时候就会说symbol不存在等错误</p>
<h2 id="安装调试插件"><a href="#安装调试插件" class="headerlink" title="安装调试插件"></a>安装调试插件</h2><p>打开要使用插件的Xcode项目，在build settings一栏中对Other C Flags一项进行编辑，调整为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-Xclang -load -Xclang /Users/han/GitHub/llvm/llvm_build/Debug/lib/MyPlugin.dylib -Xclang -add-plugin -Xclang MyPlugin</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：最后一项-Xclang MyPlugin中的MyPlugin为插件名字，一定要是自己设置的插件名称，否则无法调用插件</p>
</blockquote>
<p>这个时候运行你会发现报错，error:unable to load plugin</p>
<p>为了解决这个问题需要调整Xcode中使用的Clang编译器，将默认的编译器改为我们自己编译出来的编译器。具体的方法是在build settings中再添加两项自定义项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CC = /Users/han/GitHub/llvm/llvm_build/Debug/bin/clang</div><div class="line">CXX = &quot;/Users/han/GitHub/llvm/llvm_build/Debug/bin/clang+</div></pre></td></tr></table></figure></p>
<h2 id="clang插件作用范围"><a href="#clang插件作用范围" class="headerlink" title="clang插件作用范围"></a>clang插件作用范围</h2>]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构算法-概论]]></title>
      <url>/2017/07/17/2018/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95-%E6%A6%82%E8%AE%BA/</url>
      <content type="html"><![CDATA[<h3 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h3><ul>
<li>算法不一定是程序，算法需要有穷性</li>
<li>算法组重要的是效率，速度尽可能快，存储空间尽可能少</li>
<li>DSA</li>
</ul>
<h3 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h3><ul>
<li>如果问题实例有很多，那么很明显我们无法一一解决，那么我们的思路就是对问题进行分类，然后去解决这一类问题</li>
<li>如果你想改进和优化一个东西，你首先需要能够准确的测量它，你需要一把尺子</li>
<li>复杂的问题只有简化之后我们才能抓住主要的矛盾，而简化的方法就是忽略那些不重要的东西</li>
<li>去粗存精</li>
<li>迭代乃人工，递归乃神通</li>
<li>凡治众如治寡，分而治之</li>
<li>复杂问题分解为两个，一个是规模减小的问题，另一个是平凡问题</li>
</ul>
<h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>时间成本和空间成本，我们更关注时间成本</p>
<h2 id="渐进分析"><a href="#渐进分析" class="headerlink" title="渐进分析"></a>渐进分析</h2><h3 id="大O记号"><a href="#大O记号" class="headerlink" title="大O记号"></a>大O记号</h3><p>n足够大的时候成立就好</p>
<ul>
<li>常数项可忽略</li>
<li>低次项可忽略</li>
</ul>
<p><img src="/17/2018/数据结构算法-概论/../../../images/Ojihao.png" alt="大O"></p>
<h4 id="具体的刻度"><a href="#具体的刻度" class="headerlink" title="具体的刻度"></a>具体的刻度</h4><ul>
<li>O(1)，再大的常数都是这个复杂度2023x239238</li>
<li>O(logn)</li>
<li>O(n^c)多项式复杂度</li>
</ul>
<h3 id="复杂度分析主要方法"><a href="#复杂度分析主要方法" class="headerlink" title="复杂度分析主要方法"></a>复杂度分析主要方法</h3><ul>
<li>迭代：级数求和</li>
<li>递归：递归跟踪和递归方程</li>
<li>猜测+验证</li>
</ul>
<h4 id="级数-迭代"><a href="#级数-迭代" class="headerlink" title="级数(迭代)"></a>级数(迭代)</h4><p><img src="/17/2018/数据结构算法-概论/../../../images/jishu.png" alt=""><br><img src="/17/2018/数据结构算法-概论/../../../images/jishu1.png" alt=""><br><img src="/17/2018/数据结构算法-概论/../../../images/jishu2.png" alt=""><br><img src="/17/2018/数据结构算法-概论/../../../images/jishu3.png" alt=""></p>
<p>估算：</p>
<ul>
<li>一天是10^5s</li>
<li>一世纪是3 x 10^9</li>
<li>普通的pc一秒是10^9次运算</li>
<li>最厉害的机器是10^15次运算</li>
</ul>
<h4 id="递归-更高级的做法，但是效率不应最好"><a href="#递归-更高级的做法，但是效率不应最好" class="headerlink" title="递归(更高级的做法，但是效率不应最好)"></a>递归(更高级的做法，但是效率不应最好)</h4><p><img src="/17/2018/数据结构算法-概论/../../../images/fenerzhizhi.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> 数据结构算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自然语言处理概念基础]]></title>
      <url>/2017/06/27/2018/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E6%A6%82%E5%BF%B5%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>markAllAsReadSuccess<br>分词，词频，词性</p>
<p><a href="https://m.jr.jd.com/bzx/fillpolicy.html?iteamid=10000103&amp;source=jrm&amp;sid=" target="_blank" rel="external">https://m.jr.jd.com/bzx/fillpolicy.html?iteamid=10000103&amp;source=jrm&amp;sid=</a></p>
<p><a href="http://m.jr.jd.com/bzx/fillpolicy.html?iteamid=10000901&amp;source=jrm" target="_blank" rel="external">http://m.jr.jd.com/bzx/fillpolicy.html?iteamid=10000901&amp;source=jrm</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[itchat使用总结]]></title>
      <url>/2017/06/14/2017/itchat%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">itchat.auto_login()</div></pre></td></tr></table></figure>
<h3 id="查找好友"><a href="#查找好友" class="headerlink" title="查找好友"></a>查找好友</h3><blockquote>
<p>获取任何一项等于name键值的用户<br>itchat.search_friends(name=’littlecodersh’)<br>这里的name是RemarkName’, ‘NickName’, ‘Alias</p>
</blockquote>
<h3 id="发送中文"><a href="#发送中文" class="headerlink" title="发送中文"></a>发送中文</h3><p>要进行一个转换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">f = open(path,&apos;r&apos;)</div><div class="line">text = f.read()</div><div class="line">text = text.decode(&apos;utf-8&apos;)</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用hexo搭建团队博客系统]]></title>
      <url>/2017/06/12/2018/%E5%88%A9%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%9B%A2%E9%98%9F%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h3 id="hexo搭建个人博客的原理"><a href="#hexo搭建个人博客的原理" class="headerlink" title="hexo搭建个人博客的原理"></a>hexo搭建个人博客的原理</h3><ul>
<li>将md渲染为html</li>
<li>将html以及资源文件上传到github，利用githubpages功能进行展示</li>
<li>解析的过程是将目录下source/_post文件中的东西，渲染为publick中的html文件，然后将该文件夹下的文件复制到.deploy_git文件下，然后利用git操作将该文件夹下的文件push到对应的git库<a id="more"></a>
</li>
</ul>
<h3 id="使用hexo制作团队博客的困难"><a href="#使用hexo制作团队博客的困难" class="headerlink" title="使用hexo制作团队博客的困难"></a>使用hexo制作团队博客的困难</h3><ul>
<li>内网不能直接依赖于github</li>
<li>团队开发的权限管理问题</li>
<li>团队开发的作者识别问题</li>
<li>团队开发的文件冲突问题</li>
</ul>
<h3 id="问题的解决方案"><a href="#问题的解决方案" class="headerlink" title="问题的解决方案"></a>问题的解决方案</h3>]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python多进程通信和调用]]></title>
      <url>/2017/06/12/2018/Python%E5%A4%9A%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E5%92%8C%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="python多进程通信"><a href="#python多进程通信" class="headerlink" title="python多进程通信"></a>python多进程通信</h2><blockquote>
<p>这里解决的主要是，如果是启动一个命令行，然后执行一个python脚本，如果有多个python脚本就需要多个命令行程序，这不是很明智的选择，最好的做法是，一个命令行搞定所有的python脚本，这里就涉及到两个问题</p>
<ul>
<li>如何做到并发</li>
<li>如何在一个文件中添加一个python的执行入口<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div></pre></td><td class="code"><pre><div class="line">#coding:utf-8</div><div class="line"></div><div class="line">import os,re,time</div><div class="line">import multiprocessing,commands,shutil,subprocess</div><div class="line">from pymongo import MongoClient</div><div class="line"></div><div class="line">lock = multiprocessing.Lock()</div><div class="line"></div><div class="line">def func(name, processName, pipe):</div><div class="line">    p_info = &apos;Process[%s]  hello %s&apos; % (processName, name)</div><div class="line">    print &apos;pipe send: &apos;, p_info</div><div class="line">    pipe.send(p_info)</div><div class="line">    </div><div class="line">    print &apos;sub pid: %d, ppid: %d&apos; % (os.getpid(), os.getppid())</div><div class="line">    time.sleep(0.1)</div><div class="line"></div><div class="line">def serverForPull(name,pipe):</div><div class="line"></div><div class="line">    path = &apos;/Users/jdjr/Desktop/branches.txt&apos;</div><div class="line"></div><div class="line">    while True:</div><div class="line">        time.sleep(3)</div><div class="line">        newpath = &apos;/Users/jdjr/Desktop/gradleDir&apos;</div><div class="line">        if os.path.exists(newpath) == True:</div><div class="line">            os.chdir(&apos;/Users/jdjr/Documents/Build/JDJRAPPAndroid&apos;)</div><div class="line"></div><div class="line">            currentbranch = &apos;&apos;</div><div class="line"></div><div class="line">            branch = os.popen(&apos;git branch&apos;).read()</div><div class="line"></div><div class="line">            lines = branch.split(&apos;\n&apos;)</div><div class="line">            for item in lines:</div><div class="line">                if &apos;*&apos; in item:</div><div class="line">                   currentbranch = item[2:]</div><div class="line"></div><div class="line">            p = subprocess.Popen(&quot;gradle assembleDebug&quot;,shell=True,stdout=subprocess.PIPE)</div><div class="line"></div><div class="line">            indexcount = 0</div><div class="line"></div><div class="line">            returncode = p.poll()</div><div class="line"></div><div class="line">            while returncode is None:</div><div class="line">                  text = p.stdout.readline().strip()</div><div class="line">                  f = open(&apos;/Users/jdjr/Desktop/buildlog.txt&apos;,&apos;a&apos;)</div><div class="line">                  f.write(text)</div><div class="line">                  f.close()</div><div class="line">        </div><div class="line">                  mc = MongoClient(&quot;localhost&quot;,27017)</div><div class="line">                  db = mc.package</div><div class="line">                  post_info = db.index</div><div class="line"></div><div class="line">                  dbs = post_info.find(&#123;&apos;branchname&apos;:currentbranch&#125;)</div><div class="line">                  count = 0</div><div class="line">                  itemc = &#123;&#125;</div><div class="line">                  for itemn in dbs:</div><div class="line">                      itemc = itemn</div><div class="line">                      count = count + 1</div><div class="line"></div><div class="line">                  if count == 0:</div><div class="line">                     post_info.save(&#123;&apos;branchname&apos;:currentbranch,&apos;count&apos;:indexcount,&apos;time&apos;:0,&apos;lastcount&apos;:0&#125;)</div><div class="line">                  else:</div><div class="line">                     ctime = itemc[&apos;time&apos;]</div><div class="line">                     lastcount = itemc[&apos;lastcount&apos;]</div><div class="line">                     </div><div class="line">                     if &apos;Total time:&apos; in text:</div><div class="line">                         indexnew = text.find(&apos;:&apos;)</div><div class="line">                         newtime = text[indexnew + 1:]</div><div class="line"></div><div class="line">                         post_info.update(&#123;&apos;branchname&apos;:currentbranch&#125;,&#123;&apos;branchname&apos;:currentbranch,&apos;count&apos;:indexcount,&apos;time&apos;:newtime,&apos;lastcount&apos;:lastcount&#125;)</div><div class="line">                     else:</div><div class="line">                         post_info.update(&#123;&apos;branchname&apos;:currentbranch&#125;,&#123;&apos;branchname&apos;:currentbranch,&apos;count&apos;:indexcount,&apos;time&apos;:ctime,&apos;lastcount&apos;:lastcount&#125;)</div><div class="line"></div><div class="line"></div><div class="line">                     if &apos;BUILD SUCCESSFUL&apos; in text:</div><div class="line">                         post_info.update(&#123;&apos;branchname&apos;:currentbranch&#125;,&#123;&apos;branchname&apos;:currentbranch,&apos;count&apos;:0,&apos;time&apos;:ctime,&apos;lastcount&apos;:indexcount&#125;)</div><div class="line">                     else:</div><div class="line">                         post_info.update(&#123;&apos;branchname&apos;:currentbranch&#125;,&#123;&apos;branchname&apos;:currentbranch,&apos;count&apos;:indexcount,&apos;time&apos;:ctime,&apos;lastcount&apos;:lastcount&#125;)</div><div class="line"></div><div class="line">                  indexcount = indexcount + 1</div><div class="line">        </div><div class="line">                  returncode = p.poll()</div><div class="line">        </div><div class="line">            f1 = open(&apos;/Users/jdjr/Desktop/buildlog.txt&apos;,&apos;r&apos;)</div><div class="line">            texts = f1.read()</div><div class="line">            f1.close()</div><div class="line">            if &apos;BUILD FAILED&apos; in texts:</div><div class="line">                (status, output) = commands.getstatusoutput(&apos;gradle assembleDebug&apos;)</div><div class="line">                f2 = open(&apos;/Users/jdjr/Desktop/buildlog.txt&apos;,&apos;w&apos;)</div><div class="line">                texts = f2.write(output)</div><div class="line">                f2.close()</div><div class="line"></div><div class="line">            shutil.rmtree(newpath)</div><div class="line"></div><div class="line">            time.sleep(2)</div><div class="line"></div><div class="line">            mc = MongoClient(&quot;localhost&quot;,27017)</div><div class="line">            db = mc.package</div><div class="line">            post_info = db.index</div><div class="line"></div><div class="line">            post_info.update(&#123;&apos;branchname&apos;:currentbranch&#125;,&#123;&apos;branchname&apos;:currentbranch,&apos;count&apos;:20,&apos;time&apos;:0,&apos;lastcount&apos;:indexcount&#125;)</div><div class="line"></div><div class="line">        if os.path.exists(path):</div><div class="line">            f1 = open(path,&apos;r&apos;)</div><div class="line">            lists = f1.readlines()</div><div class="line"></div><div class="line">            if len(lists) == 2:</div><div class="line">               dir = lists[0]</div><div class="line">               branch = lists[1]</div><div class="line">               </div><div class="line">               if &apos;JDJRAPPAndroid&apos; in dir:</div><div class="line">                  dir = &apos;/Users/jdjr/Documents/Build/JDJRAPPAndroid&apos;</div><div class="line"></div><div class="line">               if &apos;JDMobileNew&apos; in dir:</div><div class="line">                  dir = &apos;/Users/wxg/Documents/JDMobileNew&apos;</div><div class="line"></div><div class="line">               if len(dir) &gt; 0:</div><div class="line">                   print dir</div><div class="line">              </div><div class="line">                   os.chdir(dir)         </div><div class="line">                   (status, output) = commands.getstatusoutput(&apos;git pull origin %s&apos; % branch)</div><div class="line">                   f1 = open(&apos;/Users/jdjr/Desktop/buildlog.txt&apos;,&apos;r&apos;)</div><div class="line">                   text = f1.read()</div><div class="line">                   f1.close()</div><div class="line"></div><div class="line">                   f1 = open(&apos;/Users/jdjr/Desktop/buildlog.txt&apos;,&apos;w&apos;)</div><div class="line">                   text1 = text + &apos;\n&apos; + output + &apos;%i&apos; % status</div><div class="line">                   f1.write(text1)</div><div class="line">                   f1.close()</div><div class="line"></div><div class="line">                   f2 = open(path,&apos;w&apos;)</div><div class="line">                   f2.write(&apos;&apos;)</div><div class="line">                   f2.close()</div><div class="line"></div><div class="line">            f1.close()</div><div class="line"></div><div class="line">def monitorForBlog(name,pipe):</div><div class="line">    lastTimeStr = &apos;&apos;</div><div class="line">    while True:</div><div class="line">      time.sleep(3)</div><div class="line">      os.chdir(&apos;/Users/jdjr/Documents/Blog/blogsource&apos;)</div><div class="line">      </div><div class="line">#      os.chdir(&apos;/usr/local/var/www&apos;)</div><div class="line"></div><div class="line">      (status, output) = commands.getstatusoutput(&apos;git pull origin blog&apos;)</div><div class="line"></div><div class="line">      (status, output) = commands.getstatusoutput(&apos;git log&apos;)</div><div class="line"></div><div class="line">      f = open(&apos;/Users/jdjr/Documents/Blog/logcommit.txt&apos;,&apos;w&apos;)</div><div class="line">      f.write(output)</div><div class="line">      f.close()</div><div class="line"></div><div class="line">      f1 = open(&apos;/Users/jdjr/Documents/Blog/logcommit.txt&apos;,&apos;r&apos;)</div><div class="line">      lines = f1.readlines()</div><div class="line">      firstline = lines[0]</div><div class="line">      f1.close()</div><div class="line"></div><div class="line">      if lastTimeStr != firstline:</div><div class="line">          print &apos;推送一次博客&apos;</div><div class="line">          sourcepath = &apos;/Users/jdjr/Documents/Blog/blog/source&apos;</div><div class="line">          </div><div class="line">          if os.path.exists(sourcepath):</div><div class="line">             shutil.rmtree(sourcepath)</div><div class="line">          </div><div class="line">          shutil.copytree(&apos;/Users/jdjr/Documents/Blog/blogsource/source&apos;,&apos;/Users/jdjr/Documents/Blog/blog/source&apos;)</div><div class="line"></div><div class="line">          os.chdir(&apos;/Users/jdjr/Documents/Blog/blog&apos;)</div><div class="line"></div><div class="line">#          os.popen(&apos;hexo clean&apos;)</div><div class="line">          os.system(&apos;hexo clean&apos;)</div><div class="line">          os.system(&apos;hexo g&apos;)</div><div class="line">          </div><div class="line">          filepath = &apos;/usr/local/var/www&apos;</div><div class="line">          if os.path.exists(filepath):</div><div class="line">             shutil.rmtree(filepath)</div><div class="line"></div><div class="line">          publicfile = &apos;/Users/jdjr/Documents/Blog/blog/public&apos;</div><div class="line">          while not os.path.exists(publicfile):</div><div class="line">                time.sleep(1)</div><div class="line">#                print &apos;not exist&apos;</div><div class="line"></div><div class="line">          shutil.move(publicfile,filepath)</div><div class="line">          </div><div class="line">          lastTimeStr = firstline</div><div class="line">          print lastTimeStr</div><div class="line"></div><div class="line"></div><div class="line">def main():</div><div class="line">    print &apos;main pid: %d, ppid: %d&apos; % (os.getpid(), os.getppid())</div><div class="line">    </div><div class="line">    # 注意： 此处是Pipe来自multiprocessing.Pipe(), 其来源于 multiprocessing.connection import Pipe</div><div class="line">    pipe_parent, pipe_child = multiprocessing.Pipe(duplex=False)</div><div class="line">    </div><div class="line">    processList = []</div><div class="line">#    for i in xrange(4):</div><div class="line">#    pro = multiprocessing.Process(target=func, args=(&apos;ceshi&apos;, &apos;Process-&apos; + str(10), pipe_child))</div><div class="line">#    pro.start()</div><div class="line">#    processList.append(pro)</div><div class="line">#    </div><div class="line">#    pro1 = multiprocessing.Process(target=func1, args=(&apos;waha&apos;,pipe_child))</div><div class="line">#    pro1.start()</div><div class="line">#    processList.append(pro1)</div><div class="line">#    </div><div class="line">#    pro2 = multiprocessing.Process(target=func2, args=(&apos;heihei&apos;,pipe_child))</div><div class="line">#    pro2.start()</div><div class="line">#    processList.append(pro2)</div><div class="line"></div><div class="line">    pro3 = multiprocessing.Process(target=serverForPull, args=(&apos;heihei&apos;,pipe_child))</div><div class="line">    pro3.start()</div><div class="line">    processList.append(pro3)</div><div class="line"></div><div class="line">    pro4 = multiprocessing.Process(target=monitorForBlog, args=(&apos;heihei&apos;,pipe_child))</div><div class="line">    pro4.start()</div><div class="line">    processList.append(pro4)</div><div class="line">    </div><div class="line">    for pro in processList:</div><div class="line">        pro.join()      # 在此处阻塞子进程，可实现异步执行效果，直至子进程全部完成后再继续执行父进程</div><div class="line">    </div><div class="line">    pipe_child.send(None)   # 此处等全部子进程执行完成后，输入&apos;None&apos;标记，表示Pipe结束接收任务，可以退出</div><div class="line"></div><div class="line">    while pipe_parent:</div><div class="line">          p_info = pipe_parent.recv()</div><div class="line">          print &apos;pipe get: &apos;, p_info</div><div class="line">        </div><div class="line">          if not p_info:      # 如果接收到了&apos;None&apos;标记，退出Pipe</div><div class="line">             print &apos;pipe get:  None, then exit out.&apos;</div><div class="line">             break</div><div class="line"></div><div class="line"># 测试</div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    main()</div><div class="line">    print(&apos;end.&apos;)</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac下使用virtualbox安装win7以及设置共享文件]]></title>
      <url>/2017/05/25/2017/mac%E4%B8%8B%E4%BD%BF%E7%94%A8virtualbox%E5%AE%89%E8%A3%85win7%E4%BB%A5%E5%8F%8A%E8%AE%BE%E7%BD%AE%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先进入win7-pe环境，然后进行分区，这里的关键在于c盘要大于10G</p>
<h3 id="设置共享文件夹"><a href="#设置共享文件夹" class="headerlink" title="设置共享文件夹"></a>设置共享文件夹</h3><p>要实现mac与windows的文件共享，信息互通，需要有一个都可以访问的文件夹，这里的关键是，要首先安装virtualbox的device下的insert Guest Additions CD image</p>
]]></content>
      
        
        <tags>
            
            <tag> mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Django的平台构建笔记(2)]]></title>
      <url>/2017/05/18/2017/%E5%9F%BA%E4%BA%8EDjango%E7%9A%84%E5%B9%B3%E5%8F%B0%E6%9E%84%E5%BB%BA%E7%AC%94%E8%AE%B0(2)/</url>
      <content type="html"><![CDATA[<h3 id="python中Json字符串的创建与javascript中json字符串的转换"><a href="#python中Json字符串的创建与javascript中json字符串的转换" class="headerlink" title="python中Json字符串的创建与javascript中json字符串的转换"></a>python中Json字符串的创建与javascript中json字符串的转换</h3><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import json</div><div class="line"></div><div class="line">def getindex(indexname):</div><div class="line"></div><div class="line">    datas = []</div><div class="line"></div><div class="line">    for item in namelist:</div><div class="line">    </div><div class="line">        pes.append(dic) </div><div class="line">        pes = json.dumps(pes)</div><div class="line">        datas.append(pes)</div><div class="line"></div><div class="line">    datas = json.dumps(datas)</div><div class="line">    return datas</div></pre></td></tr></table></figure>
<p>仔细看上边这段python我们能得出来一个结论，我们可以使用json这个功能，将一个python中的列表，转换为一段字符串，然后返回出去，这个字符串就是一段json字符串，我们可以将这段json字符串反过来转换成一个数组</p>
<p>下面我们来瞅瞅，如何将一个json字符串转换为一个json数组</p>
<blockquote>
<p>首先说明基本功能：</p>
</blockquote>
<p>dumps是将dict转化成str格式，loads是将str转化成dict格式。</p>
<p>dump和load也是类似的功能，只是与文件操作结合起来了。</p>
<p>看代码实例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">In [1]: import json</div><div class="line"></div><div class="line">In [2]: a = &#123;&apos;name&apos;: &apos;wang&apos;, &apos;age&apos;: 29&#125;</div><div class="line"></div><div class="line">In [3]: b = json.dumps(a)</div><div class="line"></div><div class="line">In [4]: print b, type(b)</div><div class="line">&#123;&quot;age&quot;: 29, &quot;name&quot;: &quot;wang&quot;&#125; &lt;type &apos;str&apos;&gt;</div><div class="line"></div><div class="line">In [11]: json.loads(b)</div><div class="line">Out[11]: &#123;u&apos;age&apos;: 29, u&apos;name&apos;: u&apos;wang&apos;&#125;</div><div class="line"></div><div class="line">In [12]: print type(json.loads(b))</div><div class="line">&lt;type &apos;dict&apos;&gt;</div></pre></td></tr></table></figure>
<p>然后再看dump和dumps的区别，见代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">In [1]: import json</div><div class="line"></div><div class="line">In [2]: a = &#123;&apos;name&apos;: &apos;wang&apos;, &apos;age&apos;: 29&#125;</div><div class="line"></div><div class="line">In [3]: b = json.dumps(a)</div><div class="line"></div><div class="line">In [4]: print b, type(b)</div><div class="line">&#123;&quot;age&quot;: 29, &quot;name&quot;: &quot;wang&quot;&#125; &lt;type &apos;str&apos;&gt;</div><div class="line"></div><div class="line">In [5]: c = json.dump(a)</div><div class="line">---------------------------------------------------------------------------</div><div class="line">TypeError                                 Traceback (most recent call last)</div><div class="line">&lt;ipython-input-5-92dc0d929363&gt; in &lt;module&gt;()</div><div class="line">----&gt; 1 c = json.dump(a)</div><div class="line"></div><div class="line">TypeError: dump() takes at least 2 arguments (1 given)</div></pre></td></tr></table></figure>
<p>这里提示我们少一个参数，我们看一下帮助文件（iPyhton中可以直接使用help(json.dumps)来查看帮助文件）：</p>
<p>dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding=’utf-8’, default=None, sort_keys=False, **kw)<br>Serialize <code>obj</code> to a JSON formatted <code>str</code>.</p>
<p>dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding=’utf-8’, default=None, sort_keys=False, **kw)<br>Serialize <code>obj</code> as a JSON formatted stream to <code>fp</code> (a<br><code>.write()</code>-supporting file-like object).</p>
<p>简单说就是dump需要一个类似于文件指针的参数（并不是真的指针，可称之为类文件对象），可以与文件操作结合，也就是说可以将dict转成str然后存入文件中；而dumps直接给的是str，也就是将字典转成str。</p>
<p>例子见代码（注意文件操作的一些小细节）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">In [1]: import json</div><div class="line"></div><div class="line">In [2]: a = &#123;&apos;name&apos;: &apos;wang&apos;&#125;</div><div class="line"></div><div class="line">In [3]: fp = file(&apos;test.txt&apos;, &apos;w&apos;)</div><div class="line"></div><div class="line">In [4]: type(fp)</div><div class="line">Out[4]: file</div><div class="line"></div><div class="line">In [5]: json.dump(a, fp)</div><div class="line"></div><div class="line">In [6]: cat test.txt</div><div class="line"></div><div class="line">In [7]: fp.close()</div><div class="line"></div><div class="line">In [8]: cat test.txt</div><div class="line">&#123;&quot;name&quot;: &quot;wang&quot;&#125;</div><div class="line">In [9]: json.load(fp)</div><div class="line">---------------------------------------------------------------------------</div><div class="line">ValueError                                Traceback (most recent call last)</div><div class="line">&lt;ipython-input-9-0064dabedb17&gt; in &lt;module&gt;()</div><div class="line">----&gt; 1 json.load(fp)</div><div class="line"></div><div class="line">/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.pyc in load(fp, encoding, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)</div><div class="line">285</div><div class="line">286     &quot;&quot;&quot;</div><div class="line">--&gt; 287     return loads(fp.read(),</div><div class="line">288         encoding=encoding, cls=cls, object_hook=object_hook,</div><div class="line">289         parse_float=parse_float, parse_int=parse_int,</div><div class="line"></div><div class="line">ValueError: I/O operation on closed file</div><div class="line"></div><div class="line">In [10]: fp = file(&apos;test.txt&apos;, &apos;r&apos;)</div><div class="line"></div><div class="line">In [11]: json.load(fp)</div><div class="line">Out[11]: &#123;u&apos;name&apos;: u&apos;wang&apos;&#125;</div><div class="line">注：实际中dump用的较少。</div></pre></td></tr></table></figure>
<h3 id="javascript中如何将一段json字符串转换为json对象"><a href="#javascript中如何将一段json字符串转换为json对象" class="headerlink" title="javascript中如何将一段json字符串转换为json对象"></a>javascript中如何将一段json字符串转换为json对象</h3><p>var obj = JSON.parse(data);</p>
<h3 id="web中上传文件，带进度条的做法"><a href="#web中上传文件，带进度条的做法" class="headerlink" title="web中上传文件，带进度条的做法"></a>web中上传文件，带进度条的做法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;upload&quot;&gt;</div><div class="line"></div><div class="line">     &lt;form&gt;</div><div class="line">        &#123;% csrf_token %&#125;</div><div class="line">        &lt;input type=&quot;file&quot; id=&apos;file&apos; class=&apos;file&apos; style=&quot;margin-top: 5px;margin-left: 10px&quot; name=&quot;file&quot;&gt;&lt;br&gt;</div><div class="line">        &lt;div id=&apos;1&apos; style=&quot;margin-top: 40px;margin-left: 10px;height:10px;width:200px;border-color: rgba(110,3,120,1);border:1px solid gray;float:left;margin-right:10px;&quot;&gt;</div><div class="line">            &lt;div id=&apos;2&apos; style=&quot;height:100%;width:0px;background:rgba(220,220,220,1);&quot;&gt;&lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;a style=&quot;position: absolute;top: 72px;;margin-right:25px&quot; id=&apos;3&apos;&gt;0%&lt;/a&gt;</div><div class="line"></div><div class="line">        &lt;button type=&quot;button&quot; style=&quot;margin-top: 32px;margin-left: 50px;&quot; onclick=&quot;upload();&quot;&gt;上传&lt;/button&gt;</div><div class="line"></div><div class="line">    &lt;/form&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>是要定义一个file,下边是js的代码，我们来实现上传功能</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function upload() &#123;</div><div class="line"></div><div class="line">            var apktextinput = document.getElementById(&apos;apkname&apos;)</div><div class="line">            var apkname = apktextinput.value</div><div class="line"></div><div class="line">            if (apkname.length == 0) &#123;</div><div class="line">                alert(&apos;请输入证书名称&apos;)</div><div class="line">                return</div><div class="line">            &#125;</div><div class="line"></div><div class="line">			var xhr = new XMLHttpRequest();</div><div class="line">			var file = document.getElementById(&apos;file&apos;).files[0];   //取得文件数据，而.file对象只是文件信息</div><div class="line">			var form = new FormData();   //FormData是HTML5为实现序列化表单而提供的类，更多细节可自行查询</div><div class="line">            form.append(&apos;file&apos;,file);   //这里为序列化表单对象form添加一个元素，即file</div><div class="line">			xhr.upload.addEventListener(&apos;progress&apos;,on_progress,false);     //xhr对象含有一个upload对象，它有一个progress事件，在文件上传过程中会被不断触发，我们为这个事件对应一个处理函数，每当事件触发就会调用这个函数，于是便可利用这个函数来修改当前进度，更多细节可自行查询</div><div class="line">			xhr.open(&apos;POST&apos;,&apos;http://10.13.8.12:89/uploadAPK/&apos;,true);  //请将url改成上传url</div><div class="line">            xhr.setRequestHeader(&apos;X-CSRFTOKEN&apos;,&apos;&#123;&#123; request.COOKIES.csrftoken &#125;&#125;&apos;);   //此处为Django要求，可无视，或者换成相应后台所要求的CSRF防护，不是django用户请去掉</div><div class="line">			xhr.send(form);   //发送表单</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<p>重点是<code>xhr.upload.addEventListener(&#39;progress&#39;,on_progress,false);</code>这个方法会保证上传过程中不断的回调我们来实现on_progress</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">function on_progress(evt) &#123;       //看这个函数之前先看upload函数。这个函数可以接收一个evt(event)对象(细节自行查询progress)，他有3个属性lengthComputable，loaded，total，第一个属性是个bool类型的，代表是否支持，第二个代表当前上传的大小，第三个为总的大小，由此便可以计算出实时上传的百分比</div><div class="line">		if(evt.lengthComputable) &#123;</div><div class="line">			var ele = document.getElementById(&apos;2&apos;);</div><div class="line">			var percent = Math.round((evt.loaded) * 100 / evt.total);</div><div class="line">               if (percent == 100 &amp;&amp; strongapk == 1) &#123;</div><div class="line">                   strongapk = 0</div><div class="line">                   var textcontent = document.getElementById(&quot;wating&quot;)</div><div class="line">                   textcontent.style.display = &apos;block&apos;</div><div class="line"></div><div class="line">                   var apktextinput = document.getElementById(&apos;apkname&apos;)</div><div class="line">                   var apkname = apktextinput.value</div><div class="line"></div><div class="line">                    $.ajax(&#123;</div><div class="line">                       url: &quot;/startstrongapk/&quot;,    //后台webservice里的方法名称</div><div class="line">                       data:&#123;&quot;apkname&quot;:apkname&#125;,</div><div class="line">                       type: &quot;post&quot;,</div><div class="line">                       traditional: true,</div><div class="line">                       success: function (data) &#123;</div><div class="line">                           downloadurl = data</div><div class="line">                           alert(data)</div><div class="line">                           $(&quot;#wating&quot;).css(&apos;display&apos;,&apos;none&apos;);</div><div class="line">                           if (confirm(&quot;你确定要下载文件吗？&quot;)) &#123;</div><div class="line">                               self.location=(&apos;downloadsdk?url=&apos; + data)</div><div class="line">                           &#125;</div><div class="line">                       &#125;,</div><div class="line">                       error: function (msg) &#123;</div><div class="line">                           alert(msg)</div><div class="line">                           $(&quot;#wating&quot;).css(&apos;display&apos;,&apos;none&apos;);</div><div class="line">                       &#125;</div><div class="line">                  &#125;);</div><div class="line"></div><div class="line">               &#125;</div><div class="line">			ele.style.width = percent + &apos;%&apos;;</div><div class="line">			document.getElementById(&apos;3&apos;).innerHTML = percent + &apos;%&apos;;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>这里我们在percent达到100之后，调用ajax做一些事情</p>
<h3 id="django中接口调用的方式总结"><a href="#django中接口调用的方式总结" class="headerlink" title="django中接口调用的方式总结"></a>django中接口调用的方式总结</h3><p>网络方法调用大致有这么几种</p>
<h4 id="点击按钮跳转新页面"><a href="#点击按钮跳转新页面" class="headerlink" title="点击按钮跳转新页面"></a>点击按钮跳转新页面</h4><p>这种直接用<a>标签，然后用href就好</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a class=&quot;button&quot; id=&quot;ios&quot; style=&quot;position: absolute;top: 50px;&quot; href=&quot;jinkensios&quot; onmouseover=&quot;showDetailText(this)&quot; onmouseout=&quot;clearTest()&quot;&gt;● 打包(iOS)&lt;/a&gt;</div></pre></td></tr></table></figure>
<h4 id="点击按钮刷新局部数据"><a href="#点击按钮刷新局部数据" class="headerlink" title="点击按钮刷新局部数据"></a>点击按钮刷新局部数据</h4><h5 id="这种最好是预先埋伏好ajax，然后用id绑定，点击之后直接调用"><a href="#这种最好是预先埋伏好ajax，然后用id绑定，点击之后直接调用" class="headerlink" title="这种最好是预先埋伏好ajax，然后用id绑定，点击之后直接调用"></a>这种最好是预先埋伏好ajax，然后用id绑定，点击之后直接调用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(document).ready(function()&#123;</div><div class="line">      $(&quot;#btn&quot;).click(function()&#123;</div><div class="line">        string = $(&quot;#textarea1&quot;).val()</div><div class="line">        $.get(&quot;/ajaxcreateui/&quot;, &#123;&apos;text&apos;: string&#125;,function(ret)&#123;</div><div class="line">            $(&apos;#textarea2&apos;).html(ret)</div><div class="line">        &#125;)</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<ul>
<li><code>$(document).ready(function(){}</code>预先埋伏的写法要写在这句代码里边</li>
<li><code>$(&quot;#btn&quot;).click(function(){}</code>这个是预先埋伏</li>
<li><code>$.get(&quot;/ajaxcreateui/&quot;, {&#39;text&#39;: string},function(ret){}</code>ajax的get调用</li>
</ul>
<h5 id="直接使用XMLHttpRequest"><a href="#直接使用XMLHttpRequest" class="headerlink" title="直接使用XMLHttpRequest"></a>直接使用XMLHttpRequest</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">var progresshttp;</div><div class="line">function getprogress() &#123;</div><div class="line"></div><div class="line">    progresshttp=null;</div><div class="line">    if (window.XMLHttpRequest)</div><div class="line">      &#123;// code for all new browsers</div><div class="line">      progresshttp=new XMLHttpRequest();</div><div class="line">      &#125;</div><div class="line">    else if (window.ActiveXObject)</div><div class="line">      &#123;// code for IE5 and IE6</div><div class="line">      progresshttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    if (progresshttp!=null)</div><div class="line">      &#123;</div><div class="line">          progresshttp.onreadystatechange=progressstate_Change;</div><div class="line">          progresshttp.open(&quot;POST&quot;,&apos;getpackprogress&apos;,false);</div><div class="line">          var formData = new FormData();</div><div class="line">          formData.append(&apos;branchname&apos;, branchname);</div><div class="line">          progresshttp.send(formData);</div><div class="line">      &#125;</div><div class="line">    else</div><div class="line">      &#123;</div><div class="line">      alert(&quot;Your browser does not support XMLHTTP.&quot;);</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function progressstate_Change()</div><div class="line">&#123;</div><div class="line">if (progresshttp.readyState==4)</div><div class="line">  &#123;// 4 = &quot;loaded&quot;</div><div class="line">  if (progresshttp.status==200)</div><div class="line">    &#123;// 200 = OK</div><div class="line"></div><div class="line">      num = this.responseText</div><div class="line"></div><div class="line">      var ele = document.getElementById(&apos;12&apos;);</div><div class="line">      var percent = num * 100;</div><div class="line">      percent = percent.toFixed(2)</div><div class="line">      if (percent &gt;= 100.00) &#123;</div><div class="line">          percent = 100.00</div><div class="line">      &#125;</div><div class="line">      ele.style.width = percent + &apos;%&apos;;</div><div class="line">      document.getElementById(&apos;13&apos;).innerHTML = percent + &apos;%&apos;;</div><div class="line">      if (percent &gt;= 100) &#123;</div><div class="line">          window.clearInterval(waitinterval)</div><div class="line">          ele.style.width = 100 + &apos;%&apos;;</div><div class="line">          var text = document.getElementById(&apos;building&apos;)</div><div class="line">          text.innerHTML = &quot;&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  else</div><div class="line">    &#123;</div><div class="line">    alert(&quot;Problem retrieving XML data&quot;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加回调的方式</p>
<blockquote>
<ul>
<li><code>xhr.upload.addEventListener(&#39;progress&#39;,on_progress,false);</code>进度条</li>
<li><code>progresshttp.onreadystatechange=progressstate_Change</code>事件回调</li>
</ul>
</blockquote>
<h4 id="某个事件调用结束刷新局部数据"><a href="#某个事件调用结束刷新局部数据" class="headerlink" title="某个事件调用结束刷新局部数据"></a>某个事件调用结束刷新局部数据</h4><p>直接使用ajax或者XMLHttpRequest就好</p>
<h3 id="python中调用命令行随时输出的做法"><a href="#python中调用命令行随时输出的做法" class="headerlink" title="python中调用命令行随时输出的做法"></a>python中调用命令行随时输出的做法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">p = subprocess.Popen(&quot;gradle assembleDebug&quot;,shell=True,stdout=subprocess.PIPE)</div><div class="line"></div><div class="line">indexcount = 0</div><div class="line"></div><div class="line">returncode = p.poll()</div><div class="line"></div><div class="line">while returncode is None:</div><div class="line">      text = p.stdout.readline().strip()</div><div class="line">      f = open(&apos;/Users/jdjr/Desktop/buildlog.txt&apos;,&apos;a&apos;)#追加打开方式</div><div class="line">      f.write(text)</div><div class="line">      f.close()</div><div class="line">        </div><div class="line">      returncode = p.poll()</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mongodb使用小结]]></title>
      <url>/2017/05/17/2017/mongodb%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="创建一个mongo数据库"><a href="#创建一个mongo数据库" class="headerlink" title="创建一个mongo数据库"></a>创建一个mongo数据库</h3><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from pymongo import MongoClient</div><div class="line">import json,time</div><div class="line"></div><div class="line">connection = MongoClient(&quot;localhost&quot;,27017)</div><div class="line">mydb = connection.mydb # new a database</div><div class="line">myser = mydb.allindex # new a table</div></pre></td></tr></table></figure>
<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">dicn = &#123;&#125;</div><div class="line">dicn[&apos;indexname&apos;] = item</div><div class="line">dicn[&apos;date&apos;] = dateString</div><div class="line">dbs = myser.find(dicn)</div><div class="line"></div><div class="line">for item in dbs:</div><div class="line"></div><div class="line">  dic = &#123;&#125;</div><div class="line">  datestring = item[&apos;date&apos;]</div><div class="line">  datestring = datestring.encode(&apos;utf-8&apos;)</div><div class="line">  dic[&apos;date&apos;] = datestring</div><div class="line">  dic[&apos;earyeild&apos;] = item[&apos;earyeild&apos;]</div><div class="line">  dic[&apos;indexname&apos;] = item[&apos;indexname&apos;]</div></pre></td></tr></table></figure>
<blockquote>
</blockquote>
<p>MongoDB提供了一组比较操作符：$lt/$lte/$gt/$gte/$ne，依次等价于&lt;/&lt;=/&gt;/&gt;=/!=。</p>
<ul>
<li><p>下面的示例返回符合条件age &gt;= 18 &amp;&amp; age &lt;= 40的文档。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.test.find(&#123;&quot;age&quot;:&#123;&quot;$gte&quot;:18, &quot;$lte&quot;:40&#125;&#125;)</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;4fd58ecbb9ac507e96276f1a&quot;), &quot;name&quot; : &quot;stephen&quot;, &quot;age&quot; : 35,&quot;genda&quot; : &quot;male&quot;, &quot;email&quot; : &quot;stephen@hotmail.com&quot; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>下面的示例返回条件符合name != “stephen1”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.test.find(&#123;&quot;name&quot;:&#123;&quot;$ne&quot;:&quot;stephen1&quot;&#125;&#125;)</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;4fd58ecbb9ac507e96276f1a&quot;), &quot;name&quot; : &quot;stephen&quot;, &quot;age&quot; : 35,&quot;genda&quot; : &quot;male&quot;, &quot;email&quot; : &quot;stephen@hotmail.com&quot; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>$in等同于SQL中的in，下面的示例等同于SQL中的in (“stephen”,”stephen1”)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.test.find(&#123;&quot;name&quot;:&#123;&quot;$in&quot;:[&quot;stephen&quot;,&quot;stephen1&quot;]&#125;&#125;)</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;4fd58ecbb9ac507e96276f1a&quot;), &quot;name&quot; : &quot;stephen&quot;, &quot;age&quot; : 35,&quot;genda&quot; : &quot;male&quot;, &quot;email&quot; : &quot;stephen@hotmail.com&quot; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>和SQL不同的是，MongoDB的in list中的数据可以是不同类型。这种情况可用于不同类型的别名场景。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.test.find(&#123;&quot;name&quot;:&#123;&quot;$in&quot;:[&quot;stephen&quot;,123]&#125;&#125;)</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;4fd58ecbb9ac507e96276f1a&quot;), &quot;name&quot; : &quot;stephen&quot;, &quot;age&quot; : 35,&quot;genda&quot; : &quot;male&quot;, &quot;email&quot; : &quot;stephen@hotmail.com&quot; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>$nin等同于SQL中的not in，同时也是$in的取反。如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.test.find(&#123;&quot;name&quot;:&#123;&quot;$nin&quot;:[&quot;stephen2&quot;,&quot;stephen1&quot;]&#125;&#125;)</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;4fd58ecbb9ac507e96276f1a&quot;), &quot;name&quot; : &quot;stephen&quot;, &quot;age&quot; : 35,&quot;genda&quot; : &quot;male&quot;, &quot;email&quot; : &quot;stephen@hotmail.com&quot; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>$or等同于SQL中的or，$or所针对的条件被放到一个数组中，每个数组元素表示or的一个条件。<br>下面的示例等同于name = “stephen1” or age = 35</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.test.find(&#123;&quot;$or&quot;: [&#123;&quot;name&quot;:&quot;stephen1&quot;&#125;, &#123;&quot;age&quot;:35&#125;]&#125;)</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;4fd58ecbb9ac507e96276f1a&quot;), &quot;name&quot; : &quot;stephen&quot;, &quot;age&quot; : 35,&quot;genda&quot; : &quot;male&quot;, &quot;email&quot; : &quot;stephen@hotmail.com&quot; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>下面的示例演示了如何混合使用$or和$in。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.test.find(&#123;&quot;$or&quot;: [&#123;&quot;name&quot;:&#123;&quot;$in&quot;:[&quot;stephen&quot;,&quot;stephen1&quot;]&#125;&#125;, &#123;&quot;age&quot;:36&#125;]&#125;)</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;4fd58ecbb9ac507e96276f1a&quot;), &quot;name&quot; : &quot;stephen&quot;, &quot;age&quot; : 35,&quot;genda&quot; : &quot;male&quot;, &quot;email&quot; : &quot;stephen@hotmail.com&quot; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>$not表示取反，等同于SQL中的not。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.test.find(&#123;&quot;name&quot;: &#123;&quot;$not&quot;: &#123;&quot;$in&quot;:[&quot;stephen2&quot;,&quot;stephen1&quot;]&#125;&#125;&#125;)</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;4fd58ecbb9ac507e96276f1a&quot;), &quot;name&quot; : &quot;stephen&quot;, &quot;age&quot; : 35,&quot;genda&quot; : &quot;male&quot;, &quot;email&quot; : &quot;stephen@hotmail.com&quot; &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myser.save(&#123;&apos;指数名称&apos;:item,&apos;市盈率&apos;:pe,&apos;盈利收益率&apos;:roe,&apos;日期&apos;:date,&apos;市净率&apos;:pb,&apos;股息率&apos;:rate&#125;)</div></pre></td></tr></table></figure>
<h3 id="时间的用法"><a href="#时间的用法" class="headerlink" title="时间的用法"></a>时间的用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">current = time.localtime(time.time())</div><div class="line">year = current.tm_year</div><div class="line">month = current.tm_mon</div><div class="line">day = current.tm_mday</div><div class="line"></div><div class="line">yearStr = &apos;%i&apos; % year</div><div class="line">yearList = list(yearStr)</div><div class="line">yearStr1 = yearList[-1]</div><div class="line">yearStr2 = yearList[-2]</div><div class="line">yearStr = yearStr2 + yearStr1</div><div class="line"></div><div class="line">monthStr = months[month - 1]</div><div class="line"></div><div class="line">targetStr = &apos;idx_%i%s%s&apos; % (day,monthStr,yearStr)</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> mongo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS工程小知识]]></title>
      <url>/2017/02/26/2017/iOS%E5%B7%A5%E7%A8%8B%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h3 id="1-出现（-linker-command-failed-with-exit-code-1）"><a href="#1-出现（-linker-command-failed-with-exit-code-1）" class="headerlink" title="1:出现（ linker command failed with exit code 1）"></a>1:出现（ linker command failed with exit code 1）</h3><p>如果具体的错误是这个与第三方.a库重复，那么要更改的是，类名和全局变量的名字<br><a id="more"></a></p>
<h3 id="2-SEGV-ACCERR错误"><a href="#2-SEGV-ACCERR错误" class="headerlink" title="2.SEGV_ACCERR错误"></a>2.SEGV_ACCERR错误</h3><p>说明对象被过度释放，查看是否有在=nil之后又使用了该对象，比如说这段代码<br>case MessageComposeResultSent:<br>        {<br>            //信息传送成功<br>//            [JRMsgShow showMsg:@”发送成功”];<br>            if (self.closeBlock) {<br>                self.closeBlock();<br>            }<br>            if (self.messageSuccessBlock) {<br>                self.messageSuccessBlock();<br>            }<br>            [[UIApplication sharedApplication].keyWindow.rootViewController dismissViewControllerAnimated:YES completion:nil];<br>        }</p>
<p>很明显前边我们使用了closeblock，这个block之行之后，很快self会死掉，而这个之后我们又使用了self.messageSuccessBlock这样再次使用self，必然导致崩溃，不过这是在iOS8上面，在iOS9和10上就没有这个问题，说明苹果做了系统级的优化</p>
<h3 id="3-参数传递尽量要用model，哪怕是回调，因为可能后边会增加需求，那么参数传递将会变得很恶心"><a href="#3-参数传递尽量要用model，哪怕是回调，因为可能后边会增加需求，那么参数传递将会变得很恶心" class="headerlink" title="3.参数传递尽量要用model，哪怕是回调，因为可能后边会增加需求，那么参数传递将会变得很恶心"></a>3.参数传递尽量要用model，哪怕是回调，因为可能后边会增加需求，那么参数传递将会变得很恶心</h3>]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[定时检查网页更新并发送微信消息]]></title>
      <url>/2017/02/16/2017/%E5%AE%9A%E6%97%B6%E6%A3%80%E6%9F%A5%E7%BD%91%E9%A1%B5%E6%9B%B4%E6%96%B0%E5%B9%B6%E5%8F%91%E9%80%81%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import urllib2,time,urllib</div><div class="line"></div><div class="line">    while True:</div><div class="line">    current = time.localtime(time.time())</div><div class="line"></div><div class="line">    year = current.tm_year</div><div class="line">    month = current.tm_mon</div><div class="line">    day = current.tm_mday</div><div class="line"></div><div class="line">    hour = current.tm_hour</div><div class="line">    minite = current.tm_min</div><div class="line">    sec = current.tm_sec</div><div class="line">    if sec == 0:</div><div class="line"></div><div class="line">    downLoadStr = &apos;http://www.bjjs.gov.cn/bjjs/fwgl/zzxspzf/index.shtml&apos;</div><div class="line">    print downLoadStr</div><div class="line">    try:</div><div class="line">        i_headers = &#123;&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.1) Gecko/20090624 Firefox/3.5&quot;,\</div><div class="line">        &quot;Referer&quot;: &apos;http://www.baidu.com&apos;&#125;</div><div class="line">        req = urllib2.Request(downLoadStr, headers=i_headers)</div><div class="line">        f = urllib2.urlopen(req)</div><div class="line">        data = f.read()</div><div class="line"></div><div class="line">        date = &apos;&apos;</div><div class="line">        if month &lt; 10 and day &lt; 10:</div><div class="line">            date = &apos;%i-0%i-0%i&apos; % (year, month, day)</div><div class="line">        elif month &gt; 10 and day &lt; 10:</div><div class="line">            date = &apos;%i-%i-0%i&apos; % (year, month, day)</div><div class="line">        elif month &lt; 10 and day &gt; 10:    </div><div class="line">            date = &apos;%i-0%i-%i&apos; % (year, month, day)</div><div class="line">        else:</div><div class="line">            date = &apos;%i-%i-%i&apos; % (year, month, day)   </div><div class="line"></div><div class="line">        string = &apos;the web has update http://www.bjjs.gov.cn/bjjs/fwgl/zzxspzf/index.shtml&apos;</div><div class="line">        print date</div><div class="line">        if date in data:</div><div class="line">            f = open(&apos;update.txt&apos;,&apos;w&apos;)</div><div class="line">            f.write(date + string)</div><div class="line">            f.close()</div><div class="line">            print &apos;yes&apos;</div><div class="line">        else:</div><div class="line">            print &apos;no&apos;    </div><div class="line"></div><div class="line">    except Exception,ex:</div><div class="line">        print ex</div><div class="line"></div><div class="line"></div><div class="line">#import itchat</div><div class="line">#</div><div class="line">#itchat.auto_login()</div><div class="line">#</div><div class="line">#itchat.send(&apos;Hello, filehelper&apos;, toUserName=&apos;filehelper&apos;)</div><div class="line"></div><div class="line">#while True:</div><div class="line">#     f = open(&apos;update.txt&apos;,&apos;r&apos;)</div><div class="line">#     text = f.read()</div><div class="line">#     f.close()</div><div class="line">#     if len(text) != 0:</div><div class="line">#        f = open(&apos;update.txt&apos;,&apos;w&apos;)</div><div class="line">#        f.write(&apos;&apos;)</div><div class="line">#        f.close()</div><div class="line">#        itchat.send(&apos;the web has update http://www.bjjs.gov.cn/bjjs/fwgl/zzxspzf/index.shtml&apos;, toUserName=&apos;Liu647ziqi&apos;)</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[指数自动获取]]></title>
      <url>/2017/02/16/2017/%E6%8C%87%E6%95%B0%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import urllib2,time,urllib</div><div class="line">import ast,os,sys,string</div><div class="line">from pymongo import MongoClient</div><div class="line"></div><div class="line">months = [&apos;Jan&apos;,&apos;Feb&apos;,&apos;Mar&apos;,&apos;Apr&apos;,&apos;May&apos;,&apos;Jun&apos;,&apos;Jul&apos;,&apos;Aug&apos;,&apos;Sep&apos;,&apos;Oct&apos;,&apos;Nov&apos;,&apos;Dec&apos;]</div><div class="line">dicts = &#123;&apos;zsgz00&apos;:&apos;no&apos;,&apos;zsgz10&apos;:&apos;上证指数&apos;,&apos;zsgz20&apos;:&apos;上证180&apos;,&apos;zsgz30&apos;:&apos;上证50&apos;,&apos;zsgz40&apos;:&apos;沪深300&apos;,&apos;zsgz50&apos;:&apos;深证成指&apos;,&apos;zsgz60&apos;:&apos;深证100R&apos;,&apos;zsgz70&apos;:&apos;中小板指&apos;,&apos;zsgz80&apos;:&apos;上证380&apos;,&apos;zsgz90&apos;:&apos;红利指数&apos;,&apos;zsgz100&apos;:&apos;中证红利&apos;,&apos;zsgz110&apos;:&apos;中证500&apos;&#125;</div><div class="line"></div><div class="line">connection = MongoClient(&quot;localhost&quot;,27017)</div><div class="line">mydb = connection.mydb # new a database</div><div class="line">myser = mydb.hengsengindex # new a table</div><div class="line"></div><div class="line">def getindexs():</div><div class="line"></div><div class="line">    downLoadStr = &apos;http://www.csindex.com.cn/sseportal/ps/zhs/hqjt/csi/show_zsgz.js&apos;</div><div class="line">    print downLoadStr</div><div class="line">    try:</div><div class="line">        i_headers = &#123;&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.1) Gecko/20090624 Firefox/3.5&quot;,\</div><div class="line">        &quot;Referer&quot;: &apos;http://www.baidu.com&apos;&#125;</div><div class="line">        req = urllib2.Request(downLoadStr, headers=i_headers)  </div><div class="line">        f = urllib2.urlopen(req)</div><div class="line">        data = f.read()</div><div class="line">        str = data.decode(&apos;gbk&apos;)</div><div class="line">        data = str.encode(&apos;utf-8&apos;)</div><div class="line">        print data</div><div class="line">        listString = data.split(&apos;\n&apos;)</div><div class="line"></div><div class="line">        date = &apos;&apos;</div><div class="line">        index = 0</div><div class="line">        for item in listString:</div><div class="line">        if &apos;zsgz00&apos; in item:</div><div class="line">            date = item[12:-2]</div><div class="line">            datelist = list(date)</div><div class="line">            for s in datelist:</div><div class="line">            if s == &apos;-&apos;:</div><div class="line">            datelist.remove(s)</div><div class="line">            date = &apos;&apos;.join(datelist)</div><div class="line">            print date</div><div class="line">        if &apos;0=&apos; in item:</div><div class="line">            pe = listString[index + 1]</div><div class="line">            pb = listString[index + 3]</div><div class="line">            rate = listString[index + 4]</div><div class="line">            indexitem = item.index(&apos;=&apos;)</div><div class="line">            indexpe = pe.index(&apos;=&apos;)</div><div class="line">            indexpb = pb.index(&apos;=&apos;)</div><div class="line">            indexrate = rate.index(&apos;=&apos;)</div><div class="line">            pe = pe[indexpe+2:-2]</div><div class="line">            pb = pb[indexpe+2:-2]</div><div class="line">            rate = rate[indexpe+2:-2]</div><div class="line">            item = item[indexitem+2:-2]</div><div class="line">            print item</div><div class="line"></div><div class="line">            pe = filter(lambda ch: ch in &apos;.0123456789&apos;, pe)</div><div class="line">            pb = filter(lambda ch: ch in &apos;.0123456789&apos;, pb)</div><div class="line">            rate = filter(lambda ch: ch in &apos;.0123456789&apos;, rate)</div><div class="line"></div><div class="line">            if len(pe) and len(pb) and len(rate):</div><div class="line">                roaf = float(pe)</div><div class="line">                roe = 1/roaf * 100</div><div class="line">                dbs = myser.find(&#123;&apos;指数名称&apos;:item,&apos;日期&apos;:date&#125;)</div><div class="line">                count = 0</div><div class="line">                for item in dbs:</div><div class="line">                count = count + 1</div><div class="line">                if count == 0:</div><div class="line">                    myser.save(&#123;&apos;指数名称&apos;:item,&apos;市盈率&apos;:pe,&apos;盈利收益率&apos;:roe,&apos;日期&apos;:date,&apos;市净率&apos;:pb,&apos;股息率&apos;:rate&#125;)</div><div class="line"></div><div class="line">            index = index + 1</div><div class="line"></div><div class="line">    except Exception,ex:</div><div class="line">    print ex</div><div class="line"></div><div class="line"></div><div class="line">def gethenghseng(day,month,year):</div><div class="line"></div><div class="line">yearStr = &apos;%i&apos; % year</div><div class="line">yearList = list(yearStr)</div><div class="line">yearStr1 = yearList[-1]</div><div class="line">yearStr2 = yearList[-2]</div><div class="line">yearStr = yearStr2 + yearStr1</div><div class="line"></div><div class="line">monthStr = months[month - 1]</div><div class="line"></div><div class="line">targetStr = &apos;idx_%i%s%s&apos; % (day,monthStr,yearStr)</div><div class="line"></div><div class="line">fileName = &apos;/Users/han/Desktop/index/hengsheng/%i%s%s.txt&apos; % (day,monthStr,yearStr)</div><div class="line"></div><div class="line">downLoadStr = &apos;http://sc.hangseng.com/gb/www.hsi.com.hk/HSI-Net/static/revamp/contents/en/indexes/report/hsi/&apos; + targetStr + &apos;.csv&apos;</div><div class="line">print downLoadStr</div><div class="line">try:</div><div class="line">i_headers = &#123;&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.1) Gecko/20090624 Firefox/3.5&quot;,\</div><div class="line">&quot;Referer&quot;: &apos;http://www.baidu.com&apos;&#125;</div><div class="line">req = urllib2.Request(downLoadStr, headers=i_headers)</div><div class="line">f = urllib2.urlopen(req)</div><div class="line">data = f.read()</div><div class="line">f = open(fileName,&apos;wb&apos;)</div><div class="line">f.write(data)</div><div class="line">f.close()</div><div class="line"></div><div class="line">f1 = open(fileName,&apos;rb&apos;)</div><div class="line">dataList = f1.readlines()</div><div class="line">item  = dataList[2]</div><div class="line">list2 = item.split(&apos;	&apos;)</div><div class="line">date = list2[0]</div><div class="line">index = list2[5]</div><div class="line">roa = list2[9]</div><div class="line">date = filter(lambda ch: ch in &apos;0123456789&apos;, date)</div><div class="line">index = filter(lambda ch: ch in &apos;.0123456789&apos;, index)</div><div class="line">string = filter(lambda ch: ch in &apos;.0123456789&apos;, roa)</div><div class="line">roaf = float(string)</div><div class="line">roe = 1/roaf * 100</div><div class="line">print date</div><div class="line">print index</div><div class="line">dbs = myser.find(&#123;&apos;指数名称&apos;:&apos;恒生指数&apos;,&apos;日期&apos;:date&#125;)</div><div class="line">count = 0</div><div class="line">for item in dbs:</div><div class="line">count = count + 1</div><div class="line">if count == 0:</div><div class="line">myser.save(&#123;&apos;指数名称&apos;:&apos;恒生指数&apos;,&apos;市盈率&apos;:roaf,&apos;盈利收益率&apos;:roe,&apos;日期&apos;:date,&apos;指数&apos;:index&#125;) # add a record</div><div class="line"></div><div class="line">saveStr = &apos;%s  %f&apos; % (date, roe)</div><div class="line"></div><div class="line">f = open(&apos;hengseng.txt&apos;,&apos;r&apos;)</div><div class="line">data = f.read()</div><div class="line">f.close()</div><div class="line"></div><div class="line">dataStr = data + &apos;\n&apos; + saveStr</div><div class="line">f = open(&apos;hengseng.txt&apos;,&apos;w&apos;)</div><div class="line">f.write(dataStr)</div><div class="line">f.close()</div><div class="line">except Exception,ex:</div><div class="line">print ex</div><div class="line"></div><div class="line"></div><div class="line">def gethenghsengchina(day,month,year):</div><div class="line"></div><div class="line">yearStr = &apos;%i&apos; % year</div><div class="line">yearList = list(yearStr)</div><div class="line">yearStr1 = yearList[-1]</div><div class="line">yearStr2 = yearList[-2]</div><div class="line">yearStr = yearStr2 + yearStr1</div><div class="line"></div><div class="line">monthStr = months[month - 1]</div><div class="line"></div><div class="line">targetStr = &apos;idx_%i%s%s&apos; % (day,monthStr,yearStr)</div><div class="line"></div><div class="line">fileName = &apos;/Users/han/Desktop/index/hengsheng/china%i%s%s.txt&apos; % (day,monthStr,yearStr)</div><div class="line"></div><div class="line">downLoadStr = &apos;http://sc.hangseng.com/gb/www.hsi.com.hk/HSI-Net/static/revamp/contents/en/indexes/report/hscei/&apos; + targetStr + &apos;.csv&apos;</div><div class="line">print downLoadStr</div><div class="line">try:</div><div class="line">i_headers = &#123;&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.1) Gecko/20090624 Firefox/3.5&quot;,\</div><div class="line">&quot;Referer&quot;: &apos;http://www.baidu.com&apos;&#125;</div><div class="line">req = urllib2.Request(downLoadStr, headers=i_headers)</div><div class="line">f = urllib2.urlopen(req)</div><div class="line">data = f.read()</div><div class="line">f = open(fileName,&apos;wb&apos;)</div><div class="line">f.write(data)</div><div class="line">f.close()</div><div class="line"></div><div class="line">f1 = open(fileName,&apos;rb&apos;)</div><div class="line">dataList = f1.readlines()</div><div class="line">item  = dataList[2]</div><div class="line">list2 = item.split(&apos;	&apos;)</div><div class="line">date = list2[0]</div><div class="line">index = list2[5]</div><div class="line">roa = list2[9]</div><div class="line">date = filter(lambda ch: ch in &apos;0123456789&apos;, date)</div><div class="line">index = filter(lambda ch: ch in &apos;.0123456789&apos;, index)</div><div class="line">string = filter(lambda ch: ch in &apos;.0123456789&apos;, roa)</div><div class="line">roaf = float(string)</div><div class="line">roe = 1/roaf * 100</div><div class="line"></div><div class="line">print index</div><div class="line">dbs = myser.find(&#123;&apos;指数名称&apos;:&apos;恒生指H&apos;,&apos;日期&apos;:date&#125;)</div><div class="line">count = 0</div><div class="line">for item in dbs:</div><div class="line">count = count + 1</div><div class="line">if count == 0:</div><div class="line">myser.save(&#123;&apos;指数名称&apos;:&apos;恒生指数H&apos;, &apos;市盈率&apos;:roaf,&apos;盈利收益率&apos;:roe,&apos;日期&apos;:date,&apos;指数&apos;:index&#125;)</div><div class="line"></div><div class="line">saveStr = &apos;%s  %f&apos; % (date, roe)</div><div class="line"></div><div class="line">f = open(&apos;hengsengchina.txt&apos;,&apos;r&apos;)</div><div class="line">data = f.read()</div><div class="line">f.close()</div><div class="line"></div><div class="line">dataStr = data + &apos;\n&apos; + saveStr</div><div class="line">f = open(&apos;hengsengchina.txt&apos;,&apos;w&apos;)</div><div class="line">f.write(dataStr)</div><div class="line">f.close()</div><div class="line">except Exception,ex:</div><div class="line">print ex</div><div class="line"></div><div class="line"></div><div class="line">getindexs()</div><div class="line"></div><div class="line">current = time.localtime(time.time())</div><div class="line">year = current.tm_year</div><div class="line">month = current.tm_mon</div><div class="line">day = current.tm_mday</div><div class="line"></div><div class="line">index = 0</div><div class="line">if month == 12:</div><div class="line">index = 1</div><div class="line"></div><div class="line">index = month - 1</div><div class="line"></div><div class="line">day = day - 1</div><div class="line"></div><div class="line"># gethenghseng(day,month,year)</div><div class="line"></div><div class="line">for month in xrange(1,3):</div><div class="line">for day in xrange(1,31):</div><div class="line">gethenghsengchina(day,month,year)</div><div class="line">gethenghseng(day,month,year)</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[爬虫系列]]></title>
      <url>/2017/02/10/2017/%E7%88%AC%E8%99%AB%E7%B3%BB%E5%88%97/</url>
      <content type="html"><![CDATA[<p>这里主要实现的是利用爬虫来实现对关注指数基金的估值数据的抓取，然后进行估值分析，配合云服务器并且每天进行推送。</p>
<p>爬虫的基本步骤很简单，将该网页的js和html全部下载下来，然后从其中寻找有用的信息，进而将有用的信息进行结构化的存储，其中将网页爬取下来使用的scrapy，而寻找信息我们使用的是xpath，存储我们使用mongo<br><a id="more"></a></p>
<h3 id="使用scrapy框架"><a href="#使用scrapy框架" class="headerlink" title="使用scrapy框架"></a>使用scrapy框架</h3><ul>
<li><p>安装<br><code>sudo pip install scrapy</code>或者直接下载源码，自己编译*下载0.24版本的scrapy<a href="http://scrapy.org/download/" target="_blank" rel="external">http://scrapy.org/download/</a><br>然后cd 进入解压后的文件，然后执行sudo python setup.py install安装scrapy</p>
<blockquote>
<p>如果在使用命令行过程中发现sudo之后仍然无法获取权限，删除文件时会提示Operation not permitted，那就关机重启，然后按住comman+R，启动之后启动命令行，输入，csrutil disable关闭rootless就可以了</p>
</blockquote>
</li>
<li><p>scrapy startproject tutorial创建爬虫工程</p>
</li>
</ul>
<ul>
<li>scrapy.cfg: 项目的配置文件</li>
<li>tutorial/: 该项目的python模块。之后您将在此加入代码。</li>
<li>tutorial/items.py: 项目中的item文件.</li>
<li>tutorial/pipelines.py: 项目中的pipelines文件.</li>
<li>tutorial/settings.py: 项目的设置文件.</li>
<li>tutorial/spiders/: 放置spider代码的目录.</li>
</ul>
<blockquote>
<p>文件作用说明</p>
</blockquote>
<ul>
<li>items.py：定义后期处理的数据，是一个容器，像一个字典</li>
<li>settings.py：配置scrapy，从而修改user-agent,设置爬取时间，设置代理，设置中间件</li>
<li>pipelines.py:用于存放执行后去数据处理的功能，从而把爬取与处理分开<br>item成功获取数据之后，它会送到pipeline，让pipeline对数据进行处理</li>
</ul>
<p>运行工程：<br>scrapy目前只能使用命令行来运行<code>scrapy crawl demo</code>这里要注意的是后边的这个demo这个名字不是随便来的，spider这个文件命名要是demo_spider才可以</p>
<h3 id="xpath的使用"><a href="#xpath的使用" class="headerlink" title="xpath的使用"></a>xpath的使用</h3><p>用到的工具：</p>
<ul>
<li>火狐浏览器</li>
<li>FirePath插件</li>
<li>Firebug插件</li>
<li>XPath Checker插件</li>
</ul>
<p>1.右键选择－Inspect in FirePath<br>2.复制xpath<br>3.在该页面上右键－&gt;View XPath<br>4.把xpath的路径复制进入该页面，查看是否能够找到自己想要的元素</p>
<h3 id="mongodb的安装以及使用"><a href="#mongodb的安装以及使用" class="headerlink" title="mongodb的安装以及使用"></a>mongodb的安装以及使用</h3><ul>
<li><p>一行代码安装mongodbbrew install mongoDB前提是已经安装了brew工具，一次失败就执行第二次<br>*<br>如果上边的方法还是不行，那就只能手动下载了</p>
<ul>
<li><a href="https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.2.3.tgz" target="_blank" rel="external">https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.2.3.tgz</a></li>
<li>命令行解压该包tar xzvf mongodb-osx-x86_64-3.2.3.tgz</li>
<li>将解压后的文件放到一个可以长期放置的地方，然后进入该文件夹</li>
<li>pwd记录当前文件路径，copy一下，一会儿有用</li>
<li>vim ~/.zshrc进入配置目录<br><em><br>#mongod config<br>MONGODB_HOME=/Users/shenghuihan/Desktop/mongodb-osx-x86_64-3.2.3<br>PATH=$PATH:$MONGODB_HOME/bin添加bin目录文件到系统搜索目录下
</em><br>source ~/.zshrc使设置生效</li>
</ul>
</li>
<li>查看mongo是否生效mongo，如果显示版本号说明生效，但是没有启动下面我们来启动服务</li>
<li>先在同级目录下创建数据文件和日志文件mkdir data和mkdir log</li>
<li>启动mongodb服务mongod –dbpath data –logpath log/mongod.log –logappend –fork</li>
<li>再次mongo如果显示connecting to test说明启动成功，输入exit;退出mongo</li>
<li>将启动命令写入一个启动脚本中echo “mongod –dbpath data –logpath log/mongod.log –logappend –fork” &gt;&gt; start.sh</li>
<li>可视化工具安装<a href="https://mongohub.s3.amazonaws.com/MongoHub.zip直接去这里下载" target="_blank" rel="external">https://mongohub.s3.amazonaws.com/MongoHub.zip直接去这里下载</a></li>
<li>安装python操作mongodb的驱动sudo pip install pymongo前提是要安装pip啊，这是一个专门用来安装python各种库的软件</li>
<li>默认端口27017</li>
<li>查看ip的方式，db.getMongo()</li>
</ul>
<h4 id="使用mongodb命令行"><a href="#使用mongodb命令行" class="headerlink" title="使用mongodb命令行"></a>使用mongodb命令行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">bogon:mongo shenghuihan$ mongo</div><div class="line">MongoDB shell version: 3.2.3</div><div class="line">connecting to: test</div><div class="line">Server has startup warnings: </div><div class="line">2016-09-08T17:51:01.057+0800 I CONTROL  [initandlisten] </div><div class="line">2016-09-08T17:51:01.057+0800 I CONTROL  [initandlisten] ** WARNING: soft rlimits too low. Number of files is 256, should be at least 1000</div><div class="line">&gt; use mydb//创建一个新的库</div><div class="line">switched to db mydb</div><div class="line">&gt; show collections</div><div class="line">&gt; show dbs</div></pre></td></tr></table></figure>
<h4 id="使用以及查看数据"><a href="#使用以及查看数据" class="headerlink" title="使用以及查看数据"></a>使用以及查看数据</h4><p>我们可以使用mongohub查看数据，当然还可以使用我们最喜欢的python<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import pymongo</div><div class="line"></div><div class="line">connection = pymongo.MongoClient()</div><div class="line">tdb = connection.jikexueyuan</div><div class="line">post_info = tdb.ceshi</div><div class="line"></div><div class="line">jike = &#123;&apos;name&apos;:u&apos;哈哈哈&apos;&#125;#插入数据</div><div class="line">goog = &#123;&apos;name&apos;:u&apos;校长&apos;&#125;</div><div class="line"></div><div class="line"># post_info.insert(jike)</div><div class="line"># post_info.insert(goog)</div><div class="line">post_info.remove(&#123;&apos;name&apos;:u&apos;校长&apos;&#125;)</div><div class="line"></div><div class="line">print u&apos;操作完成&apos;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">from pymongo import MongoClient</div><div class="line"></div><div class="line">mc = MongoClient(&quot;localhost&quot;,27017)</div><div class="line"></div><div class="line">db = mc.users</div><div class="line"></div><div class="line">c = db.users.find()</div><div class="line"></div><div class="line">db.users.save(&#123;&quot;age&quot;:8&#125;)</div><div class="line"></div><div class="line">for objc in c:</div><div class="line">    print(objc)</div><div class="line"></div><div class="line">mc.close()</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Lunix云服务器折腾小记]]></title>
      <url>/2017/01/17/2017/Lunix%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%98%E8%85%BE%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="Mac登录云服务器"><a href="#Mac登录云服务器" class="headerlink" title="Mac登录云服务器"></a>Mac登录云服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@127.987.883.888</div></pre></td></tr></table></figure>
<p>这样再输入密码我们就进入了我们的服务器的命令行界面，这里执行的命令行与本机是一致的，不过你看到的是你服务器的一些情况<br><a id="more"></a></p>
<h3 id="文件的上传和下载"><a href="#文件的上传和下载" class="headerlink" title="文件的上传和下载"></a>文件的上传和下载</h3><ul>
<li>上传<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp ceshi.txt root@127.987.883.888:~</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这样文件会被传输到你的用户名下的文件夹下</p>
<ul>
<li>下载<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp root@127.987.883.888:~／ceshi.txt ceshi.txt</div></pre></td></tr></table></figure>
</li>
</ul>
<!--more-->
<h3 id="apache安装"><a href="#apache安装" class="headerlink" title="apache安装"></a>apache安装</h3><p>-1. 运行 Terminal，输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh username@ip，然后输入密码。</div></pre></td></tr></table></figure></p>
<ol>
<li><p>安装 Apache 软件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install httpd</div></pre></td></tr></table></figure>
</li>
<li><p>设置 Apache 在服务器启动时运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig --levels 235 httpd on</div></pre></td></tr></table></figure>
</li>
<li><p>在 Apache 配置文件中配置域名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/httpd/conf/httpd.conf，找到 ServerName ，添加“域名:80”，保存并退出。</div></pre></td></tr></table></figure>
</li>
<li><p>重启 Apache：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service httpd restart</div></pre></td></tr></table></figure>
</li>
<li><p>浏览器中访问第4步配置的域名，如果出现“Apache 2 Test Page powered by CentOS”的页面，说明配置成功。</p>
</li>
</ol>
<h3 id="django安装"><a href="#django安装" class="headerlink" title="django安装"></a>django安装</h3><ul>
<li><p>安装pip<code>sudo yum install python-pip</code></p>
</li>
<li><p>pip安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install --upgrade django==1.11</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="重新格式化云服务器之后登录不上怎么办"><a href="#重新格式化云服务器之后登录不上怎么办" class="headerlink" title="重新格式化云服务器之后登录不上怎么办"></a>重新格式化云服务器之后登录不上怎么办</h3><p>将本地的./ssh文件夹中的know_hosts里边对应的ip的记录删除掉，重新生成</p>
<h3 id="lunix中的复制文件以及文件夹"><a href="#lunix中的复制文件以及文件夹" class="headerlink" title="lunix中的复制文件以及文件夹"></a>lunix中的复制文件以及文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp -r xxx xxx</div></pre></td></tr></table></figure>
<p>-r代表我们复制其中的所有文件以及文件夹</p>
<h3 id="lunix删除文件"><a href="#lunix删除文件" class="headerlink" title="lunix删除文件"></a>lunix删除文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf xxx</div></pre></td></tr></table></figure>
<h3 id="在python-的django服务不可用"><a href="#在python-的django服务不可用" class="headerlink" title="在python 的django服务不可用"></a>在python 的django服务不可用</h3><p>查看</p>
<h3 id="lunix升级python"><a href="#lunix升级python" class="headerlink" title="lunix升级python"></a>lunix升级python</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">首先下载源tar包</div><div class="line"></div><div class="line">　　可利用linux自带下载工具wget下载，如下所示：</div><div class="line"></div><div class="line">1# wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tgz</div><div class="line">　　下载完成后到下载目录下，解压</div><div class="line"></div><div class="line">1	tar -zxvf Python-2.7.3.tgz</div><div class="line">2	</div><div class="line">　　进入解压缩后的文件夹</div><div class="line"></div><div class="line">1	cd Python-2.7.3</div><div class="line">　　在编译前先在/usr/local建一个文件夹python27（作为python的安装路径，以免覆盖老的版本）</div><div class="line"></div><div class="line">1	mkdir /usr/local/python27</div><div class="line">　　在解压缩后的目录下编译安装</div><div class="line"></div><div class="line">1	./configure --prefix=/usr/local/python27</div><div class="line">2	make</div><div class="line">3	make install</div><div class="line">　　此时没有覆盖老版本，再将原来/usr/bin/python链接改为别的名字</div><div class="line"></div><div class="line">1	mv /usr/bin/python /usr/bin/python_old</div><div class="line">　　再建立新版本python的链接</div><div class="line"></div><div class="line">1</div><div class="line">ln -s /usr/local/python27/bin/python2.7 </div><div class="line">　　这个时候输入</div><div class="line"></div><div class="line">1	python</div><div class="line">　　就会显示出python的新版本信息</div><div class="line"></div><div class="line">1	Python 2.7.3 (default, Sep 29 2013, 11:05:02)</div><div class="line">2	[GCC 4.1.2 20080704 (Red Hat 4.1.2-54)] on linux2</div><div class="line">3	Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">4	&gt;&gt;&gt;</div><div class="line">修改YUM   /usr/bin/yum</div><div class="line"></div><div class="line">文件让yum能正常的工作：改成上面我们修改的PYTHON 2.6.6的名字</div></pre></td></tr></table></figure>
<blockquote>
<p>lunix解压命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">1、*.tar 用 tar -xvf 解压</div><div class="line"></div><div class="line">2、*.gz 用 gzip -d或者gunzip 解压</div><div class="line"></div><div class="line">3、*.tar.gz和*.tgz 用 tar -xzf 解压</div><div class="line"></div><div class="line">4、*.bz2 用 bzip2 -d或者用bunzip2 解压</div><div class="line"></div><div class="line">5、*.tar.bz2用tar -xjf 解压</div><div class="line"></div><div class="line">6、*.Z 用 uncompress 解压</div><div class="line"></div><div class="line">7、*.tar.Z 用tar -xZf 解压</div><div class="line"></div><div class="line">8、*.rar 用 unrar e解压</div><div class="line"></div><div class="line">9、*.zip 用 unzip 解压</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="安装apex"><a href="#安装apex" class="headerlink" title="安装apex"></a>安装apex</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">lunix 安装apxs扩展</div><div class="line"></div><div class="line">好像命令行安装的，自带了这个模块，手动编译的apache，同样需要手动编译这个模块，编译的时候可能会遇到这个错误：mod_wsgi.c Python.h：没有那个文件或目录,，解决方法：yum install python-devel，安装apache的apxs扩展。</div><div class="line">python 2.7 No module named ‘zlib&apos;</div><div class="line"></div><div class="line">yum -y install zlib-devel openssl-devel</div><div class="line">cd /wls/softwares/Python-2.7.10</div><div class="line">./configure --prefix=/usr/local/python27 make make install</div><div class="line"></div><div class="line">pip是python的包管理工具，我们通过pip来安装python所需要的一些模块，当然如果你有多版本存在，可能需要将pip这个模块copy到对应的python版本下边</div><div class="line"></div><div class="line">在安装   Linux 系统是顺便把apache 服务装好了 ，这时这是装了一个服务不能进行二次开发，</div><div class="line"></div><div class="line">所以很多的开发工具和文件在apache下找不到，比如模块编译工具apxs ，这时就要求安装 开发包，</div><div class="line"></div><div class="line"></div><div class="line">命令 rpm -ql httpd-devel   ，然后会在  usr/local/下面多出个 apache2文件夹，里面有不少开发需要的文件。</div><div class="line">如果提示没有apxs，那就先yum install httpd-devel</div></pre></td></tr></table></figure>
<h3 id="lunix-安装git"><a href="#lunix-安装git" class="headerlink" title="lunix 安装git"></a>lunix 安装git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">1.2 CentOS6.6下</div><div class="line"></div><div class="line">在CentOS5的时代，由于yum源中没有git，所以需要预先安装一系列的依赖包。但在CentOS6的yum源中已经有git的版本了，可以直接使用yum源进行安装。</div><div class="line"></div><div class="line">$ sudo yum install git</div><div class="line">但是yum源中安装的git版本是1.7.1，太老了，Github等需要的Git版本最低都不能低于1.7.2 。所以我们一般不用上面的方法。而是下载git源码，编译安装。</div><div class="line"></div><div class="line">编译安装的步骤是【4】：</div><div class="line"></div><div class="line">（1）首先先更新系统</div><div class="line"></div><div class="line">sudo yum update</div><div class="line">（2）安装依赖的包</div><div class="line"></div><div class="line">sudo yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker</div><div class="line">（3）下载git源码并解压缩</div><div class="line"></div><div class="line">$ wget https://github.com/git/git/archive/v2.3.0.zip</div><div class="line">$ unzip v2.3.0.zip</div><div class="line">$ cd git-2.3.0</div><div class="line">（4）编译安装</div><div class="line"></div><div class="line">将其安装在“/usr/local/git”目录下。</div><div class="line"></div><div class="line">make prefix=/usr/local/git all</div><div class="line">sudo make prefix=/usr/local/git install</div><div class="line">（5）此时你如果使用git --version 查看git版本的话，发现git仍然是1.7.1版本。这是因为它默认使用了&quot;/usr/bin&quot;下的git。</div><div class="line"></div><div class="line">你可以用下面的命令查看git所在的路径：</div><div class="line"></div><div class="line">$ whereis git</div><div class="line">git: /usr/bin/git /usr/local/git /usr/share/man/man1/git.1.gz</div><div class="line">（6）我们要把编译安装的git路径放到环境变量里，让它替换&quot;/usr/bin&quot;下的git。为此我们可以修改“/etc/profile”文件（或者/etc/bashrc文件）。</div><div class="line"></div><div class="line">sudo vim /etc/profile</div><div class="line">然后在文件的最后一行，添加下面的内容，然后保存退出。</div><div class="line"></div><div class="line">export PATH=/usr/local/git/bin:$PATH</div><div class="line">（7）使用source命令应用修改。</div><div class="line"></div><div class="line">source /etc/profile</div><div class="line"></div><div class="line">（8）然后再次使用git --version 查看git版本，发现输出2.3.0，表明安装成功。</div></pre></td></tr></table></figure>
<h3 id="django错误"><a href="#django错误" class="headerlink" title="django错误"></a>django错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">DisallowedHost at /</div><div class="line"></div><div class="line">Invalid HTTP_HOST header: &apos;10.211.55.6:8000&apos;. You may need to add u&apos;10.211.55.6&apos; to ALLOWED_HOSTS.</div><div class="line">Request Method:	GET</div><div class="line">Request URL:	http://10.211.55.6:8000/</div><div class="line">Django Version:	1.10.4</div><div class="line">Exception Type:	DisallowedHost</div><div class="line">Exception Value:	</div><div class="line">Invalid HTTP_HOST header: &apos;10.211.55.6:8000&apos;. You may need to add u&apos;10.211.55.6&apos; to ALLOWED_HOSTS.</div><div class="line">Exception Location:	/usr/lib/python2.7/site-packages/django/http/request.py in get_host, line 113</div><div class="line">Python Executable:	/usr/bin/python</div><div class="line">Python Version:</div><div class="line"></div><div class="line">1，以上时我访问请求的时候出现的，原因在于Django框架中的创建的一个项目的时候，</div><div class="line"></div><div class="line">2，跑下这个命令：Python manage.py runserver 10.211.55.5:8000</div><div class="line"></div><div class="line">3，然后在我本机的浏览器中写入上述IP和端口请求过去：http://10.211.55.6:8000</div><div class="line"></div><div class="line">4，于是就出现了最上面的那个问题；</div><div class="line"></div><div class="line">5，于是就去django-admin.py startproject project-name创建的项目中去修改 setting.py 文件：</div><div class="line"></div><div class="line">ALLOWED_HOSTS = [&apos;*&apos;]  ＃在这里请求的host添加了＊</div><div class="line"></div><div class="line"></div><div class="line">6，于是就成功的访问到了Django的项目了；</div></pre></td></tr></table></figure>
<h3 id="配置django"><a href="#配置django" class="headerlink" title="配置django"></a>配置django</h3><p><code>/etc/httpd/conf/httpd.conf</code>conf地址<br><code>/etc/httpd/modules/mod_wsgi.so</code>so文件地址<br><code>/etc/httpd/extra/vhosts/dev.mysite.com.conf</code></p>
<h4 id="httpd-conf配置"><a href="#httpd-conf配置" class="headerlink" title="httpd.conf配置"></a>httpd.conf配置</h4><ul>
<li>记得修改user和group为www，这个www是你自己创建的用户，记得这个www要加到root下，然后将根文件更改所有者</li>
<li>记得添加你的端口到iptables中去</li>
</ul>
<h4 id="wsgi-py文件内容"><a href="#wsgi-py文件内容" class="headerlink" title="wsgi.py文件内容"></a>wsgi.py文件内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line"></div><div class="line">from os.path import join,dirname,abspath</div><div class="line"></div><div class="line">PROJECT_DIR = dirname(dirname(abspath(__file__)))#3</div><div class="line">import sys # 4</div><div class="line">sys.path.insert(0,PROJECT_DIR) # 5</div><div class="line"></div><div class="line">from django.core.wsgi import get_wsgi_application</div><div class="line"></div><div class="line">os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;jdjrweb.settings&quot;)</div><div class="line"></div><div class="line">application = get_wsgi_application()</div></pre></td></tr></table></figure>
<h4 id="etc-httpd-extra-vhosts-dev-mysite-com-conf配置"><a href="#etc-httpd-extra-vhosts-dev-mysite-com-conf配置" class="headerlink" title="/etc/httpd/extra/vhosts/dev.mysite.com.conf配置"></a>/etc/httpd/extra/vhosts/dev.mysite.com.conf配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">Listen 80</div><div class="line">&lt;VirtualHost *:80&gt;</div><div class="line"></div><div class="line">    LogLevel info</div><div class="line"></div><div class="line">    ServerName 104.238.153.13</div><div class="line">    ServerAdmin my@mysite.com</div><div class="line"></div><div class="line">    ErrorLog &quot;/root/jdjr/datalog/error_log&quot;</div><div class="line">    CustomLog &quot;/root/jdjr/datalog/access_log&quot; common</div><div class="line"></div><div class="line">    WSGIScriptAlias / /root/jdjr/jdjrweb/jdjrweb/wsgi.py</div><div class="line">   #WSGIScriptAlias / /root/jdjr/jdjrweb </div><div class="line">    &lt;Directory &quot;/root/jdjr/jdjrweb&quot;&gt;</div><div class="line">         Require all granted</div><div class="line">    &lt;/Directory&gt;</div><div class="line"></div><div class="line">    Alias /static/ /root/jdjr/jdjrweb/jdjrweb/static/</div><div class="line"></div><div class="line">    &lt;Directory &quot;/root/jdjr/jdjrweb/jdjrweb/static/&quot;&gt;</div><div class="line">         Require all granted</div><div class="line">    &lt;/Directory&gt;</div><div class="line"></div><div class="line">    &lt;Directory &quot;/root/jdjr/jdjrweb&quot;&gt;</div><div class="line">         #Options Indexes FollowSymLinks</div><div class="line">         #AllowOverride All</div><div class="line">         #Order allow,deny</div><div class="line">         Require all granted</div><div class="line">    &lt;/Directory&gt;</div><div class="line"></div><div class="line">    &lt;Directory &quot;/root/jdjr/datalog&quot;&gt;</div><div class="line">        Require all granted</div><div class="line">    &lt;/Directory&gt;</div><div class="line"></div><div class="line">    &lt;Directory &quot;/root/jdjr/jdjrweb/jdjrweb&quot;&gt;</div><div class="line">        &lt;Files wsgi.py&gt;</div><div class="line">           Require all granted</div><div class="line">        &lt;/Files&gt;</div><div class="line">    &lt;/Directory&gt;</div><div class="line"></div><div class="line"></div><div class="line">    #&lt;Files &quot;/root/jdjr/jdjrweb/jdjrweb/wsgi.py&quot;&gt;</div><div class="line">    #   Require all granted</div><div class="line">   # &lt;/Files&gt;</div><div class="line"></div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
<h4 id="文件权限配置"><a href="#文件权限配置" class="headerlink" title="文件权限配置"></a>文件权限配置</h4><p>看<code>/etc/httpd/conf/httpd.conf</code>这个文件里边的user和group，这里配置的是apache，那么我们就要给我们用到的文件的用户切换到apache，然后给这个用户最高权限</p>
<p><code>sudo chmod -R u+wrx jdjr</code>其中jdjr是我所用到的文件夹，-R代表递归所有子文件</p>
<blockquote>
<p>ah01797: client denied by server configuration /wsgi.py<br>假如报这个错误说明文件夹的权限配置不对，应该把下边我注释掉的那些东西去了就好了，只留下<code>Require all granted</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Directory &quot;/root/jdjr/jdjrweb&quot;&gt;</div><div class="line">     #Options Indexes FollowSymLinks</div><div class="line">     #AllowOverride All</div><div class="line">     #Order allow,deny</div><div class="line">     Require all granted</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure></blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Lunix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Andorid自动打包gradle安装笔记]]></title>
      <url>/2016/12/16/2017/Andorid%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85gradle%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<ul>
<li>安装andorid studio</li>
<li>copy一份sdk过来</li>
<li>设置andorid studio的sdk路径<a id="more"></a></li>
<li><p>安装sdkman</p>
<ul>
<li><p>在控制台或者item2中输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -s https://get.sdkman.io | bash</div><div class="line">source &quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;</div></pre></td></tr></table></figure>
<p>检验sdkman是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sdk version</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>安装andorid studio中认可的gradle版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sdk install gradle 2.8</div></pre></td></tr></table></figure>
</li>
<li><p>升级jdk到andorid studio认可的版本比如说1.7</p>
</li>
<li>到工程根目录，执行gradle build就可以了’gradle assembleDebug’</li>
<li>打包出来的文件在outputs中</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> andorid </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Django的自动化平台构建笔记(1)]]></title>
      <url>/2016/12/15/2017/%E5%9F%BA%E4%BA%8EDjango%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B9%B3%E5%8F%B0%E6%9E%84%E5%BB%BA%E7%AC%94%E8%AE%B0(1)/</url>
      <content type="html"><![CDATA[<p>现在提供的服务主要有：</p>
<ul>
<li>根据property创建UI代码</li>
<li>JSON自动转模型</li>
<li>自动打包服务</li>
<li>其他效率工具的链接<a id="more"></a>
</li>
</ul>
<p>其中最重要的，也是最复杂的应该是自动打包的服务，这套服务用python语言来实现，基于python的django框架，其中django框架主要用来提供web服务，用来给用户访问，而服务的执行者，比如说UI的代码创建，需要用到字符串解析等功能，完全由python在服务器端来完成，我们通过网络将需要解析的数据发送给服务器，然后服务器做完处理之后，再通过网络将数据返回，然后通过django来完成展示。再到打包服务也是这种逻辑，通过web服务来发送指令给服务器，然后服务器调用命令行来完成打包的具体的动作</p>
<h3 id="Django使用简解"><a href="#Django使用简解" class="headerlink" title="Django使用简解"></a>Django使用简解</h3><p>Django是一个python的项目，我们可以使用WebStorm来编辑该项目。当运行的时候会生成一个本地的web服务，我们可以通过该地址，在浏览器访问这个服务，当然我们也可以在命令行来达到同样的效果，进入到项目根目录，manager.py的所在目录，执行<code>python manager.py runserver</code>，然后点击给出的地址，我们仍然可以查看服务。</p>
<p>对于这个新建的django工程我们主要关注的是两个文件，一个是ProjectName/urls.py，另一个是appName/views.py。</p>
<h4 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h4><p>这个文件时整个工程的路由，将url与具体的服务或者要展示的页面相对应。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">from django.conf.urls import url</div><div class="line">from django.contrib import admin</div><div class="line">from learn import views as learn_views  # new</div><div class="line">from django.contrib.staticfiles.urls import staticfiles_urlpatterns</div><div class="line"></div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">url(r&apos;next&apos;, learn_views.nextPage),  # new</div><div class="line">url(r&apos;^$&apos;, learn_views.home,name=&apos;home&apos;),  # new</div><div class="line">url(r&apos;^admin/&apos;, admin.site.urls),</div><div class="line">url(r&apos;callPython&apos;, learn_views.compute),  # new</div><div class="line">url(r&apos;ajaxpack&apos;, learn_views.ajaxpack),</div><div class="line">url(r&apos;ajaxgetbranches&apos;, learn_views.ajaxgetbranchesfunc),</div><div class="line">url(r&apos;add&apos;, learn_views.compute),  # new</div><div class="line">url(r&apos;uicreate&apos;, learn_views.uicreate),</div><div class="line">url(r&apos;ajaxcreateui&apos;, learn_views.createui),</div><div class="line">url(r&apos;package&apos;, learn_views.package),</div><div class="line">url(r&apos;buildlist&apos;, learn_views.buildlist),</div><div class="line">url(r&apos;ajaxsendMail&apos;, learn_views.sendMails),</div><div class="line">url(r&apos;jsonFormatClick1&apos;, learn_views.jsonFormat1),</div><div class="line">url(r&apos;jsonFormatClick2&apos;, learn_views.jsonFormat2),</div><div class="line">url(r&apos;interfaceTestClick&apos;, learn_views.interfaceTest),</div><div class="line">url(r&apos;url1&apos;, learn_views.getUrl1),</div><div class="line">url(r&apos;url2&apos;, learn_views.getUrl2),  # new</div><div class="line">url(r&apos;url3&apos;, learn_views.getUrl3),</div><div class="line">url(r&apos;url4&apos;, learn_views.getUrl4),</div><div class="line">url(r&apos;url5&apos;, learn_views.getUrl5),  # new</div><div class="line">url(r&apos;url6&apos;, learn_views.getUrl6),</div><div class="line">url(r&apos;url7&apos;, learn_views.getUrl7)</div><div class="line">]</div><div class="line"></div><div class="line"># ... the rest of your URLconf goes here ...</div><div class="line">urlpatterns += staticfiles_urlpatterns()</div></pre></td></tr></table></figure>
<p>看上边这段代码，新加入的有<code>from learn import views as learn_views  # new</code>这个是引入了learn这个app中的views这个文件，然后在这个文件中我们就可以使用这个文件了，我们可以在列表中添加很多的url与服务的对应，url的写法的讲究在于，<code>next</code>意味着包含next就跳这个，<code>^next</code>意味着以next开头，<code>next$</code>意味着以next结尾，<code>^next$</code>意味着直邮next才跳这个，完全对应的意思，这个文件的作用主要就这些</p>
<h4 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h4><p>具体的服务我们是由这个文件来提供的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line">from django.http import HttpResponse</div><div class="line">from django.shortcuts import render</div><div class="line">from DIY.compute import getModelFromJson</div><div class="line">from DIY.createui import getCreatedStringWithProperties</div><div class="line">from DIY.packServer import packaged,getbranches</div><div class="line">from django.http import HttpResponseRedirect</div><div class="line">from DIY.mail import sendMail</div><div class="line"></div><div class="line">def home(request):</div><div class="line">string = &apos;这是&apos;</div><div class="line">return render(request,&apos;home.html&apos;,&#123;&apos;string&apos;:string&#125;)</div><div class="line"></div><div class="line"></div><div class="line">def nextPage(request):</div><div class="line">return render(request,&apos;next.html&apos;)</div><div class="line"></div><div class="line">def compute(request):</div><div class="line">string = request.POST[&apos;text&apos;]</div><div class="line">string = getModelFromJson(string)</div><div class="line">return HttpResponse(string)</div><div class="line"></div><div class="line">def uicreate(request):</div><div class="line">return render(request,&apos;UICreate.html&apos;)</div><div class="line"></div><div class="line">def createui(request):</div><div class="line">string = request.GET[&apos;text&apos;]</div><div class="line">string = getCreatedStringWithProperties(string)</div><div class="line">return HttpResponse(string)</div><div class="line"></div><div class="line">def package(request):</div><div class="line">return render(request,&apos;package.html&apos;)</div><div class="line"></div><div class="line">def ajaxpack(request):</div><div class="line"></div><div class="line">f = open(&apos;/Users/wxg/Documents/Build/building.txt&apos;,&apos;r&apos;)</div><div class="line">text = f.read()</div><div class="line">if text == &apos;&apos;:</div><div class="line">string = request.GET[&apos;text&apos;]</div><div class="line">resurtString = packaged(string)</div><div class="line">return HttpResponse(&apos;done&apos;)</div><div class="line">else:</div><div class="line">return HttpResponse(&apos;wait&apos;)   </div><div class="line"></div><div class="line">def ajaxgetbranchesfunc(request):</div><div class="line">return HttpResponse(getbranches(&apos;string&apos;))</div><div class="line"></div><div class="line">def buildlist(requets):</div><div class="line">return HttpResponseRedirect(&apos;http://10.13.80.19:8000/Documents/Build&apos;)</div><div class="line"></div><div class="line">def sendMails(request):</div><div class="line">sendMail(&apos;&apos;)</div><div class="line">return HttpResponse(&apos;hi&apos;)  </div><div class="line"></div><div class="line">def jsonFormat1(request):</div><div class="line">return HttpResponseRedirect(&apos;http://www.jsonparseronline.com&apos;)</div><div class="line"></div><div class="line">def jsonFormat2(request):</div><div class="line">return HttpResponseRedirect(&apos;http://www.sojson.com&apos;)    </div><div class="line"></div><div class="line">def interfaceTest(request):</div><div class="line">return HttpResponseRedirect(&apos;http://www.atool.org/httptest.php&apos;)</div><div class="line"></div><div class="line">def getUrl1(request):</div><div class="line">f = open(&apos;/Users/han/Desktop/text1.txt&apos;, &apos;r&apos;)</div><div class="line">text = f.read()</div><div class="line">f.close()</div><div class="line">return HttpResponse(text)</div><div class="line"></div><div class="line">def getUrl2(request):</div><div class="line">f = open(&apos;/Users/han/Desktop/text2.txt&apos;, &apos;r&apos;)</div><div class="line">text = f.read()</div><div class="line">f.close()</div><div class="line">return HttpResponse(text)</div><div class="line"></div><div class="line">def getUrl3(request):</div><div class="line">f = open(&apos;/Users/han/Desktop/text3.txt&apos;, &apos;r&apos;)</div><div class="line">text = f.read()</div><div class="line">f.close()</div><div class="line">return HttpResponse(text)</div><div class="line"></div><div class="line">def getUrl4(request):</div><div class="line">f = open(&apos;/Users/han/Desktop/text4.txt&apos;, &apos;r&apos;)</div><div class="line">text = f.read()</div><div class="line">f.close()</div><div class="line">return HttpResponse(text)</div><div class="line"></div><div class="line">def getUrl5(request):</div><div class="line">f = open(&apos;/Users/han/Desktop/text5.txt&apos;, &apos;r&apos;)</div><div class="line">text = f.read()</div><div class="line">f.close()</div><div class="line">return HttpResponse(text)</div><div class="line"></div><div class="line">def getUrl6(request):</div><div class="line">f = open(&apos;/Users/han/Desktop/text6.txt&apos;, &apos;r&apos;)</div><div class="line">text = f.read()</div><div class="line">f.close()</div><div class="line">return HttpResponse(text)</div><div class="line"></div><div class="line">def getUrl7(request):</div><div class="line">f = open(&apos;/Users/han/Desktop/text7.txt&apos;, &apos;r&apos;)</div><div class="line">text = f.read()</div><div class="line">f.close()</div><div class="line">return HttpResponse(text)</div></pre></td></tr></table></figure>
<p>我们拿具体的例子来说，上边的这些代码，就是我们能够提供的具体的服务，具体说来我们主要提供三种服务</p>
<h5 id="返回json"><a href="#返回json" class="headerlink" title="返回json"></a>返回json</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def compute(request):</div><div class="line">string = request.POST[&apos;text&apos;]</div><div class="line">string = getModelFromJson(string)</div><div class="line">return HttpResponse(string)</div></pre></td></tr></table></figure>
<p>比如这个，需要引入<br>from django.http import HttpResponse</p>
<h5 id="返回一个html文件"><a href="#返回一个html文件" class="headerlink" title="返回一个html文件"></a>返回一个html文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def home(request):</div><div class="line">string = &apos;这是&apos;</div><div class="line">return render(request,&apos;home.html&apos;,&#123;&apos;string&apos;:string&#125;)</div></pre></td></tr></table></figure>
<p>中间的参数<code>home.html</code>就是一个html的文件，那么问题来了，这个文件是从哪里来的，与views.py同级有个templates文件夹，里边是我们要存放的html文件，这个需要html和css的一些知识来编写</p>
<h5 id="返回跳一个其他的url，比如跳baidu或者条服务器的某个文件夹都是可以的"><a href="#返回跳一个其他的url，比如跳baidu或者条服务器的某个文件夹都是可以的" class="headerlink" title="返回跳一个其他的url，比如跳baidu或者条服务器的某个文件夹都是可以的"></a>返回跳一个其他的url，比如跳baidu或者条服务器的某个文件夹都是可以的</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def jsonFormat1(request):</div><div class="line">return HttpResponseRedirect(&apos;http://www.jsonparseronline.com&apos;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def buildlist(requets):</div><div class="line">return HttpResponseRedirect(&apos;http://10.13.80.19:8000/Documents/Build&apos;)</div></pre></td></tr></table></figure>
<p>还有个问题需要说明就是，我们这里需要很多python的服务，如何引入呢，直接引入函数的名称就可以了，就像是<code>from DIY.packServer import packaged,getbranches</code></p>
<p>Django安装和配置具体可以参考<a href="http://hanson647.com/2016/11/09/2016/Django部署-apache-mod-wsgi/" target="_blank" rel="external">Django部署+apache+mod_wsgi</a></p>
<h3 id="自动打包服务的构建过程"><a href="#自动打包服务的构建过程" class="headerlink" title="自动打包服务的构建过程"></a>自动打包服务的构建过程</h3><p>这里说两点，第一个是我们实现的一些比较不常见的功能，一个是踩到的坑。<br>先来说一下功能点：</p>
<ul>
<li>线上和预发的切换</li>
<li>清除本分支做的操作</li>
<li>.app转换为.ipa</li>
<li>xcode XCBuildConfiguration配置文件自动设置</li>
</ul>
<h4 id="app转换为-ipa"><a href="#app转换为-ipa" class="headerlink" title=".app转换为.ipa"></a>.app转换为.ipa</h4><p>当我们执行了<code>xcodebuild build</code>的命令之后，形成的是一个.app文件，这个时候我们需要做的压缩这个文件，这个是ipa文件生成的原理<br>具体步骤：</p>
<ul>
<li>Step1: 新建“Payload”文件夹，注意名字要一字不差；</li>
<li>Step2: 将你的.app包放到Payload中，注意app的名字不做任何更改，就用xcode生成的app名称；</li>
<li>Step3: 在Payload文件夹上右键压缩成zip，然后将生成的.zip文件后缀改成.ipa即可<br>具体代码:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import os,shutil</div><div class="line"></div><div class="line">os.mkdir(&apos;Payload&apos;)</div><div class="line"></div><div class="line">shutil.copytree(&apos;JDMobile.app&apos;,&apos;Payload/JDMobile.app&apos;)</div><div class="line"></div><div class="line">os.system(&apos;zip -r Payload.zip Payload&apos;)</div><div class="line"></div><div class="line">files=os.listdir(&quot;.&quot;)</div><div class="line"></div><div class="line">for filename in files:</div><div class="line">    li=os.path.splitext(filename)</div><div class="line">    if li[1]==&quot;.zip&quot;:</div><div class="line">        newname=li[0]+&quot;.ipa&quot;</div><div class="line">        os.rename(filename,newname)</div><div class="line"></div><div class="line">shutil.rmtree(&apos;JDMobile.app&apos;)</div><div class="line">shutil.rmtree(&apos;Payload&apos;)</div></pre></td></tr></table></figure>
<h4 id="xcode-XCBuildConfiguration配置文件自动设置"><a href="#xcode-XCBuildConfiguration配置文件自动设置" class="headerlink" title="xcode XCBuildConfiguration配置文件自动设置"></a>xcode XCBuildConfiguration配置文件自动设置</h4><p>这里使用mod-pbxproj，这个是一个python解析库，用法如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">from mod_pbxproj import XcodeProject</div><div class="line">import commands</div><div class="line"></div><div class="line">def configProject():</div><div class="line"></div><div class="line">    project = XcodeProject.Load(&apos;/Users/wxg/Documents/JDMobileNew/JDMobile_2.0/JDMobile.xcodeproj/project.pbxproj&apos;)</div><div class="line"></div><div class="line">    for item in project.objects.values():</div><div class="line">        nameIsa = item.get(&apos;isa&apos;)</div><div class="line"></div><div class="line">        if (nameIsa == &apos;XCBuildConfiguration&apos;):</div><div class="line">            setting = item.get(&apos;buildSettings&apos;)</div><div class="line">            nameReference = item.get(&apos;baseConfigurationReference&apos;)</div><div class="line">            if (nameReference):</div><div class="line">               idStr = setting.get(&apos;PRODUCT_BUNDLE_IDENTIFIER&apos;)</div><div class="line">               print &apos;----&gt;&apos; + idStr</div><div class="line">               setting.__setitem__(&apos;PRODUCT_BUNDLE_IDENTIFIER&apos;,&apos;com.jd.jinrong2016&apos;)</div><div class="line">               setting.__setitem__(&apos;PROVISIONING_PROFILE&apos;,&apos;&apos;)</div><div class="line">               setting.__setitem__(&apos;PROVISIONING_PROFILE_SPECIFIER&apos;,&apos;&apos;)</div><div class="line">               setting.__setitem__(&apos;DEVELOPMENT_TEAM&apos;,&apos;5TKVHWTT79&apos;)</div><div class="line">               setting.__setitem__(&apos;CODE_SIGN_IDENTITY[sdk=iphoneos*]&apos;,&apos;iPhone Developer&apos;)</div><div class="line">               item.__setitem__(&apos;buildSettings&apos;,setting)</div><div class="line">            else:</div><div class="line">               codeSign = setting.get(&apos;CODE_SIGN_IDENTITY&apos;)</div><div class="line">               profile = setting.get(&apos;PROVISIONING_PROFILE&apos;)</div><div class="line">               print codeSign</div><div class="line">               print profile</div><div class="line">               setting.__setitem__(&apos;CODE_SIGN_IDENTITY&apos;,&apos;iPhone Distribution: Beijing Jingdong Century Trading Co., Ltd. (TQZTTUQ9ZE)&apos;)</div><div class="line">               setting.__setitem__(&apos;PROVISIONING_PROFILE&apos;,&apos;0d8cd55a-c922-4f27-b1aa-df6a2f277ea5&apos;)</div><div class="line">               item.__setitem__(&apos;buildSettings&apos;,setting)</div><div class="line"></div><div class="line">        elif (nameIsa == &apos;PBXProject&apos;):</div><div class="line">            attributes = item.get(&apos;attributes&apos;)</div><div class="line">            targetAttributes = attributes.get(&apos;TargetAttributes&apos;)</div><div class="line">            targets = item.get(&apos;targets&apos;)</div><div class="line">            tar = targets[0]</div><div class="line">            attr = targetAttributes.get(&apos;%s&apos; % tar)</div><div class="line">            developmentTeamName = attr.get(&apos;DevelopmentTeamName&apos;)</div><div class="line">            developmentTeamName = attr.get(&apos;ProvisioningStyle&apos;)</div><div class="line">            print developmentTeamName</div><div class="line">            attr.__setitem__(&apos;DevelopmentTeamName&apos;,&apos;Beijing Jingdong Century Information Technology Co., Ltd.&apos;)</div><div class="line">            attr.__setitem__(&apos;ProvisioningStyle&apos;, &apos;Automatic&apos;)</div><div class="line">            attr.__setitem__(&apos;DevelopmentTeam&apos;, &apos;5TKVHWTT79&apos;)</div><div class="line"></div><div class="line">    project.save()</div></pre></td></tr></table></figure>
<p>这里的坑主要是由权限引起的，因为我们从web服务去调用一个命令行的指令的时候，这个时候的并不是登录状态的权限，而是一个非登录状态的权限，这个时候有两个问题，一个是很多服务是没有被加载的，第二个是一些文件没有权限去调用，下面分别来说</p>
<ul>
<li>gradle无法调用</li>
<li>苹果的开发者证书不能读取</li>
<li>git pull命令需要用户名和密码</li>
</ul>
<h4 id="gradle无法调用"><a href="#gradle无法调用" class="headerlink" title="gradle无法调用"></a>gradle无法调用</h4><p>这里涉及到一个问题是mac的环境变量，通过在终端输入<code>$PATH</code>来查看当前用户下加载的路径有哪些，如果返回的路径中包含我们的服务的路径，那么肯定这个服务当前用户是可以调用的，我们在web服务中调用这个命令发现返回的只有<code>usr/bin</code>等着几个路径，那么思路就来了，如果gradle想要被使用，那么就需要加到这路径下，解决的办法就是加一个软连接到/usr/bin文件下，sudo ln -s xxxxx xxxxx就可以了，那么如果找到这个服务的安装路径呢？以gradle为例<code>which gradle</code>，如果是git的话就是<code>which git</code><br>这里还有个问题是mac升级系统后，这个文件是不允许更改的，解决办法:</p>
<blockquote>
<p>对于Mac OS X 10.11 El Capitan用户，由于系统启用了SIP(System Integrity Protection), 导致root用户也没有权限修改/usr/bin目录。按如下方式可恢复权限。<br>屏蔽方法：重启Mac，按住command+R,进入recovery模式。选择打开Utilities下的终端，输入：csrutil disable并回车，然后正常重启Mac即可</p>
</blockquote>
<h4 id="苹果的开发者证书不能读取"><a href="#苹果的开发者证书不能读取" class="headerlink" title="苹果的开发者证书不能读取"></a>苹果的开发者证书不能读取</h4><p>User interaction is not allowed这个问题是因为证书不能被读取，这是因为证书在登录下，我们将证书移动到系统下就可以了</p>
<h4 id="git-pull命令需要用户名和密码"><a href="#git-pull命令需要用户名和密码" class="headerlink" title="git pull命令需要用户名和密码"></a>git pull命令需要用户名和密码</h4><p>这个不能被执行也是因为权限的问题，最后的解决方案，是在登录状态下(命令行)直接开一个新的线程，死循环不断的检测一个文件下是否有对应的文件夹，如果有这个文件夹就执行<code>git pull</code>命令，执行完毕之后写入日志，然后删除文件内容，继续进入到下一个循环，这个与iOS的runloop是一个道理</p>
<h3 id="django中使用ajax的post方法"><a href="#django中使用ajax的post方法" class="headerlink" title="django中使用ajax的post方法"></a>django中使用ajax的post方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(&quot;#insert&quot;).click(function()&#123;</div><div class="line">           text =  $(&apos;#textarea1&apos;).val()</div><div class="line">           $.post(&quot;/writecontent/&quot;, &#123;&apos;content&apos;: text,&apos;foldername&apos;:foldername,&apos;filename&apos;:filename&#125;,function(ret)&#123;</div><div class="line">               alert(ret)</div><div class="line">           &#125;)</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<p>之所以使用post这里是因为无法突破apache对于get方法的整体参数长度限制，而使用post方法有个问题就是会强制CSRF校验，解决方法就是关闭django的验证，具体来说是到setting文件中注释一行代码</p>
<blockquote>
<p>django.middleware.csrf.CsrfViewMiddleware</p>
</blockquote>
<h3 id="安装pymongo"><a href="#安装pymongo" class="headerlink" title="安装pymongo"></a>安装pymongo</h3><p>首先要安装pip，然后用pip安装pymongo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo easy_install pip</div></pre></td></tr></table></figure></p>
<p>然后使用pip安装pymongo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install pymongo</div></pre></td></tr></table></figure></p>
<p>这个时候进入python环境使用命令行去访问pymongo应该是没有问题的，但是你使用web调用的方式去调用不一定能够访问到mongo，这可能是因为你使用的python安装路径的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">which python</div></pre></td></tr></table></figure></p>
<p>看一下当前加载的python，不出意外应该是/usr/local/bin/python，这个是登录状态下才能加载的一个环境和路径，而web是非登录的，所以很多功能访问不到正常，我们要做的就是让系统直接加载/usr/bin/python，这就涉及到一个加载优先级的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo emacs /etc/paths</div></pre></td></tr></table></figure></p>
<blockquote>
<p>/usr/local/bin<br>/usr/bin<br>/bin<br>/usr/sbin<br>/sbin</p>
<p>tips:<br>現在要把 /usr/local/bin 移到上面去</p>
</blockquote>
<p>control + k：把一行字剪下來</p>
<p>control + y：把字貼上</p>
<p>control + x + s：存檔</p>
<p>control + x + c：關掉 emacs</p>
<p>然后再执行下边这句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo $PATH</div></pre></td></tr></table></figure></p>
<p>这个时候你再打开<br>发现已经变成了下边这样</p>
<blockquote>
<p>/usr/bin<br>/usr/local/bin<br>/bin<br>/usr/sbin<br>/sbin</p>
</blockquote>
<p>这个时候你再执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">which python</div></pre></td></tr></table></figure></p>
<p>发现已经变成了<code>/usr/bin/python</code><br>现在看来，系统加载某个功能的逻辑，就是直接在这些个加载列表中找这些个功能，如果逐个加载了一遍发现没有这个功能，那么就会报错，如果第一路径下有这个功能，第二路径下也有这个功能，那么就会用第一路径下的，所以我们更改第一路径是有意义的</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NSString && NSData]]></title>
      <url>/2016/11/15/2014/Foundation%E7%B3%BB%E5%88%97-NSString/</url>
      <content type="html"><![CDATA[<h3 id="内存简述，Copy与Strong关键字"><a href="#内存简述，Copy与Strong关键字" class="headerlink" title="内存简述，Copy与Strong关键字"></a>内存简述，Copy与Strong关键字</h3><h4 id="内存简述"><a href="#内存简述" class="headerlink" title="内存简述"></a>内存简述</h4><p>为了方便观察引用计数，这里在MRC下来进行测试。先重新定义NSLog让其不打印时间戳。再编写一个打印宏，用来打印NSString对象的类、内存地址、值、引用计数。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define NSLog(FORMAT, ...) fprintf(stderr,&quot;%s\n&quot;,[[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String]);</div><div class="line">#define YLog(_var) (&#123; NSString *name = @#_var; NSLog(@&quot;%@: %@ -&gt; %p : %@  %tu&quot;, name, [_var class], _var, _var, [_var retainCount]); &#125;)</div></pre></td></tr></table></figure></p>
<p>再新建一个StrObject类，用于测试。该类创建实例时，将打印一个NSString，内容为”Str”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@interface StrObject : NSObject</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation StrObject</div><div class="line"></div><div class="line">- (id)init &#123;</div><div class="line"></div><div class="line">  self = [super init];</div><div class="line"></div><div class="line">  if (self) &#123;</div><div class="line">    NSLog(@&quot;StrObj Create&quot;);</div><div class="line">    NSString *strA = @&quot;Str&quot;;</div><div class="line">    YLog(strA);</div><div class="line">&#125;</div><div class="line"></div><div class="line">return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)dealloc &#123;</div><div class="line"></div><div class="line">  [super dealloc];</div><div class="line"></div><div class="line">  NSLog(@&quot;StrObj Dealloc&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后运行以下代码。<br>（一般来说我们可以用以下几种方法来创建NSString对象，其中stringWithString在iOS 6之后已变为多余的方法（redundant），因其等同于字面量创建法，使用这方法编译器会给出警告，）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">//创建并释放StrObject对象</div><div class="line">StrObject *obj = [StrObject new];</div><div class="line">[obj release];</div><div class="line"></div><div class="line">//创建一些字符串</div><div class="line">NSString *str1 = @&quot;Str&quot;; YLog(str1);</div><div class="line">NSString *str2 = @&quot;Str&quot;; YLog(str2);</div><div class="line">NSString *str3 = [NSString stringWithString:@&quot;Str&quot;]; YLog(str3);</div><div class="line">NSString *str4 = [NSString stringWithFormat:@&quot;Str&quot;]; YLog(str4);</div><div class="line">NSString *str5 = [str1 retain]; YLog(str5);</div><div class="line">NSString *str6 = [str1 copy]; YLog(str6);</div><div class="line">NSString *str7 = [str1 mutableCopy]; YLog(str7);</div><div class="line"></div><div class="line">//改变NSString变量的字符串内容</div><div class="line">str1 = @&quot;StrNew&quot;; YLog(str1);</div><div class="line">str2 = str1; YLog(str2);</div><div class="line"></div><div class="line">//创建一个字符串并将其释放</div><div class="line">NSString *str8 = @&quot;Str&quot;;</div><div class="line">[str8 retain];</div><div class="line">[str8 release];</div><div class="line">[str8 release];</div><div class="line">YLog(str8);</div><div class="line"></div><div class="line">//=======输出结果========</div><div class="line">//创建并释放StrObject对象</div><div class="line">//StrObj Create</div><div class="line">//strA: __NSCFConstantString -&gt; 0x10d2ce088 : Str  18446744073709551615</div><div class="line">//StrObj Dealloc</div><div class="line"></div><div class="line">//创建一些字符串</div><div class="line">//str1: __NSCFConstantString -&gt; 0x10d2ce088 : Str  18446744073709551615</div><div class="line">//str2: __NSCFConstantString -&gt; 0x10d2ce088 : Str  18446744073709551615</div><div class="line">//str3: __NSCFConstantString -&gt; 0x10d2ce088 : Str  18446744073709551615</div><div class="line">//str4: NSTaggedPointerString -&gt; 0xa000000007274533 : Str  18446744073709551615</div><div class="line">//str5: __NSCFConstantString -&gt; 0x10d2ce088 : Str  18446744073709551615</div><div class="line">//str6: __NSCFConstantString -&gt; 0x10d2ce088 : Str  18446744073709551615</div><div class="line">//str7: __NSCFString -&gt; 0x7f951a409c80 : Str  1</div><div class="line"></div><div class="line">//改变NSString变量的字符串内容</div><div class="line">//str1: __NSCFConstantString -&gt; 0x10d2ce1e8 : StrNew  18446744073709551615</div><div class="line">//str2: __NSCFConstantString -&gt; 0x10d2ce1e8 : StrNew  18446744073709551615</div><div class="line"></div><div class="line">//创建一个字符串并将其释放</div><div class="line">//str8: __NSCFConstantString -&gt; 0x10d2ce088 : Str  18446744073709551615</div></pre></td></tr></table></figure>
<p>可观察到，虽然我们通过不同方法创建了不同的NSString对象，但字符串内容一致，结果显示strA、str1、str2、str3、str5、str6都指向同一个地址。即便@”Str”首先在StrObject对象中出现，赋值给strA，释放了之后，str1和其他对象仍然指向同一个地址。</p>
<p>将一个新的字符串内容@”Str a”赋值给str1，并且将str1赋值给str2后，从结果看到str1、str2的内存地址改变了，且指向同一个地址。</p>
<p>之后创建的str8，对其进行多次release后，内存地址（和strA地址相同）和retaionCount都不曾变化。</p>
<h5 id="NSCFConstantString"><a href="#NSCFConstantString" class="headerlink" title="__NSCFConstantString"></a>__NSCFConstantString</h5><p>这些对象地址相同，是因为他们都是<strong>NSCFConstantString对象，也就是字符串常量对象，可以看到其isa都是</strong>NSCFConstantString，该对象存储在栈上，创建之后由系统来管理内存释放，相同内容的NSCFConstantString对象地址相同。该对象引用计数很大，为固定值不会变化，表示无限运行的retainCount，对其进行retain或release也不会影响其引用计数。</p>
<p>当创建一个NSCFConstantString对象时，会检测这个字符串内容是否已经存在，如果存在，则直接将地址赋值给变量；不存在的话，则创建新地址，再赋值。</p>
<p>总的来说，对于NSCFConstantString对象，只要字符串内容不变，就不会分配新的内存地址，无论你是赋值、retain、copy。这种优化在大量使用NSString的情况下可以节省内存，提高性能。</p>
<h5 id="NSCFString"><a href="#NSCFString" class="headerlink" title="__NSCFString"></a>__NSCFString</h5><p>在上面的输出结果中，我们看到另外还有两类isa分别是：<strong>NSCFString和NSTaggedPointerString，先来看</strong>NSCFString。</p>
<p>在我的理解，__NSCFString对象是一种NSString子类，存储在堆上，不属于字符串常量对象。该对象创建之后和其他的Obj对象一样引用计数为1，对其执行retain和release将改变其retainCount。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">NSString *str1 = [NSString stringWithFormat:@&quot;ThisIsAStr&quot;];</div><div class="line">YLog(str1);</div><div class="line">NSString *str2 = [str1 retain];</div><div class="line">YLog(str1);</div><div class="line">YLog(str2);</div><div class="line"></div><div class="line">NSString *str3 = [str1 copy];</div><div class="line">YLog(str1);</div><div class="line">YLog(str2);</div><div class="line">YLog(str3);</div><div class="line"></div><div class="line">//输出结果</div><div class="line">//str1: __NSCFString -&gt; 0x100206c70 : ThisIsAStr  1</div><div class="line"></div><div class="line">//str1 retain后赋值给str2</div><div class="line">//str1: __NSCFString -&gt; 0x100206c70 : ThisIsAStr  2</div><div class="line">//str2: __NSCFString -&gt; 0x100206c70 : ThisIsAStr  2</div><div class="line"></div><div class="line">//str3由str1浅复制得来</div><div class="line">//str1: __NSCFString -&gt; 0x100206c70 : ThisIsAStr  3</div><div class="line">//str2: __NSCFString -&gt; 0x100206c70 : ThisIsAStr  3</div><div class="line">//str3: __NSCFString -&gt; 0x100206c70 : ThisIsAStr  3</div><div class="line"></div><div class="line">//对str1进行release</div><div class="line">//str1: __NSCFString -&gt; 0x100206c70 : ThisIsAStr  2</div><div class="line">//str2: __NSCFString -&gt; 0x100206c70 : ThisIsAStr  2</div><div class="line">//str3: __NSCFString -&gt; 0x100206c70 : ThisIsAStr  2</div></pre></td></tr></table></figure></p>
<h5 id="NSTaggedPointerString"><a href="#NSTaggedPointerString" class="headerlink" title="NSTaggedPointerString"></a>NSTaggedPointerString</h5><p>这个对象是标签指针，苹果在 64 位环境下对NSString、NSNumber等对象做了一些优化。简单的说就是把指针指向的内容直接放在了指针变量的内存地址中，在 64 位环境下指针变量的大小达到了 8 位，能容纳长度较小的内容，于是使用了标签指针来优化数据的存储。从其引用计数可以看出，这种对象也是无垠的retainCount，这种对象存储在指针的内容中。</p>
<p>对 NSString对象来说，当非字面量的数字，英文字母字符串的长度小于等于9的时候会自动成为NSTaggedPointerString类型，如果有中文或其他特殊符号（可能是非 ASCII 字符）存在的话则会直接成为__NSCFString类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">NSString *str1 = @&quot;123456789&quot;; YLog(str1);</div><div class="line">NSString *str2 = [NSString stringWithFormat:@&quot;123456789&quot;]; YLog(str2);</div><div class="line">NSString *str3 = [NSString stringWithFormat:@&quot;1234567890&quot;]; YLog(str3);</div><div class="line">NSString *str4 = [NSString stringWithFormat:@&quot;五&quot;]; YLog(str4);</div><div class="line"></div><div class="line">//输出结果</div><div class="line">//str1: __NSCFConstantString -&gt; 0x10a0c5108 : 123456789  18446744073709551615</div><div class="line">//str2: NSTaggedPointerString -&gt; 0xa1ea1f72bb30ab19 : 123456789  18446744073709551615</div><div class="line">//str3: __NSCFString -&gt; 0x7f8183c02630 : 1234567890  1</div><div class="line">//str4: __NSCFString -&gt; 0x7f8183c0fae0 : 五  1</div></pre></td></tr></table></figure>
<h4 id="声明NSSting为属性时用copy还是strong"><a href="#声明NSSting为属性时用copy还是strong" class="headerlink" title="声明NSSting为属性时用copy还是strong"></a>声明NSSting为属性时用copy还是strong</h4><p>声明NSString属性一般来说用copy，因为父类指针可以指向子类对象，而NSMutableNSString是NSString的子类，使用strong的话该NSString属性可能指向一个NSMutableNSString可变对象，如果这个可变对象的内容在外部被修改了，那该属性所属的对象可能对此毫不知情。</p>
<p>先来看正常的情况，NSString属性指向一个不可变对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//Person对象</div><div class="line">@interface Person : NSObject</div><div class="line">@property (nonatomic, strong) NSString *name;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation Person</div><div class="line">@end</div><div class="line"></div><div class="line">//测试代码</div><div class="line">NSString *strA = @&quot;Susan_Miller&quot;;</div><div class="line">Person *personA = [Person new];</div><div class="line">personA.name = strA;</div><div class="line">YLog(strA);</div><div class="line">YLog(personA.name);</div><div class="line"></div><div class="line">strA = @&quot;Susan_Test&quot;;</div><div class="line">YLog(strA);</div><div class="line">YLog(personA.name);</div><div class="line"></div><div class="line">//输出结果</div><div class="line">//strA: __NSCFConstantString -&gt; 0x102f20108 : Susan_Miller  18446744073709551615</div><div class="line">//personA.name: __NSCFConstantString -&gt; 0x102f20108 : Susan_Miller  18446744073709551615</div><div class="line">//strA: __NSCFConstantString -&gt; 0x102f20148 : Susan_Test  18446744073709551615</div><div class="line">//personA.name: __NSCFConstantString -&gt; 0x102f20108 : Susan_Miller  18446744073709551615</div></pre></td></tr></table></figure></p>
<p>从结果可观察到此时的name属性指向一个不可变的字符串常量，就算strA因为内容变化而生成了新地址，对name属性不会有影响，无论声明name属性时关键字用copy还是strong（不可变对象的copy是浅复制，strong也是指针引用，所以strA内容改变后地址同时改变，不会影响name属性）。</p>
<p>再来看name属性指向一个可变对象的情况，属性关键字用strong。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//属性关键字为strong</div><div class="line">@property (nonatomic, strong) NSString *name;</div><div class="line"></div><div class="line">//测试代码</div><div class="line">NSMutableString *strB = [@&quot;Susan_Miller&quot; mutableCopy];</div><div class="line">Person *personB = [Person new];</div><div class="line">personB.name = strB;</div><div class="line">YLog(strB);</div><div class="line">YLog(personB.name);</div><div class="line"></div><div class="line">[strB setString:@&quot;Susan_Test&quot;];</div><div class="line">YLog(strB);</div><div class="line">YLog(personB.name);</div><div class="line"></div><div class="line">//输出结果</div><div class="line">//strB: __NSCFString -&gt; 0x7ff9b2c1a090 : Susan_Miller  2</div><div class="line">//personB.name: __NSCFString -&gt; 0x7ff9b2c1a090 : Susan_Miller  2</div><div class="line">//strB: __NSCFString -&gt; 0x7ff9b2c1a090 : Susan_Test  2</div><div class="line">//personB.name: __NSCFString -&gt; 0x7ff9b2c1a090 : Susan_Test  2</div></pre></td></tr></table></figure></p>
<p>从结果可看出，name属性指向了一个可变对象strB，当strB的内容改变时，name属性也跟着改变，而person对此不知情，可能会产生错误。</p>
<p>继续来看name属性关键字使用copy时的情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//属性关键字为copy</div><div class="line">@property (nonatomic, copy) NSString *name;</div><div class="line"></div><div class="line">//测试代码</div><div class="line">NSMutableString *strB = [@&quot;Susan_Miller&quot; mutableCopy];</div><div class="line">Person *personB = [Person new];</div><div class="line">personB.name = strB;</div><div class="line">YLog(strB);</div><div class="line">YLog(personB.name);</div><div class="line"></div><div class="line">[strB setString:@&quot;Susan_Test&quot;];</div><div class="line">YLog(strB);</div><div class="line">YLog(personB.name);</div><div class="line"></div><div class="line">//输出结果</div><div class="line">//strB: __NSCFString -&gt; 0x7fb15af31360 : Susan_Miller  1**</div><div class="line">//personB.name: __NSCFString -&gt; 0x7fb15af26620 : Susan_Miller  1**</div><div class="line">//strB: __NSCFString -&gt; 0x7fb15af31360 : Susan_Test  1**</div><div class="line">//personB.name: __NSCFString -&gt; 0x7fb15af26620 : Susan_Miller  1**</div></pre></td></tr></table></figure></p>
<p>此时，因为对NSMutableString进行copy是深复制（即内容拷贝），所以name属性与strB指向不同的地址，strB的内容更改不会影响到name属性。</p>
<p>所以，声明NSString为属性时，如果希望保护属性封装性不受外界影响，则应该使用copy关键字，让所属对象持有的是一份“不可变”（immutable）副本，不用担心字符串内容无意间变动。</p>
<h3 id="去除字符串中的中文"><a href="#去除字符串中的中文" class="headerlink" title="去除字符串中的中文"></a>去除字符串中的中文</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">- (NSString *)removeChinese:(NSString *)string &#123;</div><div class="line"></div><div class="line">    NSString *chi = [self getChineseStringWithString:string];</div><div class="line"></div><div class="line">    return [string stringByReplacingOccurrencesOfString:chi withString:@&quot;&quot;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *)getChineseStringWithString:(NSString *)string</div><div class="line">&#123;</div><div class="line">    //(unicode中文编码范围是0x4e00~0x9fa5)</div><div class="line">    for (int i = 0; i &lt; string.length; i++) &#123;</div><div class="line">        int utfCode = 0;</div><div class="line">        void *buffer = &amp;utfCode;</div><div class="line">        NSRange range = NSMakeRange(i, 1);</div><div class="line"></div><div class="line">        BOOL b = [string getBytes:buffer maxLength:2 usedLength:NULL encoding:NSUTF16LittleEndianStringEncoding options:NSStringEncodingConversionExternalRepresentation range:range remainingRange:NULL];</div><div class="line"></div><div class="line">        if (b &amp;&amp; (utfCode &gt;= 0x4e00 &amp;&amp; utfCode &lt;= 0x9fa5)) &#123;</div><div class="line">            return [string substringFromIndex:i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return nil;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="BOOL-containsString-NSString-str-NS-AVAILABLE-10-10-8-0-7以下不可用"><a href="#BOOL-containsString-NSString-str-NS-AVAILABLE-10-10-8-0-7以下不可用" class="headerlink" title="- (BOOL)containsString:(NSString *)str NS_AVAILABLE(10_10, 8_0);//7以下不可用"></a>- (BOOL)containsString:(NSString *)str NS_AVAILABLE(10_10, 8_0);//7以下不可用</h3><h3 id="NSString的各种转换"><a href="#NSString的各种转换" class="headerlink" title="NSString的各种转换"></a>NSString的各种转换</h3><h4 id="NSData-与-NSString"><a href="#NSData-与-NSString" class="headerlink" title="NSData 与 NSString"></a>NSData 与 NSString</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">　　NSData --&gt; NSString</div><div class="line">　　NSString *aString = [[NSString alloc] initWithData:adata encoding:NSUTF8StringEncoding];</div><div class="line">　　NSString --&gt; NSData</div><div class="line">　　NSString *aString = @&quot;1234&quot;;</div><div class="line">　　NSData *aData = [aString dataUsingEncoding: NSUTF8StringEncoding];</div></pre></td></tr></table></figure>
<h4 id="NSString转化为UNICODE-String："><a href="#NSString转化为UNICODE-String：" class="headerlink" title="NSString转化为UNICODE String："></a>NSString转化为UNICODE String：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(NSString*)fname ＝ @“Test”;</div><div class="line">char fnameStr[10];</div><div class="line">memcpy(fnameStr, [fname cStringUsingEncoding:NSUnicodeStringEncoding], 2*([fname length]));</div><div class="line">与strcpy相比，memcpy并不是遇到&apos;\0&apos;就结束，而是一定会拷贝完n个字节</div></pre></td></tr></table></figure>
<h4 id="NSString-转化为-char"><a href="#NSString-转化为-char" class="headerlink" title="NSString 转化为 char *"></a>NSString 转化为 char *</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSString * str＝ @“Test”;</div><div class="line">const char * a =[str UTF8String];</div></pre></td></tr></table></figure>
<h4 id="char-转化为-NSString"><a href="#char-转化为-NSString" class="headerlink" title="char * 转化为 NSString"></a>char * 转化为 NSString</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSString *str=[NSString stringWithCString encoding:NSUTF8StringEncoding];</div></pre></td></tr></table></figure>
<h4 id="char-转化-NSData"><a href="#char-转化-NSData" class="headerlink" title="char * 转化 NSData"></a>char * 转化 NSData</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">方法一： char * a = (char*)malloc(sizeof(byte)*16); NSData *data = [NSData dataWithBytes: a length:strlen(a)]; </div><div class="line">方法二： 转换为NSString： - (id)initWithUTF8String:(const char *)bytes 然后用NSString的 - (NSData *)dataUsingEncoding:(NSStringEncoding)encoding</div></pre></td></tr></table></figure>
<h4 id="NSData-转化-char"><a href="#NSData-转化-char" class="headerlink" title="NSData 转化 char *"></a>NSData 转化 char *</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSData data ； </div><div class="line">char* a=[data bytes];</div></pre></td></tr></table></figure>
<h4 id="NSString-转化-NSURL"><a href="#NSString-转化-NSURL" class="headerlink" title="NSString 转化 NSURL"></a>NSString 转化 NSURL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//NSURL *url = [NSURL URLWithString:[str  stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding ]];</div><div class="line"></div><div class="line">NSString *urlString=[@&quot;http://www.google.com/search?client=safari&amp;rls=en&amp;q=搜索&amp;ie=UTF-8&amp;oe=UTF-8&quot; stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</div></pre></td></tr></table></figure>
<h4 id="NSURL-转化-NSString"><a href="#NSURL-转化-NSString" class="headerlink" title="NSURL 转化 NSString"></a>NSURL 转化 NSString</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSURL *url=[NSURL URLWithString:urlString];</div><div class="line"></div><div class="line">NSString *s=[[url absoluteString] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</div></pre></td></tr></table></figure>
<h4 id="NSData-与-Byte"><a href="#NSData-与-Byte" class="headerlink" title="NSData 与 Byte"></a>NSData 与 Byte</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">　　NSData --&gt; Byte</div><div class="line">　　NSString *testString = @&quot;1234567890&quot;;</div><div class="line">　　NSData *testData = [testString dataUsingEncoding: NSUTF8StringEncoding];</div><div class="line">　　Byte *testByte = (Byte *)[testData bytes];</div><div class="line">　　Byte --&gt; NSData</div><div class="line">　　Byte byte[] = &#123;0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23&#125;;</div><div class="line">　　NSData *adata = [[NSData alloc] initWithBytes:byte length:24];</div></pre></td></tr></table></figure>
<h4 id="NSData-与-UIImage"><a href="#NSData-与-UIImage" class="headerlink" title="NSData 与 UIImage"></a>NSData 与 UIImage</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">　　NSData --&gt; UIImage</div><div class="line">　　UIImage *aimage = [UIImage imageWithData: imageData];</div><div class="line">　　//例：从本地文件沙盒中取图片并转换为NSData</div><div class="line">　　NSString *path = [[NSBundle mainBundle] bundlePath];</div><div class="line">　　NSString *name = [NSString stringWithFormat:@&quot;ceshi.png&quot;];</div><div class="line">　　NSString *finalPath = [path stringByAppendingPathComponent:name];</div><div class="line">　　NSData *imageData = [NSData dataWithContentsOfFile: finalPath];</div><div class="line">　　UIImage *aimage = [UIImage imageWithData: imageData];</div><div class="line">　　UIImage－&gt; NSData</div><div class="line">　　NSData *imageData = UIImagePNGRepresentation(aimae);</div></pre></td></tr></table></figure>
<h4 id="NSData-与-NSMutableData"><a href="#NSData-与-NSMutableData" class="headerlink" title="NSData 与 NSMutableData"></a>NSData 与 NSMutableData</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　NSData --&gt; MSMutableData</div><div class="line">　　NSData *data=[[NSData alloc]init];</div><div class="line">　　NSMutableData *mdata=[[NSMutableData alloc]init];</div><div class="line">　　mdata=[NSData dataWithData:data];</div></pre></td></tr></table></figure>
<h4 id="NSData合并为一个NSMutableData"><a href="#NSData合并为一个NSMutableData" class="headerlink" title="NSData合并为一个NSMutableData"></a>NSData合并为一个NSMutableData</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- (NSString *)filePathWithName:(NSString *)filename</div><div class="line">&#123;</div><div class="line">NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);</div><div class="line">NSString *documentsDirectory = [paths objectAtIndex:0];</div><div class="line">return [documentsDirectory stringByAppendingPathComponent:filename];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">//音频文件路径</div><div class="line">NSString *mp3Path1 = [[NSBundle mainBundle] pathForResource:@&quot;1&quot; ofType:@&quot;mp3&quot;];</div><div class="line">NSString *mp3Path2 = [[NSBundle mainBundle] pathForResource:@&quot;2&quot; ofType:@&quot;mp3&quot;];</div><div class="line">//音频数据</div><div class="line">NSData *sound1Data = [[NSData alloc] initWithContentsOfFile: mp3Path1];</div><div class="line">NSData *sound2Data = [[NSData alloc] initWithContentsOfFile: mp3Path2];</div><div class="line">//合并音频</div><div class="line">NSMutableData *sounds = [NSMutableData alloc];</div><div class="line">[sounds appendData:sound1Data];</div><div class="line">[sounds appendData:sound2Data];</div><div class="line">//保存音频</div><div class="line"></div><div class="line">NSLog(@&quot;data length:%d&quot;, [sounds length]);</div><div class="line"></div><div class="line">[sounds writeToFile:[self filePathWithName:@&quot;tmp.mp3&quot;] atomically:YES];</div><div class="line"></div><div class="line">[window makeKeyAndVisible];</div><div class="line"></div><div class="line">return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="转译字符"><a href="#转译字符" class="headerlink" title="转译字符"></a>转译字符</h3><blockquote>
<p>转义字符 意义 ASCII码值(十进制)<br>\a 响铃(BEL) 007<br>\b 退格(BS) 008<br>\f 换页(FF) 012<br>\n 换行(LF) 010<br>\r 回车(CR) 013<br>\t 水平制表(HT) 009<br>\v 垂直制表(VT) 011<br>\ 反斜杠 092<br>\? 问号字符 063<br>\’ 单引号字符 039<br>\” 双引号字符 034<br>\0 空字符(NULL) 000<br>\ddd 任意字符 三位八进制<br>\xhh 任意字符 二位十六进制<br>\a:蜂鸣，响铃<br>\b:回退：向后退一格<br>\f:换页<br>\n:换行，光标到下行行首<br>\r:回车，光标到本行行首<br>\t:水平制表<br>\v:垂直制表<br>\:反斜杠<br>\’:单引号<br>\”:双引号<br>\?:问号<br>\ddd:三位八进制<br>\xhh:二位十六进制<br>\0:空字符(NULL),什么都不做<br>注：<br>1，\v垂直制表和\f换页符对屏幕没有任何影响，但会影响打印机执行响应操作。<br>2，\n其实应该叫回车换行。换行只是换一行，不改变光标的横坐标；回车只是回到行首，不改变光标的纵坐标。<br>3，\t 光标向前移动四格或八格，可以在编译器里设置<br>4，\’ 在字符里（即单引号里）使用。在字符串里(即双引号里)不需要，只要用 ‘ 即可。<br>5，\? 其实不必要。只要用 ? 就可以了（在windows VC6 和tc2 中验证）。</p>
</blockquote>
<h3 id="常用的富文本"><a href="#常用的富文本" class="headerlink" title="常用的富文本"></a>常用的富文本</h3><h4 id="单纯改变一句话中的某些字的颜色（一种颜色）"><a href="#单纯改变一句话中的某些字的颜色（一种颜色）" class="headerlink" title="单纯改变一句话中的某些字的颜色（一种颜色）"></a>单纯改变一句话中的某些字的颜色（一种颜色）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">*  单纯改变一句话中的某些字的颜色（一种颜色）</div><div class="line">*</div><div class="line">*  @param color    需要改变成的颜色</div><div class="line">*  @param totalStr 总的字符串</div><div class="line">*  @param subArray 需要改变颜色的文字数组(要是有相同的 只取第一个)</div><div class="line">*</div><div class="line">*  @return 生成的富文本</div><div class="line">*/</div><div class="line">+ (NSMutableAttributedString *)ls_changeCorlorWithColor:(UIColor *)color TotalString:(NSString *)totalStr SubStringArray:(NSArray *)subArray &#123;</div><div class="line"></div><div class="line">NSMutableAttributedString *attributedStr = [[NSMutableAttributedString alloc] initWithString:totalStr];</div><div class="line">for (NSString *rangeStr in subArray) &#123;</div><div class="line"></div><div class="line">NSRange range = [totalStr rangeOfString:rangeStr options:NSBackwardsSearch];</div><div class="line">[attributedStr addAttribute:NSForegroundColorAttributeName value:color range:range];</div><div class="line">&#125;</div><div class="line"></div><div class="line">return attributedStr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="改变每行的字间距"><a href="#改变每行的字间距" class="headerlink" title="改变每行的字间距"></a>改变每行的字间距</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">*  单纯改变句子的字间距（需要 &lt;CoreText/CoreText.h&gt;）</div><div class="line">*</div><div class="line">*  @param totalString 需要更改的字符串</div><div class="line">*  @param space       字间距</div><div class="line">*</div><div class="line">*  @return 生成的富文本</div><div class="line">*/</div><div class="line">+ (NSMutableAttributedString *)ls_changeSpaceWithTotalString:(NSString *)totalString Space:(CGFloat)space &#123;</div><div class="line"></div><div class="line">NSMutableAttributedString *attributedStr = [[NSMutableAttributedString alloc] initWithString:totalString];</div><div class="line">long number = space;</div><div class="line">CFNumberRef num = CFNumberCreate(kCFAllocatorDefault,kCFNumberSInt8Type,&amp;number);</div><div class="line">[attributedStr addAttribute:(id)kCTKernAttributeName value:(__bridge id)num range:NSMakeRange(0,[attributedStr length])];</div><div class="line">CFRelease(num);</div><div class="line"></div><div class="line">return attributedStr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="改变行间距"><a href="#改变行间距" class="headerlink" title="改变行间距"></a>改变行间距</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">*  单纯改变段落的行间距</div><div class="line">*</div><div class="line">*  @param totalString 需要更改的字符串</div><div class="line">*  @param lineSpace   行间距</div><div class="line">*</div><div class="line">*  @return 生成的富文本</div><div class="line">*/</div><div class="line">+ (NSMutableAttributedString *)ls_changeLineSpaceWithTotalString:(NSString *)totalString LineSpace:(CGFloat)lineSpace &#123;</div><div class="line"></div><div class="line">NSMutableAttributedString *attributedStr = [[NSMutableAttributedString alloc] initWithString:totalString];</div><div class="line"></div><div class="line">NSMutableParagraphStyle * paragraphStyle = [[NSMutableParagraphStyle alloc] init];</div><div class="line">[paragraphStyle setLineSpacing:lineSpace];</div><div class="line"></div><div class="line">[attributedStr addAttribute:NSParagraphStyleAttributeName value:paragraphStyle range:NSMakeRange(0, [totalString length])];</div><div class="line"></div><div class="line">return attributedStr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="同时更改行间距和字间距"><a href="#同时更改行间距和字间距" class="headerlink" title="同时更改行间距和字间距"></a>同时更改行间距和字间距</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">*  同时更改行间距和字间距</div><div class="line">*</div><div class="line">*  @param totalString 需要改变的字符串</div><div class="line">*  @param lineSpace   行间距</div><div class="line">*  @param textSpace   字间距</div><div class="line">*</div><div class="line">*  @return 生成的富文本</div><div class="line">*/</div><div class="line">+ (NSMutableAttributedString *)ls_changeLineAndTextSpaceWithTotalString:(NSString *)totalString LineSpace:(CGFloat)lineSpace textSpace:(CGFloat)textSpace &#123;</div><div class="line"></div><div class="line">NSMutableAttributedString *attributedStr = [[NSMutableAttributedString alloc] initWithString:totalString];</div><div class="line"></div><div class="line">NSMutableParagraphStyle * paragraphStyle = [[NSMutableParagraphStyle alloc] init];</div><div class="line">[paragraphStyle setLineSpacing:lineSpace];</div><div class="line"></div><div class="line">[attributedStr addAttribute:NSParagraphStyleAttributeName value:paragraphStyle range:NSMakeRange(0, [totalString length])];</div><div class="line"></div><div class="line">long number = textSpace;</div><div class="line">CFNumberRef num = CFNumberCreate(kCFAllocatorDefault,kCFNumberSInt8Type,&amp;number);</div><div class="line">[attributedStr addAttribute:(id)kCTKernAttributeName value:(__bridge id)num range:NSMakeRange(0,[attributedStr length])];</div><div class="line">CFRelease(num);</div><div class="line"></div><div class="line">return attributedStr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="更改某些文字的颜色并修改其字体，突出重点强调"><a href="#更改某些文字的颜色并修改其字体，突出重点强调" class="headerlink" title="更改某些文字的颜色并修改其字体，突出重点强调"></a>更改某些文字的颜色并修改其字体，突出重点强调</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">*  改变某些文字的颜色 并单独设置其字体</div><div class="line">*</div><div class="line">*  @param font        设置的字体</div><div class="line">*  @param color       颜色</div><div class="line">*  @param totalString 总的字符串</div><div class="line">*  @param subArray    想要变色的字符数组</div><div class="line">*</div><div class="line">*  @return 生成的富文本</div><div class="line">*/</div><div class="line">+ (NSMutableAttributedString *)ls_changeFontAndColor:(UIFont *)font Color:(UIColor *)color TotalString:(NSString *)totalString SubStringArray:(NSArray *)subArray &#123;</div><div class="line"></div><div class="line">NSMutableAttributedString *attributedStr = [[NSMutableAttributedString alloc] initWithString:totalString];</div><div class="line"></div><div class="line">for (NSString *rangeStr in subArray) &#123;</div><div class="line"></div><div class="line">NSRange range = [totalString rangeOfString:rangeStr options:NSBackwardsSearch];</div><div class="line"></div><div class="line">[attributedStr addAttribute:NSForegroundColorAttributeName value:color range:range];</div><div class="line">[attributedStr addAttribute:NSFontAttributeName value:font range:range];</div><div class="line">&#125;</div><div class="line"></div><div class="line">return attributedStr;</div></pre></td></tr></table></figure>
<h3 id="富文本相关属性汇总"><a href="#富文本相关属性汇总" class="headerlink" title="富文本相关属性汇总"></a>富文本相关属性汇总</h3><blockquote>
<ul>
<li>NSFontAttributeName ：字体字号<ul>
<li>value值：UIFont类型</li>
</ul>
</li>
<li>NSParagraphStyleAttributeName ： 段落样式<ul>
<li>value值：NSParagraphStyle类型（其属性如下）</li>
<li>lineSpacing 行间距(具体用法可查看上面的设置行间距API)</li>
<li>paragraphSpacing 段落间距</li>
<li>alignment 对齐方式</li>
<li>firstLineHeadIndent 指定段落开始的缩进像素</li>
<li>headIndent 调整全部文字的缩进像素</li>
</ul>
</li>
<li>NSForegroundColorAttributeName 字体颜色<ul>
<li>value值：UIColor类型</li>
</ul>
</li>
<li>NSBackgroundColorAttributeName 背景颜色<ul>
<li>value值：UIColor类型</li>
</ul>
</li>
<li>NSObliquenessAttributeName 字体粗倾斜<ul>
<li>value值：NSNumber类型</li>
</ul>
</li>
<li>NSExpansionAttributeName 字体加粗<ul>
<li>value值：NSNumber类型(比例) 0就是不变 1增加一倍</li>
</ul>
</li>
<li>NSKernAttributeName 字间距<ul>
<li>value值：CGFloat类型</li>
</ul>
</li>
<li>NSUnderlineStyleAttributeName 下划线<ul>
<li>value值：1或0</li>
</ul>
</li>
<li>NSUnderlineColorAttributeName 下划线颜色<ul>
<li>value值：UIColor类型</li>
</ul>
</li>
<li>NSStrikethroughStyleAttributeName 删除线<ul>
<li>value值：1或0</li>
</ul>
</li>
<li>NSStrikethroughColorAttributeName 删除线颜色<ul>
<li>value值：UIColor类型</li>
</ul>
</li>
<li>NSStrokeColorAttributeName 字体颜色<ul>
<li>value值：UIColor类型</li>
</ul>
</li>
<li>NSStrokeWidthAttributeName 字体描边<ul>
<li>value值：CGFloat</li>
</ul>
</li>
<li>NSLigatureAttributeName 连笔字<ul>
<li>value值：1或0</li>
</ul>
</li>
<li>NSShadowAttributeName 阴影<ul>
<li>value值：NSShawdow类型（下面是其属性）</li>
<li>shadowOffset 影子与字符串的偏移量</li>
<li>shadowBlurRadius 影子的模糊程度</li>
<li>shadowColor 影子的颜色</li>
</ul>
</li>
<li>NSTextEffectAttributeName 设置文本特殊效果,目前只有图版印刷效果可用<ul>
<li>value值：NSString类型</li>
</ul>
</li>
<li>NSAttachmentAttributeName 设置文本附件<ul>
<li>value值：NSTextAttachment类型（没研究过，可自行百度研究）</li>
</ul>
</li>
<li>NSLinkAttributeName 链接<ul>
<li>value值：NSURL (preferred) or NSString类型</li>
</ul>
</li>
<li>NSBaselineOffsetAttributeName 基准线偏移<ul>
<li>value值：NSNumber类型</li>
</ul>
</li>
<li>NSWritingDirectionAttributeName 文字方向 分别代表不同的文字出现方向<ul>
<li>value值：@[@(1),@(2)]</li>
</ul>
</li>
<li>NSVerticalGlyphFormAttributeName 水平或者竖直文本 在iOS没卵用，不支持竖版<ul>
<li>value值：1竖直 0水平</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="获取汉字的拼音"><a href="#获取汉字的拼音" class="headerlink" title="获取汉字的拼音"></a>获取汉字的拼音</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">+ (NSString *)transform:(NSString *)chinese</div><div class="line">&#123;</div><div class="line">//将NSString装换成NSMutableString</div><div class="line">NSMutableString *pinyin = [chinese mutableCopy];</div><div class="line">//将汉字转换为拼音(带音标)</div><div class="line">CFStringTransform((__bridge CFMutableStringRef)pinyin, NULL, kCFStringTransformMandarinLatin, NO);</div><div class="line">NSLog(@&quot;%@&quot;, pinyin);</div><div class="line">//去掉拼音的音标</div><div class="line">CFStringTransform((__bridge CFMutableStringRef)pinyin, NULL, kCFStringTransformStripCombiningMarks, NO);</div><div class="line">NSLog(@&quot;%@&quot;, pinyin);</div><div class="line">//返回最近结果</div><div class="line">return pinyin;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django部署+apache+mod_wsgi]]></title>
      <url>/2016/11/09/2016/Django%E9%83%A8%E7%BD%B2-apache-mod-wsgi/</url>
      <content type="html"><![CDATA[<h2 id="Django的部署-apache-mod-wsgi"><a href="#Django的部署-apache-mod-wsgi" class="headerlink" title="Django的部署(apache + mod_wsgi)"></a>Django的部署(apache + mod_wsgi)</h2><h3 id="概念解析"><a href="#概念解析" class="headerlink" title="概念解析"></a>概念解析</h3><h4 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h4><p>Django是一个框架，可以用python来开发web应用，但是并不是独立的开发web，在UI放面依然需要依靠html+css+js，用这些来搭建界面，不过我们可以使用django无缝的使用python的逻辑功能，比如使用python来处理数据，然后交给页面来进行展示 </p>
<blockquote>
<p>Django本身是有web服务器的，但是这个服务器只能在本机提供web服务，其作用主要是用来做测试，如果想其他机器也能访问你的web这个时候你还需要另外一个服务器，提供网络访问的功能<br><a id="more"></a></p>
<h4 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h4><p>Apache是专门用了提供HTTP服务的，以及相关配置的（例如虚拟主机、URL转发等等）</p>
</blockquote>
<h4 id="mod-wsgi"><a href="#mod-wsgi" class="headerlink" title="mod_wsgi"></a>mod_wsgi</h4><p>mod_wsgi的目的是实现一个简单的使用Apache模块可以举办任何Python应用程序支持Python的WSGI接口。该模块将适用于主机的高性能生产的网站，以及一般的自我管理个人网站的网页寄存服务运行。）</p>
<h4 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h4><p>在apache上配置虚拟主机，这将在你mac上提供一个简单管理多个网站的框架</p>
<h4 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h4><p>django1.3新加入了一个静态资源管理的app，django.contrib.staticfiles。在以往的django版本中，静态资源的管理一向都是个问题。部分app发布的时候会带上静态资源文件，在部署的时候你必须手动从各个app中将这些静态资源文件复制到同一个static目录。在引入staticfiles后，你只需要执行./manage.py collectstatic就可以很方便的将所用到app中的静态资源复制到同一目录。<br>staticfiles的引入，方便了django静态文件的管理，不过感觉staticfiles的文档写的并不是太清楚，初次使用的时候还是让我有些困惑。<br>下面简单的介绍一下staticfiles的主要配置：</p>
<ul>
<li><p><code>STATIC_ROOT</code>：运行manage.py collectstatic后静态文件将复制到的目录。注意：不要把你项目的静态文件放到这个目录。这个目录只有在运行collectstatic时才会用到。我最开始想当然的以为这个目录和MEDIA_ROOT的作用是相同的，致使在开发环境下一直无法找到静态文件。</p>
</li>
<li><p><code>STATIC_URL</code>：设置的static file的起始url，这个只可以在template里面引用到。这个参数和MEDIA_URL的含义差不多。</p>
</li>
<li><p><code>STATICFILES_DIRS</code>：除了各个app的static目录以外还需要管理的静态文件位置，比如项目公共的静态文件差不多。和TEMPLATE_DIRS的含义差不多。<br>各个APP下static/目录下的静态文件django的开发服务器会自动找到，这点和以前APP下的templates目录差不多。<br>在urls.py中加入静态文件处理的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">from django.contrib.staticfiles.urls import staticfiles_urlpatterns</div><div class="line"># ... the rest of your URLconf goes here ...</div><div class="line">urlpatterns += staticfiles_urlpatterns()</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="各种目录"><a href="#各种目录" class="headerlink" title="各种目录"></a>各种目录</h3><ul>
<li>django项目目录</li>
<li>静态文件目录</li>
<li>错误日志目录</li>
</ul>
<h3 id="请求的处理过程"><a href="#请求的处理过程" class="headerlink" title="请求的处理过程"></a>请求的处理过程</h3><p>sitename.conf –&gt; wsgi.py –&gt; settings.py –&gt; urls.py –&gt; views.py</p>
<h3 id="配置的过程"><a href="#配置的过程" class="headerlink" title="配置的过程"></a>配置的过程</h3><ul>
<li>python是系统自带不需要安装</li>
<li>apache系统自带不需要安装<h4 id="mod-wsgi安装"><a href="#mod-wsgi安装" class="headerlink" title="mod_wsgi安装"></a>mod_wsgi安装</h4></li>
<li><code>brew tap homebrew/apache</code></li>
<li><code>brew install mod_wsgi</code></li>
</ul>
<h4 id="django安装及工程创建"><a href="#django安装及工程创建" class="headerlink" title="django安装及工程创建"></a>django安装及工程创建</h4><ul>
<li>安装pip<code>sudo easy_install pip</code></li>
<li>利用pip安装django<code>（sudo) pip install Django</code></li>
<li><p>检验是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import django</div><div class="line">&gt;&gt;&gt; django.VERSION</div><div class="line">(1, 7, 6, &apos;final&apos;, 0)</div><div class="line">&gt;&gt;&gt; </div><div class="line">&gt;&gt;&gt; django.get_version()</div><div class="line">&apos;1.7.6&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>创建工程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">django-admin.py startproject project-name</div></pre></td></tr></table></figure>
</li>
<li><p>创建app<br>到工程的目录下，找到namage.py这个文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py startapp app-name</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="apache配置"><a href="#apache配置" class="headerlink" title="apache配置"></a>apache配置</h4><p>/etc/apache2/httpd.conf<br>这个文内</p>
<ul>
<li><code>LoadModule wsgi_module /usr/local/Cellar/mod_wsgi/4.5.6/libexec/mod_wsgi.so</code>这个目录是安装mod_wsgi这个文件的时候，生成的，找到它</li>
<li><code>Include /private/etc/apache2/extra/httpd-vhosts.conf</code>放开这句话，意思是我要使用虚拟主机</li>
<li>配置虚拟主机在httpd-vhosts.conf这个文件内导入文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">include /private/etc/apache2/extra/vhosts/localhost.conf</div><div class="line">include /private/etc/apache2/extra/vhosts/dev.mysite.com.conf</div></pre></td></tr></table></figure>
</li>
</ul>
<p>意思是导入这两个文件，作为虚拟主机的配置，但是这两个文件需要自己创建</p>
<ul>
<li>虚拟主机配置<code>dev.mysite.com.conf</code><br>这个是最关键的地方<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">Listen 89#虚拟主机的监听端口</div><div class="line">&lt;VirtualHost *:89&gt;</div><div class="line"></div><div class="line">LogLevel info</div><div class="line"></div><div class="line">ServerName dev.mysite.com#虚拟主机的名字</div><div class="line">ServerAdmin my@mysite.com</div><div class="line"></div><div class="line">ErrorLog &quot;/Users/han/Sites/logs/mysite.com-error_log&quot;</div><div class="line">CustomLog &quot;/Users/han/Sites/logs/mysite.com-access_log&quot; common#这两个一定要配置，因为一旦有错误，我们需要依靠这两个文件的内的日志来找到错误</div><div class="line"></div><div class="line"></div><div class="line">WSGIScriptAlias / /Users/han/Documents/mysite/mysite/wsgi.py#这个是整个设置最重要的地方，让apache可以知道使用哪个wsgi</div><div class="line"></div><div class="line">&lt;Directory &quot;/Users/han/Documents/mysite/mysite&quot;&gt;</div><div class="line">&lt;Files wsgi.py&gt;</div><div class="line">Require all granted</div><div class="line">&lt;/Files&gt;</div><div class="line">&lt;/Directory&gt;#设置wsgi的文件权限</div><div class="line"></div><div class="line">#################下边的都不是重点了##################</div><div class="line"># Static files</div><div class="line">DocumentRoot &quot;/Users/han/Sites/mysite.com&quot;</div><div class="line">&lt;Directory &quot;/Users/han/Sites/mysite.com&quot;&gt;</div><div class="line">Options FollowSymLinks Multiviews</div><div class="line">Require all granted</div><div class="line">&lt;/Directory&gt;</div><div class="line"></div><div class="line">Alias /static/ /Users/han/Sites/mysite.com/static/</div><div class="line"></div><div class="line">&lt;Directory &quot;/Users/han/Sites/mysite.com/static&quot;&gt;</div><div class="line">Require all granted</div><div class="line">&lt;/Directory&gt;</div><div class="line"></div><div class="line"># WGSI configuration</div><div class="line">#WSGIDaemonProcess dev.mysite.com processes=2 threads=15 display-name=%&#123;GROUP&#125; python-#path=/Users/han/Documents/mysite/:/Users/han/Documents/VirtualEnvs/python2.7-django/lib/python2.7/site-#packages</div><div class="line"></div><div class="line">#WSGIProcessGroup dev.mysite.com</div><div class="line"></div><div class="line">&lt;Directory &quot;/Users/han/Documents/mysite&quot;&gt;</div><div class="line">Options FollowSymLinks Multiviews</div><div class="line">Require all granted</div><div class="line">&lt;/Directory&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="django工程配置"><a href="#django工程配置" class="headerlink" title="django工程配置"></a>django工程配置</h4><p>设置wsgi文件，让mod_wsgi知道，使用哪个django项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line"></div><div class="line">from os.path import join,dirname,abspath</div><div class="line"></div><div class="line">PROJECT_DIR = dirname(dirname(abspath(__file__)))#3</div><div class="line">import sys # 4</div><div class="line">sys.path.insert(0,PROJECT_DIR) # 5</div><div class="line"></div><div class="line">from django.core.wsgi import get_wsgi_application</div><div class="line"></div><div class="line">os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;mysite.settings&quot;)</div><div class="line"></div><div class="line">application = get_wsgi_application()</div></pre></td></tr></table></figure></p>
<p>最重要的是3，4，5三句，让mod_wsgi知道去哪里找django项目，剩下的就是django的事情了</p>
<h3 id="错误说明"><a href="#错误说明" class="headerlink" title="错误说明"></a>错误说明</h3><blockquote>
<p>其实所有的static文件都是非重点，因为我们最终调用的是django的服务，所以没有静态文件，只是不展示而已，不过如果我们需要一些小的icon等等，我们还是需要这个静态文件的，这是后话，先实现服务这是大事</p>
</blockquote>
<p>如果我们遇到了权限问题，</p>
<blockquote>
<p>Permission denied: access to / denied (filesystem path ‘/Users/han/Documents/mysite use search permissions are missing on a component of the path</p>
</blockquote>
<p>像下边这样的，说明我们没有合适的权限，这是所有文档都没有说明白的地方，这里之所以回访问这个是因为在mod_wsgi中进行了设置，mod_wsgi去这个文件中寻找django的服务，但是我们并没有在所有的设置中设置mod_wsgi的访问权限，这是其一，其二我们并不能直接设置mysite的权限，这样到最后我们发现还是一直报这个错误，我们需要设置上层目录的权限，不知道为啥会这么坑爹<br>到～目录下，然后<br><code>chmod o+rx Documents</code><br>最后我们输入<code>dev.mysite.com:89</code>的时候显示的就是django的首页了</p>
<h3 id="常用命令行"><a href="#常用命令行" class="headerlink" title="常用命令行"></a>常用命令行</h3><ul>
<li><code>sudo apachectl restart</code>重启命令</li>
<li><code>apachectl confittest</code>修改配之后测试一下看看哪里有错误，只出现一个OK才是没有问题</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FLV格式解析]]></title>
      <url>/2016/07/30/2016/FLV%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>FLV 是 FLASH VIDEO 的简称,，FLV流媒体格式是一种新的视频格式，全称为Flash Video。FLV 压缩与转换非常方便，适合做短片.，并且 FLV 可以很好的保护原始地址，不容易下载到，可以起到保护版权的目的<br><a id="more"></a></p>
<p>最近要用到flv，整理了一些flv格式的资料，供参考。 flv文件主要由两部分组成：header和body。</p>
<h2 id="1-header"><a href="#1-header" class="headerlink" title="1.header"></a>1.header</h2><p>header部分记录了flv的类型、版本等信息，是flv的开头，一般都差不多，占9bytes。具体格式如下：</p>
<table>
<thead>
<tr>
<th>文件类型</th>
<th>3bytes</th>
<th>“FLV”</th>
</tr>
</thead>
<tbody>
<tr>
<td>版本</td>
<td>1 byte</td>
<td>一般为0x01</td>
</tr>
<tr>
<td>流信息</td>
<td>1 byte</td>
<td>倒数第一位是1表示有视频，倒数第三位是1表示有音频，倒数第二、四位必须为0</td>
</tr>
<tr>
<td>header长度</td>
<td>4 bytes</td>
<td>整个header的长度，一般为9；大于9表示下面还有扩展信息</td>
</tr>
</tbody>
</table>
<h2 id="2-body"><a href="#2-body" class="headerlink" title="2.body"></a>2.body</h2><p>body部分由一个个Tag组成，每个Tag的下面有一块4bytes的空间，用来记录这个tag的长度，这个后置用于逆向读取处理，他们的关系如下图： flv<br><img src="http://i1.piimg.com/567571/9a6b94bf91e209d3.jpg" alt=""></p>
<h3 id="2-1-Tag"><a href="#2-1-Tag" class="headerlink" title="2.1.Tag"></a>2.1.Tag</h3><p>每个Tag由也是由两部分组成的：Tag Header和Tag Data。Tag Header里存放的是当前Tag的类型、数据区（Tag Data）长度等信息，具体如下：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>长度</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>Tag类型</td>
<td>1 bytes</td>
<td>8：音频 9：视频 18：脚本  其他：保留</td>
</tr>
<tr>
<td>数据区长度</td>
<td>3 bytes</td>
<td>在数据区的长度</td>
</tr>
<tr>
<td>时间戳</td>
<td>3 bytes</td>
<td>整数，单位是毫秒。对于脚本型的tag总是0</td>
</tr>
<tr>
<td>时间戳扩展</td>
<td>1 bytes</td>
<td>将时间戳扩展为4bytes，代表高8位。很少用到</td>
</tr>
<tr>
<td>StreamsID</td>
<td>3 bytes</td>
<td>总是0</td>
</tr>
</tbody>
</table>
<p>数据区(data)    由数据区长度决定    数据实体</p>
<h3 id="2-2-Tag-Data"><a href="#2-2-Tag-Data" class="headerlink" title="2.2.Tag Data"></a>2.2.Tag Data</h3><p>数据区根据Tag类型的不同可分为三种，音频数据、视频数据和脚本数据。</p>
<h4 id="2-2-1-音频数据"><a href="#2-2-1-音频数据" class="headerlink" title="2.2.1.音频数据"></a>2.2.1.音频数据</h4><p>第一个byte是音频的信息，格式如下。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>长度</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>音频格式</td>
<td>4 bits</td>
<td>0 = Linear PCM, platform endian,1 = ADPCM,2 = MP3,3 = Linear PCM, little endian,4 = Nellymoser 16-kHz mono,5 = Nellymoser 8-kHz mono,6 = Nellymoser,7 = G.711 A-law logarithmic PCM,8 = G.711 mu-law logarithmic PCM,9 = reserved,10 = AAC,11 = Speex,14 = MP3 8-Khz,15 = Device-specific sound</td>
</tr>
<tr>
<td>采样率</td>
<td>2 bits</td>
<td>0 = 5.5-kHz,1 = 11-kHz,2 = 22-kHz,3 = 44-kHz,对于AAC总是3</td>
</tr>
<tr>
<td>采样的长度</td>
<td>1 bit</td>
<td>0 = snd8Bit,1 = snd16Bit,压缩过的音频都是16bit</td>
</tr>
<tr>
<td>音频类型</td>
<td>1 bit</td>
<td>0 = sndMono,1 = sndStereo,对于AAC总是1</td>
</tr>
</tbody>
</table>
<p>第2byte开始就是音频流数据了。</p>
<h4 id="2-2-2-视频数据"><a href="#2-2-2-视频数据" class="headerlink" title="2.2.2.视频数据"></a>2.2.2.视频数据</h4><p>和音频数据一样，第一个byte是视频信息，格式如下：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>长度</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>帧类型</td>
<td>4 bits</td>
<td>1: keyframe (for AVC, a seekable frame)</td>
</tr>
</tbody>
</table>
<p>2: inter frame (for AVC, a non-seekable frame)<br>3: disposable inter frame (H.263 only)<br>4: generated keyframe (reserved for server use only)<br>5: video info/command frame|<br>|编码ID    |4 bits    |1: JPEG (currently unused)<br>2: Sorenson H.263<br>3: Screen video<br>4: On2 VP6<br>5: On2 VP6 with alpha channel<br>6: Screen video version 2<br>7: AVC|</p>
<h4 id="2-2-3脚本数据"><a href="#2-2-3脚本数据" class="headerlink" title="2.2.3脚本数据"></a>2.2.3脚本数据</h4><p>脚本Tag一般只有一个，是flv的第一个Tag，用于存放flv的信息，比如duration、audiodatarate、creator、width等。<br>首先介绍下脚本的数据类型。所有数据都是以数据类型+（数据长度）+数据的格式出现的，数据类型占1byte，数据长度看数据类型是否存在，后面才是数据。<br>其中数据类型的种类有：</p>
<ul>
<li>0 = Number type</li>
<li>1 = Boolean type</li>
<li>2 = String type</li>
<li>3 = Object type</li>
<li>4 = MovieClip type</li>
<li>5 = Null type</li>
<li>6 = Undefined type</li>
<li>7 = Reference type</li>
<li>8 = ECMA array type</li>
<li>10 = Strict array type</li>
<li>11 = Date type</li>
<li>12 = Long string type</li>
</ul>
<p>如果类型为String，后面的2bytes为字符串的长度（Long String是4bytes），再后面才是字符串数据；如果是Number类型，后面的8bytes为Double类型的数据；Boolean类型，后面1byte为Bool类型。</p>
<p>知道了这些后再来看看flv中的脚本，一般开头是0x02，表示String类型，后面的2bytes为字符串长度，一般是0x000a（“onMetaData”的长度），再后面就是字符串“onMetaData”。好像flv格式的文件都有onMetaData标记，在运行ActionScript的时候会用到它。后面跟的是0x08，表示ECMA Array类型，这个和Map比较相似，一个键跟着一个值。键都是String类型的，所以开头的0x02被省略了，直接跟着的是字符串的长度，然后是字符串，再是值的类型，也就是上面介绍的那些了。</p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>flv的格式还是比较简单的，header部分很简洁，body部分都是由一个个tag，tag的话也就三种，脚本tag一般只有一个的，我想这也是flv能成为在线视频格式的原因吧。只要了解了格式，我们就可以写个程序来解析flv文件了，这也是我下一步要做的。<br>最后附上flv官方手册：video_file_format_spec_v10</p>
]]></content>
      
        <categories>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 流媒体 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS性能优化概述]]></title>
      <url>/2016/07/21/2016/iOS%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<h2 id="响应速度与运行速度"><a href="#响应速度与运行速度" class="headerlink" title="响应速度与运行速度"></a>响应速度与运行速度</h2><p>响应速度和运行速度之间有着微妙的区别，响应速度是指监听用户输入到反馈用户的速度，而运行速度是指处理任务的速度。<br><a id="more"></a><br>用户都讨厌等待，所以你会说让App运行的更快非常重要。确实如此，但是运行速度的提升有一个边界，假如数据要通过网络下载，或者要进行复杂的计算和渲染，那么App不可能立即显示这些内容。这种情况下用户实际上还是愿意等待的，但是你要针对他们的操作给出即时的响应，这种响应可以是简单的按钮状态的改变也可以是复杂的动画效果。让App运行更快很重要，让其迅速响应同样重要。<br>使用现实中真实的按钮和开关时会让人感觉靠谱，当按下按钮或者打开开关时你可以百分百确定你进行了操作。但是在触摸屏上你无法感知，所以视觉响应非常重要。如果一个App不能提供这种即时的响应那体验将变得非常糟糕，更具体点说就是响应时间不要超过三分之一秒。当你点击了某个位置但是没有任何事情发生，你会自然而然的认为点击有可能没有被接受。绝大多数人在这时会再点击一次，这可能造成重复的操作。</p>
<p>关于响应速度的三个原则：</p>
<ul>
<li>迅速回馈用户他的操作已经被接受，然后迅速执行。例如点击按钮时提供一个touch-down状态呈现给用户。</li>
<li>允许用户任意时刻中断</li>
<li>当耗时操作进行时，反馈用户一个进度</li>
</ul>
<p>针对上边提出的问题，给予状态提示是UI层面的事情，比较容易做到，但是如果保证无论任何时候用户的操作和触摸事件都能得到立刻的响应呢？</p>
<h3 id="runloop与用户事件响应"><a href="#runloop与用户事件响应" class="headerlink" title="runloop与用户事件响应"></a>runloop与用户事件响应</h3><p>在每次的runloop中，需要处理下边几种事件：</p>
<ul>
<li>handlePort：跨线程通信的一些消息</li>
<li>customSrc: 被标记为UI待处理的事件</li>
<li>mySelector：本线程方法的调用</li>
<li>timerFired：定时器</li>
</ul>
<p>当我们程序启动完之后，基本上线程就没有什么事情要处理了，这个时候能够做出改变这个状态的事物有下边这几种：</p>
<ul>
<li>用户手势事件，点一下或者拖一下</li>
<li>系统消息，来电话等</li>
</ul>
<p>具体的两种如下面所描述：</p>
<ul>
<li><p>界面刷新： 当UI改变（ Frame变化、 UIView/CALayer 的继承结构变化等）时，或手动调用了 UIView/CALayer 的 setNeedsLayout/setNeedsDisplay方法后，这个 UIView/CALayer 就被标记为待处理。 苹果注册了一个用来监听BeforeWaiting和Exit的Observer，在它的回调函数里会遍历所有待处理的 UIView/CAlayer 以执行实际的绘制和调整，并更新 UI 界面。</p>
</li>
<li><p>手势识别： 如果上一步的 _UIApplicationHandleEventQueue() 识别到是一个guesture手势，会调用Cancel方法将当前的touchesBegin/Move/End 系列回调打断。随后系统将对应的 UIGestureRecognizer 标记为待处理。 苹果注册了一个 Observer 监测 BeforeWaiting (Loop即将进入休眠) 事件，其回调函数为 _UIGestureRecognizerUpdateObserver()，其内部会获取所有刚被标记为待处理的 GestureRecognizer，并执行GestureRecognizer的回调。 当有 UIGestureRecognizer 的变化(创建/销毁/状态改变)时，这个回调都会进行相应处理。</p>
</li>
</ul>
<blockquote>
<p>总的来讲，并不是当用户触发一个事件的时候这个事件就会被马上执行，而是这个事件会被标记，加入被执行的事件队列，然后等待runloop从这个事件队列中取出来事件，然后执行。<br>现在假如说，你有一个点击事件，这个时候这个事件被加入到待执行的事件中，如果前边有一系列的事件要做，那么这个事件就要排队，现象就是，你发现你点完之后没有任何的反应。<br><code>[self performSelector:@selector(perform4) withObject:nil afterDelay:0.005];</code>利用该方法将大段的方法进行拆分，这样可以保证用户事件的响应。</p>
</blockquote>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h3><p>前边我们保证了响应速度，现在我们来看一下，如何加快执行的速度。<br>基本上我们能够依赖的就是Time Profiler，</p>
<h3 id="渲染速度"><a href="#渲染速度" class="headerlink" title="渲染速度"></a>渲染速度</h3><p>不幸的是Time Profiler不能找出所有的性能问题。当你的App的帧率掉到60（帧/秒）以下你的App就感觉运行得不是那么平滑了。低帧率导致滚动视图和动画卡顿。<br>　　帧率下降通常意味着iPad的渲染速度跟不上。视觉上较为理想的帧率不低于60（帧/秒），意味着每一帧应该在六十分之一秒内渲染完。</p>
<p><img src="http://i2.piimg.com/567571/8a0a7cd7094e8ce0.png" alt=""><br>基本上我们使用上边这些选项来查找影响渲染的因素。</p>
<h4 id="color-blended-layers"><a href="#color-blended-layers" class="headerlink" title="color blended layers"></a>color blended layers</h4><p>我们知道GPU是图形硬件，主要的工作是混合纹理并算出像素的RGB值，这是一个非常复杂的计算过程，计算的过程越复杂，所需要消耗的时间就越长，GPU的使用率就越高，这并不是一个好的现像，而我们需要做的是减少GPU的计算量。<br>我们在这个图层上放置一个完全不透明的图层，那么GPU将会把上面的图层合成到下面的图层当中，由于上面的是一个完全不透明的图层，所以上面的图层会部份遮盖掉下面的图层，而在遮盖掉的矩形区域内，GPU会直接使用上面图层的像素来显示。如果我们最底的图层上放置的是一个有透明度的图层，那么在这个矩形区域里，GPU需要混合上下两个图层来计算出在屏幕上显示出来的像素的RGB值。若在同一个区域内，存在着多个有透明度的图层，那么GPU需要更多的计算才能得出最终像素的RGB值。而我们要做的就是避免像素混合，尽可能地为视图设置背景色，且设置opaque为YES，这会大大减少GPU的计算。<br>以label为例<br><img src="http://i2.piimg.com/567571/324a6b489d2c6fa0.png" alt=""><br>上边为不透明，下边为透明，那么我们得到的结果是下边混合严重<br>上边为iOS7的情况，那么iOS8呢<br><img src="http://i1.piimg.com/567571/10dcf06a1af655ab.png" alt=""><br>虽然设置了背景色，但在iOS8上用UILabel显示中文却出现了像素混合的情况，这是为什么呢？我们来看看UILabel在iOS8前后的变化，在iOS8以前，UILabel使用的是CALayer作为底图层，而在iOS8开始，UILabel的底图层变成了_UILabelLayer，绘制文本也有所改变，就像上图所视(在iOS8刚发布的时候，我一度怀疑Apple歧视中文)。</p>
<p>那怎么解决呢？首先我们来观察一下上图，从图中我们可以看到在背景色的四周多了一圈透明的边，而这一圈透明的边明显超出了图层的矩形区域，既然发现这了一点，那么解决方案就很明了了。</p>
<p>设置图层的masksToBounds为YES时，图层将会沿着Bounds进行裁剪，我们来看一下修改后的效果。木有问题了。<br>maskTobounds需要与cornerRadius结合才会离屏渲染，所以这里并不会导致离屏渲染。<br>可以的话，要求美工在切图的时候，一定不要切出那些留有透明区域的图片，不然在你显示图片的时候，同样会出现像素混合问题。</p>
<h2 id="tableView的优化"><a href="#tableView的优化" class="headerlink" title="tableView的优化"></a>tableView的优化</h2><p>iOS平台因为UIKit本身的特性，需要将所有的UI操作都放在主线程执行，所以有时候就习惯将一些线程安全性不确定的逻辑，以及它线程结束后的汇总工作等等放到了主线程，所以主线程包含大量计算、IO、绘制都有可能造成卡顿。</p>
<ul>
<li>可以通过监控runLoop监控监控卡顿，调用方法主要就是在kCFRunLoopBeforeSources和kCFRunLoopBeforeWaiting之间,还有kCFRunLoopAfterWaiting之后,也就是如果我们发现这两个时间内耗时太长,那么就可以判定出此时主线程卡顿.</li>
<li>使用到CFRunLoopObserverRef,通过它可以实时获得这些状态值的变化</li>
<li>监控后另外再开启一个线程,实时计算这两个状态区域之间的耗时是否到达某个阀值,便能揪出这些性能杀手.</li>
<li><p>监控到了卡顿现场,当然下一步便是记录此时的函数调用信息,此处可以使用一个第三方Crash收集组件PLCrashReporter,它不仅可以收集Crash信息也可用于实时获取各线程的调用堆栈</p>
</li>
<li><p>当检测到卡顿时,抓取堆栈信息,然后在客户端做一些过滤处理,便可以上报到服务器,通过收集一定量的卡顿数据后经过分析便能准确定位需要优化的逻辑</p>
</li>
<li><p>设置正确的 reuseidentifer 以重用 cell</p>
</li>
<li><p>尽量将 View 设置为不透明,包括 cell 本身（backgroundcolor默认是透明的），图层混合靠GPU去渲染,如果透明度设置为100%，那么GPU就会忽略下面所有的layer，节约了很多不必要的运算。模拟器上点击“Debug”菜单，然后选择“color Blended Layers”，会把所有区域分成绿色和红色,绿色的好,红色的性能差（经过混合渲染的），当然也有一些图片虽然是不透明的，但是也会显示红色，如果检查代码没错的话，一般就是图片自身的性质问题了，直接联系美工或后台解决就好了。除非必须要用GPU加载的，其他最好要用CPU加载，因为CPU一般不会百分百加载，可以通过CoreGraphics画出圆角</p>
</li>
<li><p>有时候美工失误，图片大小给错了，引起不必要的图片缩放（可以找美工去改，当然也可以异步去裁剪图片然后缓存下来），还是使用Instrument的Color Misaligned Images，黄色表示图片需要缩放，紫色表示没有像素对齐。当然一般情况下图片格式不会给错，有些图片格式是GPU不支持的，就还要劳烦CPU去进行格式转换。还有可以通过Color Offscreen-Rendered Yellow来检测离屏渲染（就是把渲染结果临时保存，等到用的时候再取出，这样相对于普通渲染更消耗内存，使用maskToBounds、设置shadow，重写drawRect方法都会导致离屏渲染）<br>避免渐变，cornerRadius在默认情况下，这个属性只会影响视图的背景颜色和 border，但是不会离屏绘制，不影响性能。不用clipsToBounds（过多调用GPU去离屏渲染），而是让后台加载图片并处理圆角，并将处理过的图片赋值给UIImageView。UIImageView 的圆角通过直接截取图片实现，圆角路径直接用贝塞尔曲线UIBezierPath绘制（人为指定路径之后就不会触发离屏渲染），UIGraphicsBeginImageContextWithOptions。UIView的圆角可以使用CoreGraphics画出圆角矩形，核心是CGContextAddArcToPoint 函数。它中间的四个参数表示曲线的起点和终点坐标，最后一个参数表示半径。调用了四次函数后，就可以画出圆角矩形。最后再从当前的绘图上下文中获取图片并返回，最后把这个图片插入到视图层级的底部。<br>“Flash updated Regions”用于标记发生重绘的区域</p>
</li>
<li><p>如果 row 的高度不相同,那么将其缓存下来</p>
</li>
<li>如果 cell 显示的内容来自网络,那么确保这些内容是通过异步下载</li>
<li>使用 shadowPath 来设置阴影，图层最好不要使用阴影,阴影会导致离屏渲染(在进入屏幕渲染之前,还看不到的时候会再渲染一次,尽量不要产生离屏渲染)</li>
<li>减少 subview 的数量，不要去添加或移除view，要就显示，不要就隐藏</li>
<li>在 cellForRowAtIndexPath 中尽量做更少的操作,最好是在别的地方算好，这个方法里只做数据的显示，如果需要做一些处理,那么最好做一次之后将结果储存起来.</li>
<li>使用适当的数据结构来保存需要的信息,不同的结构会带来不同的操作代价</li>
<li>使用,rowHeight , sectionFooterHeight 和 sectionHeaderHeight 来设置一个恒定高度 , 而不是从代理(delegate)中获取</li>
<li>cell做数据绑定的时候，最好在willDisPlayCell里面进行，其他操作在cellForRowAtIndexPath，因为前者是第一页有多少条就执行多少次，后者是第一次加载有多少个cell就执行多少次，而且调用后者的时候cell还没显示</li>
<li>读取文件,写入文件,最好是放到子线程,或先读取好,在让tableView去显示</li>
<li>tableView滚动的时候,不要去做动画(微信的聊天界面做的就很好,在滚动的时候,动态图就不让他动,滚动停止的时候才动,不然可能会有点影响流畅度)。在滚动的时候加载图片，停止拖拽后在减速过程中不加载图片，减速停止后加载可见范围内图片</li>
</ul>
<h2 id="代码优化checkList"><a href="#代码优化checkList" class="headerlink" title="代码优化checkList"></a>代码优化checkList</h2><h3 id="2-3-提前调整ImageView中的图片大小（同图片和动画的渲染）"><a href="#2-3-提前调整ImageView中的图片大小（同图片和动画的渲染）" class="headerlink" title="2.3 提前调整ImageView中的图片大小（同图片和动画的渲染）"></a>2.3 提前调整ImageView中的图片大小（同图片和动画的渲染）</h3><p>如果要在UIImageView中显示一个图片，你应保证图片的大小和UIImageView的大小相同。<br>因为在运行中缩放图片是很耗费资源的，特别是UIImageView嵌套在UIScrollView中的情况下。</p>
<p>如果图片是从远端服务加载的你不能控制图片大小，比如在下载前调整到合适大小的话，你可以在下载完成后，最好是用background thread，缩放一次，然后在UIImageView中使用缩放后的图片。</p>
<p>这个类比到图片和动画的渲染中，是通用的。</p>
<p>具体方法参考上面的GCD操作。</p>
<h3 id="2-4-正确使用容器的特性"><a href="#2-4-正确使用容器的特性" class="headerlink" title="2.4 正确使用容器的特性"></a>2.4 正确使用容器的特性</h3><p>Arrays: 有序的一组值。使用index来查找很快，使用value 查找很慢， 插入/删除很慢。 Dictionaries: 存储键值对。 用键来查找比较快。 Sets: 无序的一组值。用值来查找很快，插入/删除很快。 </p>
<h3 id="2-5-大文件传输使用gzip"><a href="#2-5-大文件传输使用gzip" class="headerlink" title="2.5 大文件传输使用gzip"></a>2.5 大文件传输使用gzip</h3><p>大量app依赖于远端资源和第三方API，你可能会开发一个需要从远端下载XML, JSON, HTML或者其它格式的app。</p>
<p>问题是我们的目标是移动设备，因此你就不能指望网络状况有多好。一个用户现在还在edge网络，下一分钟可能就切换到了3G。不论什么场景，你肯定不想让你的用户等太长时间。</p>
<p>减小文档的一个方式就是在服务端和你的app中打开gzip。这对于文字这种能有更高压缩率的数据来说会有更显著的效用。</p>
<p>当然，现在苹果已经自动支持了，你只需要告诉你们服务端的同学，传输大文件的时候记得用gzip就完了。</p>
<h3 id="2-6-View的重用和懒加载"><a href="#2-6-View的重用和懒加载" class="headerlink" title="2.6 View的重用和懒加载"></a>2.6 View的重用和懒加载</h3><p>更多的view意味着更多的渲染，也就是更多的CPU和内存消耗，对于那种嵌套了很多view在UIScrollView里边的app更是如此。</p>
<p>重用就是模仿UITableView和UICollectionView的操作: 不要一次创建所有的subview，而是当需要时才创建，当它们完成了使命，把他们放进一个可重用的队列中。<br>当需要使用View的时候，去可重用队列里面找一找有没有可以被复用的View。<br>这里我的一份框架中曾经使用过类似的方法去创建一个图片浏览器，大家可以稍做参考。View的重用</p>
<p>懒加载就是在程序启动时并不进行加载，只有当用到这个对象的时候，才进行加载。<br>这个不仅在属性中可以进行这样的使用，在View上面也是一样，不过实现稍有不同。<br>懒加载会消耗更少内存，但是在View的显示上会稍有滞后。</p>
<h3 id="2-7-Cache"><a href="#2-7-Cache" class="headerlink" title="2.7 Cache"></a>2.7 Cache</h3><p>一个极好的原则就是，缓存所需要的，也就是那些不大可能改变但是需要经常读取的东西。</p>
<p>我们能缓存些什么呢？一些选项是，远端服务器的响应，图片，甚至计算结果，比如UITableView的行高。</p>
<p>NSURLConnection默认会缓存资源在内存或者存储中根据它所加载的HTTP Headers。你甚至可以手动创建一个NSURLRequest然后使它只加载缓存的值。</p>
<p>下面是一个可用的代码段，你可以可以用它去为一个基本不会改变的图片创建一个NSURLRequest并缓存它：</p>
<ul>
<li>(NSMutableURLRequest <em>)imageRequestWithURL:(NSURL </em>)url { NSMutableURLRequest <em>request = [NSMutableURLRequest requestWithURL:url];  request.cachePolicy = NSURLRequestReturnCacheDataElseLoad; // this will make sure the request always returns the cached image request.HTTPShouldHandleCookies = NO; request.HTTPShouldUsePipelining = YES; [request addValue:@”image/</em>“ forHTTPHeaderField:@”Accept”];  return request; }</li>
</ul>
<p>注意你可以通过 NSURLConnection 获取一个URL request， AFNetworking也一样的。这样你就不必为采用这条tip而改变所有的networking代码了。</p>
<p>如果你需要缓存其它不是HTTP Request的东西，你可以用NSCache。</p>
<h3 id="2-8-记得处理内存警告"><a href="#2-8-记得处理内存警告" class="headerlink" title="2.8 记得处理内存警告"></a>2.8 记得处理内存警告</h3><p>一旦系统内存过低，iOS会通知所有运行中app。在官方文档中是这样记述:</p>
<p>如果你的app收到了内存警告，它就需要尽可能释放更多的内存。最佳方式是移除对缓存，图片object和其他一些可以重创建的objects的strong references.</p>
<p>幸运的是，UIKit提供了几种收集低内存警告的方法:</p>
<p>在app delegate中使用applicationDidReceiveMemoryWarning: 的方法 在你的自定义UIViewController的子类(subclass)中覆盖didReceiveMemoryWarning 注册并接收 UIApplicationDidReceiveMemoryWarningNotification 的通知</p>
<p>一旦收到这类通知，你就需要释放任何不必要的内存使用。</p>
<p>例如，UIViewController的默认行为是移除一些不可见的view， 它的一些子类则可以补充这个方法，删掉一些额外的数据结构。一个有图片缓存的app可以移除不在屏幕上显示的图片。</p>
<p>这样对内存警报的处理是很必要的，若不重视，你的app就可能被系统杀掉。</p>
<p>然而，当你一定要确认你所选择的object是可以被重现创建的来释放内存。一定要在开发中用模拟器中的内存提醒模拟去测试一下。</p>
<h3 id="2-9-重用大的开销对象"><a href="#2-9-重用大的开销对象" class="headerlink" title="2.9 重用大的开销对象"></a>2.9 重用大的开销对象</h3><p>这里的大开销是指一些初始化很慢的objects，如：NSDateFormatter和NSCalendar。但是，你又不可避免地需要使用它们，比如从JSON或者XML中解析数据。</p>
<p>想要避免使用这个对象的瓶颈你就需要重用他们，可以通过添加属性到你的class里或者创建静态变量来实现。</p>
<p>注意如果你要选择第二种方法，对象会在你的app运行时一直存在于内存中，和单例(singleton)很相似。</p>
<p>下面的代码说明了使用一个属性来延迟加载一个date formatter. 第一次调用时它会创建一个新的实例，以后的调用则将返回已经创建的实例：</p>
<p>// in your .h or inside a class extension @property (nonatomic, strong) NSDateFormatter <em>formatter;  // inside the implementation (.m) // When you need, just use self.formatter - (NSDateFormatter </em>)formatter { if (! _formatter) { _formatter = [[NSDateFormatter alloc] init]; _formatter.dateFormat = @”EEE MMM dd HH:mm:ss Z yyyy”; // twitter date format } return _formatter; }</p>
<p>还需要注意的是，其实设置一个NSDateFormatter的速度差不多是和创建新的一样慢的！所以如果你的app需要经常进行日期格式处理的话，你会从这个方法中得到不小的性能提升。</p>
<h3 id="2-10-避免反复的处理数据"><a href="#2-10-避免反复的处理数据" class="headerlink" title="2.10 避免反复的处理数据"></a>2.10 避免反复的处理数据</h3><p>许多应用需要从服务器加载功能所需的常为JSON或者XML格式的数据。在服务器端和客户端使用相同的数据结构很重要。在内存中操作数据使它们满足你的数据结构是开销很大的。</p>
<p>比如你需要数据来展示一个table view,最好直接从服务器取array结构的数据以避免额外的中间数据结构改变。</p>
<p>类似的，如果需要从特定key中取数据，那么就使用键值对的dictionary。</p>
<h3 id="2-11-正确设定背景图片"><a href="#2-11-正确设定背景图片" class="headerlink" title="2.11 正确设定背景图片"></a>2.11 正确设定背景图片</h3><p>在View里放背景图片就像很多其它iOS编程一样有很多方法:</p>
<p>使用UIColor的 colorWithPatternImage来设置背景色； 在view中添加一个UIImageView作为一个子View。</p>
<p>如果你使用全画幅的背景图，你就必须使用UIImageView因为UIColor的colorWithPatternImage是用来创建小的重复的图片作为背景的。这种情形下使用UIImageView可以节约不少的内存：</p>
<p>// You could also achieve the same result in Interface Builder UIImageView *backgroundView = [ [UIImageView alloc] initWithImage:[UIImage imageNamed:@”background”]]; [self.view addSubview:backgroundView];</p>
<p>如果你用小图平铺来创建背景，你就需要用UIColor的colorWithPatternImage来做了，它会更快地渲染也不会花费很多内存：</p>
<p>self.view.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:@”background”]];</p>
<h3 id="2-12-试试苹果最新的WKWebView来处理web"><a href="#2-12-试试苹果最新的WKWebView来处理web" class="headerlink" title="2.12 试试苹果最新的WKWebView来处理web"></a>2.12 试试苹果最新的WKWebView来处理web</h3><p>UIWebView很有用，用它来展示网页内容或者创建UIKit很难做到的动画效果是很简单的一件事。</p>
<p>但是你可能有注意到UIWebView并不像驱动Safari的那么快。这是由于以JIT compilation 为特色的Webkit的Nitro Engine的限制。</p>
<p>所以想要更高的性能你就要调整下你的HTML了。第一件要做的事就是尽可能移除不必要的javascript，避免使用过大的框架。能只用原生js就更好了。</p>
<p>另外，尽可能异步加载例如用户行为统计script这种不影响页面表达的javascript。</p>
<p>最后，永远要注意你使用的图片，保证图片的符合你使用的大小。使用Sprite sheet提高加载速度和节约内存。</p>
<p>当然，上面是针对你在使用UIWebView的情况下，需要尽量减少使用web的特性，而苹果最近刚推出的Safari的底层框架WKWebView也许能帮我们规避掉很多这样的性能问题。</p>
<h3 id="2-13-优化你的TableView"><a href="#2-13-优化你的TableView" class="headerlink" title="2.13 优化你的TableView"></a>2.13 优化你的TableView</h3><p>Table view需要有很好的滚动性能，不然用户会在滚动过程中发现动画的瑕疵。</p>
<p>为了保证table view平滑滚动，确保你采取了以下的措施:</p>
<p>正确使用reuseIdentifier来重用cells 尽量使所有的view opaque，包括cell自身 避免渐变，图片缩放，后台选人 缓存行高 如果cell内现实的内容来自web，使用异步加载，缓存请求结果 使用shadowPath来画阴影 减少subviews的数量 尽量不适用cellForRowAtIndexPath:，如果你需要用到它，只用一次然后缓存结果 使用正确的数据结构来存储数据 使用rowHeight, sectionFooterHeight 和 sectionHeaderHeight来设定固定的高，不要请求delegate</p>
<h3 id="2-14-选择正确的数据存储方式"><a href="#2-14-选择正确的数据存储方式" class="headerlink" title="2.14 选择正确的数据存储方式"></a>2.14 选择正确的数据存储方式</h3><p>当存储大块数据时你会怎么做？</p>
<p>你有很多选择，比如：</p>
<p>使用NSUerDefaults 使用XML, JSON, 或者 plist 使用NSCoding存档 使用类似SQLite的本地SQL数据库 使用 Core Data</p>
<p>NSUserDefaults的问题是什么？虽然它很nice也很便捷，但是它只适用于小数据，比如一些简单的布尔型的设置选项，再大点你就要考虑其它方式了</p>
<p>XML这种结构化档案呢？总体来说，你需要读取整个文件到内存里去解析，这样是很不经济的。使用SAX又是一个很麻烦的事情。</p>
<p>NSCoding？不幸的是，它也需要读写文件，所以也有以上问题。</p>
<p>在这种应用场景下，使用SQLite 或者 Core Data比较好。使用这些技术你用特定的查询语句就能只加载你需要的对象。</p>
<p>在性能层面来讲，SQLite和Core Data是很相似的。他们的不同在于具体使用方法。Core Data代表一个对象的graph model，但SQLite就是一个DBMS。Apple在一般情况下建议使用Core Data，但是如果你有理由不使用它，那么就去使用更加底层的SQLite吧。</p>
<p>如果你使用SQLite，你可以用FMDB(<a href="https://github.com/ccgus/fmdb)这个库来简化SQLite的操作，这样你就不用花很多经历了解SQLite的C" target="_blank" rel="external">https://github.com/ccgus/fmdb)这个库来简化SQLite的操作，这样你就不用花很多经历了解SQLite的C</a> API了。</p>
<h3 id="2-15-把Xib换成Storyboard吧"><a href="#2-15-把Xib换成Storyboard吧" class="headerlink" title="2.15 把Xib换成Storyboard吧"></a>2.15 把Xib换成Storyboard吧</h3><p>当你加载一个XIB的时候所有内容都被放在了内存里，包括任何图片。如果有一个不会即刻用到的view，你这就是在浪费宝贵的内存资源了。</p>
<p>Storyboards就是另一码事儿了，storyboard仅在需要时实例化一个view controller.</p>
<p>当加载XIB时，所有图片都被缓存，如果你在做OS X开发的话，声音文件也是。Apple在相关文档中的记述是：</p>
<p>当你加载一个引用了图片或者声音资源的nib时，nib加载代码会把图片和声音文件写进内存。在OS X中，图片和声音资源被缓存在named cache中以便将来用到时获取。在iOS中，仅图片资源会被存进named caches。取决于你所在的平台，使用NSImage 或UIImage 的<code>imageNamed:</code>方法来获取图片资源。</p>
<p>很明显，同样的事情也发生在storyboards中，但我并没有找到任何支持这个结论的文档。</p>
<p>另外，快速打开app是很重要的，特别是用户第一次打开它时，对app来讲，第一印象太太太重要了。</p>
<p>你能做的就是使它尽可能做更多的异步任务，比如加载远端或者数据库数据，解析数据。</p>
<p>还是那句话，避免过于庞大的XIB，因为他们是在主线程上加载的。所以尽量使用没有这个问题的Storyboards吧！</p>
<p>注意，用Xcode debug时watchdog并不运行，一定要把设备从Xcode断开来测试启动速度</p>
<h3 id="2-16-学会手动创建Autorelease-Pool"><a href="#2-16-学会手动创建Autorelease-Pool" class="headerlink" title="2.16 学会手动创建Autorelease Pool"></a>2.16 学会手动创建Autorelease Pool</h3><p>NSAutoreleasePool负责释放block中的autoreleased objects。一般情况下它会自动被UIKit调用。但是有些状况下你也需要手动去创建它。</p>
<p>假如你创建很多临时对象，你会发现内存一直在减少直到这些对象被release的时候。这是因为只有当UIKit用光了autorelease pool的时候memory才会被释放。</p>
<p>好消息是你可以在你自己的@autoreleasepool里创建临时的对象来避免这个行为：</p>
<p>NSArray <em>urls = [@”url1”,@”url2”]; for (NSURL </em>url in urls) { @autoreleasepool { NSError <em>error; NSString </em>fileContents = [NSString stringWithContentsOfURL: url encoding: NSUTF8StringEncoding error: &amp;error]; /<em> Process the string, creating and autoreleasing more objects. </em>/ } }</p>
<p>这段代码在每次遍历后释放所有autorelease对象</p>
<h3 id="2-17UIImage初始化"><a href="#2-17UIImage初始化" class="headerlink" title="2.17UIImage初始化"></a>2.17UIImage初始化</h3><p>A：imagedNamed初始化</p>
<p>B：imageWithContentsOfFile初始化</p>
<p>二者不同之处在于，imageNamed默认加载图片成功后会内存中缓存图片，这个方法用一个指定的名字在系统缓存中查找并返回一个图片对象，如果缓存中没有找到相应的图片对象，则从指定地方加载图片然后缓存对象，并返回这个图片对象</p>
<p>而imageWithContentsOfFile则仅只加载图片，不缓存</p>
<p>大量使用imageNamed方式会在不需要缓存的地方额外增加开销CPU的时间来做这件事，当应用程序需要加载一张比较大的图片并且使用一次性，那么其实是没有必要去缓存这个图片的，用imageWithContentsOfFile是最为经济的方式，这样不会因为UIImage元素较多情况下，CPU会被逐个分散在不必要缓存上浪费过多时间</p>
<p>使用场景需要编程时，应该根据实际应用场景加以区分，UIimage虽小，但使用元素较多问题会有所凸显</p>
<h3 id="2-18列表滚动的时候不要对imageview赋值"><a href="#2-18列表滚动的时候不要对imageview赋值" class="headerlink" title="2.18列表滚动的时候不要对imageview赋值"></a>2.18列表滚动的时候不要对imageview赋值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 只在NSDefaultRunLoopMode模式下显示图片</div><div class="line">    [self.imageView performSelector:@selector(setImage:) withObject:[UIImage imageNamed:@&quot;placeholder&quot;] afterDelay:3.0 inModes:@[NSDefaultRunLoopMode]];</div></pre></td></tr></table></figure>
<p>比如修改sdwebimage中的方法，如果设置imageview为滚动列表模式，则加入该方法，当列表停止滚动模式的时候才加载图片</p>
<h3 id="一些第三方的使用"><a href="#一些第三方的使用" class="headerlink" title="一些第三方的使用"></a>一些第三方的使用</h3><p> 当然有时候也会用到一些第三方，比如在使用UICollectionView和UITableView的时候，Facebook有一个框架叫AsyncDisplayKit，这个库就可以很好地提升滚动时流畅性以及图片异步下载功能（不支持sb和autoLayout，需要手动进行约束设置），AsyncDisplayKit用相关node类，替换了UIView和它的子类,而且是线程安全的。它可以异步解码图片，调整图片大小以及对图片和文本进行渲染，把这些操作都放到子线程，滑动的时候就流畅许多。我认为这个库最方便的就是实现图片异步解码。UIImage显示之前必须要先解码完成，而且解码还是同步的。尤其是在UICollectionView/UITableView 中使用 prototype cell显示大图，UIImage的同步解码在滚动的时候会有明显的卡顿。另外一个很吸引人的点是AsyncDisplayKit可以把view层次结构转成layer。因为复杂的view层次结构开销很大，如果不需要view特有的功能（例如点击事件），就可以使用AsyncDisplayKit 的layer backing特性从而获得一些额外的提升。当然这个库还处于开发阶段，还有一些地方地方有待完善，比如不支持缓存，我要使用这个库的时候一般是结合Alamofire和AlamofireImage实现图片的缓存</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[block进阶4--block的逻辑理解]]></title>
      <url>/2016/06/29/2016/%E8%BD%AC-block%E8%BF%9B%E9%98%B64-block%E7%9A%84%E9%80%BB%E8%BE%91%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>对为什么要像前边三篇文章分析的那样去实现block？<br>block是一种类似于闭包的技术，也就是将一段代码保存，然后在需要的时候再执行，这样就带来了两个问题<br><a id="more"></a></p>
<ul>
<li>我怎么保证当我需要执行这段block代码的时候，block本身是存在的</li>
<li>因为代码执行的参数需要，我如何保证当我执行的时候参数是可用的</li>
</ul>
<p>我们通过前边的学习知道，block是一个结构体，要执行的代码会被封装为一段函数，然后这个函数的指针被结构体引用，而这个函数的一个参数就是block结构体，因为我们需要从结构体中获取需要的参数<br><code>block结构体---&gt;方法-----&gt;从block结构体获取参数</code></p>
<h2 id="保证block本身存在"><a href="#保证block本身存在" class="headerlink" title="保证block本身存在"></a>保证block本身存在</h2><p>首先如果</p>
<ul>
<li>block字面量写在全局区为global block</li>
<li>block字面量没有获取任何外部变量，为global block<br>其他情况全部为statck block，global block存在于全局区，不依赖上下文，内存管理没有啥大的困扰，栈block在内存中的栈区，变量的作用域结束后，block会被废弃，同时<strong>block也会被废弃，我们需要为栈block找到一个提升生命周期的方法。<br>为了解决这个问题，block提供了copy功能，将block和</strong>block变量从栈拷贝到堆，此时这个block也就变成了堆block，这样只要引用的指针存在，block的生存就不成问题。<br>至于这个copy的功能应该说比较隐晦<h3 id="copy的调用时机"><a href="#copy的调用时机" class="headerlink" title="copy的调用时机"></a>copy的调用时机</h3>因为block是匿名的，所以当我们不创建一个block声明的话，我们不能够调用和使用这个block，所以所以我们可以对block的使用情况做如下的归纳：</li>
<li>作为变量</li>
<li>作为方法参数</li>
</ul>
<p>第一种情况下，我们总需要做一个赋值的操作，否则无法使用block，我们可以像下边这样打印一个捕获局部变量的block<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSLog(@&quot;%@&quot;, ^&#123;NSLog(@&quot;%d&quot;, c);&#125;);//结果是这是给stackblock</div></pre></td></tr></table></figure></p>
<p>所以并不是捕获了局部变量就是堆block的，需要做一个赋值操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void(^myBlock)() = ^&#123;NSLog(@&quot;%d&quot;, c);&#125;;</div><div class="line">    </div><div class="line">NSLog(@&quot;%@&quot;, myBlock);</div></pre></td></tr></table></figure></p>
<p>这个时候我们得到的就是一个mallocblock了，这是因为这个变量前边有个默认的关键字<code>__strong</code>，这个时候编译器会默认对block做copy操作的</p>
<p>第二种情况，作为一个参数被传递的时候，如果是栈block，那么默认也是做copy操作的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (MyBlcok)getaBlock&#123;</div><div class="line">    int a = 0;</div><div class="line">    return ^()&#123;NSLog(@&quot;%d&quot;, a);&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>打印该block发现是mallocblock</p>
<h2 id="保证参数可用"><a href="#保证参数可用" class="headerlink" title="保证参数可用"></a>保证参数可用</h2><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>我们使用一个参数无非做取值和赋值两种操作，而我们能否拿到这个变量一个关键点在于这个变量的作用域，本质来讲block是一个单独的作用域，全局变量穿透没有问题，但是局部变量就无法被直接使用，所以局部变量在使用的时候，是在block结构体内部又重新定义了另外一个变量，然后将值赋给这个变量，这样的结果就是，该变量首先可以被block使用了，其次生命周期与block一致了，不会存在被访问的时候释放这样的问题了，这个block内部的同名变量与局部变量其实没有任何的关系。修改该变量的值并不会改变局部变量的值。</p>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>当我们在局部变量的外边加上一个const的时候，这个变量的生命周期发生了改变，并且内存上移动到了静态变量区，但是作用域并没有变化，所以还是不能穿透block像全局变量一样被赋值，当然我们发现，这个时候我们是可以改变局部变量的值得，其实这个时候系统的做法是，将该局部变量的指针传入进去，因为加上了const首先起码生命周期一致了，能够保证不会被释放了，将指针传入进去，这个时候我们可以通过指针来访问该静态变量的内存地址进行一些修改的操作</p>
<h3 id="block"><a href="#block" class="headerlink" title="__block"></a>__block</h3><p>当然对于修改局部变量除了提升其生命周期还有一种办法就是加上__block关键字，该关键字的作用是生成了另外一个结构体，然后赋值给block，这样一方面保证了生命周期一致，又因为最后的执行函数以block为参数，所以访问该变量问题不大，也解决了作用域的问题</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(转)block进阶3--block和对象的内存管理]]></title>
      <url>/2016/06/25/2016/%E8%BD%AC-block%E8%BF%9B%E9%98%B63-block%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<p>原文链接<a href="https://www.zybuluo.com/MicroCai/note/51116" target="_blank" rel="external">https://www.zybuluo.com/MicroCai/note/51116</a><br>在上一篇文章中，我们讲了很多关于 block 和基础变量的内存管理，接着我们聊聊 block 和对象的内存管理，如 block 经常会碰到的循环引用问题等等。</p>
<p>获取对象<br><a id="more"></a><br>照例先来段代码轻松下，瞧瞧 block 是怎么获取外部对象的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/********************** capturing objects **********************/</div><div class="line">typedef void (^blk_t)(id obj);</div><div class="line">blk_t blk;</div><div class="line">- (void)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [self captureObject];</div><div class="line">    blk([[NSObject alloc] init]);</div><div class="line">    blk([[NSObject alloc] init]);</div><div class="line">    blk([[NSObject alloc] init]);</div><div class="line">&#125;</div><div class="line">- (void)captureObject</div><div class="line">&#123;</div><div class="line">    id array = [[NSMutableArray alloc] init];</div><div class="line">    blk = [^(id obj) &#123;</div><div class="line">             [array addObject:obj];</div><div class="line">             NSLog(@&quot;array count = %ld&quot;, [array count]);</div><div class="line">          &#125; copy];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>翻译后的关键代码摘录如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">/* a struct for the Block and some functions */</div><div class="line">struct __main_block_impl_0</div><div class="line">&#123;</div><div class="line">    struct __block_impl impl;</div><div class="line">    struct __main_block_desc_0 *Desc;</div><div class="line">    id __strong array;</div><div class="line">    __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, id __strong _array, int flags=0) : array(_array)</div><div class="line">    &#123;</div><div class="line">        impl.isa = &amp;_NSConcreteStackBlock; </div><div class="line">        impl.Flags = flags;</div><div class="line">        impl.FuncPtr = fp;</div><div class="line">        Desc = desc;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself, id obj)</div><div class="line">&#123;</div><div class="line">    id __strong array = __cself-&gt;array;</div><div class="line">    [array addObject:obj];</div><div class="line">    NSLog(@&quot;array count = %ld&quot;, [array count]);</div><div class="line">&#125;</div><div class="line">static void __main_block_copy_0(struct __main_block_impl_0 *dst, __main_block_impl_0 *src)</div><div class="line">&#123;</div><div class="line">    _Block_object_assign(&amp;dst-&gt;array, src-&gt;array, BLOCK_FIELD_IS_OBJECT);</div><div class="line">&#125;</div><div class="line">static void __main_block_dispose_0(struct __main_block_impl_0 *src)</div><div class="line">&#123;</div><div class="line">    _Block_object_dispose(src-&gt;array, BLOCK_FIELD_IS_OBJECT);</div><div class="line">&#125;</div><div class="line">struct static struct __main_block_desc_0</div><div class="line">&#123;</div><div class="line">    unsigned long reserved;</div><div class="line">    unsigned long Block_size;</div><div class="line">    void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</div><div class="line">    void (*dispose)(struct __main_block_impl_0*);</div><div class="line">&#125; __main_block_desc_0_DATA = &#123;  0,</div><div class="line">                                sizeof(struct __main_block_impl_0),</div><div class="line">                                __main_block_copy_0,</div><div class="line">                                __main_block_dispose_0</div><div class="line">                             &#125;;</div><div class="line">/* Block literal and executing the Block */</div><div class="line">blk_t blk;</div><div class="line">&#123;</div><div class="line">    id __strong array = [[NSMutableArray alloc] init];</div><div class="line">    blk = &amp;__main_block_impl_0(__main_block_func_0, </div><div class="line">                               &amp;__main_block_desc_0_DATA, </div><div class="line">                               array, </div><div class="line">                               0x22000000);</div><div class="line">    blk = [blk copy];</div><div class="line">&#125;</div><div class="line">(*blk-&gt;impl.FuncPtr)(blk, [[NSObject alloc] init]);</div><div class="line">(*blk-&gt;impl.FuncPtr)(blk, [[NSObject alloc] init]);</div><div class="line">(*blk-&gt;impl.FuncPtr)(blk, [[NSObject alloc] init]);</div></pre></td></tr></table></figure>
<p>在本例中，当变量变量作用域结束时，array 被废弃，强引用失效，NSMutableArray 类的实例对象会被释放并废弃。在这危难关头，block 及时调用了 copy 方法，在 _Block_object_assign 中，将 array 赋值给 block 成员变量并持有。所以上面代码可以正常运行，打印出来的 array count 依次递增。</p>
<p>总结代码可正常运行的原因关键就在于 block 通过调用 copy 方法，持有了 __strong 修饰的外部变量，使得外部对象在超出其作用域后得以继续存活，代码正常执行。</p>
<p>在以下情形中， block 会从栈拷贝到堆：</p>
<ul>
<li>当 block 调用 copy 方法时，如果 block 在栈上，会被拷贝到堆上；</li>
<li>当 block 作为函数返回值返回时，编译器自动将 block 作为 _Block_copy 函数，效果等同于 block 直接调用 copy 方法；</li>
<li>当 block 被赋值给 __strong id 类型的对象或 block 的成员变量时，编译器自动将 block 作为 _Block_copy 函数，效果等同于 block 直接调用 copy 方法；</li>
<li>当 block 作为参数被传入方法名带有 usingBlock 的 Cocoa Framework 方法或 GCD 的 API 时。这些方法会在内部对传递进来的 block 调用 copy 或 _Block_copy 进行拷贝;<br>其实后三种情况在上篇文章block的自动拷贝已经做过说明<br>除此之外，都需要手动调用。</li>
</ul>
<blockquote>
<p>延伸阅读：Objective-C 结构体中的 __strong 成员变量</p>
<p>注意到 <strong>main_block_impl_0 结构体有什么异常没？在 C 结构体中出现了 </strong>strong 关键字修饰的变量。</p>
<p>通常情况下， Objective-C 的编译器因为无法检测 C 结构体初始化和释放的时间，不能进行有效的内存管理，所以 Objective-C 的 C 结构体成员是不能用 <strong>strong、</strong>weak 等等这类关键字修饰。然而 runtime 库是可以在运行时检测到 block 的内存变化，如 block 何时从栈拷贝到堆，何时从堆上释放等等，所以就会出现上述结构体成员变量用 __strong 修饰的情况。</p>
</blockquote>
<h2 id="block-变量和对象"><a href="#block-变量和对象" class="headerlink" title="__block 变量和对象"></a>__block 变量和对象</h2><p>__block 说明符可以修饰任何类型的自动变量。下面让我们再看个小例子，啊，愉快的代码时间又到啦。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/******* block 修饰对象 *******/</div><div class="line">__block id obj = [[NSObject alloc] init];</div></pre></td></tr></table></figure>
<p>ARC 下，对象所有权修饰符默认为 __strong，即</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">__block id __strong obj = [[NSObject alloc] init];</div><div class="line">/******* block 修饰对象转换后的代码 *******/</div><div class="line">/* struct for __block variable */</div><div class="line">struct __Block_byref_obj_0 </div><div class="line">&#123;</div><div class="line">    void *__isa;</div><div class="line">    __Block_byref_obj_0 *__forwarding;</div><div class="line">    int __flags;</div><div class="line">    int __size;</div><div class="line">    void (*__Block_byref_id_object_copy)(void*, void*);</div><div class="line">    void (*__Block_byref_id_object_dispose)(void*); </div><div class="line">    __strong id obj;</div><div class="line">&#125;;</div><div class="line">static void __Block_byref_id_object_copy_131(void *dst, void *src) </div><div class="line">&#123;</div><div class="line">    _Block_object_assign((char*)dst + 40, *(void * *) ((char*)src + 40), 131);</div><div class="line">&#125;</div><div class="line">static void __Block_byref_id_object_dispose_131(void *src) </div><div class="line">&#123;</div><div class="line">    _Block_object_dispose(*(void * *) ((char*)src + 40), 131);</div><div class="line">&#125;</div><div class="line">/* __block variable declaration */</div><div class="line">__Block_byref_obj_0 obj = &#123; 0,</div><div class="line">                            &amp;obj,</div><div class="line">                            0x2000000, </div><div class="line">                            sizeof(__Block_byref_obj_0), </div><div class="line">                            __Block_byref_id_object_copy_131, </div><div class="line">                            __Block_byref_id_object_dispose_131,</div><div class="line">                            [[NSObject alloc] init]</div><div class="line">                           &#125;;</div></pre></td></tr></table></figure>
<p><strong>block id </strong>strong obj 的作用和 id <strong>strong obj 的作用十分类似。当 </strong>block id <strong>strong obj 从栈上拷贝到堆上时，_Block_object_assign 被调用，block 持有 obj；当 </strong>block id __strong obj 从堆上被废弃时，_Block_object_dispose 被调用用以释放此对象，block 引用消失。</p>
<p>所以，只要是堆上的 <strong>strong 修饰符修饰的 </strong>block 对象类型的变量，和 block 内获取到的 __strong 修饰符修饰的对象类型的变量，编译器都能对它们的内存进行适当的管理。</p>
<p>如果上面的 <strong>strong 换成 </strong>weak，结果会怎样呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/********************** capturing __weak objects **********************/</div><div class="line">typedef void (^blk_t)(id obj);</div><div class="line">blk_t blk;</div><div class="line">- (void)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [self captureObject];</div><div class="line">    blk([[NSObject alloc] init]);</div><div class="line">    blk([[NSObject alloc] init]);</div><div class="line">    blk([[NSObject alloc] init]);</div><div class="line">&#125;</div><div class="line">- (void)captureObject</div><div class="line">&#123;</div><div class="line">    id array = [[NSMutableArray alloc] init]; </div><div class="line">    id __weak array2 = array;</div><div class="line">    blk = [^(id obj) &#123;</div><div class="line">             [array2 addObject:obj];</div><div class="line">             NSLog(@&quot;array2 count = %ld&quot;, [array2 count]);</div><div class="line">          &#125; copy];</div><div class="line">&#125;</div><div class="line">结果是：</div><div class="line"></div><div class="line">array2 count = 0</div><div class="line">array2 count = 0</div><div class="line">array2 count = 0</div></pre></td></tr></table></figure>
<p>原因很简单，array2 是弱引用，当变量作用域结束，array 所指向的对象内存被释放，array2 指向 nil，向 nil 对象发送 count 消息就返回结果 0 了。</p>
<p>如果 <strong>weak 再改成 </strong>unsafe_unretained 呢？__unsafe_unretained 修饰的对象变量指针就相当于一个普通指针。使用这个修饰符有点需要注意的地方是，当指针所指向的对象内存被释放时，指针变量不会被置为 nil。所以当使用这个修饰符时，一定要注意不要通过悬挂指针（指向被废弃内存的指针）来访问已经被废弃的对象内存，否则程序就会崩溃。</p>
<p>如果 <strong>unsafe_unretained 再改成 </strong>autoreleasing 会怎样呢？会报错，编译器并不允许你这么干！如果你这么写</p>
<p><code>__block id __autoreleasing obj = [[NSObject alloc] init];</code><br>编译器就会报下面的错误，意思就是 <strong>block 和 </strong>autoreleasing 不能同时使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error: __block variables cannot have __autoreleasing ownership __block id __autoreleasing obj = [[NSObject alloc] init];</div></pre></td></tr></table></figure>
<h2 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h2><p>千辛万苦，重头戏终于来了。block 如果使用不小心，就容易出现循环引用，导致内存泄露。到底哪里泄露了呢？通过前面的学习，各位童鞋应该有个底了，下面就让我们一起进入这泄露地区瞧瞧，哪儿出了问题！</p>
<p>愉快的代码时间到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// ARC enabled</div><div class="line">/************** MyObject Class **************/</div><div class="line">typedef void (^blk_t)(void);</div><div class="line">@interface MyObject : NSObject</div><div class="line">&#123;</div><div class="line">    blk_t blk_;</div><div class="line">&#125; </div><div class="line">@end</div><div class="line">@implementation MyObject</div><div class="line">- (id)init</div><div class="line">&#123;</div><div class="line">    self = [super init];</div><div class="line">    blk_ = ^&#123;NSLog(@&quot;self = %@&quot;, self);&#125;; </div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line">- (void)dealloc</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;dealloc&quot;);</div><div class="line">&#125; </div><div class="line">@end</div><div class="line">/************** main function **************/</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    id myObject = [[MyObject alloc] init]; </div><div class="line">    NSLog(@&quot;%@&quot;, myObject);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于 self 是 __strong 修饰，在 ARC 下，当编译器自动将代码中的 block 从栈拷贝到堆时，block 会强引用和持有 self，而 self 恰好也强引用和持有了 block，就造成了传说中的循环引用。</p>
<p><img src="http://i1.piimg.com/567571/e54d448697dabc19.png" alt=""></p>
<p>由于循环引用的存在，造成在 main() 函数结束时，内存仍然无法释放，即内存泄露。编译器也会给出警告信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">warning: capturing &apos;self&apos; strongly in this block is likely to lead to a retain cycle [-Warc-retain-cycles] </div><div class="line">blk_ = ^&#123;NSLog(@&quot;self = %@&quot;, self);&#125;;</div><div class="line"></div><div class="line">note: Block will be retained by an object strongly retained by the captured object </div><div class="line">blk_ = ^&#123;NSLog(@&quot;self = %@&quot;, self);&#125;;</div></pre></td></tr></table></figure></p>
<p>为了避免这种情况发生，可以在变量声明时用 <strong>weak 修饰符修饰变量 self，让 block 不强引用 self，从而破除循环。iOS4 和 Snow Leopard 由于对 weak 的支持不够完全，可以用 </strong>unsafe_unretained 代替。<br>ƒ<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (id)init</div><div class="line">&#123;</div><div class="line">    self = [super init];</div><div class="line">    id __weak tmp = self;</div><div class="line">    blk_ = ^&#123;NSLog(@&quot;self = %@&quot;, tmp);&#125;; </div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">``` </div><div class="line"></div><div class="line">![](http://i1.piimg.com/567571/b1057b9ff703d7cd.png)</div><div class="line"></div><div class="line">再看一个例子</div></pre></td></tr></table></figure></p>
<p>@interface MyObject : NSObject<br>{<br>    blk<em>t blk</em>;<br>    id obj_;<br>}<br>@end<br>@implementation MyObject </p>
<ul>
<li>(id)init<br>{<br>  self = [super init];<br>  blk<em> = ^{ NSLog(@”obj</em> = %@”, obj_); };<br>  return self;<br>}<br>…<br>…<br>@end<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">上面的例子中，虽然没有直接使用 self，却也存在循环引用的问题。因为对于编译器来说，obj_ 就相当于 self-&gt;obj_，所以上面的代码就会变成</div><div class="line"></div><div class="line">`blk_ = ^&#123; NSLog(@&quot;obj_ = %@&quot;, self-&gt;obj_); &#125;;`</div><div class="line">所以这个例子只要用 __weak，在 init 方法里面加一行即可</div><div class="line"></div><div class="line">`id __weak obj = obj_;`</div><div class="line">破解循环引用还有一招，使用 __block 修饰对象，在 block 内将对象置为 nil 即可，如下</div></pre></td></tr></table></figure>
</li>
</ul>
<p>typedef void (^blk_t)(void);<br>@interface MyObject : NSObject<br>{<br>    blk<em>t blk</em>;<br>}<br>@end<br>@implementation MyObject </p>
<ul>
<li>(id)init<br>{<br>  self = [super init];<br>  _<em>block id tmp = self;<br>  blk</em> = ^{ <pre><code>    NSLog(@&quot;self = %@&quot;, tmp);
    tmp = nil; 
};
</code></pre>  return self;<br>}</li>
<li>(void)execBlock<br>{<br>  blk_();<br>}</li>
<li>(void)dealloc<br>{<br>  NSLog(@”dealloc”);<br>}<br>@end<br>int main()<br>{<br>  id object = [[MyObject alloc] init];<br>  [object execBlock];<br>  return 0;<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">这个例子挺有意思的，如果执行 execBlock 方法，就没有循环引用，如果不执行就有循环引用，挺值得玩味的。一方面，使用 __block 挺危险的，万一代码中不执行 block ，就造成了循环引用，而且编译器还没法检查出来；另一方面，使用 __block 可以让我们通过 __block 变量去控制对象的生命周期，而且有可能在一些非常老旧的 MRC 代码中，由于不支持 __weak，我们可以使用此方法来代替 __unsafe_unretained，从而避免悬挂指针的问题。</div><div class="line"></div><div class="line">还有个值得一提的时，在 MRC 下，使用 __block 说明符也可以避免循环引用。因为当 block 从栈拷贝到堆时，__block 对象类型的变量不会被 retain，没有 __block 说明符的对象类型的变量则会被 retian。正是由于 __block 在 ARC 和 MRC 下的巨大差异，我们在写代码时一定要区分清楚到底是 ARC 还是 MRC。</div><div class="line"></div><div class="line">&gt;尽管 ARC 已经如此普及，我们可能已经可以不用去管 MRC 的东西，但要有点一定要明白，ARC 和 MRC 都是基于引用计数的内存管理，其本质上是一个东西，只不过 ARC 在编译期自动化的做了内存引用计数的管理，使得系统可以在适当的时候保留内存，适当的时候释放内存。</div><div class="line">循环引用到此为止，东西并不多。如果明白了之前的知识点，就会了解循环引用不过是前面知识点的自然延伸点罢了。</div><div class="line"></div><div class="line">## Copy 和 Release</div><div class="line"></div><div class="line">在 ARC 下，有时需要手动拷贝和释放 block。在 MRC 下更是如此，可以直接用 copy 和 release 来拷贝和释放</div></pre></td></tr></table></figure>
</li>
</ul>
<p>void (^blk_on_heap)(void) = [blk_on_stack copy];<br>[blk_on_heap release];<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">拷贝到堆后，就可以 用 retain 持有 block</div></pre></td></tr></table></figure></p>
<p>[blk_on_heap retain];<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">然而如果 block 在栈上，使用 retain 是毫无效果的，因此推荐使用 copy 方法来持有 block。</div><div class="line"></div><div class="line">block 是 C 语言的扩展，所以可以在 C 中使用 block 的语法。比如，在上面的例子中，可以直接使用 Block_copy 和 Block_release 函数来代替 copy 和 release 方法</div></pre></td></tr></table></figure></p>
<p>void (^blk_on_heap)(void) = Block_copy(blk_on_stack);<br>Block_release(blk_on_heap);<br>```<br>Block_copy 的作用相当于之前看到过的 _Block_copy 函数，而且 Objective-C runtime 库在运行时拷贝 block 用的就是这个函数。同理，释放 block 时，runtime 调用了 Block_release 函数。</p>
<p>最后这里有一篇总结 block 的文章的很不错，推荐大家看看：<a href="http://tanqisen.github.io/blog/2013/04/19/gcd-block-cycle-retain/" target="_blank" rel="external">http://tanqisen.github.io/blog/2013/04/19/gcd-block-cycle-retain/</a></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(转)block进阶2--block和变量内存管理]]></title>
      <url>/2016/06/25/2016/%E8%BD%AC-block%E8%BF%9B%E9%98%B62-block%E5%92%8C%E5%8F%98%E9%87%8F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<p>了解了 block的实现，我们接着来聊聊 block 和变量的内存管理。本文将介绍可写变量、block的内存段、__block变量的内存段等内容，看完本文会对 block 和变量的内存管理有更加清晰的认识。<br><a id="more"></a><br>上篇文章举了个例子，在 block 内获取了一个外部的局部变量，可以读取，但无法进行写入的修改操作。在 C 语言中有三种类型的变量，可在 block 内进行读写操作</p>
<blockquote>
<ul>
<li>全局变量</li>
<li>全局静态变量</li>
<li>静态变量</li>
</ul>
</blockquote>
<p>全局变量 和 全局静态变量 由于作用域在全局，所以在 block 内访问和读写这两类变量和普通函数没什么区别，而 静态变量 作用域在 block 之外，是怎么对它进行读写呢？通过 clang 工具，我们发现原来 静态变量 是通过指针传递，将变量传递到 block 内，所以可以修改变量值。而上篇文章中的外部变量是通过值传递，自然没法对获取到的外部变量进行修改。由此，可以给我们一个启示，当我们需要修改外部变量时，是不是也可以像 静态变量 这样通过指针来修改外部变量的值呢？</p>
<p>Apple 早就为我们准备了这么一个东西 —— “__block”</p>
<h2 id="block-说明符"><a href="#block-说明符" class="headerlink" title="__block 说明符"></a>__block 说明符</h2><p>按照惯例，重写一小段代码看看 __block 的真身<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/************* 使用 __block 的源码 *************/</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    __block int intValue = 0;</div><div class="line">    void (^blk)(void) = ^&#123;</div><div class="line">        intValue = 1;</div><div class="line">    &#125;;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">/************* 使用 clang 翻译后如下 *************/</div><div class="line">struct __block_impl</div><div class="line">&#123;</div><div class="line">    void *isa;</div><div class="line">    int Flags;</div><div class="line">    int Reserved;</div><div class="line">    void *FuncPtr;</div><div class="line">&#125;;</div><div class="line">struct __Block_byref_intValue_0</div><div class="line">&#123;</div><div class="line">    void *__isa;</div><div class="line">    __Block_byref_intValue_0 *__forwarding;</div><div class="line">    int __flags;</div><div class="line">    int __size;</div><div class="line">    int intValue;</div><div class="line">&#125;;</div><div class="line">struct __main_block_impl_0</div><div class="line">&#123;</div><div class="line">    struct __block_impl impl;</div><div class="line">    struct __main_block_desc_0* Desc;</div><div class="line">    __Block_byref_intValue_0 *intValue; // by ref</div><div class="line">    __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_intValue_0 *_intValue, int flags=0) : intValue(_intValue-&gt;__forwarding)</div><div class="line">    &#123;</div><div class="line">        impl.isa = &amp;_NSConcreteStackBlock;</div><div class="line">        impl.Flags = flags;</div><div class="line">        impl.FuncPtr = fp;</div><div class="line">        Desc = desc;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself)</div><div class="line">&#123;</div><div class="line">    __Block_byref_intValue_0 *intValue = __cself-&gt;intValue; // bound by ref</div><div class="line">    (intValue-&gt;__forwarding-&gt;intValue) = 1;</div><div class="line">&#125;</div><div class="line">static void __main_block_copy_0(struct __main_block_impl_0 *dst, struct __main_block_impl_0 *src)</div><div class="line">&#123;</div><div class="line">    _Block_object_assign((void*)&amp;dst-&gt;intValue, (void*)src-&gt;intValue, 8/*BLOCK_FIELD_IS_BYREF*/);</div><div class="line">&#125;</div><div class="line">static void __main_block_dispose_0(struct __main_block_impl_0 *src)</div><div class="line">&#123;</div><div class="line">    _Block_object_dispose((void*)src-&gt;intValue, 8/*BLOCK_FIELD_IS_BYREF*/);</div><div class="line">&#125;</div><div class="line">static struct __main_block_desc_0</div><div class="line">&#123;</div><div class="line">    size_t reserved;</div><div class="line">    size_t Block_size;</div><div class="line">    void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</div><div class="line">    void (*dispose)(struct __main_block_impl_0*);</div><div class="line">&#125; __main_block_desc_0_DATA = &#123;  0, </div><div class="line">                                sizeof(struct __main_block_impl_0), </div><div class="line">                                __main_block_copy_0, </div><div class="line">                                __main_block_dispose_0</div><div class="line">                             &#125;;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    __attribute__((__blocks__(byref))) __Block_byref_intValue_0 \</div><div class="line">    intValue = </div><div class="line">    &#123;</div><div class="line">        (void*)0,</div><div class="line">        (__Block_byref_intValue_0 *)&amp;intValue, </div><div class="line">        0, </div><div class="line">        sizeof(__Block_byref_intValue_0), </div><div class="line">        0</div><div class="line">    &#125;;</div><div class="line">    void (*blk)(void) = (void (*)()) &amp;__main_block_impl_0   \</div><div class="line">                (</div><div class="line">                    (void *)__main_block_func_0,            \</div><div class="line">                    &amp;__main_block_desc_0_DATA,              \</div><div class="line">                    (__Block_byref_intValue_0 *)&amp;intValue,  \</div><div class="line">                    570425344                               \</div><div class="line">                );</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在加了 __block 之后，代码量增加了不少，仔细查看，其实只是比原来多了</p>
<blockquote>
<p>-<strong>Block_byref_intValue_0 结构体：用于封装 </strong>block 修饰的外部变量。</p>
<ul>
<li>_Block_object_assign 函数：当 block 从栈拷贝到堆时，调用此函数。</li>
<li>_Block_object_dispose 函数：当 block 从堆内存释放时，调用此函数。</li>
</ul>
</blockquote>
<p>OC源码中的 <strong>block intValue 翻译后变成了 </strong>Block_byref_intValue_0 结构体指针变量 intValue，通过指针传递到 block 内，这与前面说的 静态变量 的指针传递是一致的。除此之外，整体的执行流程与不加 <strong>block 基本一致，不再赘述。但 </strong>Block_byref_intValue_0 这个结构体需特别注意下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 存储 __block 外部变量的结构体</div><div class="line">struct __Block_byref_intValue_0</div><div class="line">&#123;</div><div class="line">    void *__isa; // 对象指针</div><div class="line">    __Block_byref_intValue_0 *__forwarding; // 指向自己的指针</div><div class="line">    int __flags; // 标志位变量</div><div class="line">    int __size; // 结构体大小</div><div class="line">    int intValue; // 外部变量</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><img src="http://i4.piimg.com/567571/edba9eda9e760d13.png" alt=""><br>在已有结构体指针指向 <code>__Block_byref_intValue_0</code> 时，结构体里面还多了个 __forwarding 指向自己的指针变量，难道不显得多余吗？一点也不，本文后面会阐述。</p>
<h2 id="block-的内存管理"><a href="#block-的内存管理" class="headerlink" title="block 的内存管理"></a>block 的内存管理</h2><p>在前文中，已经提到了 block 的三种类型 <code>NSConcreteGlobalBlock</code>、<code>_NSConcreteStackBlock</code>、<code>_NSConcreteMallocBlock</code>，见名知意，可以看出三种 block 在内存中的分布<br><img src="http://i4.piimg.com/567571/ab4b00f9b39f146a.png" alt=""></p>
<h3 id="NSConcreteGlobalBlock"><a href="#NSConcreteGlobalBlock" class="headerlink" title="_NSConcreteGlobalBlock"></a>_NSConcreteGlobalBlock</h3><blockquote>
<ul>
<li>1、当 block 字面量写在全局作用域时，即为 global block； </li>
<li>2、当 block 字面量不获取任何外部变量时，即为 global block；</li>
</ul>
</blockquote>
<p>除了上述描述的两种情况，其他形式创建的 block 均为 stack block。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 下面 block 虽然定义在 for 循环内，但符合第二种情况，所以也是 global block</div><div class="line">typedef int (^blk_t)(int);</div><div class="line">for (int rate = 0; rate &lt; 10; ++rate) </div><div class="line">&#123;</div><div class="line">    blk_t blk = ^(int count)&#123;return rate * count;&#125;; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>_NSConcreteGlobalBlock 类型的 block 处于内存的 ROData 段，此处没有局部变量的骚扰，运行不依赖上下文，内存管理也简单的多。</p>
<h3 id="NSConcreteStackBlock"><a href="#NSConcreteStackBlock" class="headerlink" title="_NSConcreteStackBlock"></a>_NSConcreteStackBlock</h3><p>_NSConcreteStackBlock 类型的 block 处于内存的栈区。global block 由于处在 data 段，可以通过指针安全访问，但 stack block 处在内存栈区，如果其变量作用域结束，这个 block 就被废弃，block 上的 __block 变量也同样会被废弃。<br><img src="http://i4.piimg.com/567571/eb42780701d9dfdd.png" alt=""></p>
<p>为了解决这个问题，block 提供了 copy 的功能，将 block 和 __block 变量从栈拷贝到堆，就是下面要说的 _NSConcreteMallocBlock。</p>
<h3 id="NSConcreteMallocBlock"><a href="#NSConcreteMallocBlock" class="headerlink" title="_NSConcreteMallocBlock"></a>_NSConcreteMallocBlock</h3><p>当 block 从栈拷贝到堆后，当栈上变量作用域结束时，仍然可以继续使用 block<br><img src="http://i4.piimg.com/567571/a4cf5bfee64c0faf.png" alt=""><br>此时，堆上的 block 类型为 _NSConcreteMallocBlock，所以会将 _NSConcreteMallocBlock 写入 isa</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">impl.isa = &amp;_NSConcreteMallocBlock;</div></pre></td></tr></table></figure>
<p>如果你细心的观察上面的转换后的代码，会发现访问结构体 <strong>Block_byref_intValue_0 内部的成员变量都是通过访问 </strong>forwarding 指针完成的。为了保证能正确访问栈上的 <strong>block 变量，进行 copy 操作时，会将栈上的 </strong>forwarding 指针指向了堆上的 block 结构体实例。</p>
<h2 id="block-的自动拷贝和手动拷贝"><a href="#block-的自动拷贝和手动拷贝" class="headerlink" title="block 的自动拷贝和手动拷贝"></a>block 的自动拷贝和手动拷贝</h2><p>在开启 ARC 时，大部分情况下编译器通常会将创建在栈上的 block 自动拷贝到堆上，只有当</p>
<blockquote>
<p>block 作为方法或函数的参数传递时，编译器不会自动调用 copy 方法；</p>
</blockquote>
<p>但方法/函数在内部已经实现了一份拷贝了 block 参数的代码，或者如果编译器自动拷贝，那么调用者就不需再手动拷贝，比如：</p>
<blockquote>
<ul>
<li>当 block 作为函数返回值返回时，编译器自动将 block 作为 _Block_copy 函数，效果等同于 block 直接调用 copy 方法；</li>
<li>当 block 被赋值给 __strong id 类型的对象或 block 的成员变量时，编译器自动将 block 作为 _Block_copy 函数，效果等同于 block 直接调用 copy 方法；</li>
<li>当 block 作为参数被传入方法名带有 usingBlock 的 Cocoa Framework 方法或 GCD 的 API 时。这些方法会在内部对传递进来的 block 调用 copy 或 _Block_copy 进行拷贝;</li>
</ul>
</blockquote>
<p>让我们看个 block 自动拷贝的例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/************ ARC下编译器自动拷贝block ************/</div><div class="line">typedef int (^blk_t)(int);</div><div class="line">blk_t func(int rate)</div><div class="line">&#123;</div><div class="line">    return ^(int count)&#123;return rate * count;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的 block 获取了外部变量，所以是创建在栈上，当 func 函数返回给调用者时，脱离了局部变量 rate 的作用范围，如果调用者使用这个 block 就会出问题。那 ARC 开启的情况呢？运行这个 block 一切正常。和我们的预期结果不一样，ARC 到底给 block 施了什么魔法？我们将上面的代码翻译下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">blk_t func(int rate)</div><div class="line">&#123;</div><div class="line">    blk_t tmp = &amp;__func_block_impl_0(__func_block_func_0, &amp;__func_block_desc_0_DATA, rate);</div><div class="line">    tmp = objc_retainBlock(tmp);</div><div class="line">    return objc_autoreleaseReturnValue(tmp); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>转换后出现两个新函数 objc_retainBlock、objc_autoreleaseReturnValue。如果你看过runtime 库（点此下载） ，在 runtime/objc-arr.mm 文件中就有这两个函数的实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/*********** objc_retainBlock() 的实现 ***********/</div><div class="line">id objc_retainBlock(id x) </div><div class="line">&#123;</div><div class="line">#if ARR_LOGGING</div><div class="line">    objc_arr_log(&quot;objc_retain_block&quot;, x);</div><div class="line">    ++CompilerGenerated.blockCopies;</div><div class="line">#endif</div><div class="line">    return (id)_Block_copy(x);</div><div class="line">&#125;</div><div class="line">// Create a heap based copy of a Block or simply add a reference to an existing one.</div><div class="line">// This must be paired with Block_release to recover memory, even when running</div><div class="line">// under Objective-C Garbage Collection.</div><div class="line">BLOCK_EXPORT void *_Block_copy(const void *aBlock)</div><div class="line">    __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_2);</div></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    /*********** objc_autoreleaseReturnValue() 的实现 ***********/</div><div class="line">id objc_autoreleaseReturnValue(id obj)</div><div class="line">&#123;</div><div class="line">#if SUPPORT_RETURN_AUTORELEASE</div><div class="line">    assert(_pthread_getspecific_direct(AUTORELEASE_POOL_RECLAIM_KEY) == NULL);</div><div class="line">    if (callerAcceptsFastAutorelease(__builtin_return_address(0))) &#123;</div><div class="line">        _pthread_setspecific_direct(AUTORELEASE_POOL_RECLAIM_KEY, obj);</div><div class="line">        return obj;</div><div class="line">    &#125;</div><div class="line">#endif</div><div class="line">    return objc_autorelease(obj);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面的代码和注释，意思就很明显了，由于 block 字面量是创建在栈内存，通过 objc_retainBlock() 函数拷贝到堆内存，让 tmp 重新指向堆上的 block，然后将 tmp 所指的堆上的 block 作为一个 Objective-C 对象放入 autoreleasepool 里面，从而保证了返回后的 block 仍然可以正确执行。</p>
<p>看完了 block 的自动拷贝，那么看看在 ARC 下需要手动拷贝 block 的例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/************ ARC下编译器手动拷贝block ************/</div><div class="line">- (id)getBlockArray</div><div class="line">&#123;</div><div class="line">    int val = 10;</div><div class="line">    return [[NSArray alloc] initWithObjects: </div><div class="line">                            ^&#123;NSLog(@&quot;blk0:%d&quot;, val);&#125;, </div><div class="line">                            ^&#123;NSLog(@&quot;blk1:%d&quot;, val);&#125;, nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个例子就了然，返回的数组里面的 block 是不可用的，需要再手动拷贝一次才可以，这个较为简单，就不作过多解释。</p>
<p>关于 block 的拷贝操作可以用一张表总结下</p>
<p><img src="http://i4.piimg.com/567571/82a9a9d7492f431e.png" alt=""></p>
<p>block 拷贝的讲解就到此为止，有兴趣可以了解下 block 的多次拷贝。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">block的多次拷贝：下面的例子在 ARC 下并不会产生内存泄露哦</div><div class="line"></div><div class="line">// block 多次拷贝源码</div><div class="line">blk = [[[[blk copy] copy] copy] copy]; </div><div class="line">// 翻译后的代码</div><div class="line">&#123;</div><div class="line">    blk_t tmp = [blk copy];</div><div class="line">    blk = tmp; </div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    blk_t tmp = [blk copy];</div><div class="line">    blk = tmp; </div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    blk_t tmp = [blk copy];</div><div class="line">    blk = tmp; </div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    blk_t tmp = [blk copy];</div><div class="line">    blk = tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="block-变量的内存管理"><a href="#block-变量的内存管理" class="headerlink" title="__block 变量的内存管理"></a>__block 变量的内存管理</h2><p>上面啰嗦一堆，这小节主要用图说话，必要时加文字说明。</p>
<ul>
<li>当 block 从栈内存被拷贝到堆内存时，<strong>block 变量的变化如下图。需要说明的是，当栈上的 block 被拷贝到堆上，堆上的 block 再次被拷贝时，对 </strong>block 变量已经没有影响了。</li>
</ul>
<p><img src="http://i4.piimg.com/567571/c6c5e220ca09511e.png" alt=""></p>
<ul>
<li><p>当多个 block 获取同一个 __block 变量，block 从栈被拷贝到堆时<br><img src="http://i4.piimg.com/567571/5e7b1f767a1526f8.png" alt=""></p>
</li>
<li><p>当 block 被废弃时，__block 变量被释放<br><img src="http://i4.piimg.com/567571/f6c64412dfaed0f4.png" alt=""></p>
</li>
<li><p>__forwarding </p>
</li>
</ul>
<p>前文已经说过，当 block 从栈被拷贝到堆时，<strong>forwarding 指针变量也会指向堆区的结构体。但是为什么要这么做呢？为什么要让原本指向栈区的结构体的指针，去指向堆区的结构体呢？看起来匪夷所思，实则原因很简单，要从 </strong>forwarding 产生的缘由说起。想想起初为什么要给 block 添加 copy 的功能，就是因为 block 获取了局部变量，当要在其他地方（超出局部变量作用范围）使用这个 block 的时候，由于访问局部变量异常，导致程序崩溃。为了解决这个问题，就给 block 添加了 copy 功能。在将 block 拷贝到堆上的同时，将 <strong>forwarding 指针指向堆上结构体。后面如果要想使用 </strong>block 变量，只要通过 __forwarding 访问堆上变量，就不会出现程序崩溃了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/*************** __forwarding 的作用 ***************/</div><div class="line">//猜猜下面代码的打印结果？</div><div class="line">&#123;</div><div class="line">    __block int val = 0;</div><div class="line">    void (^blk)(void) = [^&#123;++val;&#125; copy];</div><div class="line">    ++val;</div><div class="line">    blk();</div><div class="line">    NSLog(@&quot;%d&quot;, val);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一定有很多人会猜 1，其实打印 2。原因很简单，当栈上的 block 被拷贝到堆上时，栈上的 <strong>forwarding 也会指向堆上的 </strong>block 变量的结构体。</p>
<p>上面的代码中 ^{++val;} 和 ++val; 都会被转换成 ++(val.__forwarding-&gt;val);，堆上的 val 被加了两次，最后打印堆上的 val 为 2。</p>
<p><img src="http://i4.piimg.com/567571/ae21fcf6a92ab9ee.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python基础知识-文件操作]]></title>
      <url>/2016/04/16/2017/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>python中对文件、文件夹（文件操作函数）的操作需要涉及到os模块和shutil模块。<br><a id="more"></a></p>
<ul>
<li>得到当前工作目录，即当前Python脚本工作的目录路径: os.getcwd()</li>
<li>返回指定目录下的所有文件和目录名:os.listdir()</li>
<li>函数用来删除一个文件:os.remove()</li>
<li>删除多个目录：os.removedirs（r“c：\python”）</li>
<li>检验给出的路径是否是一个文件：os.path.isfile()</li>
<li>检验给出的路径是否是一个目录：os.path.isdir()</li>
<li>判断是否是绝对路径：os.path.isabs()</li>
<li>检验给出的路径是否真地存:os.path.exists()</li>
<li><p>返回一个路径的目录名和文件名:os.path.split()     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">os.path.split(&apos;/home/swaroop/byte/code/poem.txt&apos;) 结果：(&apos;/home/swaroop/byte/code&apos;, &apos;poem.txt&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p>分离扩展名：os.path.splitext()</p>
</li>
<li>获取路径名：os.path.dirname()</li>
<li>获取文件名：os.path.basename()</li>
<li>运行shell命令: os.system()</li>
<li>读取和设置环境变量:os.getenv() 与os.putenv()</li>
<li>给出当前平台使用的行终止符:os.linesep    Windows使用’\r\n’，Linux使用’\n’而Mac使用’\r’</li>
<li>指示你正在使用的平台：os.name       对于Windows，它是’nt’，而对于Linux/Unix用户，它是’posix’</li>
<li>重命名：os.rename（old， new）</li>
<li>创建多级目录：os.makedirs（r“c：\python\test”）</li>
<li>创建单个目录：os.mkdir（“test”）</li>
<li>获取文件属性：os.stat（file）</li>
<li>修改文件权限与时间戳：os.chmod（file）</li>
<li>终止当前进程：os.exit（）</li>
<li>获取文件大小：os.path.getsize（filename）</li>
<li>os.mknod(“test.txt”)        创建空文件</li>
<li><p>fp = open(“test.txt”,w)     直接打开一个文件，如果文件不存在则创建文件</p>
<blockquote>
<p>关于open 模式:<br>w     以写方式打开，<br>a     以追加模式打开 (从 EOF 开始, 必要时创建新文件)<br>r+     以读写模式打开<br>w+     以读写模式打开 (参见 w )<br>a+     以读写模式打开 (参见 a )<br>rb     以二进制读模式打开<br>wb     以二进制写模式打开 (参见 w )<br>ab     以二进制追加模式打开 (参见 a )<br>rb+    以二进制读写模式打开 (参见 r+ )<br>wb+    以二进制读写模式打开 (参见 w+ )<br>ab+    以二进制读写模式打开 (参见 a+ )</p>
</blockquote>
</li>
<li><p>fp.read([size])                     #size为读取的长度，以byte为单位</p>
</li>
<li>fp.readline([size])                 #读一行，如果定义了size，有可能返回的只是一行的一部分</li>
<li>fp.readlines([size])                #把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长，也就是说可能只读到文件的一部分。</li>
<li>fp.write(str)                      #把str写到文件中，write()并不会在str后加上一个换行符</li>
<li>fp.writelines(seq)            #把seq的内容全部写到文件中(多行一次性写入)。这个函数也只是忠实地写入，不会在每行后面加上任何东西。</li>
<li>fp.close()                        #关闭文件。python会在一个文件不用后自动关闭文件，不过这一功能没有保证，最好还是养成自己关闭的习惯。  如果一个文件在关闭后还对其进行操作会产生ValueError</li>
<li>fp.flush()                                      #把缓冲区的内容写入硬盘</li>
<li>fp.fileno()                                      #返回一个长整型的”文件标签“</li>
<li>fp.isatty()                                      #文件是否是一个终端设备文件（unix系统中的）</li>
<li>fp.tell()                                         #返回文件操作标记的当前位置，以文件的开头为原点</li>
<li>fp.next()                                       #返回下一行，并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时，就是调用next()函数来实现遍历的。</li>
<li><p>fp.seek(offset[,whence])              #将文件打操作标记移到offset的位置。这个offset一般是相对于文件的开头来计算的，一般为正数。但如果提供了whence参数就不一定了，whence可以为0表示从头开始计算，1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。需要注意，如果文件以a或a+的模式打开，每次进行写操作时，文件操作标记会自动返回到文件末尾。</p>
</li>
<li><p>fp.truncate([size])                       #把文件裁成规定的大小，默认的是裁到当前文件操作标记的位置。如果size比文件的大小还要大，依据系统的不同可能是不改变文件，也可能是用0把文件补到相应的大小，也可能是以一些随机的内容加上去。</p>
</li>
<li><p>os.mkdir(“file”)                   创建目录<br>复制文件：</p>
</li>
<li>shutil.copyfile(“oldfile”,”newfile”)       oldfile和newfile都只能是文件</li>
<li>shutil.copy(“oldfile”,”newfile”)            oldfile只能是文件夹，newfile可以是文件，也可以是目标目录<br>复制文件夹：</li>
<li>shutil.copytree(“olddir”,”newdir”)        olddir和newdir都只能是目录，且newdir必须不存在<br>重命名文件（目录）</li>
<li>os.rename(“oldname”,”newname”)       文件或目录都是使用这条命令<br>移动文件（目录）</li>
<li>shutil.move(“oldpos”,”newpos”)<br>删除文件</li>
<li>os.remove(“file”)<br>删除目录</li>
<li>os.rmdir(“dir”)只能删除空目录<br>shutil.rmtree(“dir”)    空目录、有内容的目录都可以删<br>转换目录</li>
<li>os.chdir(“path”)   换路径</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python基础知识-字典]]></title>
      <url>/2016/04/10/2017/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E5%AD%97%E5%85%B8/</url>
      <content type="html"><![CDATA[<p>字典这种数据结构，我们又称之为映射(mapping)，在java中也是这么称呼的，但是在python中我们称之为字典，与OC中的叫法一致。<br><a id="more"></a></p>
<h2 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; dicts = &#123;&apos;name&apos;:&apos;han&apos;,&apos;tele&apos;:&apos;136&apos;&#125;//直接创建</div><div class="line"></div><div class="line">&gt;&gt;&gt; xiaohan = (&apos;xiaohan&apos;,42)//利用dict函数来创建</div><div class="line">&gt;&gt;&gt; xiaoming = (&apos;xiaoming&apos;,45)</div><div class="line">&gt;&gt;&gt; items = [xiaohan,xiaoming]</div><div class="line">&gt;&gt;&gt; d = dict(items)</div><div class="line">&gt;&gt;&gt; d</div><div class="line">&#123;&apos;xiaohan&apos;: 42, &apos;xiaoming&apos;: 45&#125;</div><div class="line">&gt;&gt;&gt; </div><div class="line"></div><div class="line">&gt;&gt;&gt; d = dict(name=&apos;han&apos;,age=43)//或者dict函数还可以这样来用</div><div class="line">&gt;&gt;&gt; d</div><div class="line">&#123;&apos;age&apos;: 43, &apos;name&apos;: &apos;han&apos;&#125;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ul>
<li>len(d)返回d中键值对的数量</li>
<li>d[k]返回关联到k上的值</li>
<li>d[k]=v将值v关联到键为k的项上</li>
<li>del d[k]删除键为k的项</li>
<li>k in d检查d中是否含有键为k的项</li>
<li>键类型可以是任意类型，比如元组，浮点数或者字符串</li>
<li>自动添加，及时键起出在字典中并不存在，也可以赋值，这样字典就会建立起新的项</li>
<li>成员资格:用k in d查找的是键而不是值，而在列表中，v in l是用值在查找，而不是索引</li>
</ul>
<h2 id="字典方法"><a href="#字典方法" class="headerlink" title="字典方法"></a>字典方法</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>### </p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python基础知识-列表/元组/字符串]]></title>
      <url>/2016/04/09/2017/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E5%88%97%E8%A1%A8-%E5%85%83%E7%BB%84-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h2 id="列表和元组"><a href="#列表和元组" class="headerlink" title="列表和元组"></a>列表和元组</h2><p>在python中我们有两种很重要的数据结构，分别为序列和映射，对应到OC中就是数组和字典，序列又分为列表和元组，他们的区别在于，列表可修改，元组不能，列表用方括号[]，而元组用小括号（）<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">list = [&apos;hanshenghui&apos;,&apos;xiaoming&apos;]</div><div class="line">list1 = (&apos;hanshenghui&apos;,&apos;xiaoming&apos;)</div></pre></td></tr></table></figure></p>
<!--more-->
<h3 id="序列通用操作"><a href="#序列通用操作" class="headerlink" title="序列通用操作"></a>序列通用操作</h3><p>列表和元组都能做的操作</p>
<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; greeting = &apos;hello&apos;</div><div class="line">&gt;&gt;&gt; greeting[1]</div><div class="line">&apos;e&apos;</div><div class="line">&gt;&gt;&gt; greeting[2]</div><div class="line">&apos;l&apos;</div><div class="line">&gt;&gt;&gt; </div><div class="line"></div><div class="line">&gt;&gt;&gt; greeting1 = (&apos;h&apos;,&apos;e&apos;,&apos;l&apos;)</div><div class="line">&gt;&gt;&gt; greeting1[0]</div><div class="line">&apos;h&apos;</div><div class="line">&gt;&gt;&gt; greeting1[1]</div><div class="line">&apos;e&apos;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>字符串可以理解为由一个个的字符拼成的列表</p>
<h4 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h4><p>我们不但可以用一个索引来获取某一个元素，也可以获取某个范围的元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; numbers = [1,2,3,4,5,6,7,8,9,0]</div><div class="line">&gt;&gt;&gt; numbers[0:2]</div><div class="line">[1, 2]</div></pre></td></tr></table></figure></p>
<p>我们可以看到，左边的边界包含在其中，而右边的边界是不包含在其中的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; numbers[-1:2]</div><div class="line">[]</div><div class="line">&gt;&gt;&gt; numbers[-1:-3]</div><div class="line">[]</div><div class="line">&gt;&gt;&gt; numbers[-3:-1]</div><div class="line">[8, 9]</div><div class="line">&gt;&gt;&gt; </div><div class="line">&gt;&gt;&gt; numbers[-3:]</div><div class="line">[8, 9, 0]</div></pre></td></tr></table></figure></p>
<p>我们还可以用倒序来取元素，但是切记一定要左边小，右边的大，只标记一个就会从这个开始取所有，或者到这个为止</p>
<p>还可以给一个步长<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; numbers[::3]</div><div class="line">[1, 4, 7, 0]</div></pre></td></tr></table></figure></p>
<h4 id="相加"><a href="#相加" class="headerlink" title="相加"></a>相加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; item1 = [1,2,3]</div><div class="line">&gt;&gt;&gt; item2 = [4,5,6]</div><div class="line">&gt;&gt;&gt; item1 + item2</div><div class="line">[1, 2, 3, 4, 5, 6]</div><div class="line"></div><div class="line">&gt;&gt;&gt; string1 = &apos;hansheng&apos;</div><div class="line">&gt;&gt;&gt; string2 = &apos;hui&apos;</div><div class="line">&gt;&gt;&gt; string1 + string2</div><div class="line">&apos;hanshenghui&apos;</div><div class="line"></div><div class="line">&gt;&gt;&gt; string1 + item1</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">TypeError: cannot concatenate &apos;str&apos; and &apos;list&apos; objects</div></pre></td></tr></table></figure>
<p>但是只有同种类型才能相加</p>
<h4 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &apos;python&apos; * 5</div><div class="line">&apos;pythonpythonpythonpythonpython&apos;</div><div class="line">&gt;&gt;&gt; [10,11] * 3</div><div class="line">[10, 11, 10, 11, 10, 11]</div></pre></td></tr></table></figure>
<h4 id="成员资格"><a href="#成员资格" class="headerlink" title="成员资格"></a>成员资格</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; han = &apos;hanshenghui&apos;</div><div class="line">&gt;&gt;&gt; &apos;shenghui&apos; in han</div><div class="line">True</div><div class="line">&gt;&gt;&gt; &apos;wahha&apos; in han</div><div class="line">False</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="长度，最大值，最小值"><a href="#长度，最大值，最小值" class="headerlink" title="长度，最大值，最小值"></a>长度，最大值，最小值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">han = &apos;hanshenghui&apos;</div><div class="line">item1 = [1,2,3]</div><div class="line"></div><div class="line">&gt;&gt;&gt; len(han)</div><div class="line">11</div><div class="line">&gt;&gt;&gt; max(han)</div><div class="line">&apos;u&apos;</div><div class="line">&gt;&gt;&gt; min(han)</div><div class="line">&apos;a&apos;</div><div class="line">&gt;&gt;&gt; len(item1)</div><div class="line">3</div><div class="line">&gt;&gt;&gt; max(item1)</div><div class="line">3</div><div class="line">&gt;&gt;&gt; min(item1)</div><div class="line">1</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h3><h4 id="list与join"><a href="#list与join" class="headerlink" title="list与join"></a>list与join</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name = list(&apos;hanshenghui&apos;)</div><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;h&apos;, &apos;a&apos;, &apos;n&apos;, &apos;s&apos;, &apos;h&apos;, &apos;e&apos;, &apos;n&apos;, &apos;g&apos;, &apos;h&apos;, &apos;u&apos;, &apos;i&apos;]</div><div class="line">&gt;&gt;&gt; len(name)</div><div class="line">11</div><div class="line">&gt;&gt;&gt; &apos;&apos;.join(name)</div><div class="line">&apos;hanshenghui&apos;</div><div class="line">&gt;&gt;&gt; &apos;a&apos;.join(name)</div><div class="line">&apos;haaanasahaeanagahauai&apos;</div></pre></td></tr></table></figure>
<h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><p>更改某个元素的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name[0] = &apos;i&apos;</div><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;i&apos;, &apos;a&apos;, &apos;n&apos;, &apos;s&apos;, &apos;h&apos;, &apos;e&apos;, &apos;n&apos;, &apos;g&apos;, &apos;h&apos;, &apos;u&apos;, &apos;i&apos;]</div></pre></td></tr></table></figure></p>
<h4 id="删除del"><a href="#删除del" class="headerlink" title="删除del"></a>删除del</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name = &apos;han&apos;</div><div class="line">&gt;&gt;&gt; name</div><div class="line">&apos;han&apos;</div><div class="line">&gt;&gt;&gt; name = list(name)</div><div class="line">&gt;&gt;&gt; del name[0]</div><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;a&apos;, &apos;n&apos;]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="分片赋值"><a href="#分片赋值" class="headerlink" title="分片赋值"></a>分片赋值</h4><p>这是异常强大的一个特性，可以用来插入元素，更改元素，甚至删除元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name = list(&apos;han&apos;)</div><div class="line">&gt;&gt;&gt; name[1:] = list(&apos;python&apos;)</div><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;h&apos;, &apos;p&apos;, &apos;y&apos;, &apos;t&apos;, &apos;h&apos;, &apos;o&apos;, &apos;n&apos;]</div><div class="line">&gt;&gt;&gt; name[2:]=[]</div><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;h&apos;, &apos;p&apos;]</div><div class="line">&gt;&gt;&gt; name[1:1] = list(&apos;wahha&apos;)</div><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;h&apos;, &apos;w&apos;, &apos;a&apos;, &apos;h&apos;, &apos;h&apos;, &apos;a&apos;, &apos;p&apos;]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<h4 id="append追加"><a href="#append追加" class="headerlink" title="append追加"></a>append追加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name = list(&apos;han&apos;)</div><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;h&apos;, &apos;a&apos;, &apos;n&apos;]</div><div class="line">&gt;&gt;&gt; name.append(&apos;shenghui&apos;)</div><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;h&apos;, &apos;a&apos;, &apos;n&apos;, &apos;shenghui&apos;]</div><div class="line">&gt;&gt;&gt; &apos;&apos;.join(name)</div><div class="line">&apos;hanshenghui&apos;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="count统计出现的次数"><a href="#count统计出现的次数" class="headerlink" title="count统计出现的次数"></a>count统计出现的次数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name = &apos;hanshenghui&apos;</div><div class="line">&gt;&gt;&gt; name.count(&apos;h&apos;)</div><div class="line">3</div><div class="line">&gt;&gt;&gt; name.count(&apos;n&apos;)</div><div class="line">2</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h4><p>一个列表后追加一个新的列表，同加法作用一致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;h&apos;, &apos;a&apos;, &apos;n&apos;]</div><div class="line">&gt;&gt;&gt; name1 = list(&apos;sheng&apos;)</div><div class="line">&gt;&gt;&gt; name1</div><div class="line">[&apos;s&apos;, &apos;h&apos;, &apos;e&apos;, &apos;n&apos;, &apos;g&apos;]</div><div class="line">&gt;&gt;&gt; name.extend(name1)</div><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;h&apos;, &apos;a&apos;, &apos;n&apos;, &apos;s&apos;, &apos;h&apos;, &apos;e&apos;, &apos;n&apos;, &apos;g&apos;]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<h4 id="index"><a href="#index" class="headerlink" title="index"></a>index</h4><p>找出列表中某个项的第一个匹配索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;h&apos;, &apos;a&apos;, &apos;n&apos;, &apos;s&apos;, &apos;h&apos;, &apos;e&apos;, &apos;n&apos;, &apos;g&apos;]</div><div class="line">&gt;&gt;&gt; name.index(&apos;h&apos;)</div><div class="line">0</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;h&apos;, &apos;a&apos;, &apos;n&apos;, &apos;s&apos;, &apos;h&apos;, &apos;e&apos;, &apos;n&apos;, &apos;g&apos;]</div><div class="line">&gt;&gt;&gt; name.insert(0,&apos;wahha&apos;)</div><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;wahha&apos;, &apos;h&apos;, &apos;a&apos;, &apos;n&apos;, &apos;s&apos;, &apos;h&apos;, &apos;e&apos;, &apos;n&apos;, &apos;g&apos;]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><p>移除某个值并且将该值返回，需要提供索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;wahha&apos;, &apos;h&apos;, &apos;a&apos;, &apos;n&apos;, &apos;s&apos;, &apos;h&apos;, &apos;e&apos;, &apos;n&apos;, &apos;g&apos;]</div><div class="line">&gt;&gt;&gt; name.pop()</div><div class="line">&apos;g&apos;</div><div class="line">&gt;&gt;&gt; name.pop()</div><div class="line">&apos;n&apos;</div><div class="line">&gt;&gt;&gt; name.pop(0)</div><div class="line">&apos;wahha&apos;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><p>移除某个匹配项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;h&apos;, &apos;a&apos;, &apos;n&apos;, &apos;s&apos;, &apos;h&apos;, &apos;e&apos;]</div><div class="line">&gt;&gt;&gt; name.remove(&apos;s&apos;)</div><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;h&apos;, &apos;a&apos;, &apos;n&apos;, &apos;h&apos;, &apos;e&apos;]</div><div class="line">&gt;&gt;&gt; name.remove(&apos;s&apos;)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">ValueError: list.remove(x): x not in list</div></pre></td></tr></table></figure></p>
<p>如果该值不存在，那么就会报错</p>
<h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;h&apos;, &apos;a&apos;, &apos;n&apos;, &apos;h&apos;, &apos;e&apos;]</div><div class="line">&gt;&gt;&gt; name.reverse()</div><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;e&apos;, &apos;h&apos;, &apos;n&apos;, &apos;a&apos;, &apos;h&apos;]</div></pre></td></tr></table></figure>
<h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>改变原来的列表，返回一个空值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;e&apos;, &apos;h&apos;, &apos;n&apos;, &apos;a&apos;, &apos;h&apos;]</div><div class="line">&gt;&gt;&gt; name.sort()</div><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;a&apos;, &apos;e&apos;, &apos;h&apos;, &apos;h&apos;, &apos;n&apos;]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<p>需要返回值，sorted<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name = list(&apos;hna&apos;)</div><div class="line">&gt;&gt;&gt; name1 = sorted(name)</div><div class="line">&gt;&gt;&gt; name1</div><div class="line">[&apos;a&apos;, &apos;h&apos;, &apos;n&apos;]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<h4 id="高级排序"><a href="#高级排序" class="headerlink" title="高级排序"></a>高级排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name = list(&apos;hanshenghui&apos;)</div><div class="line">&gt;&gt;&gt; name.sort(reverse = True)</div><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;u&apos;, &apos;s&apos;, &apos;n&apos;, &apos;n&apos;, &apos;i&apos;, &apos;h&apos;, &apos;h&apos;, &apos;h&apos;, &apos;g&apos;, &apos;e&apos;, &apos;a&apos;]</div><div class="line">&gt;&gt;&gt; </div><div class="line">&gt;&gt;&gt; </div><div class="line">&gt;&gt;&gt; </div><div class="line">&gt;&gt;&gt; returnList.sort(key=lambda k: (k.get(&apos;date&apos;, 0)), reverse=False)</div></pre></td></tr></table></figure>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; python = &apos;%s is a %s&apos; </div><div class="line">&gt;&gt;&gt; value = (&apos;xiaohong&apos;,&apos;dog&apos;)</div><div class="line">&gt;&gt;&gt; print python % value</div><div class="line">xiaohong is a dog</div></pre></td></tr></table></figure>
<blockquote>
<p>符号说明:<code>s</code>代表字符串，后边的对象将以str转译，<code>%</code>代表占位，只有元组才会被分开解释，如果是一个列表，那么只能被解释为一个对象，这点要特别注意。d代表整型，f代表浮点数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; python = &apos;%10.1fha&apos;</div><div class="line">&gt;&gt;&gt; print python % 10</div><div class="line">      10.0ha</div></pre></td></tr></table></figure>
<p>f前边的小数点后的数字代表，小数点的保留位数，而前边的10代表字段宽。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; python = &apos;%010.1fha&apos;</div><div class="line">&gt;&gt;&gt; print python % 10</div><div class="line">00000010.0ha</div><div class="line"></div><div class="line">&gt;&gt;&gt; python = &apos;%+10.1fha&apos;</div><div class="line">&gt;&gt;&gt; print python % 10</div><div class="line">     +10.0ha</div><div class="line"></div><div class="line">&gt;&gt;&gt; print python % 10</div><div class="line">10.0      ha</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>在字段宽和精度前边还可以放置一个标志，这个标志可以是零，加号和减号或者空格，用法见上</p>
<h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><h4 id="1、find"><a href="#1、find" class="headerlink" title="1、find"></a>1、find</h4><p>find方法可以在一个较长的字符串中查找子字符串。它返回子串所在位置的最左端索引。如果没有找到则返回-1。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name = &apos;hanshenghui&apos;</div><div class="line">&gt;&gt;&gt; name.find(&apos;h&apos;)</div><div class="line">0</div><div class="line">&gt;&gt;&gt; name.find(&apos;h&apos;,2)</div><div class="line">4</div><div class="line">&gt;&gt;&gt; name.find(&apos;h&apos;,2,6)</div><div class="line">4</div><div class="line">&gt;&gt;&gt; name.find(&apos;h&apos;,2,5)</div><div class="line">4</div><div class="line">&gt;&gt;&gt; name.find(&apos;h&apos;,2,3)</div><div class="line">-1</div></pre></td></tr></table></figure></p>
<h4 id="2、join-amp-amp-split"><a href="#2、join-amp-amp-split" class="headerlink" title="2、join &amp;&amp; split"></a>2、join &amp;&amp; split</h4><p>join方法是非常重要的字符串方法，它是split方法的逆方法，用来在队列中添加元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s = [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;]</div><div class="line">&gt;&gt;&gt; &apos;+&apos;.join(s)</div><div class="line">&apos;1+2+3&apos;</div></pre></td></tr></table></figure></p>
<p>注意：需要添加的队列元素都必须是字符串。</p>
<p>split这是个非常重要的字符串方法，它是join的逆方法，用来将字符串分割成序列。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &apos;1+2+3+4&apos;.split(&apos;+&apos;)</div><div class="line">[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;]</div><div class="line">&gt;&gt;&gt; &apos;1 2 3 4&apos;.split()</div><div class="line">[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;]</div></pre></td></tr></table></figure></p>
<h4 id="3-lower-amp-amp-upper"><a href="#3-lower-amp-amp-upper" class="headerlink" title="3.lower &amp;&amp; upper"></a>3.lower &amp;&amp; upper</h4><p>lower方法返回字符串的小写字母版。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name = &apos;A&apos;</div><div class="line">&gt;&gt;&gt; name.lower()</div><div class="line">&apos;a&apos;</div><div class="line">&gt;&gt;&gt; b = name.lower()</div><div class="line">&gt;&gt;&gt; b.upper()</div><div class="line">&apos;A&apos;</div><div class="line"></div><div class="line">S.lower() #小写 </div><div class="line">S.upper() #大写 </div><div class="line">S.swapcase() #大小写互换 </div><div class="line">S.capitalize() #首字母大写</div></pre></td></tr></table></figure></p>
<h4 id="4-strip"><a href="#4-strip" class="headerlink" title="4.strip"></a>4.strip</h4><p>strip方法返回去除两侧（不包含内部）空格的字符串<br>去两边空格：str.strip()<br>去左空格：str.lstrip()<br>去右空格：str.rstrip()<br>去两边字符串：str.strip(‘d’)，相应的也有lstrip，rstrip</p>
<h4 id="5-replace-amp-amp-translate"><a href="#5-replace-amp-amp-translate" class="headerlink" title="5.replace &amp;&amp; translate"></a>5.replace &amp;&amp; translate</h4><p>translate方法和replace方法一样，可以替换字符串中的某些部分，但是和前者不同的是，translate方法只处理单个字符。它的优势在于可以同时进行多个替换，有些时候比replace效率高得多。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name = &apos;hanshenghui&apos;</div><div class="line">&gt;&gt;&gt; name.replace(&apos;h&apos;,&apos;z&apos;)</div><div class="line">&apos;zanszengzui&apos;</div></pre></td></tr></table></figure>
<p>在使用translate转换前，需要先完成一张转换表。转换表中是以某字符替换某字符的对应关系。因为这个表（事实上是字符串）有多达256个项目，我们还是不要自己写了，用string模块里面的maketrans函数就行了。</p>
<p>maketrans函数接收两个参数：两个等长的字符串，表示第一个字符串中的每个字符都用第二个字符串中相同位置的字符替换。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from string import maketrans</div><div class="line">&gt;&gt;&gt; table = maketrans(&apos;cs&apos;, &apos;kz&apos;)</div><div class="line">　　创建这个表后，可以将它用作translate方法的参数，进行字符串的转换：</div><div class="line"></div><div class="line">&gt;&gt;&gt; &apos;this is an incredible test&apos;.translate(table)</div><div class="line">&apos;thiz iz an inkredible tezt&apos;</div><div class="line">translate的第二个参数是可选的，这个参数是用来指定需要删除的字符。</div><div class="line"></div><div class="line">&gt;&gt;&gt; &apos;this is an incredible test&apos;.translate(table, &apos; &apos;)</div><div class="line">&apos;thizizaninkredibletezt&apos;</div></pre></td></tr></table></figure></p>
<h4 id="6-字符串判断相关"><a href="#6-字符串判断相关" class="headerlink" title="6.字符串判断相关"></a>6.字符串判断相关</h4><p>字符串判断相关<br>是否以start开头：str.startswith(‘start’)<br>是否以end结尾：str.endswith(‘end’)<br>是否全为字母或数字：str.isalnum()<br>是否全字母：str.isalpha()<br>是否全数字：str.isdigit()<br>是否全小写：str.islower()<br>是否全大写：str.isupper()</p>
<h4 id="7-字符串比较"><a href="#7-字符串比较" class="headerlink" title="7.字符串比较"></a>7.字符串比较</h4><p>cmp方法比较两个对象，并根据结果返回一个整数。cmp(x,y)如果X&lt; Y,返回值是负数 如果X&gt;Y 返回的值为正数。<br>sStr1 = ‘strch’<br>sStr2 = ‘strchr’<br>print cmp(sStr1,sStr2)##-1</p>
<h3 id="列表，元组，字符串的转换list与tuple"><a href="#列表，元组，字符串的转换list与tuple" class="headerlink" title="列表，元组，字符串的转换list与tuple"></a>列表，元组，字符串的转换list与tuple</h3><p>意义在于元组可以作为一个参数整体使用，而列表不可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name = &apos;hanshenghui&apos;</div><div class="line">&gt;&gt;&gt; tuple(name)</div><div class="line">(&apos;h&apos;, &apos;a&apos;, &apos;n&apos;, &apos;s&apos;, &apos;h&apos;, &apos;e&apos;, &apos;n&apos;, &apos;g&apos;, &apos;h&apos;, &apos;u&apos;, &apos;i&apos;)</div><div class="line">&gt;&gt;&gt; list(name)</div><div class="line">[&apos;h&apos;, &apos;a&apos;, &apos;n&apos;, &apos;s&apos;, &apos;h&apos;, &apos;e&apos;, &apos;n&apos;, &apos;g&apos;, &apos;h&apos;, &apos;u&apos;, &apos;i&apos;]</div><div class="line">&gt;&gt;&gt; tuple(list(name))</div><div class="line">(&apos;h&apos;, &apos;a&apos;, &apos;n&apos;, &apos;s&apos;, &apos;h&apos;, &apos;e&apos;, &apos;n&apos;, &apos;g&apos;, &apos;h&apos;, &apos;u&apos;, &apos;i&apos;)</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(转)delegate/KVO/Notification选择]]></title>
      <url>/2016/03/18/2016/%E8%BD%AC-delegate-KVO-Notification%E9%80%89%E6%8B%A9/</url>
      <content type="html"><![CDATA[<p>前面分别讲了delegate、notification和KVO的实现原理，以及实际使用步骤，我们心中不禁有个疑问，他们的功能比较类似，那么在实际的编程中，如何选择这些方式呢？<br><a id="more"></a><br>在网上看到一个博客上详细的分析了三者之间的区别以及各自的优势，博文地址为<a href="http://blog.shinetech.com/2011/06/14/delegation-notification-and-observation/" target="_blank" rel="external">http://blog.shinetech.com/2011/06/14/delegation-notification-and-observation/</a>，因为博文是用英文写的，下面将其翻译成中文。</p>
<p>在开发ios应用的时候，我们会经常遇到一个常见的问题：在不过分耦合的前提下，controllers间怎么进行通信。在IOS应用不断的出现三种模式来实现这种通信：</p>
<p>1.委托delegation；</p>
<p>2.通知中心Notification Center；</p>
<p>3.键值观察key value observing，KVO</p>
<p>因此，那为什么我们需要这些模式以及什么时候用它以及什么时候不用它。</p>
<p>下面完全根据我的开发经验来讨论这三中模式。我将讨论为什么我觉得某种模式要好于另外一种模式以及为什么我觉得在一定的环境下某中模式比较好。我给出的这些原因并不是圣经，而仅仅是个人观点。如果你有什么不同的观点或者还可以进行补充的地方，可以联系我，一起讨论。</p>
<blockquote>
<p>上面的三种模式是什么？</p>
</blockquote>
<p>三种模式都是一个对象传递事件给另外一个对象，并且不要他们有耦合。三种模式都是对象来通知某个事件发生了的方法，或者更准确的说，是允许其他的对象收到这种事件的方法。这对于一个对象来说，是非常普通而且必须做的任务，因为没有通信，controllers将不能整合到整个应用中。controller的另外一个目的是尽可能的自包含。我们希望controllers以自己的方式存在，在controllers层面上不能与其他的controllers进行耦合。Controllers能够穿件其他的controllers而且他们之间可以自由通信，但是我们不希望controller又回接到创建自己的controller。如果我们耦合了他们，那么我们将不能复用他们，以及完全失去对应用中一个独立的组件的控制。</p>
<p>这三种模式给controllers(也可以是其他的对象）提供通信的方法。下面将描述如何在ios应用中使用这些模式，同样需要注意的他们在其他的地方也会用到，并且确实是存在。</p>
<h2 id="delegation"><a href="#delegation" class="headerlink" title="delegation"></a>delegation</h2><p>当我们第一次编写ios应用时，我们注意到不断的在使用“delegate”，并且贯穿于整个SDK。delegation模式不是IOS特有的模式，而是依赖与你过去拥有的编程背景。针对它的优势以及为什么经常使用到，这种模式可能不是很明显的。</p>
<p>delegation的基本特征是，一个controller定义了一个协议（即一系列的方法定义）。该协议描述了一个delegate对象为了能够响应一个controller的事件而必须做的事情。协议就是delegator说，“如果你想作为我的delegate，那么你就必须实现这些方法”。实现这些方法就是允许controller在它的delegate能够调用这些方法，而它的delegate知道什么时候调用哪种方法。delegate可以是任何一种对象类型，因此controller不会与某种对象进行耦合，但是当该对象尝试告诉委托事情时，该对象能确定delegate将响应。</p>
<h3 id="delegate的优势："><a href="#delegate的优势：" class="headerlink" title="delegate的优势："></a>delegate的优势：</h3><blockquote>
<p>1.非常严格的语法。所有将听到的事件必须是在delegate协议中有清晰的定义。</p>
</blockquote>
<p>2.如果delegate中的一个方法没有实现那么就会出现编译警告/错误</p>
<p>3.协议必须在controller的作用域范围内定义</p>
<p>4.在一个应用中的控制流程是可跟踪的并且是可识别的；</p>
<p>5.在一个控制器中可以定义定义多个不同的协议，每个协议有不同的delegates</p>
<p>6.没有第三方对象要求保持/监视通信过程。</p>
<p>7.能够接收调用的协议方法的返回值。这意味着delegate能够提供反馈信息给controller</p>
<p>缺点：</p>
<p>1.需要定义很多代码：1.协议定义；2.controller的delegate属性；3.在delegate本身中实现delegate方法定义</p>
<p>2.在释放代理对象时，需要小心的将delegate改为nil。一旦设定失败，那么调用释放对象的方法将会出现内存crash</p>
<p>3.在一个controller中有多个delegate对象，并且delegate是遵守同一个协议，但还是很难告诉多个对象同一个事件，不过有可能。</p>
<h2 id="notification"><a href="#notification" class="headerlink" title="notification"></a>notification</h2><p>在IOS应用开发中有一个”Notification Center“的概念。它是一个单例对象，允许当事件发生时通知一些对象。它允许我们在低程度耦合的情况下，满足控制器与一个任意的对象进行通信的目的。这种模式的基本特征是为了让其他的对象能够接收到在该controller中发生某种事件而产生的消息，controller用一个key（通知名称）。这样对于controller来说是匿名的，其他的使用同样的key来注册了该通知的对象（即观察者）能够对通知的事件作出反应。</p>
<p>优势：</p>
<blockquote>
<p>1.不需要编写多少代码，实现比较简单；</p>
</blockquote>
<p>2.对于一个发出的通知，多个对象能够做出反应，即1对多的方式实现简单</p>
<p>3.controller能够传递context对象（dictionary），context对象携带了关于发送通知的自定义的信息</p>
<p>缺点：</p>
<p>1.在编译期不会检查通知是否能够被观察者正确的处理；</p>
<p>2.在释放注册的对象时，需要在通知中心取消注册；</p>
<p>3.在调试的时候应用的工作以及控制过程难跟踪；</p>
<p>4.需要第三方对喜爱那个来管理controller与观察者对象之间的联系；</p>
<p>5.controller和观察者需要提前知道通知名称、UserInfo dictionary keys。如果这些没有在工作区间定义，那么会出现不同步的情况；</p>
<p>6.通知发出后，controller不能从观察者获得任何的反馈信息。</p>
<h2 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h2><p>KVO是一个对象能够观察另外一个对象的属性的值，并且能够发现值的变化。前面两种模式更加适合一个controller与任何其他的对象进行通信，而KVO更加适合任何类型的对象侦听另外一个任意对象的改变（这里也可以是controller，但一般不是controller）。这是一个对象与另外一个对象保持同步的一种方法，即当另外一种对象的状态发生改变时，观察对象马上作出反应。它只能用来对属性作出反应，而不会用来对方法或者动作作出反应。</p>
<p>优点：</p>
<blockquote>
<p>1.能够提供一种简单的方法实现两个对象间的同步。例如：model和view之间同步；</p>
</blockquote>
<p>2.能够对非我们创建的对象，即内部对象的状态改变作出响应，而且不需要改变内部对象（SKD对象）的实现；</p>
<p>3.能够提供观察的属性的最新值以及先前值；</p>
<p>4.用key paths来观察属性，因此也可以观察嵌套对象；</p>
<p>5.完成了对观察对象的抽象，因为不需要额外的代码来允许观察值能够被观察</p>
<p>缺点：</p>
<p>1.我们观察的属性必须使用strings来定义。因此在编译器不会出现警告以及检查；</p>
<p>2.对属性重构将导致我们的观察代码不再可用；</p>
<p>3.复杂的“IF”语句要求对象正在观察多个值。这是因为所有的观察代码通过一个方法来指向；</p>
<p>4.当释放观察者时不需要移除观察者。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>从上面的分析中可以看出3中设计模式都有各自的优点和缺点。其实任何一种事物都是这样，问题是如何在正确的时间正确的环境下选择正确的事物。下面就讲讲如何发挥他们各自的优势，在哪种情况下使用哪种模式。注意使用任何一种模式都没有对和错，只有更适合或者不适合。每一种模式都给对象提供一种方法来通知一个事件给其他对象，而且前者不需要知道侦听者。在这三种模式中，我认为KVO有最清晰的使用案例，而且针对某个需求有清晰的实用性。而另外两种模式有比较相似的用处，并且经常用来给controller间进行通信。那么我们在什么情况使用其中之一呢？</p>
<p>根据我开发iOS应用的经历，我发现有些过分的使用通知模式。我个人不是很喜欢使用通知中心。我发现用通知中心很难把握应用的执行流程。UserInfo dictionaries的keys到处传递导致失去了同步，而且在公共空间需要定义太多的常量。对于一个工作于现有的项目的开发者来说，如果过分的使用通知中心，那么很难理解应用的流程。</p>
<p>我觉得使用命名规则好的协议和协议方法定义对于清晰的理解controllers间的通信是很容易的。努力的定义这些协议方法将增强代码的可读性，以及更好的跟踪你的app。代理协议发生改变以及实现都可通过编译器检查出来，如果没有将会在开发的过程中至少会出现crash，而不仅仅是让一些事情异常工作。甚至在同一事件通知多控制器的场景中，只要你的应用在controller层次有着良好的结构，消息将在该层次上传递。该层次能够向后传递直至让所有需要知道事件的controllers都知道。</p>
<p>当然会有delegation模式不适合的例外情况出现，而且notification可能更加有效。例如：应用中所有的controller需要知道一个事件。然而这些类型的场景很少出现。另外一个例子是当你建立了一个架构而且需要通知该事件给正在运行中应用。</p>
<p>根据经验，如果是属性层的事件，不管是在不需要编程的对象还是在紧紧绑定一个view对象的model对象，我只使用观察。对于其他的事件，我都会使用delegate模式。如果因为某种原因我不能使用delegate，首先我将估计我的app架构是否出现了严重的错误。如果没有错误，然后才使用notification。</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS技能总结]]></title>
      <url>/2016/02/19/2016/iOS%E6%8A%80%E8%83%BD%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>参考–唐巧，iOS技能图谱<br><a id="more"></a></p>
<h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><ul>
<li>Swift</li>
<li>Objective-C</li>
<li>C++/C</li>
<li>JavaScript</li>
<li>Python</li>
</ul>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul>
<li>Mac OSX</li>
<li>iOS</li>
<li>watchOS</li>
<li>tvOS</li>
<li>Linux 常用命令</li>
</ul>
<h3 id="开发基础"><a href="#开发基础" class="headerlink" title="开发基础"></a>开发基础</h3><ul>
<li>UI 控件</li>
<li>Storyboard &amp; Xib</li>
<li>Core Data &amp; Sqlite数据持久化CoreData的多线程 了解没?  CoreData 的不同版本的数据迁移怎么做?</li>
<li>Core Graphics</li>
<li>Animation</li>
<li>Block &amp; GCD，GCD ,NSThread ,NSOperation 能不能滔滔不绝的讲出来</li>
<li>Test Case 编写</li>
<li>Framework</li>
<li>Autolayout</li>
<li>WebController</li>
<li>手势识别，重力感应</li>
<li>推送</li>
<li>网络加密</li>
<li>keyChain 钥匙串存储</li>
</ul>
<h3 id="开发进阶"><a href="#开发进阶" class="headerlink" title="开发进阶"></a>开发进阶</h3><ul>
<li>内存管理</li>
<li>Runtime，在项目中的应用</li>
<li>Runloop，在项目中的应用</li>
<li>对象模型</li>
<li>Hybrid</li>
<li>沙盒机制</li>
<li>AVFoundation</li>
<li>Core Text</li>
<li>app瘦身</li>
<li>插件制作</li>
<li>打包.a和framwork</li>
<li>优化<ul>
<li>电量</li>
<li>流量</li>
<li>性能</li>
<li>网络</li>
</ul>
</li>
<li><p>逆向与安全</p>
<ul>
<li>class dump</li>
<li>IDA Pro</li>
<li>Hopper</li>
<li>iOS Class Guard</li>
</ul>
</li>
</ul>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul>
<li>MVC</li>
<li>MVVM</li>
<li>通知</li>
<li>代理</li>
<li>KVO</li>
<li>工厂模式</li>
<li>命令模式</li>
</ul>
<h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul>
<li><p>IDE</p>
<ul>
<li>Xcode</li>
<li>AppCode</li>
</ul>
</li>
<li><p>调试工具</p>
<ul>
<li>Charles、Wireshark</li>
<li>Reveal</li>
<li>Instruments</li>
</ul>
</li>
<li><p>插件</p>
<ul>
<li>Alcatraz</li>
<li>VVDocument</li>
<li>XVim</li>
<li>FuzzyAutocompletePlugin</li>
<li>KSImageNamed-Xcode</li>
</ul>
</li>
<li><p>辅助工具</p>
<ul>
<li>xScope</li>
<li>ImageOptim</li>
<li>马克鳗</li>
<li>Dash</li>
<li>Deploymate</li>
<li>FauxPas</li>
<li>PaintCode</li>
</ul>
</li>
<li><p>命令行工具</p>
<ul>
<li>xcodebuild、xcode-select</li>
<li>nomad</li>
<li>xctool</li>
<li>fastlane</li>
</ul>
</li>
<li><p>持续集成</p>
<ul>
<li>Jenkins</li>
<li>Travis CI</li>
<li>Bot</li>
</ul>
</li>
</ul>
<h3 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h3><ul>
<li>AFNetworking &amp; Alamofire</li>
<li>Masonry</li>
<li>SDWebImage</li>
<li>SwiftyJSON</li>
<li>JSPatch</li>
<li>React Native</li>
</ul>
<h3 id="App-打包上传与审核"><a href="#App-打包上传与审核" class="headerlink" title="App 打包上传与审核"></a>App 打包上传与审核</h3><ul>
<li>Apple Developer 网站</li>
<li>iTunes Connect 网站</li>
<li>IAP</li>
<li>加急审核申请</li>
<li>打包脚本</li>
</ul>
<h3 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h3><ul>
<li><p>崩溃收集</p>
<ul>
<li>Bugly</li>
<li>Crashlytics</li>
<li>BugHD</li>
<li>Fabric</li>
</ul>
</li>
<li><p>数据统计</p>
<ul>
<li>Google Analytics</li>
<li>友盟</li>
<li>MTA</li>
<li>Flurry</li>
<li>App Annie</li>
</ul>
</li>
<li>应用分发<ul>
<li>TestFlight</li>
<li>蒲公英</li>
<li>FIR</li>
</ul>
</li>
</ul>
<h3 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h3><ul>
<li>CocoaPods</li>
<li>Carthage</li>
<li>Swift Package Manager</li>
</ul>
<h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><ul>
<li>ReactiveCocoa</li>
<li>RxSwift</li>
</ul>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(转)项目优化--安装包体积控制]]></title>
      <url>/2016/01/18/2016/%E8%BD%AC-%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96-%E5%AE%89%E8%A3%85%E5%8C%85%E4%BD%93%E7%A7%AF%E6%8E%A7%E5%88%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>iOS微信安装包瘦身<br><a id="more"></a></p>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2></blockquote>
<p>微信经过多次版本迭代，产生不少冗余代码和无用资源。之前微信也没有很好的手段知道哪个模块增量多少。另外去年10月微信开始做ARC支持，目的是为了减少野指针带来的Crash，但代价是可执行文件增大20%左右。而苹果规定今年6月提交给Appstore的应用必须支持64位，32位和64位两个架构的存在使得可执行文件增加了一倍多。安装包大小优化迫在眉睫。</p>
<p>Appstore安装包是由资源和可执行文件两部分组成，安装包瘦身也是从这两部分进行。</p>
<h2 id="资源瘦身"><a href="#资源瘦身" class="headerlink" title="资源瘦身"></a>资源瘦身</h2><p>资源瘦身主要是去掉无用资源和压缩资源，资源包括图片、音视频文件、配置文件以及多语言wording。无用资源是指资源在工程文件里，但没有被代码引用。检查方法是，用资源关键字（通常是文件名，图片资源需要去掉@2x @3x），搜索代码，搜不到就是没有被引用。当然，有些资源在使用过程中是拼接而成的（如loading_xxx.png），需要手工过滤。</p>
<p>资源压缩主要对png进行无损压缩，用的是ImageOptim工具和compress命令（需要安装XQuartz-2.7.5.dm插件）。不建议对资源做有损压缩，有损压缩需要设计一个个检查，通常压缩后效果不尽人意。</p>
<h2 id="Xcode’s-Link-Map-File"><a href="#Xcode’s-Link-Map-File" class="headerlink" title="Xcode’s Link Map File"></a>Xcode’s Link Map File</h2><p>在讲可执行文件瘦身之前先介绍Xcode的LinkMap文件。LinkMap文件是Xcode产生可执行文件的同时生成的链接信息，用来描述可执行文件的构造成分，包括代码段（<strong>TEXT）和数据段（</strong>DATA）的分布情况。只要设置Project-&gt;Build Settings-&gt;Write Link Map File为YES，并设置Path to Link Map File，build完后就可以在设置的路径看到LinkMap文件了：</p>
<p>每个LinkMap由3个部分组成，以微信为例：</p>
<ol>
<li>Object files:</li>
</ol>
<p>[ 0] linker synthesized</p>
<p>[ 1] /xxxx/WCPayInfoItem.o</p>
<p>[ 2] /xxxx/GameCenterFriendRankCell.o</p>
<p>[ 3] /xxxx/WloginTlv_0x168.o</p>
<p>…</p>
<p>第一部分列举可执行文件里所有.obj文件，以及每个文件的编号。</p>
<ol>
<li>Sections:</li>
</ol>
<p>第二部分是可执行文件的段表，描述各个段在可执行文件中的偏移位置和大小。第一列是段的偏移量，第二列是段占用大小，Address(n)=Address(n-1)+Size(n-1)；第三列是段类型，代码段和数据段；第四列是段名字，如<strong>text是可执行机器码，</strong>cstring是字符串常量。有关段的概念可参考苹果官方文档《OS X ABI Mach-O File Format Reference》</p>
<ol>
<li>Symbols:</li>
</ol>
<h1 id="Address-Size-File-Name"><a href="#Address-Size-File-Name" class="headerlink" title="Address Size File Name"></a>Address Size File Name</h1><p>0x100005A50 0x00000074 [ 1] +[WCPayInfoItem initialize]</p>
<p>…</p>
<p>0x10231C120 0x00000018 [ 1] literal string: I16@?0@”WCPayInfoItem”8</p>
<p>…</p>
<p>0x10252A41A 0x0000000E [ 1] literal string: WCPayInfoItem</p>
<p>…</p>
<p>第三部分详细描述每个obj文件在每个段的分布情况，按第二部分Sections顺序展示。例如序号1的WCPayInfoItem.o文件，+[WCPayInfoItem initialize]方法在<strong>TEXT.</strong>text地址是0x100005A50，占用大小是116字节。根据序号累加每个obj文件在每个段的占用大小，从而计算出每个obj文件在可执行文件的占用大小，进而算出每个静态库、每个功能模块代码占用大小。这里要注意的地方是，由于<strong>DATA.</strong>bbs是代表未初始化的静态变量，Size表示应用运行时占用的堆大小，并不占用可执行文件，所以计算obj占用大小时，要排除这个段的Size。</p>
<h2 id="可执行文件瘦身"><a href="#可执行文件瘦身" class="headerlink" title="可执行文件瘦身"></a>可执行文件瘦身</h2><p>回到我们的可执行文件瘦身问题，LinkMap文件可以帮助我们寻找优化点。</p>
<h3 id="1-查找无用selector"><a href="#1-查找无用selector" class="headerlink" title="1. 查找无用selector"></a>1. 查找无用selector</h3><p>以往C++在链接时，没有被用到的类和方法是不会编进可执行文件里。但Objctive-C不同，由于它的动态性，它可以通过类名和方法名获取这个类和方法进行调用，所以编译器会把项目里所有OC源文件编进可执行文件里，哪怕该类和方法没有被使用到。</p>
<p>结合LinkMap文件的<strong>TEXT.</strong>text，通过正则表达式([+|-][.+\s(.+)])，我们可以提取当前可执行文件里所有objc类方法和实例方法（SelectorsAll）。再使用otool命令otool -v -s <strong>DATA </strong>objc_selrefs逆向<strong>DATA.</strong>objc_selrefs段，提取可执行文件里引用到的方法名（UsedSelectorsAll），我们可以大致分析出SelectorsAll里哪些方法是没有被引用的（SelectorsAll-UsedSelectorsAll）。注意，系统API的Protocol可能被列入无用方法名单里，如UITableViewDelegate的方法，我们只需要对这些Protocol里的方法加入白名单过滤即可。</p>
<p>另外第三方库的无用selector也可以这样扫出来的。</p>
<h3 id="2-查找无用oc类"><a href="#2-查找无用oc类" class="headerlink" title="2. 查找无用oc类"></a>2. 查找无用oc类</h3><p>查找无用oc类有两种方式，一种是类似于查找无用资源，通过搜索”[ClassName alloc/new”、”ClassName *”、”[ClassName class]”等关键字在代码里是否出现。另一种是通过otool命令逆向<strong>DATA.</strong>objc_classlist段和<strong>DATA.</strong>objc_classrefs段来获取当前所有oc类和被引用的oc类，两个集合相减就是无用oc类。</p>
<h3 id="3-扫描重复代码"><a href="#3-扫描重复代码" class="headerlink" title="3. 扫描重复代码"></a>3. 扫描重复代码</h3><p>可以利用第三方工具simian扫描。南非支付copy代码就是这样被发现的。但除此成果之外，扫描出来的结果过多，重构起来也不方便，不如砍功能需求效果好。</p>
<h3 id="4-protobuf精简改造"><a href="#4-protobuf精简改造" class="headerlink" title="4. protobuf精简改造"></a>4. protobuf精简改造</h3><p>protobuf是Google推出的一种轻量高效的结构化数据存储格式，在微信用于网络协议和本地文件序列化。但google默认工具生成的代码比较冗余，像序列化、反序列化、计算序列化大小等方法都生成在具体的pb类里，每个类的实现大同小异。通过代码分析以及结合protobuf原理，要想把这些方法抽象到基类，派生类提供每个字段相关信息就够了：</p>
<ul>
<li><p>field number</p>
</li>
<li><p>field label, optional, required or repeated</p>
</li>
<li><p>wire type, double, float, int, etc</p>
</li>
<li><p>是否packed</p>
</li>
<li><p>repeated的数据类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">typedef struct &#123;</div><div class="line">    Byte _fieldNumber;</div><div class="line">    Byte _fieldLabel;</div><div class="line">    Byte _fieldType;</div><div class="line">    BOOL _isPacked;</div><div class="line">    int _enumInitValue;</div><div class="line">    union &#123;</div><div class="line">        __unsafe_unretained NSString* _messageClassName;</div><div class="line">        __unsafe_unretained Class _messageClass; // ClassName对应的Class</div><div class="line">        IsEnumValidFunc _isEnumValidFunc; // 检测枚举值是否合法函数指针</div><div class="line">    &#125;;</div><div class="line">&#125; PBFieldInfo;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>另外通过无用selector列表，发现不少pb类属性的getter或setter没有被使用。原先的pb类属性是用@synthesize修饰，编译器会自动生成getter和setter。如果不想编译器生成，则要用@dynamic。甚至我们可以把pb类的成员变量去掉。做法如下：</p>
<ul>
<li><p>基类增加id类型数组ivarValues（参考了objc_class结构体ivars做法），用于存放对象的属性值。对象属性值统一用oc对象表示，如果类型是基础类型（primitive，如int、float等），则用NSValue存</p>
</li>
<li><p>重载methodSignatureForSelector:方法，返回属性getter、setter的方法签名</p>
</li>
<li><p>重载forwardInvocation:方法，分析invocation.selector类型。如果是getter，从ivarValues获取属性值并设置为invocation的returnValue；如果是setter，从invocation第二个argument获取属性值，并存放到ivarValues里</p>
</li>
<li><p>重载setValue:forUndefinedKey:、valueForUndefinedKey:，防止通过KVO访问属性Crash</p>
</li>
<li><p>做下性能优化，如pb类在initialize做一次初始化，缓存属性名的hash值，属性的getter、setter方法的objcType等；属性值不用std::map（属性名-&gt;属性值），而是改用数组；MRC代替ARC（有些时候ARC自动添加的retain/release挺影响性能的）；等等</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class PBClassInfo &#123;</div><div class="line">public:</div><div class="line">    PBClassInfo(Class cls, PBFieldInfo* fieldInfo);</div><div class="line">    ~PBClassInfo();</div><div class="line">public:</div><div class="line">    unsigned int _numberOfProperty;</div><div class="line">    std::string* _propertyNames;</div><div class="line">    size_t* _propertyNameHashes;</div><div class="line">    std::string* _getterObjCTypes;</div><div class="line">    std::string* _setterObjCTypes;</div><div class="line">    PBFieldInfo* _fieldInfos;</div><div class="line">&#125;;</div><div class="line">@interface WXPBGeneratedMessage () &#123;</div><div class="line">    uint32_t _has_bits_[3]; // 最多96个属性，表示属性是否有赋值</div><div class="line">    int32_t _serializedSize;</div><div class="line">    PBClassInfo* _classInfo;</div><div class="line">    id* _ivarValues;</div><div class="line">&#125;</div><div class="line">- (NSMethodSignature*) methodSignatureForSelector:(SEL) aSelector;</div><div class="line">- (void) forwardInvocation:(NSInvocation*) anInvocation;</div><div class="line">- (void) setValue:(id) value forUndefinedKey:(NSString*) key;</div><div class="line">- valueForUndefinedKey:(NSString*) key;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>把冗余代码去掉后，整个类清爽多了。像GameResourceReq只有3个属性的proto结构体，类方法代码行数由以前的127行变成现在的8行。protobuf精简改造中，精简类方法减少了可执行文件8.8M，去掉类成员变量和类属性改用@dynamic减少了2.5M。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">message GameResourceReq &#123;</div><div class="line">    required BaseRequest BaseRequest = 1;</div><div class="line">    required int32 PropsCount = 2;</div><div class="line">    repeated uint32 PropsIdList = 3[packed=true];</div><div class="line">&#125;</div><div class="line">// 老实现</div><div class="line">@implementation GameResourceReq</div><div class="line">@synthesize hasBaseRequest;</div><div class="line">@synthesize baseRequest;</div><div class="line">@synthesize hasPropsCount;</div><div class="line">@synthesize propsCount;</div><div class="line">@synthesize mutablePropsIdListList;</div><div class="line">@dynamic propsIdList;</div><div class="line">- (id) init &#123;...&#125;</div><div class="line">- (void) SetBaseRequest:(BaseRequest*) value &#123;...&#125;</div><div class="line">- (void) SetPropsCount:(int32_t) value &#123;...&#125;</div><div class="line">- (NSArray*) propsIdListList &#123;...&#125;</div><div class="line">- (NSMutableArray*)propsIdList &#123;...&#125;</div><div class="line">- (void)setPropsIdList:(NSMutableArray*) values &#123;...&#125;</div><div class="line">- (BOOL) isInitialized &#123;...&#125;</div><div class="line">- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output &#123;...&#125;</div><div class="line">- (int32_t) serializedSize &#123;...&#125;</div><div class="line">+ (GameResourceReq*) parseFromData:(NSData*) data &#123;...&#125;</div><div class="line">- (GameResourceReq*) mergeFromCodedInputStream:(PBCodedInputStream*) input &#123;...&#125;</div><div class="line">- (void) addPropsIdList:(uint32_t) value &#123;...&#125;</div><div class="line">- (void) addPropsIdListFromArray:(NSArray*) values &#123;...&#125;</div><div class="line">@end</div><div class="line">// 新实现</div><div class="line">@implementation GameResourceReq</div><div class="line">PB_PROPERTY_TYPE baseRequest;</div><div class="line">PB_PROPERTY_TYPE opType;</div><div class="line">PB_PROPERTY_TYPE brandUserName;</div><div class="line">+ (void) initialize &#123;</div><div class="line">  static PBFieldInfo _fieldInfoArray[] = &#123;</div><div class="line">    &#123;1, FieldLabelRequired, FieldTypeMessage, NO, 0, ._messageClassName = STRING_FROM(BaseRequest)&#125;,</div><div class="line">    &#123;2, FieldLabelRequired, FieldTypeInt32, NO, 0, 0&#125;,</div><div class="line">    &#123;3, FieldLabelRepeated, FieldTypeUint32, NO, 0, 0&#125;,</div><div class="line">  &#125;;</div><div class="line">  initializePBClassInfo(self, _fieldInfoArray);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<ol>
<li>编译选项优化</li>
</ol>
<ul>
<li><p>Strip Link Product设成YES，WeChatWatch可执行文件减少0.3M</p>
</li>
<li><p>Make Strings Read-Only设为YES，也许是因为微信工程从低版本Xcode升级过来，这个编译选项之前一直为NO，设为YES后可执行文件减少了3M</p>
</li>
<li><p>去掉异常支持，Enable C++ Exceptions和Enable Objective-C Exceptions设为NO，并且Other C Flags添加-fno-exceptions，可执行文件减少了27M，其中<strong>gcc_except_tab段减少了17.3M，</strong>text减少了9.7M，效果特别明显。可以对某些文件单独支持异常，编译选项加上-fexceptions即可。但有个问题，假如ABC三个文件，AC文件支持了异常，B不支持，如果C抛了异常，在模拟器下A还是能捕获异常不至于Crash，但真机下捕获不了（有知道原因可以在下面留言：）。去掉异常后，Appstore后续几个版本Crash率没有明显上升。个人认为关键路径支持异常处理就好，像启动时NSCoder读取setting配置文件得要支持捕获异常，等等</p>
</li>
</ul>
<ol>
<li>其他可探索途径</li>
</ol>
<ul>
<li><p>iOS8 Embed-Framework：提取WeChatWatch、ShareExtention和微信主工程的公共代码，可执行文件可以减少5M+，不过这特性需要最低版本iOS8才能用，iOS7设备启动会crash</p>
</li>
<li><p>iOS9 App Thinning：严格来说App Thinning不会让安装包变小，但用户安装应用时，苹果会根据用户的机型自动选择合适的资源和对应CPU架构的二进制执行文件（也就是说用户本地可执行文件不会同时存在armv7和arm64），安装后空间占用更小</p>
</li>
</ul>
<ol>
<li>建立监控</li>
</ol>
<p>通过对LinkMap文件的分析，可以得知每个模块可执行文件占用大小。再对比两个版本，就知道业务模块的增量大小。参考如下：</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[热修复技术在移动端的应用]]></title>
      <url>/2016/01/12/2016/%E7%83%AD%E4%BF%AE%E5%A4%8D%E6%8A%80%E6%9C%AF%E5%9C%A8%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="热修复技术概述"><a href="#热修复技术概述" class="headerlink" title="热修复技术概述"></a>热修复技术概述</h3><p>移动应用的部署方式，即发布-&gt;下载-&gt;安装-&gt;运行，决定了他不具备Web的高灵活性，尤其新版本上线后发现有个严重的bug，可能会导致crash率激增，可能会使网络请求无法发出，这时能做的只是赶紧修复bug然后提交等待漫长的AppStore审核，再盼望用户快点升级，付出巨大的人力和时间成本，才能完成此次bug的修复。<br><a id="more"></a><br>热修复技术(HotfixPatch)，是一种基于原生应用开发的灵活性解决方案，可以在不改变开发人员技能要求和已有的开发方式的前提下，给于应用在发布后改变程序行为的能力。<br>热补丁的主要优势是不会使设备当前正在运行的业务中断，即在不重启设备的情况下可以对设备当前软件版本的缺陷进行修复。一般用于某个函数导致的bug，如果是某个类导致的bug，或者增减业务模块，不建议使用热修复，而使用Reactive Native。</p>
<h4 id="市场中的热修复技术方案对比"><a href="#市场中的热修复技术方案对比" class="headerlink" title="市场中的热修复技术方案对比"></a>市场中的热修复技术方案对比</h4><ul>
<li>WaxPatch(阿里在维护)</li>
<li>JSPatch(个人项目)</li>
</ul>
<p>两者相比，JSPatch的优势：</p>
<ul>
<li>1.JS语言: JS比Lua在应用开发领域有更广泛的应用，目前前端开发和终端开发有融合的趋势，作为扩展的脚本语言，JS是不二之选。</li>
<li>2.符合Apple规则: JSPatch更符合Apple的规则。iOS Developer Program License Agreement里3.3.2提到不可动态下发可执行代码，但通过苹果JavaScriptCore.framework或WebKit执行的代码除外，JS正是通过JavaScriptCore.framework执行的。</li>
<li>3.小巧: 使用系统内置的JavaScriptCore.framework，无需内嵌脚本引擎，体积小巧。</li>
<li>4.支持block: wax在几年前就停止了开发和维护，不支持Objective-C里block跟Lua程序的互传，虽然一些第三方已经实现block，但使用时参数上也有比较多的限制。</li>
</ul>
<p>JSPatch的劣势：</p>
<ul>
<li>相对于WaxPatch，JSPatch劣势在于不支持iOS6，因为需要引入JavaScriptCore.framework。另外目前内存的使用上会高于wax，持续改进中。</li>
</ul>
<h4 id="问题与风险"><a href="#问题与风险" class="headerlink" title="问题与风险"></a>问题与风险</h4><p>JSPatch让脚本语言获得调用所有原生OC方法的能力，不像web前端把能力局限在浏览器，使用上会有一些安全风险：<br>1.若在网络传输过程中下发明文JS，可能会被中间人篡改JS脚本，执行任意方法，盗取APP里的相关信息。可以对传输过程进行加密，或用直接使用https解决。<br>2.若下载完后的JS保存在本地没有加密，在未越狱的机器上用户也可以手动替换或篡改脚本。这点危害没有第一点大，因为操作者是手机拥有者，不存在APP内相关信息被盗用的风险。若要避免用户修改代码影响APP运行，可以选择简单的加密存储。<br>3.由于主要的应用方式是对函数的替换，所以如果某个函数包含几千行的代码，修复的时候工作量会相对较大</p>
<h3 id="JSPatch"><a href="#JSPatch" class="headerlink" title="JSPatch"></a>JSPatch</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul>
<li>作者bang(腾讯)<a href="http://blog.cnbang.net" target="_blank" rel="external">个人博客</a>，<a href="https://github.com/bang590/JSPatch" target="_blank" rel="external">github</a></li>
<li>项目创建于2015-5</li>
<li><a href="http://jspatch.com" target="_blank" rel="external">JSPatch接入平台</a></li>
<li>淘宝，美团等都有使用，SDK后台接入统计数据超过1200个应用</li>
<li>JSPatch交流群(207283178)</li>
</ul>
<h4 id="需要的基础知识"><a href="#需要的基础知识" class="headerlink" title="需要的基础知识"></a>需要的基础知识</h4><p>-<code>JavaScriptCore的使用</code><br>-<code>runtime</code></p>
<h4 id="JSPatch原理"><a href="#JSPatch原理" class="headerlink" title="JSPatch原理"></a>JSPatch原理</h4><ul>
<li>运行时修复不用等待App重新启动，iOS 利用运行时特性修改函数的IMP，从而达到修复目的。</li>
<li>所谓的脚本执行其实只是增加了内存中的类以及新增的IMP，以及对OC中的IMP的组合。</li>
<li>jspatch脚本只是一套规则，jspatch内部对其进行了字符串截取的转换，为类名，方法名，以及参数，然后利用运行时的方法进行调用。</li>
<li>evaluateScript方法只是让脚本去调用js方法域中的方法，然后iOS会去调用对应IMP，所以JSPatch文件的作用是增加js方法域中的方法。</li>
<li>能做到通过JS调用和改写OC方法最根本的原因是 Objective-C 是动态语言，OC上所有方法的调用/类的生成都通过 Objective-C Runtime 在运行时进行，我们可以通过类名/方法名反射得到相应的类和方法，具体来说能做的有：<ul>
<li>通过类名和方法名得到具体的类以及方法</li>
<li>替换某个类的方法的实现</li>
<li>注册一个新的类并且为该类添加方法实现</li>
</ul>
</li>
</ul>
<h4 id="JSPatch具体实现"><a href="#JSPatch具体实现" class="headerlink" title="JSPatch具体实现"></a>JSPatch具体实现</h4><blockquote>
<ul>
<li>最外层需要的是js的调用能力，所以需要定义js函数，提供脚本调用的接口</li>
<li>又因为我们需要用到运行时的函数，所以需要利用js来调用OC中的方法，所以我们需要生成一系列的IMP</li>
</ul>
</blockquote>
<ul>
<li>require</li>
<li>JS接口(.alloc().init())/(NSInvocation)<a href="http://mobile.9sssd.com/ios/art/915" target="_blank" rel="external">invocation对消息的直接调用</a></li>
<li>消息传递(JSContext)</li>
<li><code>对象持有/转换</code></li>
<li>类型转换</li>
<li><code>方法替换</code></li>
<li><code>新增方法</code></li>
<li>property</li>
</ul>
<p><code>参考</code>:<a href="http://blog.cnbang.net/tech/2808/" target="_blank" rel="external">bang-JSPatch原理详解</a></p>
<h4 id="JSPatch使用流程"><a href="#JSPatch使用流程" class="headerlink" title="JSPatch使用流程"></a>JSPatch使用流程</h4><ul>
<li>开发热修复脚本</li>
<li>压缩为zip(节省空间)</li>
<li>上传脚本到服务器</li>
<li>app每次启动判断本地脚本是否超过一天，如果超过一天向服务器请求新的，否则检查该脚本是否合法如果不合法就删除</li>
<li>获取到脚本文件后，调用JSPatch引擎，执行脚本文件进行修复</li>
</ul>
<blockquote>
<p>补充:终端获取脚本文件是需要一个策略的，最简单的就是，终端根据版本号，获取与该版本号有关的脚本文件：<br>如：本次终端发布的版本是：1.0.3，那在上传脚本文件时，就可以将脚本文件的名称定义为：patch1_0_3.js<br>这样终端就可以根据版本号，动态组织脚本的下载地址，而且一个版本对应一个脚本文件，简单明了～～</p>
</blockquote>
<p><img src="/12/2016/热修复技术在移动端的应用/./20151127111300698.jpeg" alt="Alt text"></p>
<p><img src="/12/2016/热修复技术在移动端的应用/../images/Snip20160714_1.png" alt="Alt text"></p>
<h4 id="JSPatch的引入"><a href="#JSPatch的引入" class="headerlink" title="JSPatch的引入"></a>JSPatch的引入</h4><ul>
<li>引入SDK<ul>
<li>原版SDK</li>
<li>酷狗SDK</li>
<li>自定义：源文件+版本管理规则</li>
</ul>
</li>
<li>项目启动函数中添加JSPatch引擎启动命令</li>
<li>脚本分发平台接入<ul>
<li>官方平台(<a href="http://jspatch.com/Docs/price" target="_blank" rel="external">http://jspatch.com/Docs/price</a>)</li>
<li>酷狗后台：秘钥生成，url传入</li>
</ul>
</li>
</ul>
<h4 id="JSPatch中的js语法"><a href="#JSPatch中的js语法" class="headerlink" title="JSPatch中的js语法"></a>JSPatch中的js语法</h4><p><a href="https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95#%E5%B8%B8%E9%87%8F%E6%9E%9A%E4%B8%BE" target="_blank" rel="external">1.https://github.com/bang590/JSPatch/wiki/JSPatch-基础用法#常量枚举</a></p>
<p><a href="http://bang590.github.io/JSPatchConvertor/" target="_blank" rel="external">2.语法转译工具</a></p>
<p>3.一些踩过的坑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">tmpLitterImg.length  不能写成   tmpLitterImg.length()</div><div class="line">infoModel.kugouId()  不能写成  infoModel.kugouId</div><div class="line">self.headerView().sd__setImageWithURL//单下划线要用双下划线</div><div class="line">self.locationIconView().right()//left/right后要加()</div><div class="line">UIScreen.mainScreen().bounds().width//CGrect这种结构取值不用加()</div><div class="line">//宏要直接用具体的值</div><div class="line">//枚举要用具体的数字</div><div class="line">//int类型转string类型要用下面的方法</div><div class="line">self.viewerNumLbl().setText(&apos;&apos; + info.viewerNum());</div></pre></td></tr></table></figure></p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul>
<li>swift因为没有OC的动态性，所以暂时没有成熟的只是针对swift的热修复技术方案</li>
<li>当发布了新版，原来下发的脚本怎么办？<ul>
<li>根据版本号进行js文件的读取，新版本情况下旧版本文件不会再被执行</li>
</ul>
</li>
<li>关于实时推送的实现？<ul>
<li>现在的技术方案是使用长连接进行推送，单台服务器暂时能够能够支撑200万的链接量</li>
</ul>
</li>
<li>服务器需要做的<ul>
<li>上传功能</li>
<li>MD5唯一性验证</li>
<li>CDN缓存，加速(待定)</li>
<li>对文件进行RSA加密同时生成MD5签名</li>
<li>http接口1<ul>
<li>参数：appversion</li>
<li>返回<ul>
<li>patchId</li>
<li>appversion</li>
<li>fileHash</li>
<li>downloadUrl</li>
</ul>
</li>
</ul>
</li>
<li>http接口2返回加密后的文件</li>
</ul>
</li>
</ul>
<hr>
<pre><code>- 在最开始增加参数，配置是否在主线程执行，主要解决假如首页崩溃，可以堵塞。
- 唤醒的时候进行下载，24小时执行一次
</code></pre><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><ul>
<li>javascriptCore的使用</li>
<li>JSPatchDemo</li>
<li>在繁星中的使用</li>
</ul>
<hr>
<ul>
<li>启动崩溃两次判断</li>
<li>本地回滚<ul>
<li>js文件的版本号，如果这个版本号本地已经有了，那就不再下发了</li>
<li>本地保存的上一次的这个文件是加密呢还是明文呢？</li>
</ul>
</li>
<li>MD5两次加密</li>
</ul>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[category内部实现原理]]></title>
      <url>/2015/12/15/2015/category%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p>见过的比较好的一篇讲述category实现的博客，在此做个记录<br><a id="more"></a></p>
<p>转载自：<a href="http://tech.meituan.com/DiveIntoCategory.html" target="_blank" rel="external">http://tech.meituan.com/DiveIntoCategory.html</a></p>
<p>无论一个类设计的多么完美，在未来的需求演进中，都有可能会碰到一些无法预测的情况。那怎么扩展已有的类呢？一般而言，继承和组合是不错的选择。但是在Objective-C 2.0中，又提供了category这个语言特性，可以动态地为已有类添加新行为。如今category已经遍布于Objective-C代码的各个角落，从Apple官方的framework到各个开源框架，从功能繁复的大型APP到简单的应用，catagory无处不在。本文对category做了比较全面的整理，希望对读者有所裨益。</p>
<p>简介</p>
<p>本文作者来自美团酒店旅游事业群iOS研发组。我们致力于创造价值、提升效率、追求卓越。欢迎大家加入我们（简历请发送到邮箱majia03@meituan.com）。<br>本文系学习Objective-C的runtime源码时整理所成，主要剖析了category在runtime层的实现原理以及和category相关的方方面面，内容包括：</p>
<ul>
<li>初入宝地-category简介</li>
<li>连类比事-category和extension</li>
<li>挑灯细览-category真面目</li>
<li>追本溯源-category如何加载</li>
<li>旁枝末叶-category和+load方法</li>
<li>触类旁通-category和方法覆盖</li>
<li>更上一层-category和关联对象</li>
</ul>
<h2 id="1、初入宝地-category简介"><a href="#1、初入宝地-category简介" class="headerlink" title="1、初入宝地-category简介"></a>1、初入宝地-category简介</h2><p>category是Objective-C 2.0之后添加的语言特性，category的主要作用是为已经存在的类添加方法。除此之外，apple还推荐了category的另外两个使用场景1</p>
<ul>
<li>可以把类的实现分开在几个不同的文件里面。这样做有几个显而易见的好处，a)可以减少单个文件的体积 b)可以把不同的功能组织到不同的category里 c)可以由多个开发者共同完成一个类 d)可以按需加载想要的category 等等。</li>
<li>声明私有方法</li>
</ul>
<p>不过除了apple推荐的使用场景，广大开发者脑洞大开，还衍生出了category的其他几个使用场景：</p>
<ul>
<li>模拟多继承</li>
<li>把framework的私有方法公开</li>
</ul>
<p>Objective-C的这个语言特性对于纯动态语言来说可能不算什么，比如javascript，你可以随时为一个“类”或者对象添加任意方法和实例变量。但是对于不是那么“动态”的语言而言，这确实是一个了不起的特性。</p>
<h2 id="2、连类比事-category和extension"><a href="#2、连类比事-category和extension" class="headerlink" title="2、连类比事-category和extension"></a>2、连类比事-category和extension</h2><p>extension看起来很像一个匿名的category，但是extension和有名字的category几乎完全是两个东西。 extension在编译期决议，它就是类的一部分，在编译期和头文件里的@interface以及实现文件里的@implement一起形成一个完整的类，它伴随类的产生而产生，亦随之一起消亡。extension一般用来隐藏类的私有信息，你必须有一个类的源码才能为一个类添加extension，所以你无法为系统的类比如NSString添加extension。（详见2）</p>
<p>但是category则完全不一样，它是在运行期决议的。<br>就category和extension的区别来看，我们可以推导出一个明显的事实，extension可以添加实例变量，而category是无法添加实例变量的（因为在运行期，对象的内存布局已经确定，如果添加实例变量就会破坏类的内部布局，这对编译型语言来说是灾难性的）。</p>
<h2 id="3、挑灯细览-category真面目"><a href="#3、挑灯细览-category真面目" class="headerlink" title="3、挑灯细览-category真面目"></a>3、挑灯细览-category真面目</h2><p>我们知道，所有的OC类和对象，在runtime层都是用struct表示的，category也不例外，在runtime层，category用结构体category_t（在objc-runtime-new.h中可以找到此定义），它包含了<br>1)、类的名字（name）<br>2)、类（cls）<br>3)、category中所有给类添加的实例方法的列表（instanceMethods）<br>4)、category中所有添加的类方法的列表（classMethods）<br>5)、category实现的所有协议的列表（protocols）<br>6)、category中添加的所有属性（instanceProperties）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">typedef struct category_t &#123;</div><div class="line">    const char *name;</div><div class="line">    classref_t cls;</div><div class="line">    struct method_list_t *instanceMethods;</div><div class="line">    struct method_list_t *classMethods;</div><div class="line">    struct protocol_list_t *protocols;</div><div class="line">    struct property_list_t *instanceProperties;</div><div class="line">&#125; category_t;</div></pre></td></tr></table></figure>
<p>从category的定义也可以看出category的可为（可以添加实例方法，类方法，甚至可以实现协议，添加属性）和不可为（无法添加实例变量）。<br>ok，我们先去写一个category看一下category到底为何物：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">MyClass.h：</div><div class="line"></div><div class="line"></div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface MyClass : NSObject</div><div class="line"></div><div class="line">- (void)printName;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@interface MyClass(MyAddition)</div><div class="line"></div><div class="line">@property(nonatomic, copy) NSString *name;</div><div class="line"></div><div class="line">- (void)printName;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">MyClass.m：</div><div class="line"></div><div class="line"></div><div class="line">#import &quot;MyClass.h&quot;</div><div class="line"></div><div class="line">@implementation MyClass</div><div class="line"></div><div class="line">- (void)printName</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;%@&quot;,@&quot;MyClass&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation MyClass(MyAddition)</div><div class="line"></div><div class="line">- (void)printName</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;%@&quot;,@&quot;MyAddition&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure></p>
<p>我们使用clang的命令去看看category到底会变成什么：</p>
<p>clang -rewrite-objc MyClass.m</p>
<p>好吧，我们得到了一个3M大小，10w多行的.cpp文件（这绝对是Apple值得吐槽的一点），我们忽略掉所有和我们无关的东西，在文件的最后，我们找到了如下代码片段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">static struct /*_method_list_t*/ &#123;</div><div class="line">unsigned int entsize;  // sizeof(struct _objc_method)</div><div class="line">unsigned int method_count;</div><div class="line">struct _objc_method method_list[1];</div><div class="line">&#125; _OBJC_$_CATEGORY_INSTANCE_METHODS_MyClass_$_MyAddition __attribute__ ((used, section (&quot;__DATA,__objc_const&quot;))) = &#123;</div><div class="line">sizeof(_objc_method),</div><div class="line">1,</div><div class="line">&#123;&#123;(struct objc_selector *)&quot;printName&quot;, &quot;v16@0:8&quot;, (void *)_I_MyClass_MyAddition_printName&#125;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">static struct /*_prop_list_t*/ &#123;</div><div class="line">unsigned int entsize;  // sizeof(struct _prop_t)</div><div class="line">unsigned int count_of_properties;</div><div class="line">struct _prop_t prop_list[1];</div><div class="line">&#125; _OBJC_$_PROP_LIST_MyClass_$_MyAddition __attribute__ ((used, section (&quot;__DATA,__objc_const&quot;))) = &#123;</div><div class="line">sizeof(_prop_t),</div><div class="line">1,</div><div class="line">&#123;&#123;&quot;name&quot;,&quot;T@\&quot;NSString\&quot;,C,N&quot;&#125;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">extern &quot;C&quot; __declspec(dllexport) struct _class_t OBJC_CLASS_$_MyClass;</div><div class="line"></div><div class="line">static struct _category_t _OBJC_$_CATEGORY_MyClass_$_MyAddition __attribute__ ((used, section (&quot;__DATA,__objc_const&quot;))) =</div><div class="line">&#123;</div><div class="line">&quot;MyClass&quot;,</div><div class="line">0, // &amp;OBJC_CLASS_$_MyClass,</div><div class="line">(const struct _method_list_t *)&amp;_OBJC_$_CATEGORY_INSTANCE_METHODS_MyClass_$_MyAddition,</div><div class="line">0,</div><div class="line">0,</div><div class="line">(const struct _prop_list_t *)&amp;_OBJC_$_PROP_LIST_MyClass_$_MyAddition,</div><div class="line">&#125;;</div><div class="line">static void OBJC_CATEGORY_SETUP_$_MyClass_$_MyAddition(void ) &#123;</div><div class="line">_OBJC_$_CATEGORY_MyClass_$_MyAddition.cls = &amp;OBJC_CLASS_$_MyClass;</div><div class="line">&#125;</div><div class="line">#pragma section(&quot;.objc_inithooks$B&quot;, long, read, write)</div><div class="line">__declspec(allocate(&quot;.objc_inithooks$B&quot;)) static void *OBJC_CATEGORY_SETUP[] = &#123;</div><div class="line">(void *)&amp;OBJC_CATEGORY_SETUP_$_MyClass_$_MyAddition,</div><div class="line">&#125;;</div><div class="line">static struct _class_t *L_OBJC_LABEL_CLASS_$ [1] __attribute__((used, section (&quot;__DATA, __objc_classlist,regular,no_dead_strip&quot;)))= &#123;</div><div class="line">&amp;OBJC_CLASS_$_MyClass,</div><div class="line">&#125;;</div><div class="line">static struct _class_t *_OBJC_LABEL_NONLAZY_CLASS_$[] = &#123;</div><div class="line">&amp;OBJC_CLASS_$_MyClass,</div><div class="line">&#125;;</div><div class="line">static struct _category_t *L_OBJC_LABEL_CATEGORY_$ [1] __attribute__((used, section (&quot;__DATA, __objc_catlist,regular,no_dead_strip&quot;)))= &#123;</div><div class="line">&amp;_OBJC_$_CATEGORY_MyClass_$_MyAddition,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们可以看到，<br>1)、首先编译器生成了实例方法列表OBJC$CATEGORY_INSTANCE_METHODS_MyClass$MyAddition和属性列表_OBJC$PROP_LIST_MyClass$MyAddition，两者的命名都遵循了公共前缀+类名+category名字的命名方式，而且实例方法列表里面填充的正是我们在MyAddition这个category里面写的方法printName，而属性列表里面填充的也正是我们在MyAddition里添加的name属性。还有一个需要注意到的事实就是category的名字用来给各种列表以及后面的category结构体本身命名，而且有static来修饰，所以在同一个编译单元里我们的category名不能重复，否则会出现编译错误。<br>2)、其次，编译器生成了category本身_OBJC$CATEGORY_MyClass$MyAddition，并用前面生成的列表来初始化category本身。<br>3)、最后，编译器在DATA段下的objc_catlist section里保存了一个大小为1的category_t的数组L_OBJC_LABEL<em>CATEGORY$（当然，如果有多个category，会生成对应长度的数组^</em>^），用于运行期category的加载。<br>到这里，编译器的工作就接近尾声了，对于category在运行期怎么加载，我们下节揭晓。</p>
<p>4、追本溯源-category如何加载</p>
<p>我们知道，Objective-C的运行是依赖OC的runtime的，而OC的runtime和其他系统库一样，是OS X和iOS通过dyld动态加载的。<br>想了解更多dyld地同学可以移步这里（3）。</p>
<p>对于OC运行时，入口方法如下（在objc-os.mm文件中）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">void _objc_init(void)</div><div class="line">&#123;</div><div class="line">    static bool initialized = false;</div><div class="line">    if (initialized) return;</div><div class="line">    initialized = true;</div><div class="line"></div><div class="line">    // fixme defer initialization until an objc-using image is found?</div><div class="line">    environ_init();</div><div class="line">    tls_init();</div><div class="line">    lock_init();</div><div class="line">    exception_init();</div><div class="line"></div><div class="line">    // Register for unmap first, in case some +load unmaps something</div><div class="line">    _dyld_register_func_for_remove_image(&amp;unmap_image);</div><div class="line">    dyld_register_image_state_change_handler(dyld_image_state_bound,</div><div class="line">                                            1/*batch*/, &amp;map_images);</div><div class="line">    dyld_register_image_state_change_handler(dyld_image_state_dependents_initialized, 0/*not batch*/, &amp;load_images);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>category被附加到类上面是在map_images的时候发生的，在new-ABI的标准下，_objc_init里面的调用的map_images最终会调用objc-runtime-new.mm里面的_read_images方法，而在_read_images方法的结尾，有以下的代码片段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">// Discover categories.</div><div class="line">    for (EACH_HEADER) &#123;</div><div class="line">        category_t **catlist =</div><div class="line">            _getObjc2CategoryList(hi, &amp;count);</div><div class="line">        for (i = 0; i &lt; count; i++) &#123;</div><div class="line">            category_t *cat = catlist[i];</div><div class="line">            class_t *cls = remapClass(cat-&gt;cls);</div><div class="line"></div><div class="line">            if (!cls) &#123;</div><div class="line">                // Category&apos;s target class is missing (probably weak-linked).</div><div class="line">                // Disavow any knowledge of this category.</div><div class="line">                catlist[i] = NULL;</div><div class="line">                if (PrintConnecting) &#123;</div><div class="line">                    _objc_inform(&quot;CLASS: IGNORING category \?\?\?(%s) %p with &quot;</div><div class="line">                                &quot;missing weak-linked target class&quot;,</div><div class="line">                                cat-&gt;name, cat);</div><div class="line">                &#125;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // Process this category.</div><div class="line">            // First, register the category with its target class.</div><div class="line">            // Then, rebuild the class&apos;s method lists (etc) if</div><div class="line">            // the class is realized.</div><div class="line">            BOOL classExists = NO;</div><div class="line">            if (cat-&gt;instanceMethods ||  cat-&gt;protocols</div><div class="line">                ||  cat-&gt;instanceProperties)</div><div class="line">            &#123;</div><div class="line">                addUnattachedCategoryForClass(cat, cls, hi);</div><div class="line">                if (isRealized(cls)) &#123;</div><div class="line">                    remethodizeClass(cls);</div><div class="line">                    classExists = YES;</div><div class="line">                &#125;</div><div class="line">                if (PrintConnecting) &#123;</div><div class="line">                    _objc_inform(&quot;CLASS: found category -%s(%s) %s&quot;,</div><div class="line">                                getName(cls), cat-&gt;name,</div><div class="line">                                classExists ? &quot;on existing class&quot; : &quot;&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if (cat-&gt;classMethods  ||  cat-&gt;protocols</div><div class="line">                /* ||  cat-&gt;classProperties */)</div><div class="line">            &#123;</div><div class="line">                addUnattachedCategoryForClass(cat, cls-&gt;isa, hi);</div><div class="line">                if (isRealized(cls-&gt;isa)) &#123;</div><div class="line">                    remethodizeClass(cls-&gt;isa);</div><div class="line">                &#125;</div><div class="line">                if (PrintConnecting) &#123;</div><div class="line">                    _objc_inform(&quot;CLASS: found category +%s(%s)&quot;,</div><div class="line">                                getName(cls), cat-&gt;name);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>首先，我们拿到的catlist就是上节中讲到的编译器为我们准备的category_t数组，关于是如何加载catlist本身的，我们暂且不表，这和category本身的关系也不大，有兴趣的同学可以去研究以下Apple的二进制格式和load机制。<br>略去PrintConnecting这个用于log的东西，这段代码很容易理解：<br>1)、把category的实例方法、协议以及属性添加到类上<br>2)、把category的类方法和协议添加到类的metaclass上</p>
<p>值得注意的是，在代码中有一小段注释 / || cat-&gt;classProperties /，看来苹果有过给类添加属性的计划啊。<br>ok，我们接着往里看，category的各种列表是怎么最终添加到类上的，就拿实例方法列表来说吧：<br>在上述的代码片段里，addUnattachedCategoryForClass只是把类和category做一个关联映射，而remethodizeClass才是真正去处理添加事宜的功臣。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">static void remethodizeClass(class_t *cls)</div><div class="line">&#123;</div><div class="line">    category_list *cats;</div><div class="line">    BOOL isMeta;</div><div class="line"></div><div class="line">    rwlock_assert_writing(&amp;runtimeLock);</div><div class="line"></div><div class="line">    isMeta = isMetaClass(cls);</div><div class="line"></div><div class="line">    // Re-methodizing: check for more categories</div><div class="line">    if ((cats = unattachedCategoriesForClass(cls))) &#123;</div><div class="line">        chained_property_list *newproperties;</div><div class="line">        const protocol_list_t **newprotos;</div><div class="line"></div><div class="line">        if (PrintConnecting) &#123;</div><div class="line">            _objc_inform(&quot;CLASS: attaching categories to class &apos;%s&apos; %s&quot;,</div><div class="line">                        getName(cls), isMeta ? &quot;(meta)&quot; : &quot;&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Update methods, properties, protocols</div><div class="line"></div><div class="line">        BOOL vtableAffected = NO;</div><div class="line">        attachCategoryMethods(cls, cats, &amp;vtableAffected);</div><div class="line"></div><div class="line">        newproperties = buildPropertyList(NULL, cats, isMeta);</div><div class="line">        if (newproperties) &#123;</div><div class="line">            newproperties-&gt;next = cls-&gt;data()-&gt;properties;</div><div class="line">            cls-&gt;data()-&gt;properties = newproperties;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        newprotos = buildProtocolList(cats, NULL, cls-&gt;data()-&gt;protocols);</div><div class="line">        if (cls-&gt;data()-&gt;protocols  &amp;&amp;  cls-&gt;data()-&gt;protocols != newprotos) &#123;</div><div class="line">            _free_internal(cls-&gt;data()-&gt;protocols);</div><div class="line">        &#125;</div><div class="line">        cls-&gt;data()-&gt;protocols = newprotos;</div><div class="line"></div><div class="line">        _free_internal(cats);</div><div class="line"></div><div class="line">        // Update method caches and vtables</div><div class="line">        flushCaches(cls);</div><div class="line">        if (vtableAffected) flushVtables(cls);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而对于添加类的实例方法而言，又会去调用attachCategoryMethods这个方法，我们去看下attachCategoryMethods：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">static void</div><div class="line">attachCategoryMethods(class_t *cls, category_list *cats,</div><div class="line">                      BOOL *inoutVtablesAffected)</div><div class="line">&#123;</div><div class="line">    if (!cats) return;</div><div class="line">    if (PrintReplacedMethods) printReplacements(cls, cats);</div><div class="line"></div><div class="line">    BOOL isMeta = isMetaClass(cls);</div><div class="line">    method_list_t **mlists = (method_list_t **)</div><div class="line">        _malloc_internal(cats-&gt;count * sizeof(*mlists));</div><div class="line"></div><div class="line">    // Count backwards through cats to get newest categories first</div><div class="line">    int mcount = 0;</div><div class="line">    int i = cats-&gt;count;</div><div class="line">    BOOL fromBundle = NO;</div><div class="line">    while (i--) &#123;</div><div class="line">        method_list_t *mlist = cat_method_list(cats-&gt;list[i].cat, isMeta);</div><div class="line">        if (mlist) &#123;</div><div class="line">            mlists[mcount++] = mlist;</div><div class="line">            fromBundle |= cats-&gt;list[i].fromBundle;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    attachMethodLists(cls, mlists, mcount, NO, fromBundle, inoutVtablesAffected);</div><div class="line"></div><div class="line">    _free_internal(mlists);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>attachCategoryMethods做的工作相对比较简单，它只是把所有category的实例方法列表拼成了一个大的实例方法列表，然后转交给了attachMethodLists方法（我发誓，这是本节我们看的最后一段代码了^_^），这个方法有点长，我们只看一小段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">for (uint32_t m = 0;</div><div class="line">            (scanForCustomRR || scanForCustomAWZ)  &amp;&amp;  m &lt; mlist-&gt;count;</div><div class="line">            m++)</div><div class="line">        &#123;</div><div class="line">            SEL sel = method_list_nth(mlist, m)-&gt;name;</div><div class="line">            if (scanForCustomRR  &amp;&amp;  isRRSelector(sel)) &#123;</div><div class="line">                cls-&gt;setHasCustomRR();</div><div class="line">                scanForCustomRR = false;</div><div class="line">            &#125; else if (scanForCustomAWZ  &amp;&amp;  isAWZSelector(sel)) &#123;</div><div class="line">                cls-&gt;setHasCustomAWZ();</div><div class="line">                scanForCustomAWZ = false;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Fill method list array</div><div class="line">        newLists[newCount++] = mlist;</div><div class="line">    .</div><div class="line">    .</div><div class="line">    .</div><div class="line"></div><div class="line">    // Copy old methods to the method list array</div><div class="line">    for (i = 0; i &lt; oldCount; i++) &#123;</div><div class="line">        newLists[newCount++] = oldLists[i];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>需要注意的有两点：<br>1)、category的方法没有“完全替换掉”原来类已经有的方法，也就是说如果category和原来类都有methodA，那么category附加完成之后，类的方法列表里会有两个methodA<br>2)、category的方法被放到了新方法列表的前面，而原来类的方法被放到了新方法列表的后面，这也就是我们平常所说的category的方法会“覆盖”掉原来类的同名方法，这是因为运行时在查找方法的时候是顺着方法列表的顺序查找的，它只要一找到对应名字的方法，就会罢休^_^，殊不知后面可能还有一样名字的方法。</p>
<h2 id="5、旁枝末叶-category和-load方法"><a href="#5、旁枝末叶-category和-load方法" class="headerlink" title="5、旁枝末叶-category和+load方法"></a>5、旁枝末叶-category和+load方法</h2><p>我们知道，在类和category中都可以有+load方法，那么有两个问题：<br>1)、在类的+load方法调用的时候，我们可以调用category中声明的方法么？<br>2)、这么些个+load方法，调用顺序是咋样的呢？<br>鉴于上述几节我们看的代码太多了，对于这两个问题我们先来看一点直观的：</p>
<p>我们的代码里有MyClass和MyClass的两个category （Category1和Category2），MyClass和两个category都添加了+load方法，并且Category1和Category2都写了MyClass的printName方法。<br>在Xcode中点击Edit Scheme，添加如下两个环境变量（可以在执行load方法以及加载category的时候打印log信息，更多的环境变量选项可参见objc-private.h）:</p>
<p>运行项目，我们会看到控制台打印很多东西出来，我们只找到我们想要的信息，顺序如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">objc[1187]: REPLACED: -[MyClass printName] by category Category1</div><div class="line">objc[1187]: REPLACED: -[MyClass printName] by category Category2</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">objc[1187]: LOAD: class &apos;MyClass&apos; scheduled for +load</div><div class="line">objc[1187]: LOAD: category &apos;MyClass(Category1)&apos; scheduled for +load</div><div class="line">objc[1187]: LOAD: category &apos;MyClass(Category2)&apos; scheduled for +load</div><div class="line">objc[1187]: LOAD: +[MyClass load]</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">objc[1187]: LOAD: +[MyClass(Category1) load]</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">objc[1187]: LOAD: +[MyClass(Category2) load]</div></pre></td></tr></table></figure></p>
<p>所以，对于上面两个问题，答案是很明显的：<br>1)、可以调用，因为附加category到类的工作会先于+load方法的执行<br>2)、+load的执行顺序是先类，后category，而category的+load执行顺序是根据编译顺序决定的。<br>目前的编译顺序是这样的：</p>
<p>我们调整一个Category1和Category2的编译顺序，run。ok，我们可以看到控制台的输出顺序变了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">objc[1187]: REPLACED: -[MyClass printName] by category Category2</div><div class="line">objc[1187]: REPLACED: -[MyClass printName] by category Category1</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">objc[1187]: LOAD: class &apos;MyClass&apos; scheduled for +load</div><div class="line">objc[1187]: LOAD: category &apos;MyClass(Category2)&apos; scheduled for +load</div><div class="line">objc[1187]: LOAD: category &apos;MyClass(Category1)&apos; scheduled for +load</div><div class="line">objc[1187]: LOAD: +[MyClass load]</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">objc[1187]: LOAD: +[MyClass(Category2) load]</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">objc[1187]: LOAD: +[MyClass(Category1) load]</div></pre></td></tr></table></figure></p>
<p>虽然对于+load的执行顺序是这样，但是对于“覆盖”掉的方法，则会先找到最后一个编译的category里的对应方法。<br>这一节我们只是用很直观的方式得到了问题的答案，有兴趣的同学可以继续去研究一下OC的运行时代码。</p>
<h3 id="6、触类旁通-category和方法覆盖"><a href="#6、触类旁通-category和方法覆盖" class="headerlink" title="6、触类旁通-category和方法覆盖"></a>6、触类旁通-category和方法覆盖</h3><p>鉴于上面几节我们已经把原理都讲了，这一节只有一个问题:<br>怎么调用到原来类中被category覆盖掉的方法？<br>对于这个问题，我们已经知道category其实并不是完全替换掉原来类的同名方法，只是category在方法列表的前面而已，所以我们只要顺着方法列表找到最后一个对应名字的方法，就可以调用原来类的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Class currentClass = [MyClass class];</div><div class="line">MyClass *my = [[MyClass alloc] init];</div><div class="line"></div><div class="line">if (currentClass) &#123;</div><div class="line">    unsigned int methodCount;</div><div class="line">    Method *methodList = class_copyMethodList(currentClass, &amp;methodCount);</div><div class="line">    IMP lastImp = NULL;</div><div class="line">    SEL lastSel = NULL;</div><div class="line">    for (NSInteger i = 0; i &lt; methodCount; i++) &#123;</div><div class="line">        Method method = methodList[i];</div><div class="line">        NSString *methodName = [NSString stringWithCString:sel_getName(method_getName(method))</div><div class="line">                                        encoding:NSUTF8StringEncoding];</div><div class="line">        if ([@&quot;printName&quot; isEqualToString:methodName]) &#123;</div><div class="line">            lastImp = method_getImplementation(method);</div><div class="line">            lastSel = method_getName(method);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    typedef void (*fn)(id,SEL);</div><div class="line"></div><div class="line">    if (lastImp != NULL) &#123;</div><div class="line">        fn f = (fn)lastImp;</div><div class="line">        f(my,lastSel);</div><div class="line">    &#125;</div><div class="line">    free(methodList);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="7、更上一层-category和关联对象"><a href="#7、更上一层-category和关联对象" class="headerlink" title="7、更上一层-category和关联对象"></a>7、更上一层-category和关联对象</h2><p>如上所见，我们知道在category里面是无法为category添加实例变量的。但是我们很多时候需要在category中添加和对象关联的值，这个时候可以求助关联对象来实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">MyClass+Category1.h:</div><div class="line"></div><div class="line"></div><div class="line">#import &quot;MyClass.h&quot;</div><div class="line"></div><div class="line">@interface MyClass (Category1)</div><div class="line"></div><div class="line">@property(nonatomic,copy) NSString *name;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">MyClass+Category1.m:</div><div class="line"></div><div class="line"></div><div class="line">#import &quot;MyClass+Category1.h&quot;</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line"></div><div class="line">@implementation MyClass (Category1)</div><div class="line"></div><div class="line">+ (void)load</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;%@&quot;,@&quot;load in Category1&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setName:(NSString *)name</div><div class="line">&#123;</div><div class="line">    objc_setAssociatedObject(self,</div><div class="line">                            &quot;name&quot;,</div><div class="line">                            name,</div><div class="line">                            OBJC_ASSOCIATION_COPY);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString*)name</div><div class="line">&#123;</div><div class="line">    NSString *nameObject = objc_getAssociatedObject(self, &quot;name&quot;);</div><div class="line">    return nameObject;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure></p>
<p>但是关联对象又是存在什么地方呢？ 如何存储？ 对象销毁时候如何处理关联对象呢？<br>我们去翻一下runtime的源码，在objc-references.mm文件中有个方法_object_set_associative_reference：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">void _object_set_associative_reference(id object, void *key, id value, uintptr_t policy) &#123;</div><div class="line">    // retain the new value (if any) outside the lock.</div><div class="line">    ObjcAssociation old_association(0, nil);</div><div class="line">    id new_value = value ? acquireValue(value, policy) : nil;</div><div class="line">    &#123;</div><div class="line">        AssociationsManager manager;</div><div class="line">        AssociationsHashMap &amp;associations(manager.associations());</div><div class="line">        disguised_ptr_t disguised_object = DISGUISE(object);</div><div class="line">        if (new_value) &#123;</div><div class="line">            // break any existing association.</div><div class="line">            AssociationsHashMap::iterator i = associations.find(disguised_object);</div><div class="line">            if (i != associations.end()) &#123;</div><div class="line">                // secondary table exists</div><div class="line">                ObjectAssociationMap *refs = i-&gt;second;</div><div class="line">                ObjectAssociationMap::iterator j = refs-&gt;find(key);</div><div class="line">                if (j != refs-&gt;end()) &#123;</div><div class="line">                    old_association = j-&gt;second;</div><div class="line">                    j-&gt;second = ObjcAssociation(policy, new_value);</div><div class="line">                &#125; else &#123;</div><div class="line">                    (*refs)[key] = ObjcAssociation(policy, new_value);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                // create the new association (first time).</div><div class="line">                ObjectAssociationMap *refs = new ObjectAssociationMap;</div><div class="line">                associations[disguised_object] = refs;</div><div class="line">                (*refs)[key] = ObjcAssociation(policy, new_value);</div><div class="line">                _class_setInstancesHaveAssociatedObjects(_object_getClass(object));</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            // setting the association to nil breaks the association.</div><div class="line">            AssociationsHashMap::iterator i = associations.find(disguised_object);</div><div class="line">            if (i !=  associations.end()) &#123;</div><div class="line">                ObjectAssociationMap *refs = i-&gt;second;</div><div class="line">                ObjectAssociationMap::iterator j = refs-&gt;find(key);</div><div class="line">                if (j != refs-&gt;end()) &#123;</div><div class="line">                    old_association = j-&gt;second;</div><div class="line">                    refs-&gt;erase(j);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    // release the old value (outside of the lock).</div><div class="line">    if (old_association.hasValue()) ReleaseValue()(old_association);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们可以看到所有的关联对象都由AssociationsManager管理，而AssociationsManager定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class AssociationsManager &#123;</div><div class="line">    static OSSpinLock _lock;</div><div class="line">    static AssociationsHashMap *_map;              // associative references:  object pointer -&gt; PtrPtrHashMap.</div><div class="line">public:</div><div class="line">    AssociationsManager()  &#123; OSSpinLockLock(&amp;_lock); &#125;</div><div class="line">    ~AssociationsManager()  &#123; OSSpinLockUnlock(&amp;_lock); &#125;</div><div class="line"></div><div class="line">    AssociationsHashMap &amp;associations() &#123;</div><div class="line">        if (_map == NULL)</div><div class="line">            _map = new AssociationsHashMap();</div><div class="line">        return *_map;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>AssociationsManager里面是由一个静态AssociationsHashMap来存储所有的关联对象的。这相当于把所有对象的关联对象都存在一个全局map里面。而map的的key是这个对象的指针地址（任意两个不同对象的指针地址一定是不同的），而这个map的value又是另外一个AssociationsHashMap，里面保存了关联对象的kv对。<br>而在对象的销毁逻辑里面，见objc-runtime-new.mm:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">void *objc_destructInstance(id obj)</div><div class="line">&#123;</div><div class="line">    if (obj) &#123;</div><div class="line">        Class isa_gen = _object_getClass(obj);</div><div class="line">        class_t *isa = newcls(isa_gen);</div><div class="line"></div><div class="line">        // Read all of the flags at once for performance.</div><div class="line">        bool cxx = hasCxxStructors(isa);</div><div class="line">        bool assoc = !UseGC &amp;&amp; _class_instancesHaveAssociatedObjects(isa_gen);</div><div class="line"></div><div class="line">        // This order is important.</div><div class="line">        if (cxx) object_cxxDestruct(obj);</div><div class="line">        if (assoc) _object_remove_assocations(obj);</div><div class="line"></div><div class="line">        if (!UseGC) objc_clear_deallocating(obj);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>嗯，runtime的销毁对象函数objc_destructInstance里面会判断这个对象有没有关联对象，如果有，会调用_object_remove_assocations做关联对象的清理工作。</p>
<p>后记</p>
<p>正如侯捷先生所讲-“源码面前，了无秘密”，Apple的Cocoa Touch框架虽然并不开源，但是Objective-C的runtime和Core Foundation却是完全开放源码的(在<a href="http://www.opensource.apple.com/tarballs/可以下载到全部的开源代码)。" target="_blank" rel="external">http://www.opensource.apple.com/tarballs/可以下载到全部的开源代码)。</a><br>本系列runtime源码学习将会持续更新，意犹未尽的同学可以自行到上述网站下载源码学习。行笔简陋，如有错误，望指正。</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS知识地图]]></title>
      <url>/2015/09/25/2015/iOS%E7%9F%A5%E8%AF%86%E5%9C%B0%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>主要罗列iOS开发中涉及到的基础知识点以及架构和基础的一些方面</p>
<ul>
<li>基础</li>
<li>需求</li>
<li>质量</li>
<li>效率</li>
</ul>
<a id="more"></a>
<h3 id="01-UI视图-基础"><a href="#01-UI视图-基础" class="headerlink" title="01 UI视图(基础)"></a>01 UI视图(基础)</h3><ul>
<li><a href="https://www.jianshu.com/p/2e074db792ba" target="_blank" rel="external">事件传递机制</a> </li>
<li><a href="http://hanson647.com/2017/08/26/iOS中的视图渲染/" target="_blank" rel="external">UI绘制原理</a></li>
<li><a href="http://hanson647.com/2015/07/01/汇总/" target="_blank" rel="external">UI绘制原理2</a></li>
<li>异步绘制原理</li>
<li>流式页面的性能优化</li>
<li>离屏渲染</li>
<li>UIImageView的完成绘制过程</li>
<li>UILabel完整绘制过程</li>
</ul>
<h4 id="事件传递"><a href="#事件传递" class="headerlink" title="事件传递"></a>事件传递</h4><p>1.如何更改响应对象</p>
<p>2.最重要的两个函数</p>
<p>3.传递链和响应链</p>
<p>4.一个事件多次响应</p>
<h4 id="UI绘制原理"><a href="#UI绘制原理" class="headerlink" title="UI绘制原理"></a>UI绘制原理</h4><ul>
<li>卡顿的本质</li>
<li>绘制的时候cpu和gpu怎么分工</li>
<li>绘制优化点</li>
</ul>
<h3 id="02-OC语言-基础"><a href="#02-OC语言-基础" class="headerlink" title="02 OC语言(基础)"></a>02 OC语言(基础)</h3><ul>
<li><a href="https://zhangbuhuai.com/understanding-kvo/" target="_blank" rel="external">KVO，observer</a></li>
<li><a href="http://www.cocoachina.com/ios/20180411/22975.html" target="_blank" rel="external">KVC，set value for key</a></li>
<li><a href="https://www.jianshu.com/p/c9a5fe906457" target="_blank" rel="external">kvc vs kvo</a></li>
<li><a href="http://hanson647.com/2015/12/15/2015/category内部实现原理/" target="_blank" rel="external">分类</a></li>
<li><a href="">分类与拓展区别</a></li>
<li><a href="http://hanson647.com/2016/03/18/2016/转-delegate-KVO-Notification选择/" target="_blank" rel="external">kvo/delegate/notification选择</a></li>
<li>关联对象</li>
<li><a href="https://blog.csdn.net/lzhgxiaoxiong/article/details/47954687" target="_blank" rel="external">copy/strong/weak</a></li>
<li>property</li>
<li>通知(同步执行还是异步？)</li>
</ul>
<h3 id="03-Runtime-基础"><a href="#03-Runtime-基础" class="headerlink" title="03 Runtime(基础)"></a>03 Runtime(基础)</h3><p><a href="http://hanson647.com/2015/08/10/2015/runtime概述/" target="_blank" rel="external">runtime概述</a></p>
<ul>
<li>对象、类对象、元类对象</li>
<li>消息传递机制</li>
<li>消息转发流程</li>
<li>Method-Swizzling</li>
<li>对象、类对象、原类对象的理解、消息传递机制、消息转发流程、Method-Swizzling、ISA-swizzling、动态方法解析、动态添加方法</li>
<li>一个程序启动之后，类对象和方法是如何存在的？</li>
</ul>
<h3 id="04-内存-基础"><a href="#04-内存-基础" class="headerlink" title="04 内存(基础)"></a>04 内存(基础)</h3><ul>
<li>引用计数表</li>
<li>弱引用表</li>
<li>ARC、MRC</li>
<li>循环引用</li>
<li>内存管理</li>
<li>为什么用copy，哪些情况下用copy，为什么用copy?</li>
<li>NSTimer的引用释放(runloop引用timer，timer引用self，导致不能释放)</li>
</ul>
<h3 id="05-Block-基础"><a href="#05-Block-基础" class="headerlink" title="05 Block(基础)"></a>05 Block(基础)</h3><ul>
<li>Block本质</li>
<li>截获变量特性</li>
<li>内存管理</li>
<li>循环引用</li>
</ul>
<h3 id="06-多线程-基础"><a href="#06-多线程-基础" class="headerlink" title="06 多线程(基础)"></a>06 多线程(基础)</h3><ul>
<li>GCD、nsoperation</li>
<li>资源共享</li>
<li>线程同步</li>
<li>SpinLock等</li>
<li>atomic和线程安全</li>
<li>你怎样实现线程安全的？这些线程安全的办法和atomic有什么不一样？atomic的实现机制是怎样</li>
</ul>
<h3 id="07-RunLoop-基础"><a href="#07-RunLoop-基础" class="headerlink" title="07 RunLoop(基础)"></a>07 RunLoop(基础)</h3><ul>
<li>事件循环</li>
<li>用户态</li>
<li>核心态</li>
<li>常驻线程</li>
</ul>
<h3 id="08-网络-基础"><a href="#08-网络-基础" class="headerlink" title="08 网络(基础)"></a>08 网络(基础)</h3><ul>
<li>HTTPS</li>
<li>对称加密算法</li>
<li>非对称加密</li>
<li>DNS解析</li>
<li>HTTP、TCP</li>
<li>ASI</li>
<li>AFN</li>
<li>有听过HTTPDNS吗？</li>
<li>有哪些方法能加快网络连接速度</li>
<li>如何维持长链接</li>
<li>如何发送心跳包</li>
<li>用户产生一个下拉刷新动作，请详细描述网络如何传输</li>
<li>简述tcp连接时的握手过程，不要第三次握手行不行？</li>
</ul>
<h3 id="09-设计模式-基础"><a href="#09-设计模式-基础" class="headerlink" title="09 设计模式(基础)"></a>09 设计模式(基础)</h3><ul>
<li>桥接、适配器、命令</li>
<li>责任链、单例</li>
<li>六大设计原则</li>
</ul>
<h3 id="10-架构-框架-效率"><a href="#10-架构-框架-效率" class="headerlink" title="10 架构/框架(效率)"></a>10 架构/框架(效率)</h3><ul>
<li>MVVM、时长统计框架</li>
<li>图片缓存框架</li>
<li>PV量级10亿级业务架构</li>
<li>CocoaPods</li>
</ul>
<h3 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h3><ul>
<li>宏</li>
<li>编译过程</li>
<li>clang</li>
</ul>
<h3 id="优化理论与实践-质量"><a href="#优化理论与实践-质量" class="headerlink" title="优化理论与实践(质量)"></a>优化理论与实践(质量)</h3><p><a href="https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="external">YYKit终极优化</a></p>
<ul>
<li>启动时长优化</li>
<li>卡顿优化</li>
<li>cpu占用</li>
<li>内存占用</li>
<li>UI主线程</li>
<li>电量</li>
<li>图片</li>
<li>瘦身</li>
</ul>
<h3 id="效率提升-效率"><a href="#效率提升-效率" class="headerlink" title="效率提升(效率)"></a>效率提升(效率)</h3><ul>
<li>代码块</li>
<li>功能模版</li>
<li>自动代码</li>
<li>json转model</li>
<li>跨平台</li>
</ul>
<h3 id="研发质量管理-质量"><a href="#研发质量管理-质量" class="headerlink" title="研发质量管理(质量)"></a>研发质量管理(质量)</h3><ul>
<li>codereview</li>
<li>clang二次开发(编译器警告)</li>
<li>oclint</li>
<li>infer</li>
<li>git commit(增量检测)</li>
<li>冗余代码</li>
<li>重复代码</li>
<li>重复图片检测</li>
<li>ipa包大小和模块大小检测</li>
</ul>
<h3 id="监控理论和实践-质量"><a href="#监控理论和实践-质量" class="headerlink" title="监控理论和实践(质量)"></a>监控理论和实践(质量)</h3><ul>
<li>crash</li>
<li>网络</li>
<li>流量</li>
<li>性能</li>
<li>行为</li>
<li>截图行为应用</li>
</ul>
<h3 id="热修复理论与实践"><a href="#热修复理论与实践" class="headerlink" title="热修复理论与实践"></a>热修复理论与实践</h3><ul>
<li>JSPatch</li>
<li>Lua？</li>
</ul>
<h3 id="发包与灰度-效率"><a href="#发包与灰度-效率" class="headerlink" title="发包与灰度(效率)"></a>发包与灰度(效率)</h3><ul>
<li>testflight灰度的应用</li>
<li>CI的优化(自动发包)</li>
</ul>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul>
<li>字符串反转</li>
<li>句子反转</li>
<li><a href="http://developer.51cto.com/art/201403/430986.htm" target="_blank" rel="external">快速排序</a></li>
<li>单链表反转</li>
<li>有序数组归并</li>
<li>无序数组找中位数(快排)</li>
</ul>
<h3 id="12-第三方"><a href="#12-第三方" class="headerlink" title="12 第三方"></a>12 第三方</h3><ul>
<li>AFNetworking </li>
<li>ReactCocoa响应式编程库</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[runtime概述]]></title>
      <url>/2015/08/10/2015/runtime%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="runtime概述"><a href="#runtime概述" class="headerlink" title="runtime概述"></a>runtime概述</h2><blockquote>
<p><strong>什么是runtime?</strong><br>runtime直译就是运行时间,run(跑,运行) time(时间),网上大家都叫它运行时,它是一套比较底层的纯C语言API,属于一个C语言库,包含了很多底层的C语言API,它是OC的幕后工作者,我们平时写的OC代码,在运行过程时,都会转为runtime的C语言代码</p>
<h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><p>####Object<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">interface NSObject &lt;NSObject&gt; &#123;</div><div class="line">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="objc-method"><a href="#objc-method" class="headerlink" title="objc_method"></a>objc_method</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_ method &#123;</div><div class="line">    SEL method_name;</div><div class="line">    char *method_types;</div><div class="line">    IMP method_imp;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="objc-class"><a href="#objc-class" class="headerlink" title="objc_class"></a>objc_class</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">struct objc_class &#123;</div><div class="line">    Class isa;</div><div class="line"></div><div class="line">#if !__OBJC2__</div><div class="line">    Class super_class;                                        </div><div class="line">    const char *name;</div><div class="line">    long version;                          //类的版本信息，默认为0</div><div class="line">    long info;                             //类信息，供运行期使用的一些位标识</div><div class="line">    long instance_size;                    //该类的实例变量大小</div><div class="line">    struct objc_ivar_list *ivars;          //成员列表</div><div class="line">    struct objc_method_list **methodLists; //方法列表</div><div class="line">    struct objc_cache *cache;              //方法缓存</div><div class="line">    struct objc_protocol_list *protocols;  //协议链表</div><div class="line">#endif</div><div class="line"></div><div class="line">&#125; OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure>
<h4 id="Method-amp-SEL-amp-IMP"><a href="#Method-amp-SEL-amp-IMP" class="headerlink" title="Method &amp; SEL &amp; IMP"></a>Method &amp; SEL &amp; IMP</h4><blockquote>
<ul>
<li>Method:<code>(typedef struct objc_method *Method)</code>在类定义中表示方法的类型，相当于SEL和IMP的映射</li>
<li>SEL(selector):<code>typedef struct objc_selector *SEL</code>方法选择器，用于在运行时中表示一个方法的名称。一个方法选择器是一个C字符串，它是在Objective-C运行时被注册的。选择器由编译器生成，并且在类被加载时由运行时自动做映射操作。</li>
<li>IMP(implement):<code>typedef id (*IMP)(id, SEL, …)</code>方法的实现，这是一个指针类型，指向方法实现函数的开始位置。这个函数使用为当前CPU架构实现的标准C调用规范。每一个参数是指向对象自身的指针(self)，第二个参数是方法选择器。然后是方法的实际参数。</li>
</ul>
</blockquote>
<hr>
<blockquote>
<p><strong>注意</strong>，SEL是由方法的名字，也就是字符串来生成的(包含参数)，也就是说，在不同的类中的方法，只要名字和参数相同，那么它的SEL也是相同的，SEL本质是一个Int类型的一个地址(用%p来表示)，地址中存放着方法的名字所有的SEL存储在一个NSSet中，所以SEL是唯一的，以hash实现搜索定位，效率高于NSArray，在方法的调用的时候，是通过数字的查找而非字符串的查找来进行方法定位的，当我定义一个类的时候，有声明或者实现，都会有对应的SEL以及Method对象存在，但是没有实现是IMP则为空，<code>SEL selector = NSSelectorFromString(@&quot;run&quot;);</code>这个代码永远是正确的，但是<code>IMP ipmSel = [FXViewController methodForSelector:selector];</code>如果这个类没有这个实现，那么是会返回<code>(libobjc.A.dylib_objc_msgForward)</code>。<br>所以理论上来讲iOS不存在私有方法，因为我们可以通过运行时来调用任何存在的method，只不过这个方法没有在.h文件进行声明的话，在编译层面会进行一些禁止而已，这样也保障了运行的安全。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SEL selector = NSSelectorFromString(@&quot;run&quot;);</div><div class="line">Class class = NSClassFromString(@&quot;FXViewController&quot;);</div><div class="line">if ([class respondsToSelector:selector]) &#123;</div><div class="line">    [class performSelector:selector withObject:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>当我们在类中进行方法的声明或者实现的时候，底层会默认根据方法名，来注册这个方法，生成对应的SEL和Method，SEL会由一个NSSet来做一个统一的维护，另外Method对象会保存在对应的类的methodlist中，当我们在方法调用的时候，系统会快速的通过注册方法来拿到SEL，然后到对应的类的实现中去根据SEL查找Method，如果Method存在则直接跳转到IMP去调用其指向的函数。如果一个方法只有声明没有实现，那么这个类中是不会有Method对象存在的，可以用<code>class_copyMethodList</code>进行验证</p>
<p>这张图在加载类的时候创建，当发现有方法声明，或者方法实现，或者方法调用的时候，就会把对应的字符串进行一个注册，形成上边那样的一张表，这张表中的SEL是经过运算得到的，而不是查找。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SEL sel = NSSelectorFromString(@&quot;thename123&quot;);</div><div class="line">NSLog(@&quot;%d&quot;, sel);</div><div class="line">    </div><div class="line">NSLog(@&quot;%@&quot;, NSStringFromSelector(sel));</div><div class="line">    </div><div class="line">SEL sel1 = NSSelectorFromString(@&quot;thename123&quot;);</div><div class="line">NSLog(@&quot;%d&quot;, sel1);</div></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xiancheng[69979:33043952] 41424</div><div class="line">xiancheng[69979:33043952] thename123</div><div class="line">xiancheng[69979:33043952] 41424</div></pre></td></tr></table></figure>
<p>我们看到这是一个hash的过程，是经过运算得到的，而不是查找。，从一个字符串得到一个数字，然后从数字得到一个字符串，这样就更能保证效率了</p>
<h4 id="运行时方法总结"><a href="#运行时方法总结" class="headerlink" title="运行时方法总结"></a>运行时方法总结</h4><p><code>通过名字获取SEL，通过SEL和Class获取IMP</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 添加方法</div><div class="line">BOOL class_addMethod ( Class cls, SEL name, IMP imp, const char *types );</div><div class="line">// 获取实例方法</div><div class="line">Method class_getInstanceMethod ( Class cls, SEL name );</div><div class="line">// 获取类方法</div><div class="line">Method class_getClassMethod ( Class cls, SEL name );</div><div class="line">// 获取所有实例方法的数组，不能获取类方法</div><div class="line">Method * class_copyMethodList ( Class cls, unsigned int *outCount );</div><div class="line">// 替代方法的实现，如果IMP不存在则默认调用class_addMethod方法</div><div class="line">IMP class_replaceMethod ( Class cls, SEL name, IMP imp, const char *types );</div><div class="line">// 返回方法的具体实现</div><div class="line">IMP class_getMethodImplementation ( Class cls, SEL name );</div><div class="line">IMP class_getMethodImplementation_stret ( Class cls, SEL name );</div><div class="line">// 类实例是否响应指定的selector</div><div class="line">BOOL class_respondsToSelector ( Class cls, SEL sel );</div></pre></td></tr></table></figure></p>
<h4 id="获取列表"><a href="#获取列表" class="headerlink" title="获取列表"></a>获取列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">unsigned int count;</div><div class="line">   //获取属性列表</div><div class="line">   objc_property_t *propertyList = class_copyPropertyList([self class], &amp;count);</div><div class="line">   for (unsigned int i=0; i&lt;count; i++) &#123;</div><div class="line">       const char *propertyName = property_getName(propertyList[i]);</div><div class="line">       NSLog(@&quot;property----&gt;%@&quot;, [NSString stringWithUTF8String:propertyName]);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   //获取方法列表</div><div class="line">   Method *methodList = class_copyMethodList([self class], &amp;count);</div><div class="line">   for (unsigned int i; i&lt;count; i++) &#123;</div><div class="line">       Method method = methodList[i];</div><div class="line">       NSLog(@&quot;method----&gt;%@&quot;, NSStringFromSelector(method_getName(method)));</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   //获取成员变量列表</div><div class="line">   Ivar *ivarList = class_copyIvarList([self class], &amp;count);</div><div class="line">   for (unsigned int i; i&lt;count; i++) &#123;</div><div class="line">       Ivar myIvar = ivarList[i];</div><div class="line">       const char *ivarName = ivar_getName(myIvar);</div><div class="line">       NSLog(@&quot;Ivar----&gt;%@&quot;, [NSString stringWithUTF8String:ivarName]);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   //获取协议列表</div><div class="line">   __unsafe_unretained Protocol **protocolList = class_copyProtocolList([self class], &amp;count);</div><div class="line">   for (unsigned int i; i&lt;count; i++) &#123;</div><div class="line">       Protocol *myProtocal = protocolList[i];</div><div class="line">       const char *protocolName = protocol_getName(myProtocal);</div><div class="line">       NSLog(@&quot;protocol----&gt;%@&quot;, [NSString stringWithUTF8String:protocolName]);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="isa指针"><a href="#isa指针" class="headerlink" title="isa指针"></a>isa指针</h4><p><img src="/10/2015/runtime概述/../../../images/20160425212717306.png" alt=""></p>
<h3 id="方法的执行"><a href="#方法的执行" class="headerlink" title="方法的执行"></a>方法的执行</h3><ul>
<li>调用类的alloc方法，分配内存，初始化成员变量，其中isa指针也会被初始化，让这个对象有访问其类的能力；</li>
<li>当我们调用某个方法的时候，编译器会对这个方法调用进行转换</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//1.利用msgSend函数</div><div class="line">	[someone method];</div><div class="line">	[someone performSelector:@selector(method)];</div><div class="line">	----&gt;objc_msgSend(someone, @selector(method));</div><div class="line">//2.利用转发函数</div><div class="line">	NSinvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSignature];</div><div class="line">[invocation invoke];</div></pre></td></tr></table></figure>
<blockquote>
<p><code>objc_msgSend</code>的作用:</p>
<ul>
<li>它首先找到 SEL 对应的方法实现 IMP。因为不同的类对同一方法可能会有不同的实现，所以找到的方法实现依赖于消息接收者的类型</li>
<li>然后将消息接收者对象(指向消息接收者对象的指针)以及方法中指定的参数传递给方法实现 IMP。</li>
<li>最后，将方法实现的返回值作为该函数的返回值返回。</li>
</ul>
</blockquote>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>当我们创建一个对象的时候，首先根据类的info来分配内存，然后初始化成员变量，其中isa指针也会被初始化，让这个对象有访问其类的能力，当消息发送给一个对象时，objc_msgSend通过对象的isa指针获取到类的结构体，然后在方法分发表里面查找方法的selector。如果没有找到selector，则通过objc_msgSend结构体中的指向父类的指针找到其父类，并在父类的分发表里面查找方法的selector。依此，会一直沿着类的继承体系到达NSObject类。一旦定位到selector，函数会就获取到了实现的入口点，并传入相应的参数来执行方法的具体实现。如果最后没有定位到selector，则会走消息转发流程。<br>动态绑定为我们写代码提供了方便，却带来了性能的损耗，因为函数的调用通过地址可以直接确定，而方法需要通过函数的查找，但是方法的缓存一定程度上解决了这个问题。</p>
<h3 id="消息转发机制"><a href="#消息转发机制" class="headerlink" title="消息转发机制"></a>消息转发机制</h3><p>消息转发用到的方法(消息拦截用到的方法)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+ (BOOL)resolveClassMethod:(SEL)sel;</div><div class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel;</div><div class="line">//后两个方法需要转发到其他的类处理</div><div class="line">- (id)forwardingTargetForSelector:(SEL)aSelector;</div><div class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation;</div></pre></td></tr></table></figure>
<p><img src="/10/2015/runtime概述/../../../images/QQ20141113.png" alt=""></p>
<p>我们调用一个方法有两种形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[object message];</div><div class="line"></div><div class="line">[object performSelector:@selector(method) withObject:nil];</div></pre></td></tr></table></figure></p>
<p>第一种我们可以确定对象是否能够处理该方法，如果没有声明编译器会直接报错，不过也存在没有方法实现的风险，第二种方式就会直接编译通过，运行崩溃。<br>规避的方法有两种</p>
<ul>
<li><p>第一就是在调用方法之前判断是否该方法实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if ([self respondsToSelector:@selector(method)]) &#123;</div><div class="line">    [self performSelector:@selector(method)];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>消息转发机制：通过这一机制，我们可以告诉对象如何处理未知的消息。</p>
<blockquote>
<p>默认情况下，对象接收到未知的消息，会导致程序崩溃，通过控制台，我们可以看到以下异常信息：</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-[SUTRuntimeMethod method]: unrecognized selector sent to instance 0x100111940</div><div class="line"></div><div class="line">*** Terminating app due to uncaught exception &apos;NSInvalidArgumentException&apos;, reason: &apos;-[SUTRuntimeMethod method]: unrecognized selector sent to instance 0x100111940&apos;</div></pre></td></tr></table></figure>
<blockquote>
<p>这段异常信息实际上是由NSObject的”doesNotRecognizeSelector”方法抛出的。不过，我们可以采取一些措施，让我们的程序执行特定的逻辑，而避免程序的崩溃。<br>消息转发机制基本上分为三个步骤：</p>
<ul>
<li>动态方法解析</li>
<li>备用接收者</li>
<li>完整转发</li>
</ul>
</blockquote>
<h4 id="动态方法解析"><a href="#动态方法解析" class="headerlink" title="动态方法解析"></a>动态方法解析</h4><p>对象在接收到未知的消息时，首先会调用所属类的类方法+resolveInstanceMethod:(实例方法)或者+resolveClassMethod:(类方法)。在这个方法中，我们有机会为该未知消息新增一个”处理方法”“。不过使用该方法的前提是我们已经实现了该”处理方法”，只需要在运行时通过class_addMethod函数动态添加到类里面就可以了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">void functionForMethod1(id self, SEL _cmd) &#123;</div><div class="line"></div><div class="line">   NSLog(@&quot;%@, %p&quot;, self, _cmd);</div><div class="line"></div><div class="line">&#125;</div><div class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</div><div class="line">    NSString *selectorString = NSStringFromSelector(sel);</div><div class="line">    if ([selectorString isEqualToString:@&quot;method1&quot;]) &#123;</div><div class="line">        class_addMethod(self.class, @selector(method1), (IMP)functionForMethod1, &quot;@:&quot;);</div><div class="line">    &#125;</div><div class="line">    return [super resolveInstanceMethod:sel];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不过这种方案更多的是为了实现@dynamic属性。</p>
<h4 id="备用接收者"><a href="#备用接收者" class="headerlink" title="备用接收者"></a>备用接收者</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (id)forwardingTargetForSelector:(SEL)aSelector</div></pre></td></tr></table></figure>
<p>如果一个对象实现了这个方法，并返回一个非nil的结果，则这个对象会作为消息的新接收者，且消息会被分发到这个对象。当然这个对象不能是self自身，否则就是出现无限循环。当然，如果我们没有指定相应的对象来处理aSelector，则应该调用父类的实现来返回结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">interface SUTRuntimeMethodHelper : NSObject</div><div class="line">- (void)method2;</div><div class="line">end</div><div class="line">implementation SUTRuntimeMethodHelper</div><div class="line">- (void)method2 &#123;</div><div class="line">    NSLog(@&quot;%@, %p&quot;, self, _cmd);</div><div class="line">&#125;</div><div class="line">@(02-Foundation)end</div><div class="line">#pragma mark -</div><div class="line">@interface SUTRuntimeMethod () &#123;</div><div class="line">    SUTRuntimeMethodHelper *_helper;</div><div class="line">&#125;</div><div class="line">@end</div><div class="line">@implementation SUTRuntimeMethod</div><div class="line">+ (instancetype)object &#123;</div><div class="line">    return [[self alloc] init];</div><div class="line">&#125;</div><div class="line">- (instancetype)init &#123;</div><div class="line">    self = [super init];</div><div class="line">    if (self != nil) &#123;</div><div class="line">        _helper = [[SUTRuntimeMethodHelper alloc] init];</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line">- (void)test &#123;</div><div class="line">    [self performSelector:@selector(method2)];</div><div class="line">&#125;</div><div class="line">- (id)forwardingTargetForSelector:(SEL)aSelector &#123;</div><div class="line">    NSLog(@&quot;forwardingTargetForSelector&quot;);</div><div class="line">    NSString *selectorString = NSStringFromSelector(aSelector);</div><div class="line">    // 将消息转发给_helper来处理</div><div class="line">    if ([selectorString isEqualToString:@&quot;method2&quot;]) &#123;</div><div class="line">        return _helper;</div><div class="line">    &#125;</div><div class="line">    return [super forwardingTargetForSelector:aSelector];</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h4 id="完整转发"><a href="#完整转发" class="headerlink" title="完整转发"></a>完整转发</h4><p>如果在上一步还不能处理未知消息，则唯一能做的就是启用完整的消息转发机制了。此时会调用以下方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation</div></pre></td></tr></table></figure></p>
<blockquote>
<p>对象会创建一个表示消息的NSInvocation对象，把与尚未处理的消息有关的全部细节都封装在anInvocation中，包括selector，目标(target)和参数。我们可以在forwardInvocation方法中选择将消息转发给其它对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;</div><div class="line">    NSMethodSignature *signature = [super methodSignatureForSelector:aSelector];</div><div class="line">    if (!signature) &#123;</div><div class="line">        if ([SUTRuntimeMethodHelper instancesRespondToSelector:aSelector]) &#123;</div><div class="line">            signature = [SUTRuntimeMethodHelper instanceMethodSignatureForSelector:aSelector];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return signature;</div><div class="line">&#125;</div><div class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation &#123;</div><div class="line">    if ([SUTRuntimeMethodHelper instancesRespondToSelector:anInvocation.selector]) &#123;</div><div class="line">        [anInvocation invokeWithTarget:_helper];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>NSObject的forwardInvocation:方法实现只是简单调用了doesNotRecognizeSelector:方法，它不会转发任何消息。这样，如果不在以上所述的三个步骤中处理未知消息，则会引发一个异常。</p>
</blockquote>
<h3 id="动态方法添加"><a href="#动态方法添加" class="headerlink" title="动态方法添加"></a>动态方法添加</h3><p>首先调用一个不存在的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//隐式调用方法</div><div class="line">[target performSelector:@selector(resolveAdd:) withObject:@&quot;test&quot;];</div></pre></td></tr></table></figure></p>
<p>然后，在target对象内部重写拦截调用的方法，动态添加方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">void runAddMethod(id self, SEL _cmd, NSString *string)&#123;</div><div class="line">    NSLog(@&quot;add C IMP &quot;, string);</div><div class="line">&#125;</div><div class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel&#123;</div><div class="line"></div><div class="line">    //给本类动态添加一个方法</div><div class="line">    if ([NSStringFromSelector(sel) isEqualToString:@&quot;resolveAdd:&quot;]) &#123;</div><div class="line">        class_addMethod(self, sel, (IMP)runAddMethod, &quot;v@:*&quot;);</div><div class="line">    &#125;</div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>其中class_addMethod的四个参数分别是：</p>
<ul>
<li>Class cls 给哪个类添加方法，本例中是self</li>
<li>SEL name 添加的方法，本例中是重写的拦截调用传进来的selector。</li>
<li>IMP imp 方法的实现，C方法的方法实现可以直接获得。如果是OC方法，可以用- + (IMP)instanceMethodForSelector:(SEL)aSelector;获得方法的实现。</li>
<li>“v@:*”方法的签名，代表有一个参数的方法</li>
</ul>
</blockquote>
<p>###Method Swizzling<br>为了swizzle一个方法，我们可以在分发表中将一个方法的现有的选择器映射到不同的实现，而将该选择器对应的原始实现关联到一个新的选择器中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">@implementation UIViewController (Tracking)</div><div class="line">+ (void)load &#123;</div><div class="line">        static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        Class class = [self class];         </div><div class="line">        // When swizzling a class method, use the following:</div><div class="line">                    // Class class = object_getClass((id)self);</div><div class="line">        SEL originalSelector = @selector(viewWillAppear:);</div><div class="line">                    SEL swizzledSelector = @selector(xxx_viewWillAppear:);</div><div class="line">        Method originalMethod = class_getInstanceMethod(class, originalSelector);</div><div class="line">                    Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);</div><div class="line">        BOOL didAddMethod =</div><div class="line">                        class_addMethod(class,</div><div class="line">                originalSelector,</div><div class="line">                method_getImplementation(swizzledMethod),</div><div class="line">                method_getTypeEncoding(swizzledMethod));</div><div class="line">        if (didAddMethod) &#123;</div><div class="line">                        class_replaceMethod(class,</div><div class="line">                swizzledSelector,</div><div class="line">                method_getImplementation(originalMethod),</div><div class="line">                method_getTypeEncoding(originalMethod));</div><div class="line">        &#125; else &#123;</div><div class="line">            method_exchangeImplementations(originalMethod, swizzledMethod);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">#pragma mark - Method Swizzling</div><div class="line">- (void)xxx_viewWillAppear:(BOOL)animated &#123;</div><div class="line">        [self xxx_viewWillAppear:animated];</div><div class="line">    NSLog(@&quot;viewWillAppear: %@&quot;, self);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul>
<li><p>Swizzling应该总是在+load中执行</p>
<blockquote>
<p>在Objective-C中，运行时会自动调用每个类的两个方法。+load会在类初始加载时调用，+initialize会在第一次调用类的类方法或实例方法之前被调用。这两个方法是可选的，且只有在实现了它们时才会被调用。由于method swizzling会影响到类的全局状态，因此要尽量避免在并发处理中出现竞争的情况。+load能保证在类的初始化过程中被加载，并保证这种改变应用级别的行为的一致性。相比之下，+initialize在其执行时不提供这种保证—事实上，如果在应用中没为给这个类发送消息，则它可能永远不会被调用。</p>
</blockquote>
</li>
<li><p>Swizzling应该总是在dispatch_once中执行</p>
<blockquote>
<p>与上面相同，因为swizzling会改变全局状态，所以我们需要在运行时采取一些预防措施。原子性就是这样一种措施，它确保代码只被执行一次，不管有多少个线程。GCD的dispatch_once可以确保这种行为，我们应该将其作为method swizzling的最佳实践</p>
</blockquote>
</li>
<li><p>小心无限循环</p>
<blockquote>
<p>咋看上去是会导致无限循环的。但令人惊奇的是，并没有出现这种情况。在swizzling的过程中，方法中的[self xxx_viewWillAppear:animated]已经被重新指定到UIViewController类的-viewWillAppear:中。在这种情况下，不会产生无限循环。不过如果我们调用的是[self viewWillAppear:animated]，则会产生无限循环，因为这个方法的实现在运行时已经被重新指定为xxx_viewWillAppear:了。</p>
</blockquote>
</li>
</ul>
<h3 id="对象关联"><a href="#对象关联" class="headerlink" title="对象关联"></a>对象关联</h3><p>现在你准备用一个系统的类，但是系统的类并不能满足你的需求，你需要额外添加一个属性。<br>这种情况的一般解决办法就是继承。<br>但是，只增加一个属性，就去继承一个类，总是觉得太麻烦类。<br>这个时候，runtime的关联属性就发挥它的作用了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//首先定义一个全局变量，用它的地址作为关联对象的key</div><div class="line">static char associatedObjectKey;</div><div class="line">//设置关联对象</div><div class="line">objc_setAssociatedObject(target, &amp;associatedObjectKey, @&quot;添加的字符串属性&quot;, OBJC_ASSOCIATION_RETAIN_NONATOMIC); //获取关联对象</div><div class="line">NSString *string = objc_getAssociatedObject(target, &amp;associatedObjectKey);</div><div class="line">NSLog(@&quot;AssociatedObject = %@&quot;, string);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>objc_setAssociatedObject的四个参数：</p>
<ul>
<li>id object给谁设置关联对象。</li>
<li>const void *key关联对象唯一的key，获取时会用到。</li>
<li>id value关联对象。</li>
<li>objc_AssociationPolicy关联策略，有以下几种策略：<br>enum {<br>  OBJC_ASSOCIATION_ASSIGN = 0,<br>  OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1,<br>  OBJC_ASSOCIATION_COPY_NONATOMIC = 3,<br>  OBJC_ASSOCIATION_RETAIN = 01401,<br>  OBJC_ASSOCIATION_COPY = 01403<br>};<br>如果你熟悉OC，看名字应该知道这几种策略的意思了吧。</li>
</ul>
</blockquote>
<p><code>objc_getAssociatedObject</code>的两个参数。</p>
<ul>
<li>id object获取谁的关联对象。</li>
<li>const void *key根据这个唯一的key获取关联对象。<br>其实，你还可以把添加和获取关联对象的方法写在你需要用到这个功能的类的类别中，方便使用。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//添加关联对象</div><div class="line">- (void)addAssociatedObject:(id)object&#123;</div><div class="line">    objc_setAssociatedObject(self, @selector(getAssociatedObject), object, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">&#125;</div><div class="line">//获取关联对象</div><div class="line">- (id)getAssociatedObject&#123;</div><div class="line">    return objc_getAssociatedObject(self, _cmd);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意：这里面我们把getAssociatedObject方法的地址作为唯一的key，_cmd代表当前调用方法的地址。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>方法调用的本质就是通过instance/class+SEL来找到IMP，最终调用IMP的函数来执行调用的</li>
<li>方法调用可以使用invoke的方法</li>
<li>增加方法的是在某个类中增加Method，也就是增加SLE和IMP</li>
<li>替换方法的是更改SLE与IMP的映射关系</li>
</ul>
<hr>
<p>参考：<br><a href="http://southpeak.github.io/blog/2014/10/25/objective-c-runtime-yun-xing-shi-zhi-lei-yu-dui-xiang/" target="_blank" rel="external">南峰子-runtime</a></p>
<p><a href="http://www.jianshu.com/p/927c8384855a" target="_blank" rel="external">iOS-runtime理解-简书</a></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Runloop概述]]></title>
      <url>/2015/07/21/2015/Runloop%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p>参考<a href="https://blog.ibireme.com/2015/05/18/runloop/" target="_blank" rel="external">ibireme’s Block</a></p>
<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><h3 id="为什么需要runloop"><a href="#为什么需要runloop" class="headerlink" title="为什么需要runloop"></a>为什么需要runloop</h3><ul>
<li>使程序一直活着</li>
<li>决定程序何时应该处理哪些event</li>
<li>调用解耦(message queue)</li>
<li>节省CPU时间</li>
<li>开启主线程要消耗1M内存，开启一个后台线程需要消耗512k内存，我们应当在线程没有任务的时候休眠，来释放所占用的资源</li>
</ul>
<h3 id="与runloop相关的类"><a href="#与runloop相关的类" class="headerlink" title="与runloop相关的类"></a>与runloop相关的类</h3><ul>
<li>NSTimer</li>
<li>UIEvent</li>
<li>Autorelease</li>
<li>NSObjec–&gt;NSDelayedPerforming</li>
<li>NSObjec–&gt;NSThreadPerformAddition</li>
<li>CADisplayLink</li>
<li>CATransition</li>
<li>CAAnimation</li>
<li>dispatch_get_main_queue()</li>
<li>NSURLConnection</li>
</ul>
<h3 id="runloop与线程"><a href="#runloop与线程" class="headerlink" title="runloop与线程"></a>runloop与线程</h3><ul>
<li>每条线程都有唯一的一个与之对应的RunLoop对象</li>
<li>主线程的RunLoop已经自动创建好了，子线程的RunLoop需要主动创建</li>
<li>RunLoop在第一次<code>获取时创建</code>，在线程结束时销毁</li>
<li>一般情况下我们是没有必要去启用线程的RunLoop的，除非你在一个单独的线程中需要长久的检测某个事件，比如说主线程。</li>
<li>线程和RunLoop之间是以键值对的形式一一对应的，其中key是thread，value是runLoop(这点可以从苹果公开的源码中看出来)，其实RunLoop是管理线程的一种机制，这种机制不仅在IOS上有，在Node.js中的EventLoop，Android中的Looper，都有类似的模式</li>
</ul>
<h3 id="获取runloop"><a href="#获取runloop" class="headerlink" title="获取runloop"></a>获取runloop</h3><blockquote>
<p>Foundation<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[NSRunLoop currentRunLoop]; // 获得当前线程的RunLoop对象</div><div class="line">[NSRunLoop mainRunLoop]; // 获得主线程的RunLoop对象</div></pre></td></tr></table></figure></p>
<p>Core Foundation<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CFRunLoopGetCurrent(); // 获得当前线程的RunLoop对象</div><div class="line">CFRunLoopGetMain(); // 获得主线程的RunLoop对象</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="runloop基本结构"><a href="#runloop基本结构" class="headerlink" title="runloop基本结构"></a>runloop基本结构</h3><p><code>NSRunLoop继承自NSObject</code><br><img src="/21/2015/Runloop概述/../../images/785453-df12d5e99be8ae05.jpeg" alt=""></p>
<ul>
<li>runloop与Thread一一对应，但是并不是一个thread只能有一runloop，我们可以给runloop嵌套runloop</li>
</ul>
<h4 id="CFRunLoopMode"><a href="#CFRunLoopMode" class="headerlink" title="CFRunLoopMode"></a>CFRunLoopMode</h4><ul>
<li>CFRunLoopModeRef代表RunLoop的运行模式<ul>
<li>一个 RunLoop 包含若干个 Mode，每个Mode又包含若干个Source/Timer/Observer</li>
<li>每次RunLoop启动时，只能指定其中一个 Mode，这个Mode被称作 CurrentMode</li>
<li>如果需要切换Mode，只能退出Loop，再重新指定一个Mode进入</li>
<li>这样做主要是为了分隔开不同组的Source/Timer/Observer，让其互不影响</li>
</ul>
</li>
</ul>
<blockquote>
<p>系统默认注册了5个Mode:(前两个跟最后一个常用)</p>
</blockquote>
<ul>
<li>kCFRunLoopDefaultMode：App的默认Mode，通常主线程是在这个Mode下运行</li>
<li>UITrackingRunLoopMode：界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响</li>
<li>UIInitializationRunLoopMode: 在刚启动 App 时第进入的第一个 Mode，启动完成后就不再使用</li>
<li>GSEventReceiveRunLoopMode: 接受系统事件的内部 Mode，通常用不到</li>
<li>kCFRunLoopCommonModes: 这是一个占位用的Mode，不是一种真正的Mod</li>
</ul>
<h4 id="CFRunLoopSource"><a href="#CFRunLoopSource" class="headerlink" title="CFRunLoopSource"></a>CFRunLoopSource</h4><ul>
<li>CFRunLoopSourceRef是事件源（输入源）</li>
<li>按照官方文档的分类<ul>
<li>Port-Based Sources (基于端口,跟其他线程交互,通过内核发布的消息)</li>
<li>Custom Input Sources (自定义)</li>
<li>Cocoa Perform Selector Sources (performSelector…方法)</li>
</ul>
</li>
<li>按照函数调用栈的分类<ul>
<li>Source0：非基于Port的</li>
<li>Source1：基于Port的</li>
</ul>
</li>
</ul>
<p>Source0: event事件，只含有回调，需要先调用CFRunLoopSourceSignal(source)，将这个 Source 标记为待处理，然后手动调用 CFRunLoopWakeUp(runloop) 来唤醒 RunLoop。<br>Source1: 包含了一个 mach_port 和一个回调，被用于通过内核和其他线程相互发送消息,能主动唤醒 RunLoop 的线程。</p>
<h4 id="CFRunLoopTimer"><a href="#CFRunLoopTimer" class="headerlink" title="CFRunLoopTimer"></a>CFRunLoopTimer</h4><p>本质就是一个timer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+ (NSTimer *)timerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(nullable id)userInfo repeats:(BOOL)yesOrNo;</div><div class="line">+ (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(nullable id)userInfo repeats:(BOOL)yesOrNo;</div><div class="line">- (void)performSelector:(SEL)aSelector withObject:(nullable id)anArgument afterDelay:(NSTimeInterval)delay;//该方法定义在RunLoop中，不过是NSObject的分类；</div><div class="line">+ (CADisplayLink *)displayLinkWithTarget:(id)target selector:(SEL)sel;//这个类方法定义在DisPlayLink中</div><div class="line">- (void)addToRunLoop:(NSRunLoop *)runloop forMode:(NSString *)mode;//这也是DisPlayLink中的方法</div></pre></td></tr></table></figure></p>
<ul>
<li>CFRunLoopTimerRef是基于时间的触发器</li>
<li>基本上说的就是NSTimer(CADisplayLink也是加到RunLoop),它受RunLoop的Mode影响</li>
<li>GCD的定时器不受RunLoop的Mode影响<h4 id="CFRunLoopObserver"><a href="#CFRunLoopObserver" class="headerlink" title="CFRunLoopObserver"></a>CFRunLoopObserver</h4></li>
<li>CFRunLoopObserverRef是观察者，能够监听RunLoop的状态改变</li>
<li>可以监听的时间点有以下几个</li>
</ul>
<p><img src="http://img8.a.pcs.baidu.com/rest/2.0/pcs/thumbnail?method=generate&amp;path=%2Fimages%2FSnip20160721_13.png&amp;app_id=246327&amp;width=1600&amp;height=1600" alt=""></p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul>
<li>CADisplayLink</li>
<li>NSTimer</li>
<li>ImageView显示</li>
<li>PerformSelector</li>
<li>常驻线程</li>
<li>自动释放池</li>
<li>NSURLConnection的执行过程</li>
<li>AFNetWorking中是如何使用RunLoop的?</li>
</ul>
<h3 id="深入理解Perform-Selector"><a href="#深入理解Perform-Selector" class="headerlink" title="深入理解Perform Selector"></a>深入理解Perform Selector</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (void)tryPerformSelectorOnMianThread&#123;</div><div class="line"></div><div class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line">        [self performSelector:@selector(perform1) withObject:nil];</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)mainThreadMethod&#123;</div><div class="line"></div><div class="line">NSLog(@&quot;execute %s&quot;,__func__);</div><div class="line"></div><div class="line">// print: execute -[ViewController mainThreadMethod]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (void)tryPerformSelectorOnBackGroundThread&#123;</div><div class="line"></div><div class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line"></div><div class="line">[self performSelector:@selector(backGroundThread) onThread:[NSThread currentThread] withObject:nil waitUntilDone:NO];</div><div class="line"></div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">- (void)backGroundThread&#123;</div><div class="line"></div><div class="line">NSLog(@&quot;%u&quot;,[NSThread isMainThread]);</div><div class="line"></div><div class="line">NSLog(@&quot;execute %s&quot;,__FUNCTION__);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样我们在ViewDidLoad中调用tryPerformSelectorOnMianThread,就会立即执行，并且输出:print: execute -[ViewController mainThreadMethod];<br>上边的performselector在子线程中依然可以执行，因为它不依赖于timer，不需要启动runloop，但是下边的做法就不行。</p>
<p>和上面的例子一样，我们使用GCD,让这个方法在后台线程中执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (void)tryPerformSelectorOnBackGroundThread&#123;</div><div class="line"></div><div class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line"></div><div class="line">[self performSelector:@selector(backGroundThread) onThread:[NSThread currentThread] withObject:nil waitUntilDone:NO];</div><div class="line"></div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">- (void)backGroundThread&#123;</div><div class="line"></div><div class="line">NSLog(@&quot;%u&quot;,[NSThread isMainThread]);</div><div class="line"></div><div class="line">NSLog(@&quot;execute %s&quot;,__FUNCTION__);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样的，我们调用tryPerformSelectorOnBackGroundThread这个方法，我们会发现，下面的backGroundThread不会被调用，这是什么原因呢？<br>这是因为，在调用performSelector:onThread: withObject: waitUntilDone的时候，系统会给我们创建一个Timer的source，加到对应的RunLoop上去，然而这个时候我们没有RunLoop,如果我们加上RunLoop:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (void)tryPerformSelectorOnBackGroundThread&#123;</div><div class="line"></div><div class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line"></div><div class="line">[self performSelector:@selector(backGroundThread) onThread:[NSThread currentThread] withObject:nil waitUntilDone:NO];</div><div class="line"></div><div class="line">NSRunLoop *runLoop = [NSRunLoop currentRunLoop];</div><div class="line">[runLoop run];</div><div class="line"></div><div class="line">&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这时就会发现我们的方法正常被调用了。那么为什么主线程中的perfom selector却能够正常调用呢？通过上面的例子相信你已经猜到了，主线程的RunLoop是一直存在的，所以我们在主线程中执行的时候，无需再添加RunLoop。<br>小结:当perform selector在后台线程中执行的时候，这个线程必须有一个开启的runLoop</p>
<h4 id="Perform-Selector-after"><a href="#Perform-Selector-after" class="headerlink" title="Perform Selector after"></a>Perform Selector after</h4><p>当某个事件触发了某段代码执行的时候，是要在一个runloop中执行完毕的，如果这个线程有runloop的话，这样如果在一个主线程有一大段代码要执行，那么就会阻碍这个线程，或者更准确来讲是让这个runloop不能去处理用户事件和刷新屏幕，那该怎么办呢？<br>答案就是这个方法<br><code>- (void)performSelector:(SEL)aSelector withObject:(nullable id)anArgument afterDelay:(NSTimeInterval)delay</code>我们可以把一个大段的方法执行切分成几份，然后用该方法连接，每次执行这个方法，就会进入到下一个runloop才会执行，而每个runloop的执行，用户事件的处理和屏幕刷新是在代码执行前边的，所以这样就有机会中断代码的执行，就像是下边这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, strong) UIButton *btn1;</div><div class="line">@property (nonatomic, strong) UIButton *btn2;</div><div class="line">@property (nonatomic, assign) BOOL next;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">int b = 0;</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (UIButton *)btn1 &#123;</div><div class="line">    if (!_btn1) &#123;</div><div class="line">        _btn1 = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">        [_btn1 setTitle:@&quot;点我1&quot; forState:UIControlStateNormal];</div><div class="line">        [_btn1 sizeToFit];</div><div class="line">        [_btn1 addTarget:self action:@selector(click1) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">        [_btn1 setTitleColor:[UIColor redColor] forState:UIControlStateNormal];</div><div class="line">    &#125;</div><div class="line">    return _btn1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (UIButton *)btn2 &#123;</div><div class="line">    if (!_btn2) &#123;</div><div class="line">        _btn2 = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">        [_btn2 setTitle:@&quot;点我2&quot; forState:UIControlStateNormal];</div><div class="line">        [_btn2 sizeToFit];</div><div class="line">        [_btn2 addTarget:self action:@selector(click2) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">        [_btn2 setTitleColor:[UIColor redColor] forState:UIControlStateNormal];</div><div class="line">    &#125;</div><div class="line">    return _btn2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    [self.view addSubview:self.btn1];</div><div class="line">    [self.view addSubview:self.btn2];</div><div class="line">    </div><div class="line">    self.btn1.frame = CGRectMake(10, 30, 50, 20);</div><div class="line">    self.btn2.frame = CGRectMake(100, 30, 50, 20);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)click1 &#123;</div><div class="line">    </div><div class="line">    for (int i = 0; i &lt; 3000; i++) &#123;</div><div class="line">        NSLog(@&quot;%d&quot;, i);</div><div class="line">    &#125;</div><div class="line">[self performSelector:@selector(perform1) withObject:nil afterDelay:0.005];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)perform1 &#123;</div><div class="line">    for (int i = 3000; i &lt; 6000; i++) &#123;</div><div class="line">        NSLog(@&quot;%d&quot;, i);</div><div class="line">    &#125;</div><div class="line">    [self performSelector:@selector(perform4) withObject:nil afterDelay:0.005];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)perform4 &#123;</div><div class="line">    if (!_next) return;</div><div class="line">    for (int i = 6000; i &lt; 9000; i++) &#123;</div><div class="line">        NSLog(@&quot;%d&quot;, i);</div><div class="line">    &#125;</div><div class="line">    [self performSelector:@selector(perform5) withObject:nil afterDelay:0.005];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)perform5 &#123;</div><div class="line">    if (!_next) return;</div><div class="line">    for (int i = 600; i &lt; 900; i++) &#123;</div><div class="line">        NSLog(@&quot;%d&quot;, i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)click2 &#123;</div><div class="line">    _next = NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实验证明，只有after方法有这样的魔力。</p>
<blockquote>
<p>总结:当我们创建了一个timer事件的时候，这个时候这个事件就会被放到下一个runloop中执行，如果这个线程中根本就没有起runloop，那么也就不存在下一个runloop，这个事件也就永远不会被执行了。</p>
</blockquote>
<h3 id="CADisplayLink"><a href="#CADisplayLink" class="headerlink" title="CADisplayLink"></a>CADisplayLink</h3><p>用法和timer一样，放在子线程的话记得自己创建runloop<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line">           // Track FPS using display link</div><div class="line">           _displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(displayLinkTick)];</div><div class="line">   //        [_displayLink setPaused:YES];</div><div class="line">           [_displayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSRunLoopCommonModes];</div><div class="line">           [[NSRunLoop currentRunLoop] run];</div><div class="line">       &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@interface ViewController ()</div><div class="line">@property (nonatomic, strong) UIScrollView *scrollView;</div><div class="line">@property (nonatomic, assign) NSInteger count;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    [self.view addSubview:self.scrollView];</div><div class="line"> </div><div class="line">    NSTimer *timer = [NSTimer timerWithTimeInterval:2 target:self selector:@selector(printfString) userInfo:nil repeats:YES];</div><div class="line">    [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];</div><div class="line">    [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];// 标记为common modes的模式：UITrackingRunLoopMode和NSDefaultRunLoopMode兼容,timer就都可以跑了</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (UIScrollView *)scrollView &#123;</div><div class="line">    if (!_scrollView) &#123;</div><div class="line">        _scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 100, kScreenW, 200)];</div><div class="line">        _scrollView.backgroundColor = [UIColor redColor];</div><div class="line">        _scrollView.contentSize = CGSizeMake(kScreenW * 2, 0);</div><div class="line">    &#125;</div><div class="line">    return _scrollView;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)printfString &#123;</div><div class="line">    self.count ++;</div><div class="line">    NSLog(@&quot;%ld&quot;, self.count);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个时候代码按照我们预定的结果运行，如果我们把这个Tiemr放到后台线程中呢?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line"></div><div class="line">    NSTimer *myTimer = [NSTimer scheduledTimerWithTimeInterval:0.5 target:self selector:@selector(timerAction) userInfo:nil repeats:YES];</div><div class="line"></div><div class="line">    [myTimer fire];</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这个时候我们会发现，这个timer只执行了一次，就停止了。这是为什么呢？通过上面的讲解，想必你已经知道了，NSTimer,只有注册到RunLoop之后才会生效，这个注册是由系统自动给我们完成的,既然需要注册到RunLoop,那么我们就需要有一个RunLoop,我们在后台线程中加入如下的代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSRunLoop *runLoop = [NSRunLoop currentRunLoop];</div><div class="line">    [runLoop run];</div></pre></td></tr></table></figure></p>
<p>这样我们就会发现程序正常运行了。在Timer注册到RunLoop之后，RunLoop会为其重复的时间点注册好事件，比如1：10，1：20，1：30这几个时间点。有时候我们会在这个线程中执行一个耗时操作，这个时候RunLoop为了节省资源，并不会在非常准确的时间点回调这个Timer，这就造成了误差(Timer有个冗余度属性叫做tolerance,它标明了当前点到后，容许有多少最大误差)，可以在执行一段循环之后调用一个耗时操作，很容易看到timer会有很大的误差，这说明在线程很闲的时候使用NSTiemr是比较傲你准确的，当线程很忙碌时候会有较大的误差。系统还有一个CADisplayLink,也可以实现定时效果，它是一个和屏幕的刷新率一样的定时器。如果在两次屏幕刷新之间执行一个耗时的任务，那其中就会有一个帧被跳过去，造成界面卡顿。另外GCD也可以实现定时器的效果，由于其和RunLoop没有关联，所以有时候使用它会更加的准确，这在最后会给予说明。</p>
<h3 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h3><p>需求:当用户在拖拽时(UI交互时)不显示图片,拖拽完成时显示图片</p>
<p>方法1 监听UIScrollerView滚动 (通过UIScrollViewDelegate监听,此处不再举例)</p>
<p>方法2 RunLoop 设置运行模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 只在NSDefaultRunLoopMode模式下显示图片</div><div class="line">    [self.imageView performSelector:@selector(setImage:) withObject:[UIImage imageNamed:@&quot;placeholder&quot;] afterDelay:3.0 inModes:@[NSDefaultRunLoopMode]];</div></pre></td></tr></table></figure>
<p>比如修改sdwebimage中的方法，如果设置imageview为滚动列表模式，则加入该方法，当列表停止滚动模式的时候才加载图片</p>
<h3 id="一直活着的后台线程"><a href="#一直活着的后台线程" class="headerlink" title="一直活着的后台线程"></a>一直活着的后台线程</h3><p>现在有这样一个需求，每点击一下屏幕，让子线程做一个任务,然后大家一般会想到这样的方式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@property(nonatomic,strong) NSThread *myThread;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)alwaysLiveBackGoundThread&#123;</div><div class="line"></div><div class="line">NSThread *thread = [[NSThread alloc]initWithTarget:self selector:@selector(myThreadRun) object:@&quot;etund&quot;];</div><div class="line">self.myThread = thread;</div><div class="line">[self.myThread start];</div><div class="line"></div><div class="line">&#125;</div><div class="line">- (void)myThreadRun&#123;</div><div class="line"></div><div class="line">NSLog(@&quot;my thread run&quot;);</div><div class="line"></div><div class="line">&#125;</div><div class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event&#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;%@&quot;,self.myThread);</div><div class="line">    [self performSelector:@selector(doBackGroundThreadWork) onThread:self.myThread withObject:nil waitUntilDone:NO];</div><div class="line">&#125;</div><div class="line">- (void)doBackGroundThreadWork&#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;do some work %s&quot;,__FUNCTION__);</div><div class="line"></div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>这个方法中，我们利用一个强引用来获取了后天线程中的thread,然后在点击屏幕的时候，在这个线程上执行doBackGroundThreadWork这个方法，此时我们可以看到，在touchesBegin方法中，self.myThread是存在的，但是这是为是什么呢？这就要从线程的五大状态来说明了:新建状态、就绪状态、运行状态、阻塞状态、死亡状态，这个时候尽管内存中还有线程，但是这个线程在执行完任务之后已经死亡了，经过上面的论述，我们应该怎样处理呢？我们可以给这个线程的RunLoop添加一个source，那么这个线程就会检测这个source等待执行，而不至于死亡(有工作的强烈愿望而不死亡):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)myThreadRun&#123;</div><div class="line"></div><div class="line">[[NSRunLoop currentRunLoop] addPort:[[NSPort alloc] init] forMode:NSDefaultRunLoopMode];</div><div class="line">[[NSRunLoop currentRunLoop] run]</div><div class="line"></div><div class="line">  NSLog(@&quot;my thread run&quot;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个时候再次点击屏幕，我们就会发现，后台线程中执行的任务可以正常进行了。<br>小结:正常情况下，后台线程执行完任务之后就处于死亡状态，我们要避免这种情况的发生可以利用RunLoop，并且给它一个Source这样来保证线程依旧还在</p>
<h3 id="NSURLConnection的执行过程"><a href="#NSURLConnection的执行过程" class="headerlink" title="NSURLConnection的执行过程"></a>NSURLConnection的执行过程</h3><p>在使用NSURLConnection时，我们会传入一个Delegate,当我们调用了[connection start]之后，这个Delegate会不停的收到事件的回调。实际上，start这个函数的内部会获取CurrentRunloop，然后在其中的DefaultMode中添加4个source。如下图所示，CFMultiplexerSource是负责各种Delegate回调的，CFHTTPCookieStorage是处理各种Cookie的。如下图所示:<br><img src="/21/2015/Runloop概述/006.png" alt=""><br>从中可以看出，当开始网络传输是，我们可以看到NSURLConnection创建了两个新的线程:com.apple.NSURLConnectionLoader和com.apple.CFSocket.private。其中CFSocket是处理底层socket链接的。NSURLConnectionLoader这个线程内部会使用RunLoop来接收底层socket的事件，并通过之前添加的source，来通知(唤醒)上层的Delegate。这样我们就可以理解我们平时封装网络请求时候常见的下面逻辑了:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">while (!_isEndRequest)</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;entered run loop&quot;);</div><div class="line">    [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">NSLog(@&quot;main finished，task be removed&quot;);</div><div class="line"></div><div class="line">- (void)connectionDidFinishLoading:(NSURLConnection *)connection</div><div class="line">&#123;</div><div class="line"></div><div class="line">  _isEndRequest = YES;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们就可以解决下面这些疑问了:<br></p>
<ul>
<li>为什么这个While循环不停的执行，还需要使用一个RunLoop? 程序执行一个while循环是不会耗费很大性能的，我们这里的目的是想让子线程在有任务的时候处理任务，没有任务的时候休眠，来节约CPU的开支。</li>
<li>如果没有为RunLoop添加item,那么它就会立即退出，这里的item呢? 其实系统已经给我们默认添加了4个source了。</li>
<li>既然[[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];让线程在这里停下来，那么为什么这个循环会持续的执行呢？因为这个一直在处理任务，并且接受系统对这个Delegate的回调，也就是这个回调唤醒了这个线程，让它在这里循环。</li>
</ul>
<h3 id="AFNetWorking中是如何使用RunLoop的"><a href="#AFNetWorking中是如何使用RunLoop的" class="headerlink" title="AFNetWorking中是如何使用RunLoop的?"></a>AFNetWorking中是如何使用RunLoop的?</h3><p>在AFN中AFURLConnectionOperation是基于NSURLConnection构建的，其希望能够在后台线程来接收Delegate的回调。<br>为此AFN创建了一个线程,然后在里面开启了一个RunLoop，然后添加item</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">+ (void)networkRequestThreadEntryPoint:(id)__unused object &#123;</div><div class="line">@autoreleasepool &#123;</div><div class="line">    [[NSThread currentThread] setName:@&quot;AFNetworking&quot;];</div><div class="line">    NSRunLoop *runLoop = [NSRunLoop currentRunLoop];</div><div class="line">    [runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];</div><div class="line">    [runLoop run];</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (NSThread *)networkRequestThread &#123;</div><div class="line">    static NSThread *_networkRequestThread = nil;</div><div class="line">    static dispatch_once_t oncePredicate;</div><div class="line">    dispatch_once(&amp;oncePredicate, ^&#123;</div><div class="line">        _networkRequestThread = [[NSThread alloc] initWithTarget:self selector:@selector(networkRequestThreadEntryPoint:) object:nil];</div><div class="line">        [_networkRequestThread start];</div><div class="line">    &#125;);</div><div class="line">    return _networkRequestThread;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里这个NSMachPort的作用和上文中的一样，就是让线程不至于在很快死亡，然后RunLoop不至于退出(如果要使用这个MachPort的话，调用者需要持有这个NSMachPort，然后在外部线程通过这个port发送信息到这个loop内部,它这里没有这么做)。然后和上面的做法相似，在需要后台执行这个任务的时候，会通过调用:[NSObject performSelector:onThread:..]来将这个任务扔给后台线程的RunLoop中来执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (void)start &#123;</div><div class="line">[self.lock lock];</div><div class="line">if ([self isCancelled]) &#123;</div><div class="line">    [self performSelector:@selector(cancelConnection) onThread:[[self class] networkRequestThread] withObject:nil waitUntilDone:NO modes:[self.runLoopModes allObjects]];</div><div class="line">&#125; else if ([self isReady]) &#123;</div><div class="line">    self.state = AFOperationExecutingState;</div><div class="line">    [self performSelector:@selector(operationDidStart) onThread:[[self class] networkRequestThread] withObject:nil waitUntilDone:NO modes:[self.runLoopModes allObjects]];</div><div class="line">&#125;</div><div class="line">[self.lock unlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="GCD定时器的实现"><a href="#GCD定时器的实现" class="headerlink" title="GCD定时器的实现"></a>GCD定时器的实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- (void)gcdTimer&#123;</div><div class="line"></div><div class="line">// get the queue</div><div class="line">dispatch_queue_t queue = dispatch_get_global_queue(0, 0);</div><div class="line"></div><div class="line">// creat timer</div><div class="line">self.timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue);</div><div class="line">// config the timer (starting time，interval)</div><div class="line">// set begining time</div><div class="line">dispatch_time_t start = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC));</div><div class="line">// set the interval</div><div class="line">uint64_t interver = (uint64_t)(1.0 * NSEC_PER_SEC);</div><div class="line"></div><div class="line">dispatch_source_set_timer(self.timer, start, interver, 0.0);</div><div class="line"></div><div class="line">dispatch_source_set_event_handler(self.timer, ^&#123;</div><div class="line"></div><div class="line">    // the tarsk needed to be processed async</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line"></div><div class="line">        for (int i = 0; i &lt; 100000; i++) &#123;</div><div class="line">            NSLog(@&quot;gcdTimer&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">dispatch_resume(self.timer);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="谈谈你对Run-Loop的理解"><a href="#谈谈你对Run-Loop的理解" class="headerlink" title="谈谈你对Run Loop的理解"></a>谈谈你对Run Loop的理解</h3><ul>
<li>RunLoop是多线程的一个很重要的机制，就是一个线程一次只能执行一个任务，执行完任务后就会退出线程。主线程会通过do-while死循环让程序持续等待下一个任务不退出。通过mach_msg()让runloop没事时进入trap状态，节省CPU资源。非主线程通常来说就是为了执行某个任务而创建的，执行完就会归还资源，因此默认不开启RunLoop</li>
<li>实质上，对于子线程的runloop是默认不存在的，因为苹果采用了懒加载的方式，如果没有手动调用[NSRunLoop currentRunLoop]的话，就不会去查询当前线程的RunLoop，也不会创建、加载</li>
<li><p>当然如果子线程处理完某个任务后不退出，需要继续等待接受事件，需要启动的时候也可以手动启动，比如说添加定时器的时候就要手动开始RunLoop<br>如何处理事件</p>
</li>
<li><p>界面刷新： 当UI改变（ Frame变化、 UIView/CALayer 的继承结构变化等）时，或手动调用了 UIView/CALayer 的 setNeedsLayout/setNeedsDisplay方法后，这个 UIView/CALayer 就被标记为待处理。 苹果注册了一个用来监听BeforeWaiting和Exit的Observer，在它的回调函数里会遍历所有待处理的 UIView/CAlayer 以执行实际的绘制和调整，并更新 UI 界面。</p>
</li>
<li><p>手势识别： 如果上一步的 _UIApplicationHandleEventQueue() 识别到是一个guesture手势，会调用Cancel方法将当前的touchesBegin/Move/End 系列回调打断。随后系统将对应的 UIGestureRecognizer 标记为待处理。 苹果注册了一个 Observer 监测 BeforeWaiting (Loop即将进入休眠) 事件，其回调函数为 _UIGestureRecognizerUpdateObserver()，其内部会获取所有刚被标记为待处理的 GestureRecognizer，并执行GestureRecognizer的回调。 当有 UIGestureRecognizer 的变化(创建/销毁/状态改变)时，这个回调都会进行相应处理。</p>
</li>
<li><p>网络请求：最底层是CFSocket层，然后是CFNetwork将其封装，然后是NSURLConnection对CFNetwork进行面向对象的封装，NSURLConnection是iOS7中新增的接口。当网络开始传输时，NSURLConnection创建了两个新线程：com.apple.NSURLConnectionLoader和com.apple.CFSocket.private。其中CFSocket线程是处理底层socket连接的。NSURLConnectionLoader这个线程内部会使用RunLoop来接受底层socket的事件，并添加到上层的Delegate</p>
</li>
</ul>
<p>应用</p>
<ul>
<li><p>滑动与图片刷新：当tableView的cell上有需要从网络获取的图片的时候，滚动tableView，异步线程回去加载图片，加载完成后主线程会设置cell的图片，但是会造成卡顿。可以设置图片的任务在CFRunloopDefaultMode下进行，当滚动tableView的时候，Runloop切换到UITrackingRunLoopMode，不去设置图片，而是而是当停止的时候，再去设置图片。（在viewDidLoad中调用self.imageView performSelector@selector(setImage) withObject:…afterDelay:…inModes@[NSDefayltRunLoopMode]）</p>
</li>
<li><p>常驻子线程，保持子线程一直处理事件 为了保证线程长期运转，可以在子线程中加入RunLoop，并且给Runloop设置item，防止Runloop自动退出</p>
</li>
</ul>
<h3 id="RunLoop处理的几种事件"><a href="#RunLoop处理的几种事件" class="headerlink" title="RunLoop处理的几种事件"></a>RunLoop处理的几种事件</h3><blockquote>
<p>static void <strong>CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION</strong>();<br>static void <strong>CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK</strong>();<br>static void <strong>CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE</strong>();<br>static void <strong>CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION</strong>();<br>static void <strong>CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION</strong>();<br>static void <strong>CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION</strong>();</p>
</blockquote>
<p>他对这六类事件有如下解释</p>
<p>1.Observer事件，runloop中状态变化时进行通知。（微信卡顿监控就是利用这个事件通知来记录下最近一次main runloop活动时间，在另一个check线程中用定时器检测当前时间距离最后一次活动时间过久来判断在主线程中的处理逻辑耗时和卡主线程）。这里还需要特别注意，CAAnimation是由RunloopObserver触发回调来重绘，。</p>
<p>2.Block事件，非延迟的NSObject PerformSelector立即调用，dispatch_after立即调用，block回调。</p>
<p>3.Main_Dispatch_Queue事件：GCD中dispatch到main queue的block会被dispatch到main loop执行，如果主线程是睡眠的，这个行为是会唤醒主线程的。</p>
<p>4.Timer事件：延迟的NSObject PerformSelector，延迟的dispatch_after，timer事件。CADisplayLink也是这里触发，同时这个行为也是会唤醒线程的。如果某个timer到了回调时机，但是这个时候runloop在忙着，那么这个timer就会被跳过去，而不是延时执行，等到下一次timer触发才会被执行。</p>
<p>5.Source0事件：处理如UIEvent，CFSocket这类事件。需要手动触发。触摸事件其实是Source1接收系统事件后在回调 <code>__IOHIDEventSystemClientQueueCallback()</code> 内触发的 Source0，Source0 再触发的 <code>_UIApplicationHandleEventQueue()</code>。source0一定是要唤醒runloop及时响应并执行的，如果runloop此时在休眠等待系统的 mach_msg事件，那么就会通过source1来唤醒runloop执行。<br>[self performSelector:@selector(perform1) withObject:nil];是走source0的。</p>
<p>6.Source1事件：处理系统内核的mach_msg事件。</p>
<p>验证方法是，打断点，lldb上边的调用栈</p>
<p>深刻理解一下就是，点击事件等，和UI绘制，都只是先标记，然后等到线程睡眠前再根据标记，统一处理。而做一个值计算之类的，直接就是source0直接进行操作了。</p>
<p>如何涉及到切换线程，一般是触发一个source1，不需要切换线程的perform是一个source0事件。</p>
<h3 id="几个问题"><a href="#几个问题" class="headerlink" title="几个问题"></a>几个问题</h3><h4 id="runloop被唤醒有几种情况？"><a href="#runloop被唤醒有几种情况？" class="headerlink" title="runloop被唤醒有几种情况？"></a>runloop被唤醒有几种情况？</h4><ul>
<li>基于port的source事件，比如触摸这种source1</li>
<li>timer到时间了</li>
<li>runloop自身睡眠时间到了，iOS现在测试是1分钟，这是自身的一个保活机制，如果一个线程长期休眠，那么unix就会把它杀死</li>
<li>被其他什么调用者手动唤醒，比如其他线程要求回到这个线程执行个啥方法</li>
</ul>
<h4 id="在主线程执行一个大计算的方法，如何保证最低限度影响UI"><a href="#在主线程执行一个大计算的方法，如何保证最低限度影响UI" class="headerlink" title="在主线程执行一个大计算的方法，如何保证最低限度影响UI"></a>在主线程执行一个大计算的方法，如何保证最低限度影响UI</h4><p>将这个任务进行拆分，通过perform after进行拼接，这样这个任务会被分成几个runloop去执行，这样有机会进入到线程休眠，这个时候就会机会提交UI的一些变化了</p>
<blockquote>
<p>具体问题，要求打印1-10000，然后点击一个按钮可以暂停，怎么做？</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果我们想要打断一个方法的执行，一个办法就是用<code>[self performSelector:@selector(perform4) withObject:nil afterDelay:0.005];</code>来连接方法的执行，这里延迟时间设置为0有时是无效的，我们可以给一个很小的时间，</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(转)视音频编解码技术零基础学习方法]]></title>
      <url>/2015/07/17/2015/%E8%BD%AC-%E8%A7%86%E9%9F%B3%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E6%8A%80%E6%9C%AF%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>原文地址<a href="http://blog.csdn.net/leixiaohua1020/article/details/18893769" target="_blank" rel="external">http://blog.csdn.net/leixiaohua1020/article/details/18893769</a><br><a id="more"></a></p>
<h2 id="视频播放器原理"><a href="#视频播放器原理" class="headerlink" title="视频播放器原理"></a>视频播放器原理</h2><p>视音频技术主要包含以下几点：封装技术，视频压缩编码技术以及音频压缩编码技术。如果考虑到网络传输的话，还包括流媒体协议技术。<br>视频播放器的源代码详细解析（Media Player Classic - HC，Mplayer，FFplay，XBMC）可以参考系列文章：<br>Media Player Classic：Media Player Classic - HC源代码分析 1：整体结构[系列文章]<br>Mplayer：MPlayer源代码分析<br>FFplay： FFplay源代码分析：整体流程图<br>XBMC： XBMC源代码分析 1：整体结构以及编译方法[系列文章]<br>在这里不细说了，仅简要说明一下视频播放器的原理。<br>视频播放器播放一个互联网上的视频文件，需要经过以下几个步骤：解协议，解封装，解码视音频，视音频同步。如果播放本地文件则不需要解协议，为以下几个步骤：解封装，解码视音频，视音频同步。他们的过程如图所示。<br><img src="http://7xrn7f.com1.z0.glb.clouddn.com/16-7-17/69435586.jpg" alt=""></p>
<p>解协议的作用，就是将流媒体协议的数据，解析为标准的相应的封装格式数据。视音频在网络上传播的时候，常常采用各种流媒体协议，例如HTTP，RTMP，或是MMS等等。这些协议在传输视音频数据的同时，也会传输一些信令数据。这些信令数据包括对播放的控制（播放，暂停，停止），或者对网络状态的描述等。解协议的过程中会去除掉信令数据而只保留视音频数据。例如，采用RTMP协议传输的数据，经过解协议操作后，输出FLV格式的数据。<br>解封装的作用，就是将输入的封装格式的数据，分离成为音频流压缩编码数据和视频流压缩编码数据。封装格式种类很多，例如MP4，MKV，RMVB，TS，FLV，AVI等等，它的作用就是将已经压缩编码的视频数据和音频数据按照一定的格式放到一起。例如，FLV格式的数据，经过解封装操作后，输出H.264编码的视频码流和AAC编码的音频码流。<br>解码的作用，就是将视频/音频压缩编码数据，解码成为非压缩的视频/音频原始数据。音频的压缩编码标准包含AAC，MP3，AC-3等等，视频的压缩编码标准则包含H.264，MPEG2，VC-1等等。解码是整个系统中最重要也是最复杂的一个环节。通过解码，压缩编码的视频数据输出成为非压缩的颜色数据，例如YUV420P，RGB等等；压缩编码的音频数据输出成为非压缩的音频抽样数据，例如PCM数据。<br>视音频同步的作用，就是根据解封装模块处理过程中获取到的参数信息，同步解码出来的视频和音频数据，并将视频音频数据送至系统的显卡和声卡播放出来。<br>接下来的几节我们将会列出主要的流媒体协议，封装格式，以及视音频编码标准。更详细的比较可以参考：<br>视频参数（流媒体系统，封装格式，视频编码，音频编码，播放器）对比<br>有关本文中涉及到的协议数据、封装格式数据、视频编码数据、音频编码数据、视频像素数据、音频采样数</p>
<h2 id="流媒体协议"><a href="#流媒体协议" class="headerlink" title="流媒体协议"></a>流媒体协议</h2><p>流媒体协议是服务器与客户端之间通信遵循的规定。当前网络上主要的流媒体协议如表所示。<br>主要流媒体协议一览<br><img src="http://7xrn7f.com1.z0.glb.clouddn.com/16-7-17/52205431.jpg" alt=""><br>RTSP+RTP经常用于IPTV领域。因为其采用UDP传输视音频，支持组播，效率较高。但其缺点是网络不好的情况下可能会丢包，影响视频观看质量。因而围绕IPTV的视频质量的研究还是挺多的。<br>RTSP规范可参考：RTSP协议学习笔记<br>RTSP+RTP系统中衡量服务质量可参考：网络视频传输的服务质量（QoS）<br>上海IPTV码流分析结果可参考：IPTV视频码流分析<br>因为互联网网络环境的不稳定性，RTSP+RTP较少用于互联网视音频传输。互联网视频服务通常采用TCP作为其流媒体的传输层协议，因而像RTMP，MMS，HTTP这类的协议广泛用于互联网视音频服务之中。这类协议不会发生丢包，因而保证了视频的质量，但是传输的效率会相对低一些。<br>此外RTMFP是一种比较新的流媒体协议，特点是支持P2P。<br>RTMP我做的研究相对多一些：比如RTMP规范简单分析，或者RTMP流媒体播放过程<br>相关工具的源代码分析：RTMPdump源代码分析 1： main()函数[系列文章]<br>RTMP协议学习：RTMP流媒体技术零基础学习方法</p>
<h2 id="封装格式"><a href="#封装格式" class="headerlink" title="封装格式"></a>封装格式</h2><p>封装格式的主要作用是把视频码流和音频码流按照一定的格式存储在一个文件中。现如今流行的封装格式如下表所示：<br><img src="http://7xrn7f.com1.z0.glb.clouddn.com/16-7-17/78134537.jpg" alt=""><br>由表可见，除了AVI之外，其他封装格式都支持流媒体，即可以“边下边播”。有些格式更“万能”一些，支持的视音频编码标准多一些，比如MKV。而有些格式则支持的相对比较少，比如说RMVB。<br>这些封装格式都有相关的文档，在这里就不一一例举了。<br>我自己也做过辅助学习的小项目：<br>TS封装格式分析器<br>FLV封装格式分析器</p>
<h2 id="视频编码"><a href="#视频编码" class="headerlink" title="视频编码"></a>视频编码</h2><p>视频编码的主要作用是将视频像素数据（RGB，YUV等）压缩成为视频码流，从而降低视频的数据量。如果视频不经过压缩编码的话，体积通常是非常大的，一部电影可能就要上百G的空间。视频编码是视音频技术中最重要的技术之一。视频码流的数据量占了视音频总数据量的绝大部分。高效率的视频编码在同等的码率下，可以获得更高的视频质量。<br>视频编码的简单原理可以参考：视频压缩编码和音频压缩编码的基本原理<br>注：视频编码技术在整个视音频技术中应该是最复杂的技术。如果没有基础的话，可以先买一些书看一下原理，比如说《现代电视原理》《数字电视广播原理与应用》（本科的课本）中的部分章节。</p>
<p>由表可见，有两种视频编码方案是最新推出的：VP9和HEVC。目前这两种方案都处于研发阶段，还没有到达实用的程度。当前使用最多的视频编码方案就是H.264。<br><img src="http://7xrn7f.com1.z0.glb.clouddn.com/16-7-17/66098092.jpg" alt=""></p>
<h3 id="4-1-主流编码标准"><a href="#4-1-主流编码标准" class="headerlink" title="4.1 主流编码标准"></a>4.1 主流编码标准</h3><p>H.264仅仅是一个编码标准，而不是一个具体的编码器，H.264只是给编码器的实现提供参照用的。<br>基于H.264标准的编码器还是很多的，究竟孰优孰劣？可参考：MSU出品的 H.264编码器比较（2011.5）<br>在学习视频编码的时候，可能会用到各种编码器（实际上就是一个exe文件），他们常用的编码命令可以参考：各种视频编码器的命令行格式<br>学习H.264最标准的源代码，就是其官方标准JM了。但是要注意，JM速度非常的慢，是无法用于实际的：H.264参考软件JM12.2RC代码详细流程<br>实际中使用最多的就是x264了，性能强悍（超过了很多商业编码器），而且开源。其基本教程网上极多，不再赘述。编码时候可参考：x264编码指南——码率控制。编码后统计值的含义：X264输出的统计值的含义（X264 Stats Output）<br>Google推出的VP8属于和H.264同一时代的标准。总体而言，VP8比H.264要稍微差一点。有一篇写的很好的VP8的介绍文章：深入了解 VP8。除了在技术领域，VP8和H.264在专利等方面也是打的不可开交，可参考文章：WebM(VP8) vs H.264<br>此外，我国还推出了自己的国产标准AVS，性能也不错，但目前比H.264还是要稍微逊色一点。不过感觉我国在视频编解码领域还算比较先进的，可参考：视频编码国家标准AVS与H.264的比较（节选）<br>近期又推出了AVS新一代的版本AVS+，具体的性能测试还没看过。不过据说AVS+得到了国家政策上非常强力的支持。</p>
<h3 id="4-2-下一代编码标准"><a href="#4-2-下一代编码标准" class="headerlink" title="4.2 下一代编码标准"></a>4.2 下一代编码标准</h3><p>下一代的编解码标准就要数HEVC和VP9了。VP9是Google继VP8之后推出的新一代标准。VP9和HEVC相比，要稍微逊色一些。它们的对比可参考：（1）HEVC与VP9编码效率对比 （2）HEVC，VP9，x264性能对比<br>HEVC在未来拥有很多大的优势，可参考：HEVC将会取代H.264的原因<br>学习HEVC最标准的源代码，就是其官方标准HM了。其速度比H.264的官方标准代码又慢了一大截，使用可参考：HEVC学习—— HM的使用<br>未来实际使用的HEVC开源编码器很有可能是x265，目前该项目还处于发展阶段，可参考：x265(HEVC编码器，基于x264)介绍。x265的使用可以参考：HEVC（H.265）标准的编码器（x265，DivX265）试用<br>主流以及下一代编码标准之间的比较可以参考文章：视频编码方案之间的比较（HEVC，H.264，MPEG2等）<br>此外，在码率一定的情况下，几种编码标准的比较可参考：限制码率的视频编码标准比较（包括MPEG-2，H.263， MPEG-4，以及 H.264）<br>结果大致是这样的：<br>HEVC &gt; VP9 &gt; H.264&gt; VP8 &gt; MPEG4 &gt; H.263 &gt; MPEG2。<br>截了一些图，可以比较直观的了解各种编码标准：<br>HEVC码流简析：HEVC码流简单分析<br>H.264码流简析：H.264简单码流分析<br>MPEG2码流简析：MPEG2简单码流分析<br>以上简析使用的工具：视频码流分析工具<br>我自己做的小工具：  H.264码流分析器</p>
<h2 id="音频编码"><a href="#音频编码" class="headerlink" title="音频编码"></a>音频编码</h2><p>音频编码的主要作用是将音频采样数据（PCM等）压缩成为音频码流，从而降低音频的数据量。音频编码也是互联网视音频技术中一个重要的技术。但是一般情况下音频的数据量要远小于视频的数据量，因而即使使用稍微落后的音频编码标准，而导致音频数据量有所增加，也不会对视音频的总数据量产生太大的影响。高效率的音频编码在同等的码率下，可以获得更高的音质。<br>音频编码的简单原理可以参考：视频压缩编码和音频压缩编码的基本原理</p>
<p>由表可见，近年来并未推出全新的音频编码方案，可见音频编码技术已经基本可以满足人们的需要。音频编码技术近期绝大部分的改动都是在MP3的继任者——AAC的基础上完成的。<br>这些编码标准之间的比较可以参考文章：音频编码方案之间音质比较（AAC，MP3，WMA等）<br>结果大致是这样的：<br>AAC+ &gt; MP3PRO &gt; AAC&gt; RealAudio &gt; WMA &gt; MP3<br>AAC格式的介绍：AAC格式简介<br>AAC几种不同版本之间的对比：AAC规格（LC，HE，HEv2）及性能对比<br>AAC专利方面的介绍：AAC专利介绍<br>此外杜比数字的编码标准也比较流行，但是貌似比最新的AAC稍为逊色：AC-3技术综述<br>我自己做的小工具： AAC格式分析器<br><img src="http://7xrn7f.com1.z0.glb.clouddn.com/16-7-17/72839052.jpg" alt=""></p>
<h2 id="现有网络视音频平台对比"><a href="#现有网络视音频平台对比" class="headerlink" title="现有网络视音频平台对比"></a>现有网络视音频平台对比</h2><p>现有的网络视音频服务主要包括两种方式：点播和直播。点播意即根据用户的需要播放相应的视频节目，这是互联网视音频服务最主要的方式。绝大部分视频网站都提供了点播服务。直播意即互联网视音频平台直接将视频内容实时发送给用户，目前还处于发展阶段。直播在网络电视台，社交视频网站较为常见。</p>
<h3 id="直播平台参数对比"><a href="#直播平台参数对比" class="headerlink" title="直播平台参数对比"></a>直播平台参数对比</h3><p>主流互联网视音频平台直播服务的参数对比如表所示：<br>现有网络视音频平台参数对比</p>
<p>可以看出，直播服务普遍采用了RTMP作为流媒体协议，FLV作为封装格式，H.264作为视频编码格式，AAC作为音频编码格式。采用RTMP作为直播协议的好处在于其被Flash播放器支持。而Flash播放器如今已经安装在全球99%的电脑上，并且与浏览器结合的很好。因此这种流媒体直播平台可以实现“无插件直播”，极大的简化了客户端的操作。封装格式，视频编码，音频编码方面，无一例外的使用了FLV + H.264 + AAC的组合。FLV是RTMP使用的封装格式，H.264是当今实际应用中编码效率最高的视频编码标准，AAC则是当今实际应用中编码效率最高的音频编码标准。视频播放器方面，都使用了Flash播放器。</p>
<h3 id="点播平台参数对比"><a href="#点播平台参数对比" class="headerlink" title="点播平台参数对比"></a>点播平台参数对比</h3><p>主流网络视音频平台点播服务的参数对比如表所示：<br>现有互联网视音频平台参数对比</p>
<p>可以看出，点播服务普遍采用了HTTP作为流媒体协议，H.264作为视频编码格式，AAC作为音频编码格式。采用HTTP作为点播协议有以下两点优势：一方面，HTTP是基于TCP协议的应用层协议，媒体传输过程中不会出现丢包等现象，从而保证了视频的质量；另一方面，HTTP被绝大部分的Web服务器支持，因而流媒体服务机构不必投资购买额外的流媒体服务器，从而节约了开支。点播服务采用的封装格式有多种：MP4，FLV，F4V等，它们之间的区别不是很大。视频编码标准和音频编码标准是H.264和AAC。这两种标准分别是当今实际应用中编码效率最高的视频标准和音频标准。视频播放器方面，无一例外的都使用了Flash播放器。</p>
]]></content>
      
        <categories>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 流媒体 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(转)音视频基础概念汇总]]></title>
      <url>/2015/07/17/2015/%E8%BD%AC-%E9%9F%B3%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h2 id="第一部分：基本概念讲解"><a href="#第一部分：基本概念讲解" class="headerlink" title="第一部分：基本概念讲解"></a>第一部分：基本概念讲解</h2><ul>
<li>媒体：是表示，传输，存储信息的载体，常人们见到的文字、声音、图像、图形等都是表示信息的媒体。<a id="more"></a></li>
<li><p>多媒体： 是声音、动画、文字、图像和录像等各种媒体的组合，以图文并茂，生动活泼的动态形式表现出来，给人以很强的视觉冲击力，留下深刻印象</p>
</li>
<li><p>多媒体技术：是将文字、声音、图形、静态图像、动态图像与计算集成在一起的技术。它要解决的问题是计算机进一步帮助人类按最自然的和最习惯的方式接受和处理信息。</p>
</li>
<li><p>流媒体 ：流媒体是指采用流式传输的方式在Internet播放的连续时基媒体格式，实际指的是一种新的媒体传送方式，而不是一种新的媒体格式（在网络上传输音/视频等多媒体信息现在主要有下载和流式传输两种方式）流式传输分两种方法：实时流式传输方式(Realtime streaming)和顺序流式传输方式(progressive streaming)。</p>
</li>
<li><p>多媒体文件：是既包括视频又包括音频，甚至还带有脚本的一个集合，也可以叫容器；</p>
</li>
<li><p>媒体编码：是文件当中的视频和音频所采用的压缩算法。也就是说一个avi的文件，当中的视频编码有可能是A，也可能是B，而其音频编码有可能是1，也有可能是2。  转码 ：指将一段多媒体包括音频、视频或者其他的内容从一种编码格式转换成为另外一种编码格式</p>
</li>
<li><p>视频：连续的图象变化每秒超过24帧（Frame）画面以上时，根据视觉暂留原理，人眼无法辨别单幅的静态画面，看上去是平滑连续的视觉效果，这样连续的画面叫做视频</p>
</li>
<li><p>音频 ：人类能听到的声音都成为音频，但是一般我们所说到的音频时存储在计算机里的声音</p>
</li>
</ul>
<h2 id="第二部分：视频文件格式"><a href="#第二部分：视频文件格式" class="headerlink" title="第二部分：视频文件格式"></a>第二部分：视频文件格式</h2><ul>
<li><p>码率：码率就是数据传输时单位时间传送的数据位数,一般我们用的单位是kbps即千位每秒。 通俗一点的理解就是取样率，单位时间内取样率越大，精度就越高，处理出来的文件就越接近原始文件，但是文件体积与取样率是成正比的，所以几乎所有的编码格式重视的都是如何用最低的码率达到最少的失真。但是因为编码算法不一样，所以也不能用码率来统一衡量音质或者画质.</p>
</li>
<li><p>帧：帧就是一段数据的组合，它是数据传输的基本单位。就是影像动画中最小单位的单幅影像画面，相当于电影胶片上的每一格镜头。一帧就是一副静止的画面，连续的帧就形成动画，如电视图像等。</p>
</li>
</ul>
<ul>
<li>帧率：帧率即每秒显示帧数，帧率表示图形处理器处理场时每秒钟能够更新的次数。高的帧率可以得到更流畅、更逼真的动画。一般来说30fps就是可以接受的，但是将性能提升至60fps则可以明显提升交互感和逼真感，但是一般来说超过75fps一般就不容易察觉到有明显的流畅度提升了。如果帧率超过屏幕刷新率只会浪费图形处理的能力，因为监视器不能以这么快的速度更新，这样超过新率的帧率就浪费掉了。<br>关键帧：相当于二维动画中的原画，指角色或者物体运动或变化中的关键动作所处的那一帧，它包含了图像的所有信息，后来帧仅包含了改变了的信息。如果你没有足够的关键帧，你的影片品质可能比较差，因为所有的帧从别的帧处产生。对于一般的用途，一个比较好的原则是每5秒设一个关键键。但如果时那种实时传输的流文件，那么要考虑传输网络的可靠度，所以要1到2秒增加一个关键帧。目前我们经常见的视频格式无非就是两大类：<br>1、影像格式（Video）<br>2、流媒体格式（Stream Video）</li>
</ul>
<p>在影像格式中还可以根据出处划分为三大种：<br>1、AVI格式：这是由微软（Microsoft）提出，具有“悠久历史”的一种视频格式<br>2、MOV格式：这是由苹果（Apple）公司提出的一种视频格式<br>3、MPEG/MPG/DAT：这是由国际标准化组织ISO(International Standards Organization)与IEC(International Electronic Committee)联合开发的一种编码视频格式。MPEG是运动图像压缩算法的国际标准，现已被几乎所有的计算机平台共同支持。</p>
<p>在流媒体格式中同样还可以划分为三种：<br>1、RM格式：这是由Real Networks公司开发的一种新型流式视频文件格式。<br>2、MOV/QT格式：MOV也可以作为一种流文件格式。QuickTime能够通过Internet提供实时的数字化信息流、工作流与文件回放功能，为了适应这一网络多媒体应用，QuickTime为多种流行的浏览器软件提供了相应的QuickTime Viewer插件（Plug－in），能够在浏览器中实现多媒体数据的实时回放。<br>3、ASF格式：这是由微软公司开发的流媒体格式，是一个在Internet上实时传播多媒体的技术标准。<br>4、FLV</p>
<h2 id="具体视频文件格式详解："><a href="#具体视频文件格式详解：" class="headerlink" title="具体视频文件格式详解："></a>具体视频文件格式详解：</h2><ul>
<li><p>*. MPEG/.MPG/.DAT<br>MPEG也是Motion Picture Experts Group的缩写。这类格式包括了MPEG-1, MPEG-2和 MPEG-4在内的多种视频格式。MPEG-1相信是大家接触得最多的了，因为目前其正在被广泛地应用在VCD的制作和一些视频片段下载的网络应用上面，大部分的VCD都是用 MPEG1格式压缩的( 刻录软件自动将MPEG1转为.DAT格式)，使用 MPEG-1的压缩算法，可以把一部 120 分钟长的电影压缩到1.2 GB 左右大小。MPEG-2则是应用在DVD 的制作，同时在一些HDTV（高清晰电视广播）和一些高要求视频编辑、处理上面也有相当多的应用。使用MPEG-2的压缩算法压缩一部 120 分钟长的电影可以压缩到 5-8 GB的大小（MPEG2的图像质量MPEG-1与其无法比拟的）。</p>
</li>
<li><p>*.AVI<br>　它的英文全称为Audio Video Interleaved，即音频视频交错格式。是将语音和影像同步组合在一起的文件格式。它对视频文件采用了一种有损压缩方式，但压缩比较高，因此尽管面面质量不是太好，但其应用范围仍然非常广泛。AVI支持256色和RLE压缩。AVI信息主要应用在多媒体光盘上，用来保存电视、电影等各种影像信息。它于1992年被Microsoft公司推出，随Windows3.1一起被人们所认识和熟知。所谓“音频视频交错”，就是可以将视频和音频交织在一起进行同步播放。这种视频格式的优点是图像质量好，可以跨多个平台使用，其缺点是体积过于庞大，而且更加糟糕的是压缩标准不统一，最普遍的现象就是高版本Windows媒体播放器播放不了采用早期编码编辑的AVI格式视频，而低版本Windows媒体播放器又播放不了采用最新编码编辑的AVI格式视频，所以我们在进行一些AVI格式的视频播放时常会出现由于视频编码问题而造成的视频不能播放或即使能够播放，但存在不能调节播放进度和播放时只有声音没有图像等一些莫名其妙的问题，如果用户在进行AVI格式的视频播放时遇到了这些问题，可以通过下载相应的解码器来解决。是目前视频文件的主流。 这种格式的文件随处可见，比如一些游戏、教育软件的片头，多媒体光盘中，都会有不少的 AVI 。现在，在WINDOWS 95或98里都能直接播放AVI，同一种格式的avi文件有可能采用不同的编码方式，最常见的有Intel Indeo（R）Video R3.2（像游戏过场动画等，是目前使用最广泛的一种avi编码技术）、Microsoft video 等。</p>
</li>
<li><p><em>.RA/RM/RAM
　</em>.RM，Real Networks公司所制定的音频/视频压缩规范Real Media中的一种，Real Player能做的就是利用Internet资源对这些符合Real Media技术规范的音频/视频进行实况转播。在Real Media规范中主要包括三类文件：RealAudio、Real Video和Real Flash（Real Networks公司与Macromedia公司合作推出的新一代高压缩比动画格式）。REAL VIDEO（RA、RAM）格式由一开始就是定位就是在视频流应用方面的，也可以说是视频流技术的始创者。它可以在用56K MODEM 拨号上网的条件实现不间断的视频播放，从RealVideo的定位来看，就是牺牲画面质量来换取可连续观看性。其实RealVideo也可以实现不错的画面质量，由于RealVideo可以拥有非常高的压缩效率，很多人把VCD编码成RealVideo格式的，这样一来，一张光盘上可以存放好几部电影。REAL VIDEO存在颜色还原不准确的问题，RealVideo就不太适合专业的场合，但RealVideo出色的压缩效率和支持流式播放的特征，使得RealVideo在网络和娱乐场合占有不错的市场份额。</p>
</li>
<li><p>*.MOV<br>MOV格式，美国Apple公司开发的一种视频格式，默认的播放器是苹果的QuickTimePlayer。具有较高的压缩比率和较完美的视频清晰度等特点，但是其最大的特点还是跨平台性，即不仅能支持MacOS，同样也能支持Windows系列,在所有视频格式当中，也许MOV格式是最不知名的。也许你会听说过QuickTime，MOV格式的文件正是由它来播放的。在PC几乎一统天下的今天，从Apple移植过来的MOV格式自然是受到排挤的。它具有跨平台、存储空间要求小的技术特点，而采用了有损压缩方式的MOV格式文件，画面效果较AVI格式要稍微好一些。到目前为止，它共有4个版本，其中以 4.0 版本的压缩率最好。这种编码支持16位图像深度的帧内压缩和帧间压缩，帧率每秒10帧以上。现在这种格式有些非编软件也可以对它时行处理，其中包括ADOBE公司的专业级多媒体视频处理软件AFTEREFFECT和PREMIERE。</p>
</li>
<li><p>*.ASF<br>　ASF (Advanced Streaming format高级流格式)。ASF是MICROSOFT 为了和现在的 Real player 竞争而发展出来的一种可以直接在网上观看视频节目的文件压缩格式。ASF使用了MPEG4的压缩算法，压缩率和图像的质量都很不错。因为ASF是以一个可以在网上即时观赏的视频“流”格式存在的，所以它的图像质量比VCD差一点点并不出奇，但比同是视频“流”格式的RAM格式要好。 ASF支持任意的压缩/解压缩编码方式，并可以使用任何一种底层网络传输协议，具有很大的灵活性。ASF流文件的数据速率可以在28.8Kbps到3Mbps之间变化。用户可以根据自己应用环境和网络条件选择一个合适的速率，实现VOD点播和直播。</p>
</li>
<li><p>*.WMV<br>　WMV是微软推出的一种流媒体格式，它是ASF的升级延伸，在同等视频质量下，WMV格式的体积非常小，因此很适合在网上播放和传输。微软希望用其取代QuickTime之类的技术标准以及WAV、AVI之类的文件扩展名。WMV的主要优点在于：可扩充的媒体类型、本地或网络回放、可伸缩的媒体类型、流的优先级化、多语言支持、扩展性等。</p>
</li>
<li><p>*. NAVI<br>　如果你发现原来的播放软件突然打不开此类格式的AVI文件，那你就要考虑是不是碰到了n AVI。n AVI是New AVI 的缩写，是一个名为Shadow Realm的地下组织发展起来的一种新视频格式。它是由Microsoft ASF压缩算法的修改而来的（并不是想象中的AVI），视频格式追求的无非是压缩率和图像质量，所以NAVI为了追求这个目标，改善了原始的ASF格式的一些不足，让 NAVI 可以拥有更高的帧率。可以这样说，NAVI是一种去掉视频流特性的改良型ASF格式。</p>
</li>
<li><p>*.FLV</p>
</li>
</ul>
<p>FLV 是 FLASH VIDEO的简称，是由Macromedia公司开发的属于自己的流式视频格式。FLV也就是随着Flash MX的推出发展而来的视频格式，是在sorenson公司的压缩算法的基础上开发出来的。FLV格式不仅可以轻松的导入Flash中，速度极快，并且能其到保护版权的作用，并且可以不通过本地的微软或者REAL播放器播放视频。Flash MX 2004对其提供了完美的支持，它的出现有效地解决了视频文件导入Flash后，使导出的SWF文件体积庞大，不能在网络上很好的使用等缺点。由于它形成的文件极小、加载速度极快，使得网络观看视频文件成为可能，它的出现有效地解决了视频文件导入Flash后，使导出的SWF文件体积庞大，不能在网络上很好的使用等缺点。</p>
<h2 id="视频文件转换："><a href="#视频文件转换：" class="headerlink" title="视频文件转换："></a>视频文件转换：</h2><p>比较常见的视频格式转化有： </p>
<p>RM→ASF</p>
<p>AVI→RMVB</p>
<p>dat–&gt;divx</p>
<p>mpg–&gt;divx</p>
<p>vcd–&gt;rm</p>
<p>dat–&gt;rm</p>
<p>mpg,dat、avi、mov–&gt;rm</p>
<p>*–&gt;FLV</p>
<p>最近视频博客的兴起，导致了flv的快速发展</p>
<p>AVI→MPEG(MPEG－1)<br>     例如有纪念性的家庭录影带，可以事先转换成AVI格式，再用软件将它转换成MPEG－1格式，然后用刻录器将MPEG－1格式文件刻录光盘片，得到的就是普通的VCD光盘了，可以拿到任何VCD播放器上播放。 </p>
<p>MPEG(MPEG－1)→AVI<br>       从MPEG到AVI文件之间的转换，为磁盘节省空间。</p>
<p>MPEG(MPEG－1)→ASF<br>       将vcd文件转码后实现VOD点播和直播。</p>
<p>ASF→MPEG(MPEG－1)<br>      由于ASF视频格式的先天限制，一般来说它的图像质量往往比不上MPEG－1，所以转换之前，请三思而后行。</p>
<p>DVD(MPEG－2)→VCD (MPEG－1)<br>       由于DVD驱动器尚未普及以及DVD光盘成本昂贵等客观原因，DVD影片一直未能像VCD一样流行。但我们可以将喜爱的DVD影片转换成MPEG－1格式的视频文件，留在硬盘上观看或是刻成VCD光盘。</p>
<p>dat/mpg-&gt;mp3</p>
<p>CD–&gt;wav,mp3,wma</p>
<p>rm–&gt;mp3</p>
<p>mp3–&gt;wma</p>
<p>以上列举的视频格式转化都是比较常见的，当然了，说到底，是有这方面的实际应用需求才会出现这方面的视频转化需要。<br>比如说，要把一部VCD（也就是MPEG1编码的视频文件）制作成可以在线观看的影片，最大的瓶颈就在于文件尺寸的改变，并且要能够适应网络的特点，这样原始的格式就不能满足需  要，必须要转化成互联网视频播放规范的流媒体格式才可以，比如说是RM或者ASF，这就是需要，所以针对影像格式转化为流媒体格式的软件也就应用而生了，还有现在非常流行的MPEG4视频压缩技术，它能够把一张DVD压缩到一张CD上去，并且视频效果也不会有太大的变化，至少在我们普通用户看来也是非常不错的，而文件体积则大大减小了，这就要求有能够把DVD转化成MPEG4文件的软件出现，但是如果有人想要把RM转化成MPEG1（VCD），就没有太大的实际意义了，因为这样并不能给视频效果带来太大的提升，反而文件尺寸大了许多，所以我们很少能够看到这样的转化软件，其他的也类似，所以，在视频转化领域，可以参照以下两个原则：<br>1 有明确的应用方向：就是说一种视频格式转化成另一种视频格式，必须要有明确的应用方向，即目标格式能够有很广泛的应用价值，而不是说为了转化而转化，比如上文所说的VCD-&gt;RM，它的应用方向就是网络播放，因为现在在线电影是一个很大的市场和网络的应用方向。<br>2 能够提升播放价值： 就是说一种视频格式转化成另一种视频格式除了有明确的应用方向外，还要考虑转化是不是有价值，如果说转化后的文件播放效果没有明显提升，但是文件尺寸却大了一倍，我想这样亏本的买卖是没有人会去做的，RM转化成VCD就没有实际的意义，原因如前文所述，而DVD转化成MPEG4价值就很大，不说转化后的播放效果，单说成本就降低了不少。</p>
<h2 id="音视频压缩编码标准："><a href="#音视频压缩编码标准：" class="headerlink" title="音视频压缩编码标准："></a>音视频压缩编码标准：</h2><p>多媒体编辑码方式就是指通过特定的压缩技术，将某个视频格式的文件转换成另一种视频格式文件的方式，现在主要的编码方式有：</p>
<ol>
<li>MPEG系列： 视频编码方面主要是Mpeg1、Mpeg2、Mpeg4、Mpeg4 AVC；<br>音频编码方面主要是MPEG Audio Layer 1/2、MPEG Audio Layer 3、MPEG-2 AAC、MPEG-4 AAC等等。 注意：DVD音频没有采用Mpeg的</li>
<li><p>H.26X系列：包括H261、H262、H263、H263+、H263++、H264</p>
</li>
<li><p>微软windows media系列：视频编码有Mpeg-4 v1/v2/v3、Windows Media Video 7/8/9/10；音频编码有Windows Media audeo v1/v2/7/8/9</p>
</li>
<li><p>Real Media系列： 视频编码有RealVideo G2、RealVideo 8/9/10；音频编码有RealAudio cook/sipro、RealAudio AAC/AACPlus等</p>
</li>
<li><p>QuickTime系列： 视频编码有Sorenson Video 3、Apple MPEG-4、Apple H.264；音频编码有QDesign Music 2、Apple MPEG-4 AAC</p>
</li>
<li><p>其它，如：Ogg、On2-vpx、flash vidio，以及M-JPEG视频压缩方式</p>
</li>
</ol>
<h2 id="各视频编码的应用场合简要："><a href="#各视频编码的应用场合简要：" class="headerlink" title="各视频编码的应用场合简要："></a>各视频编码的应用场合简要：</h2><p><a href="http://blog.csdn.net/luchy/archive/2007/03/27/1542478.aspx" target="_blank" rel="external">http://blog.csdn.net/luchy/archive/2007/03/27/1542478.aspx</a>这里讲的挺详细的</p>
<ul>
<li><ol>
<li>Mpeg1较早的视频编码，质量比较差，主要用于 CD-ROM 存储视频，国内最为大家熟悉的就是 VCD（Video CD），他的视频编码就是采用 MPEG-1；</li>
</ol>
</li>
<li><ol>
<li>在 MPEG-1 的基础上开发的一种视频编码，它的质量远远好于 MPEG-1，所以被运用在了 DVD-Video 上面，MPEG-2 是 DVD-Video 唯一指定的视频编码。MPEG-2 不光运用于 DVD-Video ，现在大部分 HDTV（高清电视）也采用 MPEG-2 编码，分辨率达到了 1920x1080。</li>
</ol>
</li>
<li><ol>
<li>MPEG-3是MPEG组织制定的视频和音频压缩标准。本来的目标是为HDTV提供20-40Mbps视频压缩技术。在标准制定的过程中，委员会很快发现MPEG-2可以取得类似的效果。随后，MPEG-3项目停止了。</li>
</ol>
</li>
<li><ol>
<li>MPEG-4是为了适应网络的需求，采用一系列新技术，以最少的数据获得最佳的图像质量为目标的新一代编码方式。主要应用在数字电视、动态图像、互联网、实时多媒体监控、移动多媒体通信、Internet／intranet上的视频流与可视游戏、DVD上的交互多媒体应用等方面。Divx，xvid，ms mpeg4都是采用mpeg-4视频编码的。对于普通用户来说，MPEG-4在目前来说最有吸引力的地方还在于它能在普通CD-ROM上基本实现DVD的质量；用MPEG-4压缩算法的ASF(Advanced Streaming format，高级格式流)可以将120分钟的电影压缩为300MB左右的视频流；采用MPEG-4压缩算法的DIVX视频编码技术可以将120分钟的电影压缩600MB左右</li>
</ol>
</li>
<li><ol>
<li>Mpeg4 AVC和 MPEG-4 是两种不同的编码，主要是在极低码率下 MPEG-4 表现并不好，而 AVC 更加适合低带宽传输。在高码率上，AVC 的表现也要好过 MPEG-4，所以现在大有取代 MPEG-4 的趋势。下一代 HD DVD 和 Blue Ray Disc 已经正式接纳 AVC 为视频编码方案之一，相信 AVC 的发展前途会非常好。AVC/H.264极有可能成为下一代视频格式，（avs，中国标准）</li>
</ol>
</li>
<li><ol>
<li>H.261是ITU-T为在综合业务数字网(ISDN)上开展双向声像业务(可视电话、视频会议)而制定的，它是最早的运动图像压缩标准，它详细制定了视频编码的各个部分，包括运动补偿的帧间预测、DCT变换、量化、熵编码，以及与固定速率的信道相适配的速率控制等部分。</li>
</ol>
</li>
<li><ol>
<li>H.262是由ITU-T的VCEG组织和ISO/IEC的MPEG组织联合制定的，所以制定完成后分别成为了两个组织的标准，正式名称是”ITU-T建议H.262”和”ISO/IEC 13818-2”。这两个标准在所有的文字叙述上都是相同的。</li>
</ol>
</li>
<li><ol>
<li>H.263是ITU-T为低于64kb/s的窄带通信信道制定的视频编码标准，它是在H.261基础上发展起来的</li>
</ol>
</li>
<li><ol>
<li>H263+是H.263 的第二个版本，加入了许多新技术来扩展 H.263 的应用范围。</li>
</ol>
</li>
<li><p>10.H.263++是在 H.263+ 上增加了几个选项，来增强码流在恶劣信道上的抗误码性能，同时提高增强编码效率。</p>
</li>
<li><p>11.H.264也就是前面提到的 MPEG-4 AVC。H.264是由ISO/IEC与ITU-T组成的联合视频组(JVT)制定的新一代视频压缩编码标准。在ISO/IEC中该标准命名为AVC (Advanced Video Coding)，作为MPEG-4标准的第10个选项；在ITU-T中正式命名为H.264标准。</p>
</li>
<li><p>12.Microsoft MPEG-4 v1/v2/v3，最早的 ASF 采用的视频编码，基于 MPEG-4 技术开发，DivX3.11 就是基于 Microsoft MPEG-4 v3 破解出来的，后来才进行了重写。</p>
</li>
<li><p>13.Windows Media Video 7，Microsoft 正式开发的第一个 Windows Media Video，开始脱离了 MPEG-4，和 MPEG-4 不兼容，从这一点上可见微软的野心。可惜这个版本压缩效果非常烂，打破了微软一飞冲天的美梦，不过它在压缩速度上非常快，现在网络上有很多采用这种格式压缩的 WMV。</p>
</li>
<li><p>14.Windows Media Video 8，在 WMV7 基础上改进的版本，质量上面进不了不少</p>
</li>
<li><p>15.Windows Media Video 9，微软的重头戏，不光是这一个编码，V9 系列更是一个平台，让微软有足够的能力挑战 MPEG，ITU 等标准化组织。虽然这个版本并没有微软吹得那么厉害，特别是低码率下比较差，不过跟以前版本相比进步还是非常多的。特别是 WMV HD 的应用，让微软也跻身视频标准领域。</p>
</li>
<li><p>16.RealVideo G2，早期的 RealVideo 编码，质量比较糟糕，不过那时在网络上算是很先进了，毕竟当时能用网络看视频的人不多。</p>
</li>
<li><p>17.RealVideo 8，随着 RealPlayer 8 推出的视频格式，是现在主流的网络视频编码之一。编码速度较慢，质量也只能算一般。</p>
</li>
<li><p>18.RealVideo 9，RealNetworks 开发的新一代编码，质量进步了很多，特别是在底码率下，而且编码速度很快，做到了速与质的很好统一。</p>
</li>
<li><p>19.RealVideo 10，在 RealVideo 9 基础上加入了一些参数，如 EHQ 等，更加精确控制码率，和 RealVideo 9 兼容。</p>
</li>
<li><p>20.Sorenson Video 3，Sorenson Media 公司随 QuickTime 5 发布的编码器，质量很不错，已经成为 QuickTime 的标准视频编码，网络上大部分电影预告片都采用这种编码。</p>
</li>
<li><p>21.Apple MPEG-4，Apple 公司自己开发的 MPEG-4 编码器，随 QuickTime 6 发布，质量很差。</p>
</li>
<li><p>22.Apple H.264，Apple 公司自己开发的 H.264 编码器，随 QuickTime 7 发布，支持 HDTV。</p>
</li>
<li><p>23.Ogg 是 Xiph.org 基金会发起的一个开放源代码项目，包括视频音频，服务器，传输系统，客户端，硬件支持等，最为大家熟悉的就是音频 Ogg Vorbis，它被认为是迄今为止 128kbps 码率上最好的编码器。</p>
</li>
<li><p>24.On2 VPX系列，On2 公司开发了一系列优秀的视频编码，现在应用得最多的恐怕是 Nullsoft Video 的视频，它们就采用了 VP3，VP5，VP6 视频编码。</p>
</li>
<li><p>25.Flash Video，Macromedia 公司推出的多媒体格式，主要用于在 Flash 中压缩视频。视频采用 Sorenson 公司的 Spark 编码器，音频采用 MP3，质量比较差。传闻下一代 Flash Video 准备使用 On2 VP6 ，那将让视频质量得到一个量的提升。</p>
</li>
<li><p>26.M-JPEG（Motion-JoinPhotographicExpertsGroup）技术即运动静止图像（或逐帧）压缩技术，广泛应用于非线性编辑领域可精确到帧编辑和多层图像处理，把运动的视频序列作为连续的静止图像来处理，这种压缩方式单独完整地压缩每一帧，在编辑过程中可随机存储每一帧，可进行精确到帧的编辑，此外M-JPEG的压缩和解压缩是对称的，可由相同的硬件和软件实现。</p>
</li>
</ul>
<h2 id="各音频编码的应用场合简要："><a href="#各音频编码的应用场合简要：" class="headerlink" title="各音频编码的应用场合简要："></a>各音频编码的应用场合简要：</h2><ol>
<li><p>MPEG Audio Layer 1典型数据压缩率是1：4，即每个立体声信号为384 kbps</p>
</li>
<li><p>MPEG Audio Layer 2典型数据压缩率是1：4—1：8，即每个立体声信号为256到192 kbps。MPEG Audio Layer1/2主要用于vcd，svcd的音频编码</p>
</li>
<li><p>MPEG Audio Layer 3，也就是大名鼎鼎的mp3，已经成为网络音频的主流格式，能在128kbps的码率下接近cd音质。典型数据压缩率是1：10—1：12，即每个立体声信号为128到112 kbps</p>
</li>
<li><p>MPEG-2 AAC（Advanced Audio Coding）是在1997年由以Bosi、Brandenburg、Johnston等为首的音频编码研究提出的，它总结了MPEG-1、MPEG-2和AC-3等的长处，在MPEG 系统上进一步改进了很多新的功能，大大增强了编码的灵活度，在保证音质的同时更大限度地压缩了码率。它和传统的mpeg audio不兼容，在理论上质量要高于mp3，并且支持多声道，在96kbps的码率范围内能接近cd音质，比mp3更加适合低码率传输；同时，MPEG-2 AAC已经成为MPEG-4标准中高质量音频编码的核心，是下一代音频压缩标准。</p>
</li>
<li><p>MPEG-4 AAC：是MPEG-4标准音频编码标准的一部分，apple公司自己开发有这种 AAC 编码器，质量非常好，是最优秀的 AAC 编码器之一，随 QuickTime 6 发布</p>
</li>
<li><p>杜比数字AC-3技术也就是5.1声道技术</p>
</li>
<li><p>Windows Media Audio v1/v2，微软最早的音频编码技术，用于 ASF 中，后来被破解也用在 DivX Audio 中，质量比较差。</p>
</li>
<li><p>Windows Media Audio 7/8/9，随着各种不同的 WMV 而推出的相应的音频编码，质量节节提升，不过还没有达到 64kbps CD音质的神化</p>
</li>
<li><p>Windows Media Audio 9 Professional，WMA9 中出现的新编码，主要用于多声道编码和高采样率音频的编码，质量不错。</p>
</li>
<li><p>RealAudio Cook，早期的音频编码，但是在现在看来，仍然质量不错，可惜最高码率 96kbps。应用到了两代音频编码中：RealAudio G2、RealAudio 8。</p>
</li>
<li><p>RealAudio Sipro，采用了 Sipro 语音编码技术，主要针对语音编码，应用在更早期的 RealAudio 4.0、RealAudio 5.0 中。</p>
</li>
<li><p>RealAudio AAC，AAC 音频编码，用于 RealAudio 10 中。</p>
</li>
<li><p>RealAudio aacPlus，aacPlus 音频编码，用于 RealAudio 10 中，不过并没有随 RealProducer 发行，需要单独购买。</p>
</li>
<li><p>QDesign Music 2，QDesign Music 的第二个版本，也是最后一个版本，在时下这些先进的音频编码面前，它已经没有生命力了，主要应用于网上的电影预告片。</p>
</li>
<li><p>Apple MPEG-4 AAC，Apple 公司自己开发的 AAC 编码器，质量非常好，是最优秀的 AAC 编码器之一，随 QuickTime 6 发布。</p>
</li>
</ol>
<h2 id="四种主流的视频压缩编码标准："><a href="#四种主流的视频压缩编码标准：" class="headerlink" title="四种主流的视频压缩编码标准："></a>四种主流的视频压缩编码标准：</h2><p>1、Windows Media Video 9</p>
<p>　　相比起其他三种图像压缩技术，WMV可能是使用率最高的视频编码格式。原因十分简单，如果想使自己的影片直接给网上其他用户观看到的话，利用微软自身的视频编码标准是最简单的做法。因为只要用户的电脑中有Windows Media Player(媒体播放器)，就能够播放WMV影片，而且不用额外安装Codec（编码），所以兼容性方面完全不用担心。借助Windows Media 9.0 Series的新技术，Windows Media Video 9.0比旧的8.0版有多达15-50%的压缩率提高。而且与MPEG-4画质相比时，其容量大小只需一半即可达到。加上配合Windows Media Service 9.0服务器，在Streaming media（流媒体）方面也有更佳的表现。　　</p>
<p>官方网站：<a href="http://www.microsoft.com" target="_blank" rel="external">http://www.microsoft.com</a></p>
<p>2、Real Video 9</p>
<p>玩电脑时间长的朋友都知道，Real Video是多年前市场上最普及的音乐、图像格式。不过随着MP3、WMV及WMV等的兴起，已经使Real Media格式的普及率大不如前。但现在全世界仍然有许多的电脑玩家是Real Video的支持者，网上供下载的影片很多也是RM或RMVB格式。　RealNetwork新推出了一套名为Helix Producer的工具（也就是Real Producer 9），其中的RealVideo 9在图像压缩编码技术方面作出重大优化，无论在下载或Streaming时都声称比Windows Media 9出色，能够以一半的比特速率（bitrate）达到MPEG-4级图像，在约500 Kbps时达到接近DVD的画质表现。同样地，配合服务器可获得更出色的效果。</p>
<p>官方网址：<a href="http://www.realnetworks.com" target="_blank" rel="external">http://www.realnetworks.com</a></p>
<p>3、DivX</p>
<p>　　历史介绍：</p>
<p>ISO公布了“超低比特率活动图像和语音压缩标准 ”，排序MPEG－4,1998年10月批准第一版，1994年4月又公布了第二版及其校验模型（VM），MPEG－4正式编号是ISO/IEC国际标准14496，它是一种新型的多媒体标准，它与前标准一个重要区别就在于，是一个基于对象的视编码压缩标准，所定义的码率控制的目标就是获得在给定码率下的最优质量，它为互联网上传输高质量的多媒体视频提供了很好的技术平台。</p>
<p>1998年微软开发了第一个在PC上使用的MPEG－4编码器，它包括MS MPEG4V1、MS MPEG4V2、MS MPEG4V3的系列编码内码，其中V1和V2用来制作AVI文件，一直到现在它都是作为Windows的默认组件，不过V1和V2的编码质量不是很好，一直到MS　MPEG4V3才开始有好转，画质有了显著的进步，但是不知微软出于什么目的，却将这个MS　MPEGV3的视频编码内核封闭，仅仅使其应用于Windows Media流媒体技术上，也就是我们熟悉的ASF流媒体文件中。ASF文件虽然有一些优势，但是由于过分的封闭不能被编辑，末得到广泛应用，这便惹怒了那些个不怕天不怕地的视频黑客和致力于钻研视频编码的高手，后来，这些小组不仅破解了微软的视频编码，而且经过他们的修改，一种新的视频编码诞生了：那就是广为流传的MPEG编码器－DivX3.11。</p>
<p>DivX采用了MS的MPEGV3，改良后并加入自己功能称之为DivX3.11，也是目前互联网上普通采用的MPEG－4编码器之一。很快，DivX被传得红得发紫，几乎成了业界的标准，但是，同样很快地出现了，DivX的基础技术是非法盗用微软的，微软声称将对所有推动DivX发展的人、企业进行追究，可是DivX技术的创造者之一罗达（Rota）正全面申请将DivX合法化，这是基于DivX虽然是从Window的发明出来的，但却没有用过任何微软的技术，更组建新公司DivXNetworks全力推广DivX，看来DivX（俗称压缩电影）蓬勃发展的大潮是势不可挡了。</p>
<p>看来任何吸引眼球的故事在关键时刻都会发生转折，DivX的发展竟也不能脱离这一俗套，就在DivX顺利发展时期，DivX的技术逐渐成熟，商机无限的时候，一台好戏上演了，DivXNetworks成立初衷就是摆脱微软的技术封闭，因而发起一个完全开放源码的项目，名为 “ Projet Mayo ”，目标是开发一套全新的、开放源码的MPEG4编码软件，由于它完全符合ISO　MPEG标准，又是完全开放源代码，OpenDivXCODEC吸引了很多软件，视频高手参与，很快便开发出具有更高性能的编码器Encore2等等，就在DivX最辉煌的时期，DXN公司突然封闭了DivX的源代码，并在Encore2的基础上发布了自有产品DivX4，原来DXN早就给自己留了后门，DivX采取的是LGPL协议，而不是GPL协议，虽说它们都是公共许可证协议，保障自由使用和修改软件或源码的权利，但LGPL允许私有，DXN就是利用这一协议初其不备的耍出了大刀。</p>
<p>接着，很多被DXN公司狠狠涮了一回的软件、视频团体另起门户，逐渐重新聚拢开发力量，高举复仇大旗，在OpenDivX版本基础上，再次开发出一种新的MPEG－4编码–XviD，名字的顺序和DviX刚好相反，仅仅从名字就可以看出Xvid充满了复仇的力量。</p>
<p>DivX是近一两年来称霸网络视频的图像压缩编码标准。起初它是以微软MPEG 4视频编码标准为基础修改和开发的，并以免费方式发布。其特点是具有十分不错的压缩比率，可以将一整套DVD质量的影片压缩存放到一张CD-R光盘中。现在的DivX分为普通版和Pro版，其中后者还有收费版和Adware（广告）版两种，自带DivX Player程序进行播放。用户如果安装了免费的DivX Codec后，也可用Windows Media player观看DivX影片。</p>
<p>官方网站：<a href="http://www.divx.com" target="_blank" rel="external">http://www.divx.com</a></p>
<p>4、Koepi’s XviD Codec</p>
<p>相比起前三种视频编码标准来说，Xvid推出市场的时间最迟。从其名字就知道这种标准是针对DivX而来的。原来，DivX由免费转为收费编码后，使部份原有开发人员不满，继而离开并组成一个新的开发小组，设计免费且开放源代码的XviD Codec。当前，Koepi和Nic的XviD都是比较活跃和最多人使用的版本，虽然两者在编译上有所不同，但实际做出的效果相差无几。Xivd与DivX一样，在编译后都是一个.AVI文件，播放时只要安装Xvid codec就能用Windows媒体播放器中播放。</p>
<p>官方网站：<a href="http://roeder.goe.net/~koepi" target="_blank" rel="external">http://roeder.goe.net/~koepi</a></p>
<h2 id="视频压缩基本概念："><a href="#视频压缩基本概念：" class="headerlink" title="视频压缩基本概念："></a>视频压缩基本概念：</h2><p>一、有损和无损压缩：在视频压缩中有损（Lossy）和无损（Lossless）的概念与静态图像中基本类似。无损压缩也即压缩前和解压缩后的数据完全一致。多数的无损压缩都采用RLE行程编码算法。有损压缩意味着解压缩后的数据与压缩前的数据不一致。在压缩的过程中要丢失一些人眼和人耳所不敏感的图像或音频信息，而且丢失的信息不可恢复。几乎所有高压缩的算法都采用有损压缩，这样才能达到低数据率的目标。丢失的数据率与压缩比有关，压缩比越小，丢失的数据越多，解压缩后的效果一般越差。此外，某些有损压缩算法采用多次重复压缩的方式，这样还会引起额外的数据丢失。</p>
<p>二、帧内和帧间压缩：帧内（Intraframe）压缩也称为空间压缩（Spatial compression）。当压缩一帧图像时，仅考虑本帧的数据而不考虑相邻帧之间的冗余信息，这实际上与静态图像压缩类似。帧内一般采用有损压缩算法，由于帧内压缩时各个帧之间没有相互关系，所以压缩后的视频数据仍可以以帧为单位进行编辑。帧内压缩一般达不到很高的压缩。<br>    采用帧间（Interframe）压缩是基于许多视频或动画的连续前后两帧具有很大的相关性，或者说前后两帧信息变化很小的特点。也即连续的视频其相邻帧之间具有冗余信息，根据这一特性，压缩相邻帧之间的冗余量就可以进一步提高压缩量，减小压缩比。帧间压缩也称为时间压缩（Temporal compression），它通过比较时间轴上不同帧之间的数据进行压缩。帧间压缩一般是无损的。帧差值（Frame differencing）算法是一种典型的时间压缩法，它通过比较本帧与相邻帧之间的差异，仅记录本帧与其相邻帧的差值，这样可以大大减少数据量。</p>
<p>三、对称和不对称编码：对称性（symmetric）是压缩编码的一个关键特征。对称意味着压缩和解压缩占用相同的计算处理能力和时间，对称算法适合于实时压缩和传送视频，如视频会议应用就以采用对称的压缩编码算法为好。而在电子出版和其它多媒体应用中，一般是把视频预先压缩处理好，尔后再播放，因此可以采用不对称（asymmetric）编码。不对称或非对称意味着压缩时需要花费大量的处理能力和时间，而解压缩时则能较好地实时回放，也即以不同的速度进行压缩和解压缩。一般地说，压缩一段视频的时间比回放（解压缩）该视频的时间要多得多。例如，压缩一段三分钟的视频片断可能需要10多分钟的时间，而该片断实时回放时间只有三分钟。</p>
<p>第三部分：音频文件格式</p>
<h2 id="一些音视频的参数含义"><a href="#一些音视频的参数含义" class="headerlink" title="一些音视频的参数含义:"></a>一些音视频的参数含义:</h2><p>声道：目前人们所使用的各种声场技术规范非常多，但最常见的几乎都来自三家公司，他们是Dolby（杜比）、HTX和DTS。声卡所支持的声道数是衡量声卡档次的重要指标之一，从单声道到最新的环绕立体声，下面一一详细介绍：1.单声道：单声道是比较原始的声音复制形式，早期的声卡采用的比较普遍。当通过两个扬声器回放单声道信息的时候，我们可以明显感觉到声音是从两个音箱中间传递到我们耳朵里的。这种缺乏位置感的录制方式用现在的眼光看自然是很落后的，但在声卡刚刚起步时，已经是非常先进的技术了。2.立体声：单声道缺乏对声音的位置定位，而立体声技术则彻底改变了这一状况。声音在录制过程中被分配到两个独立的声道，从而达到了很好的声音定位效果。这种技术在音乐欣赏中显得尤为有用，听众可以清晰地分辨出各种乐器来自的方向，从而使音乐更富想象力，更加接近于临场感受。立体声技术广泛运用于自Sound Blaster Pro以后的大量声卡，成为了影响深远的一个音频标准。时至今日，立体声依然是许多产品遵循的技术标准。3.准立体声：准立体声声卡的基本概念就是：在录制声音的时候采用单声道，而放音有时是立体声，有时是单声道。采用这种技术的声卡也曾在市面上流行过一段时间，但现在已经销声匿迹了。4.四声道环绕：人们的欲望是无止境的，立体声虽然满足了人们对左右声道位置感体验的要求，但是随着技术的进一步发展，大家逐渐发现双声道已经越来越不能满足我们的需求。由于PCI声卡的出现带来了许多新的技术，其中发展最为神速的当数三维音效。三维音效的主旨是为人们带来一个虚拟的声音环境，通过特殊的HRTF技术营造一个趋于真实的声场，从而获得更好的游戏听觉效果和声场定位。而要达到好的效果，仅仅依靠两个音箱是远远不够的，所以立体声技术在三维音效面前就显得捉襟见肘了，但四声道环绕音频技术则很好的解决了这一问题。四声道环绕规定了4个发音点：前左、前右，后左、后右，听众则被包围在这中间。同时还建议增加一个低音音箱，以加强对低频信号的回放处理(这也就是如今4.1声道音箱系统广泛流行的原因)。就整体效果而言，四声道系统可以为听众带来来自多个不同方向的声音环绕，可以获得身临各种不同环境的听觉感受，给用户以全新的体验。如今四声道技术已经广泛融入于各类中高档声卡的设计中，成为未来发展的主流趋势。5.5.1声道5.1声道已广泛运用于各类传统影院和家庭影院中，一些比较知名的声音录制压缩格式，譬如杜比AC-3（Dolby Digital）、DTS等都是以5.1声音系统为技术蓝本的。其实5.1声音系统来源于4.1环绕，不同之处在于它增加了一个中置单元。这个中置单元负责传送低于80Hz的声音信号，在欣赏影片时有利于加强人声，把对话集中在整个声场的中部，以增加整体效果。相信每一个真正体验过Dolby AC-3音效的朋友都会为5.1声道所折服。千万不要以为5.1已经是环绕立体声的顶峰了，更强大的7.1系统已经出现了。它在5.1的基础上又增加了中左和中右两个发音点，以求达到更加完美的境界。由于成本比较高，没有广泛普及。</p>
<p>一.WMA<br>　　WMA的全称是Windows Media Audio，是微软力推的一种音频格式。WMA格式是以减少数据流量但保持音质的方法来达到更高的压缩率目的，其压缩率一般可以达到1:18，生成的文件大小只有相应MP3文件的一半。此外，WMA还可以通过DRM（Digital Rights Management）方案加入防止拷贝，或者加入限制播放时间和播放次数，甚至是播放机器的限制，可有力地防止盗版。</p>
<p>优点<br>WMA 7之后的WMA支持证书加密，未经许可（即未获得许可证书），即使是非法拷贝到本地，也是无法收听的。同时，微软公司开始时宣称的：同文件比MP3体积小一倍而音质不变，也得到了兑现。事实上，这个说法，仅仅适用于低比特率的情况，另外，微软公司在WMA 9大幅改进了其引擎，实际上几乎可以在同文件同音质下比相同的MP3体积少1/3左右。<br>缺点<br>在高比率的渲染能力低下，同音源的一个320KBPS的MP3与比较192KBPS的WMA相比，音质和渲染力很容易分别出是前者较优。</p>
<p>　　二.VQF<br>　　VQF即TwinVQ（Transform－domain Weighted Interleave Vector Quantization），是由NTT（Nippon Telegraph and Telephone）与Yamaha共同开发的一种音频压缩技术。VQF的音频压缩率比标准的MPEG音频压缩率高出近一倍，可以达到18:1左右甚至更高。也就是说把一首4分钟的歌曲（WAV文件）压成MP3，大约需要4MB左右的硬盘空间，而同一首歌曲，如果使用VQF音频压缩技术的话，那只需要2MB左右的硬盘空间。因此，在音频压缩率方面，MP3和RA都不是VQF的对手。</p>
<p>但是VQF不支持”流”，这可能也是为什么现在它完全被WMA压下去的一个主要原因.</p>
<p>　　三.MP3<br>MP3的全称是Moving Picture Experts Group Audio Layer III。简单的说，MP3就是一种音频压缩技术，由于这种压缩方式的全称叫MPEG Audio Layer3，所以人们把它简称为MP3。MP3是利用MPEG Audio Layer 3的技术，将音乐以1:10甚至1:12 的压缩率，压缩成容量较小的file，换句话说，能够在音质丢失很小的情况下把文件压缩到更小的程度。而且还非常好的保持了原来的音质。正是因为MP3体积小，音质高的特点使得MP3格式几乎成为网上音乐的代名词。每分钟音乐的MP3格式只有1MB左右大小，这样每首歌的大小只有3-4兆字节。使用MP3播放器对MP3文件进行实时的解压缩(解码)，这样，高品质的MP3音乐就播放出来了。　　</p>
<p>MP3最受争议的就是音质问题(尤其是随着WMA的普及)，其高频损失很大，很多MP3编码器粗糙的编码算法不但导致高频丢失，还丢失了许多细节，类似吉他擦弦的感觉在MP3中是找不到的.在对MP3快要失望时，偶发现了Lame,它支持根据人耳遮蔽效应原理来分析波形，配合VBR技术，可以让音质达到令人吃惊的地步;其独创的心理音响模型技术保证了CD音频还原的真实性，配合VBR(动态比特率)和ABR(平均比特率)参数，编码出来的MP3音色纯厚、空间宽广、低音清晰、细节表现良好,音质几乎可以媲美CD音频，但文件体积却非常小.很多网友在使用LAME后的反映就是：立刻删除硬盘上所有的MP3和其他编码器，全部用Lame重新来过。Lame提供EXE和DLL，其中DLL是作为标准的动态运行库供其他程序调用.EXE是Command Line程序，象DOS程序一样工作，两者彼此独立，互不关联。但大家很快能发现两者编码的质量是不一样的,那是由于dll可控性差，与具备丰富调节参数的EXE版相比，其压缩出来的MP3效果稍逊一筹。但EXE是一个命令行工具，操作很麻烦，幸亏有了WinLAMEr或lameGUIxp这些Shell。只要学会使用这些Shell(是傻瓜型的,一看即会)，就可以用LAME压缩出最最精彩的MP3了。再说说APS,在LAME出现以前，APS就是最好的MP3编码器，它使用的Fraunhofer IIS编码算法，这比LAME使用的编码算法要先进，在192k Bitrate(CBR)下，甚至比LAME编码的曲子要优秀，细节明显要丰富一些，但APS本身不支持VBR，当Bitrate往上提高时，音质就要比LAME编码的要差了，大部分朋友的MP3的一般都是128-192K Bitrate的，因此APS仍旧有推荐的价值。特别是有很多MP3随身听不支持VBR和256K Bitrate以上的MP3，LAME就不一定合适这些朋友了，APS就成了不错的选择，由它编码的曲子，绝对不会辱没你昂贵的PLAYER.</p>
<p>　　四.MP3PRO<br>　　MP3PRO完全是基于传统MP3编码技术的一种改良，本身最大的技术亮点就在于SBR(Spectral Band Replication频段复制),这是一种新的音频编码增强算法.它提供了改善低位率情况下音频和语音编码的性能的可能.这种方法可在指定的位率下增加音频的带宽或改善编码效率,SBR最大的优势就是在低数据速率下实现非常高效的编码.如果在高数据速率的情况下，SBR将如同虚设.当制作MP3PRO文件时，编码器将音频分为两部分。一部分是将音频数据中的低频段部分分离出来，通过传统的MP3技术而编码得出的正常的MP3音频流，此举可令到MP3编码器可以专注于低频段信号从而获得更好的压缩质量，而且原来的MP3播放器也可播放MP3PRO文件。另一部分则是将分离出来的高频段信号进行编码并嵌入到MP3流中，传统的MP3播放器会将其忽略掉，而新的MP3PRO播放器则可从中还原出高频信号，并将两者进行组合，得到高质量的全带宽的声音.官方宣称通过这样的技术，使得MP3PRO能在64kbps的编码率便可提供与128kbps的mp3相同的质量。低比特率下MP3PRO的性能很明显地比MP3要高,但是它与WMA谁胜谁负就很难说了,根据一些发烧友的评测, MP3PRO似乎略胜一些.高比特率下很少有人用到MP3PRO.</p>
<p>五.OGG<br>　　OGG格式的全称应该是OGG Vobis。它是一种新的音频压缩格式，类似于MP3等现有的音乐格式。但有一点不同的是，它是完全免费、开放和没有专利限制的。OGG Vobis有一个很出众的特点，就是支持多声道，随着它的流行，以后用随身听来听DTS编码的多声道作品将不会是梦想。OGG Vobis在压缩技术上比MP3好，而且它的多声道，免费，开源这些特点，使它很有可能成为一个流行的趋势，这也正是一些MP3播放器对其支持的原因</p>
<p>在高音质要求下,有损音频编码世界中是三足项立，分别为MP3、MPC、OGG。　</p>
<p>Ogg Vorbis中的主要算法还是利用MDCT（修饰离散余弦变换Modified Discrete Cosine Transform ）而不是用现在比较时兴的小波（wavelet）技术。Ogg的多通道编码技术，统称为立体声通道耦合Stereo Channel Coupling。而该技术实际又是由两种不同的技术组成的：channel interleaving 和 square polar mapping，而这也是Ogg能成为免费制式的一个必要条件，以往的“联合立体声Joint Stereo”的编码模式是有专利限制的。据官方声称，与其他会造成立体空间感减弱的编码模型相比，这两种技术都可以在保持编码器的灵活性的同时而不损害本来的立体声空间影像――相信配合iRiver的3d音效会有更好的表现力，而且实现的复杂程度比联合立体声方式要低。<br>　　OGG Vorbis这种编码也远比90年代开发成功的MP3先进，它可以在相对较低的数据速率下实现比MP3更好的音质！――我认为Ogg很象MD的atrac格式，特别象新的lp2编码，它能在低别特率下有着很要的音质。此外，在编码上，Ogg Vorbis是使用了VBR（可变比特率）和ABR（平均比特率）方式进行编码，所以理论上，Ogg Vorbis带来的音乐可以比采用CBR文件有更好的声音表现，当然前提是两者使用同样比特率(Bit Rate)的压缩模式――这里可以知道。Ogg Vorbis的比特率缩放功能可以在不用重新编码的情况下调节文件的相关压缩率，与此同时，Ogg文件的单位编辑能力和超越左右声道的音频流技术可以带来更为奇妙的音乐享受。Vorbis还具有比特率缩放功能，可以不用重新编码便可调节文件的比特率。<br>　　Vorbis文件可以被分成小块并以样本粒度（granularity，专业术语，指数据可以被分割的最小尺寸）进行编辑；Vorbis支持多通道（大于2）音频流并使用了独创性的处理技术；这意味着什么？这意味着Ogg Vorbis在SACD、DTSCD、DVD AUDIO抓轨软件（目前这种软件还没有）的支持下，可以对所有的声道进行编码，而不是MP3只能编码2个声道。多声道音乐的兴起，给音乐欣赏带来了革命性的变化，尤其在欣赏交响时，会带来更多临场感。这场革命性的变化是MP3无法适应的。在以后的播放技术不断提高以后，而且人们对音质要求不断提高，Ogg的优势将更加明显。<br>　　六. MPC<br>　　MusePaCk是由德国人Andree Buschmann开发的一种完全免费的高品质音频格式。在其问世之前，Lame MP3是公认音质最好的有损压缩方案，追求音质的人对它趋之若鹜。但现在这个桂冠无疑该让给MPC了，在中高码率下，MPC可以做到比MP3更好音质。在高码率下，MPC的高频要比MP3细腻不少，可以在节省大量空间的前提下获得最佳音质的音乐欣赏，是目前最适合用于音乐欣赏的有损编码。</p>
<p>MPC的编码方案是在MP2的基础上改进而来。它同样采用子带编码技术，但相比MP2，它所采用的心理声学模型要优秀得多，并加入了像ANS（Adaptive Noise Shaping）、CVD(ClearVoiceDetection)等技术，甚至改变了压缩时所用的Huffman（哈夫曼）编码，以得到更大的压缩率。另外，MPC采用的是可变码率进行编码。毫无疑问，可变码率的编码效率要高于固定码率，因为前者可以合理地分配数据量，在信号复杂（微弱）时提高（降低）比特率，在得到满意的效果又能确保不错的压缩率。为了保证高音质，MPC的瞬间最大码率甚至高达1.32Mbps，这已经快接近CD的1.41Mbps了</p>
<p>较高比特率下(250kbps左右),MPC表现非常的出众,甚至超过了MP3，很难分辨它和原始信号有多少区别，无论从频率保留还是细节保留，以及信号强度失真来说，MPC太优秀了.但MPC并非万能的，它无法编码48khz采样率的曲子，所幸的是，这样的曲子来源很少.可惜这种格式并没有像MP3或WMA那样流行.</p>
<p>　　七.ATRAC<br>　　ATRAC（Adaptive TRansform Acoustic Coding自适应声学转换编码技术）：是Sony的原创音乐压缩技术，主要用于MD Walkman的录音及播放方面。是一项基于听觉心理学领域的研究和不损伤可闻声质量的数码音频译码压缩技术，对音乐资讯有效的进行压缩，压缩的比率为原来的五分之一，因为MD使用了ATRAC压缩技术，这样的压缩大大节省了许多空间，所以 CD的碟片要120mm大小，而MD只需64mm就可以录下74分钟的音乐。</p>
<p>ATRAC压缩技术主要是利用了人耳的蔽遮效应，在心理声学原理上，在进行音频录入的同时，有许多外部的频段同时也会被录入，当人耳同时听到两个不同频率、不同音量的声音时，音量较小的低频及音量较小的高频连同不为人耳所察觉的频段信号都会被自动减弱或忽略不予记录，因此又可以称为适应性变换声码技术，由于近年來编码压缩技术（ATRAC的版本）越來越成熟，所以经过编码解码过程后的声音仍直逼CD，大家就不必担心音质差啦。</p>
<p>ATRAC将16比特44.1KHz的数字信号以频率响应轴分成52个区段（在低频时分割较细而在高频时分割较粗），根据声音心理学的原理，将声音信号中人耳听不到和对人的听力影响不大的信息给剔除出去而达到缩小声音文件的目的。利用这种原理，ATRAC可以将录音的资料量压缩为原来的五分之一（即压缩比为1：5）。</p>
<p>.</p>
<p>　　八. APE　<br>　　  APE的本质，其实它是一种无损压缩音频格式。庞大的WAV音频文件可以通过Monkey’’s Audio这个软件进行“瘦身”压缩为APE。很时候它被用做网络音频文件传输，因为被压缩后的APE文件容量要比WAV源文件小一半多，可以节约传输所用的时间。更重要的是，通过Monkey’’s Audio解压缩还原以后得到的WAV文件可以做到与压缩前的源文件完全一致。所以APE被誉为“无损音频压缩格式”，Monkey’’s Audio被誉为“无损音频压缩软件”。与采用WinZip或者WinRAR这类专业数据压缩软件来压缩音频文件不同，压缩之后的APE音频文件是可以直接被播放的。 Monkey’’s Audio会向Winamp中安装一个“in_APE.dll”插件，从而使Winamp也具备播放APE文件的能力。 </p>
<p>和上面介绍的几款编码不同的是，这个编码提供了最好的音质保证(无损压缩)！还提供了Winamp的插件支持,可以直接用Winamp来播放.所谓无损就是指压缩后的格式和源文件在音质上并无差异，而Mp3、WMA等的编码方案是基于有损的，在损失部分音质的前提下节约存贮空间，所以说音质再好的Mp3、WMA也只能是无限接近源文件的音质。APE非常适合来编码讲究细节的独奏曲目和大动态的交响曲。向各位音乐迷们(不是歌迷)作最强烈的推荐！它的压缩比约为2:1.</p>
<p>　　九. WAV<br>　　WAV是录音时用的标准的windows文件格式，文件的扩展名为“.wav”，WAVE文件作为最经典的Windows多媒体音频格式，应用非常广泛。声道有单声道和立体声之分，采样频率一般有11kHz、22kHz和44kHz三种。</p>
<p>WAVE文件所占容量=（采样频率×采样位数×声道）×时间/8（1字节=8bit）。</p>
<p>　　WAV文件与MIDIMP3这类多媒体声音文件比较起来，所占的硬盘空间要大得多，但WAV文件的回放效果是最好的，WAV文件直接反映了一个声音在每个时刻的大小值，1分钟44khz采样率的WAV文件就会占用10M硬盘空间！</p>
<p>它通常作为制作高质量音乐的中间体<br>　　十.RM<br>　　Real Networks公司所制定的音频视频压缩规范称为Real Media，用户可以使用RealPlayer或RealOne Player对符合RealMedia技术规范的网络音频/视频资源进行实况转播并且RealMedia可以根据不同的网络传输速率制定出不同的压缩比率，从而实现在低速率的网络上进行影像数据实时传送和播放。这种格式的另一个特点是用户使用RealPlayer或RealOne Player播放器可以在不下载音频/视频内容的条件下实现在线播放。另外，RM作为目前主流网络视频格式，它还可以通过其Real Server服务器将其它格式的视频转换成RM视频并由Real Server服务器负责对外发布和播放。RM和ASF格式可以说各有千秋，通常RM视频更柔和一些，而ASF视频则相对清晰一些。<br>  RM格式一开始就定位在视频流应用方面，也可以说是视频流技术的始创者。它可以在用56 K Modem拨号上网的条件下实现不间断的视频播放，当然，其图像质量和MPEG2，DIVX等相比有一定差距，毕竟要实现在网上传输不间断的视频是需要很大带宽的。</p>
<p>RM已经是昨日黄花，没有任何新意，低Bitrate比不过WMA，高Bitrate比不过MP3，虽然新的RM导入了ATRAC3算法，但颓势已定，很难东山再起了。</p>
]]></content>
      
        <categories>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 流媒体 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OC语言基础/runtime]]></title>
      <url>/2015/07/17/2015/OC%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80:runtime/</url>
      <content type="html"><![CDATA[<h3 id="OC语言基础"><a href="#OC语言基础" class="headerlink" title="OC语言基础"></a>OC语言基础</h3><h4 id="关于SEL的理解"><a href="#关于SEL的理解" class="headerlink" title="关于SEL的理解"></a>关于SEL的理解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">NSLog(@&quot;%d&quot;, @selector(testView));</div><div class="line">NSLog(@&quot;%d&quot;, @selector(testView1));</div><div class="line">    </div><div class="line">NSLog(@&quot;%d&quot;, NSSelectorFromString(@&quot;testView&quot;));</div><div class="line">    </div><div class="line">NSLog(@&quot;%p&quot;,@&quot;testView&quot;);</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2018-07-10 17:28:37.378285+0800 Ceshi[18642:3374809] 165034347</div><div class="line">2018-07-10 17:28:37.378342+0800 Ceshi[18642:3374809] 165034410</div><div class="line">2018-07-10 17:28:37.378411+0800 Ceshi[18642:3374809] 165034347</div><div class="line">2018-07-10 17:28:37.378494+0800 Ceshi[18642:3374809] 0x109d65128</div></pre></td></tr></table></figure>
<p>这里是一个数字到字符串的映射关系，但也不是简单的地址的映射</p>
<h4 id="self与super"><a href="#self与super" class="headerlink" title="self与super"></a>self与super</h4><p><a href="https://blog.csdn.net/shihuboke/article/details/78967824" target="_blank" rel="external">self/super</a></p>
<p>objc_msgSend(id,sel)</p>
<p>objc_msgSendSuper(struct,sel)</p>
<h4 id="分类做哪些事"><a href="#分类做哪些事" class="headerlink" title="分类做哪些事"></a>分类做哪些事</h4><ul>
<li>声明私有方法</li>
<li>分解庞大的类文件</li>
<li>把framework私有方法公开</li>
</ul>
<h4 id="分类特点"><a href="#分类特点" class="headerlink" title="分类特点"></a>分类特点</h4><ul>
<li>运行时决议(编译时，分类和宿主没有一毛钱关系)</li>
<li>可以为系统添加分类</li>
</ul>
<p>最后编译的分类的方法，最先被搜索到，同时在宿主之前，这也就是我们怎么替换宿主的方法的原理</p>
<p>最终分类中的方法是拼接到宿主类中得以被调用的，这也就是为什么分类是运行时决议，这个时候注意，在类的方法列表中我们是正向遍历的，但是拼接的时候是反向遍历拼接的，那么为什么分类可以覆盖宿主方法呢，是因为在进行拼接的时候会讲宿主方法挪到分类方法的后边。</p>
<p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-0112.00.34.png" alt=""></p>
<p>注意:<br>分类中可以直接访问主类中的属性。</p>
<p>但是如果分类中要单独定义属性那么只能依赖runtime，其实主要是成员变量的添加。</p>
<p>但是分类中可以直接添加一个属性，不过它只是一个声明，假如我把主类的属性声明在.m中，这个时候我就可以在分类中再定义一次，这样就可以直接用，这里要注意的是如果我们声明一个扩展是不能被分类所使用的。</p>
<h4 id="分类中都能添加什么内容"><a href="#分类中都能添加什么内容" class="headerlink" title="分类中都能添加什么内容"></a>分类中都能添加什么内容</h4><ul>
<li>实例方法</li>
<li>类方法</li>
<li>协议</li>
<li>属性(定义了一个属性，只声明set和get方法，并没有添加实例变量，变量需要通过关联对象)</li>
</ul>
<h4 id="分类数据结构"><a href="#分类数据结构" class="headerlink" title="分类数据结构"></a>分类数据结构</h4><p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-01 10.34.59.png" alt=""></p>
<h4 id="关联对象"><a href="#关联对象" class="headerlink" title="关联对象"></a>关联对象</h4><p>关联对象是否被添加到了宿主类？</p>
<p>关联对象本质</p>
<p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-0112.07.40.png" alt=""></p>
<p>策略:retain或者copy</p>
<p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-01 12.12.50.png" alt=""></p>
<h4 id="用扩展来做什么"><a href="#用扩展来做什么" class="headerlink" title="用扩展来做什么"></a>用扩展来做什么</h4><ul>
<li>声明私有属性</li>
<li>声明私有方法</li>
<li>声明私有变量</li>
<li>声明私有属性</li>
</ul>
<h4 id="扩展和分类的区别"><a href="#扩展和分类的区别" class="headerlink" title="扩展和分类的区别"></a>扩展和分类的区别</h4><ul>
<li>这个是编译的时候决议</li>
<li>不能为系统类添加扩展</li>
<li>只是以声明的形式存在</li>
</ul>
<h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><ul>
<li>代理是一种设计模式</li>
<li>与通知的区别是代理一对一，通知一对多</li>
<li>委托方以weak声明，防止循环引用，代理方用strong声明</li>
</ul>
<h4 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h4><ul>
<li>用观察者设计模式实现的</li>
<li>一对多</li>
</ul>
<p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-0112.27.51.png" alt=""></p>
<p>observer中包含观察者对象，和回调的方法</p>
<h4 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h4><p>key-value-observing</p>
<p>观察者模式的实现</p>
<p>使用isa混写技术来实现kvo</p>
<p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-01 7.07.35.png" alt=""></p>
<p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-01 7.12.03.png" alt=""></p>
<p>通过kvc设置value，kvo能否生效？可以，因为调用了setter方法<br>那么通过成员变量直接赋值能否生效？不能，没有调用setter方法</p>
<p>手动kvo是什么？</p>
<p>kvo能否使用成员变量作为k？可以的，在底层会为其创建setter方法，在其他地方调用或者进行kvc的时候就会调用</p>
<p><a href="https://www.cnblogs.com/wengzilin/p/4346775.html" target="_blank" rel="external">kvo使用中的坑</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(void)printInfo</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;isa:%@, supper class:%@&quot;, NSStringFromClass(object_getClass(self)),</div><div class="line">          class_getSuperclass(object_getClass(self)));</div></pre></td></tr></table></figure>
<p>当keyPath是成员变量的时候，确实会调用成功，但是具体的方式却并不是重写set方法，具体是啥有待探究。</p>
<p><code>willChangeValueForKey:</code></p>
<h4 id="KVC"><a href="#KVC" class="headerlink" title="KVC"></a>KVC</h4><p>key-value-coding</p>
<p>是否破坏面向对象编程思想？是的</p>
<p>valueForKey:</p>
<p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-01 7.22.32.png" alt=""></p>
<p>有没有get方法，有的话直接返回，如果没有的话，那么去看看有没有相同或者相似的变量存在？这里有一个方法可以禁止这个流程。</p>
<p>Accessor Method:</p>
<ul>
<li>getKey</li>
<li>key</li>
<li>isKey</li>
</ul>
<p>Instance Var:</p>
<ul>
<li>_key</li>
<li>_isKey</li>
<li>key</li>
<li>isKey</li>
</ul>
<p>setvalueForKey一样的流程和道理</p>
<p><a href="https://www.cnblogs.com/panda1024/p/6014399.html" target="_blank" rel="external">kvc集合运算符</a></p>
<h5 id="KVC集合运算符号如何使用"><a href="#KVC集合运算符号如何使用" class="headerlink" title="KVC集合运算符号如何使用"></a>KVC集合运算符号如何使用</h5><ul>
<li>必须用在集合对象上活着普通对象的集合属性上</li>
<li>鸡蛋集合运算符号有@avg,@count,@max,@min,@sum</li>
<li>格式@”@sum.age”或者@”集合属性.@max.age”</li>
</ul>
<h4 id="属性关键字"><a href="#属性关键字" class="headerlink" title="属性关键字"></a>属性关键字</h4><p>读写 readonly,readwrite</p>
<p>原子性 atomic,nonatomic</p>
<p>引用计数</p>
<ul>
<li>retain/strong</li>
<li>assign/unsafe_unretained</li>
<li>weak</li>
<li>copy</li>
</ul>
<p>assign/weak区别</p>
<ul>
<li>assign可以修饰int，bool，也可以修饰对象，weak只能修饰对象</li>
<li>assign修饰的对象被释放后，会导致悬垂指针，weak指针会被置为nil</li>
<li>都不改变引用计数</li>
</ul>
<p><code>@property (copy) NSMutableArray *arr;</code>这样声明有啥问题？经过copy修饰都是不可变对象，这是一个深拷贝，只有copy修饰不可变对象才是浅拷贝</p>
<p>浅拷贝增加对象的引用计数，因为多了一个指针指向，深拷贝是产生了一个内存空间，不会影响引用计数。</p>
<p>深拷贝vs浅拷贝区别:</p>
<blockquote>
<p>是否开辟新地址，是否影响引用计数</p>
</blockquote>
<h4 id="atomic实现"><a href="#atomic实现" class="headerlink" title="atomic实现"></a>atomic实现</h4><p>在 objc4-723 的 Objective-C runtime 实现中，property 的 atomic 是采用 spinlock_t 也就是俗称的自旋锁实现的。具体代码可以看 objc_accessors.mm，// getter</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic) &#123;</div><div class="line">    // ...</div><div class="line">    if (!atomic) return *slot;</div><div class="line"></div><div class="line">    // Atomic retain release world</div><div class="line">    spinlock_t&amp; slotlock = PropertyLocks[slot];</div><div class="line">    slotlock.lock();</div><div class="line">    id value = objc_retain(*slot);</div><div class="line">    slotlock.unlock();</div><div class="line">    // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">// setter</div><div class="line">static inline void reallySetProperty(id self, SEL _cmd, id newValue, ptrdiff_t offset, bool atomic, bool copy, bool mutableCopy)</div><div class="line">&#123;</div><div class="line">    // ...</div><div class="line">    if (!atomic) &#123;</div><div class="line">        oldValue = *slot;</div><div class="line">        *slot = newValue;</div><div class="line">    &#125; else &#123;</div><div class="line">        spinlock_t&amp; slotlock = PropertyLocks[slot];</div><div class="line">        slotlock.lock();</div><div class="line">        oldValue = *slot;</div><div class="line">        *slot = newValue;        </div><div class="line">        slotlock.unlock();</div><div class="line">    &#125;</div><div class="line">    // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-01 7.46.27.png" alt=""></p>
<h3 id="NSCopying协议实现"><a href="#NSCopying协议实现" class="headerlink" title="NSCopying协议实现"></a>NSCopying协议实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">#import &quot;KaoBei.h&quot;</div><div class="line"></div><div class="line">@implementation KaoBei</div><div class="line"></div><div class="line">- (id)init &#123;</div><div class="line">    self = [super init];</div><div class="line">    if (self) &#123;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line">- (id)copyWithZone:(NSZone *)zone &#123;</div><div class="line">    KaoBei *instance = [[KaoBei alloc] init];</div><div class="line">    if (instance) &#123;</div><div class="line">        instance.chanPInName = self.chanPInName;</div><div class="line">        instance.icon = [self.icon copyWithZone:zone];</div><div class="line">        instance.isParent = [self.isParent copyWithZone:zone];</div><div class="line">        instance.theSelected = [self.theSelected copyWithZone:zone];</div><div class="line">        instance.ids = [self.ids copyWithZone:zone];</div><div class="line">        instance.name = [self.name copyWithZone:zone];</div><div class="line">        instance.imageUrlStr = [self.imageUrlStr copyWithZone:zone];</div><div class="line">    &#125;</div><div class="line">    return instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (id)mutableCopyWithZone:(NSZone *)zone &#123;</div><div class="line">    KaoBei *instance = [[KaoBei alloc] init];</div><div class="line">    if (instance) &#123;</div><div class="line">        instance.chanPInName = self.chanPInName;</div><div class="line">        instance.icon = [self.icon copyWithZone:zone];</div><div class="line">        instance.isParent = [self.isParent copyWithZone:zone];</div><div class="line">        instance.theSelected = [self.theSelected copyWithZone:zone];</div><div class="line">        instance.ids = [self.ids copyWithZone:zone];</div><div class="line">        instance.name = [self.name copyWithZone:zone];</div><div class="line">        instance.imageUrlStr = [self.imageUrlStr copyWithZone:zone];</div><div class="line">    &#125;</div><div class="line">    return instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="instancetype和id的异同"><a href="#instancetype和id的异同" class="headerlink" title="instancetype和id的异同"></a>instancetype和id的异同</h4><h5 id="1、相同点"><a href="#1、相同点" class="headerlink" title="1、相同点"></a>1、相同点</h5><p>都可以作为方法的返回类型</p>
<h5 id="2、不同点"><a href="#2、不同点" class="headerlink" title="2、不同点"></a>2、不同点</h5><p>①instancetype可以返回和方法所在类相同类型的对象，id只能返回未知类型的对象；</p>
<p>②instancetype只能作为返回值，不能像id那样作为参数，比如下面的写法：</p>
<p>[objc] view plaincopy在CODE上查看代码片派生到我的代码片</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//err,expected a type  </div><div class="line">- (void)setValue:(instancetype)value  </div><div class="line">&#123;  </div><div class="line">    //do something  </div><div class="line">&#125;  </div><div class="line">就是错的，应该写成：</div><div class="line">[objc] view plaincopy在CODE上查看代码片派生到我的代码片</div><div class="line"></div><div class="line">- (void)setValue:(id)value  </div><div class="line">&#123;  </div><div class="line">    //do something  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="runtime-重点"><a href="#runtime-重点" class="headerlink" title="runtime(重点)"></a>runtime(重点)</h3><p>先了解这四种结构:</p>
<ul>
<li>objc_object</li>
<li>objc_class</li>
<li>isa指针</li>
<li>method_t</li>
</ul>
<h4 id="objc-object"><a href="#objc-object" class="headerlink" title="objc_object"></a>objc_object</h4><p>id == objc_object</p>
<p>包括</p>
<p>isa_t isa相关操作</p>
<p>弱引用相关</p>
<p>关联对象相关</p>
<p>内存管理相关</p>
<h4 id="objc-class"><a href="#objc-class" class="headerlink" title="objc_class"></a>objc_class</h4><p>Class == objc_class 继承自objc_objct</p>
<p>包括</p>
<p>Class superClass</p>
<p>cache_t cache   方法缓存</p>
<p>class_data_bits_t bits 变量，属性和方法都在这</p>
<h5 id="关于Class"><a href="#关于Class" class="headerlink" title="关于Class"></a>关于Class</h5><p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-02 10.43.54.png" alt=""><br>说明:当我们调用实例方法，实际是通过isa去Class对象中查找的，当我们调用类方法，实际是通过类对象的isa去元类中查找的。</p>
<h5 id="关于cache-t"><a href="#关于cache-t" class="headerlink" title="关于cache_t"></a>关于cache_t</h5><p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-02 11.13.08.png" alt=""></p>
<p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-02 11.15.07.png" alt=""><br>说明cache_t是一个数组，然后里边每个元素里都有一个key，也即是SEL，还有一个IMP，当我们传入一个SEL的时候，通过hash算法获取这个对象的索引，然后快速的获取到这个bucket_t，然后获取IMP进行调用</p>
<h5 id="关于class-data-bits-t"><a href="#关于class-data-bits-t" class="headerlink" title="关于class_data_bits_t"></a>关于class_data_bits_t</h5><p>这个是对class_rw_t的封装</p>
<p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-02 11.21.25.png" alt=""></p>
<p>methods里边每一个元素又是一个数组，然后每个数组代表的是一个分类中的添加的所有的方法，最终都会被汇总到这里，进行方法查找的时候就是在这里进行的查找，遍历methods，从前到后，现在第一个数组里查找，再到第二个数组里查找，以此类推</p>
<p>分类中添加的东西都在上边这个结构中，class_rw_t，宿体本身的内容在下边这个结构当中</p>
<p><img src="/17/2015/OC语言基础:runtime/../../../images/ 2018-07-02 11.26.53.png" alt=""></p>
<h5 id="method-t"><a href="#method-t" class="headerlink" title="method_t"></a>method_t</h5><p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-02 11.40.12.png" alt=""><br><img src="/17/2015/OC语言基础:runtime/../../../images/ 2018-07-02 11.36.39.png" alt=""></p>
<p>一个函数只有一个返回值，多个参数，这里是类型的表示</p>
<h5 id="总体结构图"><a href="#总体结构图" class="headerlink" title="总体结构图"></a>总体结构图</h5><p><img src="/17/2015/OC语言基础:runtime/../../../images/ 2018-07-02 11.32.44.png" alt=""></p>
<h5 id="动态添加方法和分类有啥关系？"><a href="#动态添加方法和分类有啥关系？" class="headerlink" title="动态添加方法和分类有啥关系？"></a>动态添加方法和分类有啥关系？</h5><p>他们走的是同一套逻辑，都是将方法加在了可变数组那里，我们本身的类里边的内容是不可变的，具体逻辑如下图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">static IMP </div><div class="line">addMethod(Class cls, SEL name, IMP imp, const char *types, bool replace)</div><div class="line">&#123;</div><div class="line">    IMP result = nil;</div><div class="line"></div><div class="line">    runtimeLock.assertWriting();</div><div class="line"></div><div class="line">    assert(types);</div><div class="line">    assert(cls-&gt;isRealized());</div><div class="line"></div><div class="line">    method_t *m;</div><div class="line">    if ((m = getMethodNoSuper_nolock(cls, name))) &#123;</div><div class="line">        // already exists</div><div class="line">        if (!replace) &#123;</div><div class="line">            result = m-&gt;imp;</div><div class="line">        &#125; else &#123;</div><div class="line">            result = _method_setImplementation(cls, m, imp);</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">        // fixme optimize</div><div class="line">        method_list_t *newlist;</div><div class="line">        newlist = (method_list_t *)calloc(sizeof(*newlist), 1);</div><div class="line">        newlist-&gt;entsizeAndFlags = </div><div class="line">            (uint32_t)sizeof(method_t) | fixed_up_method_list;</div><div class="line">        newlist-&gt;count = 1;</div><div class="line">        newlist-&gt;first.name = name;</div><div class="line">        newlist-&gt;first.types = strdup(types);</div><div class="line">        if (!ignoreSelector(name)) &#123;</div><div class="line">            newlist-&gt;first.imp = imp;</div><div class="line">        &#125; else &#123;</div><div class="line">            newlist-&gt;first.imp = (IMP)&amp;_objc_ignored_method;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        prepareMethodLists(cls, &amp;newlist, 1, NO, NO);</div><div class="line">        cls-&gt;data()-&gt;methods.attachLists(&amp;newlist, 1);//这是最核心的一句，将newlist给了data的methods，这是那个存放分类方法的二维数组</div><div class="line">        flushCaches(cls);</div><div class="line"></div><div class="line">        result = nil;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么问题来了，addIvars是咋实现的，因为可变的对象中没有ivars，这里要体现苹果的变通了，直接将不可变的变成可变的..</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">BOOL </div><div class="line">class_addIvar(Class cls, const char *name, size_t size, </div><div class="line">              uint8_t alignment, const char *type)</div><div class="line">&#123;</div><div class="line">    if (!cls) return NO;</div><div class="line"></div><div class="line">    if (!type) type = &quot;&quot;;</div><div class="line">    if (name  &amp;&amp;  0 == strcmp(name, &quot;&quot;)) name = nil;</div><div class="line"></div><div class="line">    rwlock_writer_t lock(runtimeLock);</div><div class="line"></div><div class="line">    assert(cls-&gt;isRealized());</div><div class="line"></div><div class="line">    // No class variables</div><div class="line">    if (cls-&gt;isMetaClass()) &#123;</div><div class="line">        return NO;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Can only add ivars to in-construction classes.</div><div class="line">    if (!(cls-&gt;data()-&gt;flags &amp; RW_CONSTRUCTING)) &#123;</div><div class="line">        return NO;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Check for existing ivar with this name, unless it&apos;s anonymous.</div><div class="line">    // Check for too-big ivar.</div><div class="line">    // fixme check for superclass ivar too?</div><div class="line">    if ((name  &amp;&amp;  getIvar(cls, name))  ||  size &gt; UINT32_MAX) &#123;</div><div class="line">        return NO;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class_ro_t *ro_w = make_ro_writeable(cls-&gt;data());//我想把ro变成可变再说...</div><div class="line"></div><div class="line">    // fixme allocate less memory here</div><div class="line">    </div><div class="line">    ivar_list_t *oldlist, *newlist;</div><div class="line">    if ((oldlist = (ivar_list_t *)cls-&gt;data()-&gt;ro-&gt;ivars)) &#123;</div><div class="line">        size_t oldsize = oldlist-&gt;byteSize();</div><div class="line">        newlist = (ivar_list_t *)calloc(oldsize + oldlist-&gt;entsize(), 1);</div><div class="line">        memcpy(newlist, oldlist, oldsize);</div><div class="line">        free(oldlist);</div><div class="line">    &#125; else &#123;</div><div class="line">        newlist = (ivar_list_t *)calloc(sizeof(ivar_list_t), 1);</div><div class="line">        newlist-&gt;entsizeAndFlags = (uint32_t)sizeof(ivar_t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    uint32_t offset = cls-&gt;unalignedInstanceSize();</div><div class="line">    uint32_t alignMask = (1&lt;&lt;alignment)-1;</div><div class="line">    offset = (offset + alignMask) &amp; ~alignMask;</div><div class="line"></div><div class="line">    ivar_t&amp; ivar = newlist-&gt;get(newlist-&gt;count++);</div><div class="line">#if __x86_64__</div><div class="line">    // Deliberately over-allocate the ivar offset variable. </div><div class="line">    // Use calloc() to clear all 64 bits. See the note in struct ivar_t.</div><div class="line">    ivar.offset = (int32_t *)(int64_t *)calloc(sizeof(int64_t), 1);</div><div class="line">#else</div><div class="line">    ivar.offset = (int32_t *)malloc(sizeof(int32_t));</div><div class="line">#endif</div><div class="line">    *ivar.offset = offset;</div><div class="line">    ivar.name = name ? strdup(name) : nil;</div><div class="line">    ivar.type = strdup(type);</div><div class="line">    ivar.alignment_raw = alignment;</div><div class="line">    ivar.size = (uint32_t)size;</div><div class="line"></div><div class="line">    ro_w-&gt;ivars = newlist;</div><div class="line">    cls-&gt;setInstanceSize((uint32_t)(offset + size));</div><div class="line"></div><div class="line">    // Ivar layout updated in registerClass.</div><div class="line"></div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="对象，类对象，元类对象"><a href="#对象，类对象，元类对象" class="headerlink" title="对象，类对象，元类对象"></a>对象，类对象，元类对象</h4><p>方法调用的时候的查找路径图</p>
<p><img src="/17/2015/OC语言基础:runtime/../../../images/ 2018-07-02 11.47.06.png" alt=""></p>
<p>根元类对象的superclass指向了NSObject，那么就意味着一个调用一个类方法，如果NSObject中有同名的实例方法，那么这个时候会执行这个实例方法，而不会发生崩溃</p>
<h4 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h4><p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-02 12.03.52.png" alt=""></p>
<p>这个题目的结果两个都打印，Phone，这里要理解调用super的意思是说，跳过self这个类，直接从super这个类对象来查找，但是消息的接受者仍然是self，所以这里都打印Phone</p>
<h4 id="查找过程"><a href="#查找过程" class="headerlink" title="查找过程"></a>查找过程</h4><ul>
<li>缓存查找</li>
<li>当前类查找</li>
</ul>
<p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-0212.39.22.png" alt=""><br>关键点在于通过hash查找，找到对应的bucket_t</p>
<p>当前类查找</p>
<p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-0212.41.50.png" alt=""></p>
<p>父类逐级查找<br><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-0212.43.03.png" alt=""></p>
<p>总流程</p>
<p><img src="/17/2015/OC语言基础:runtime/../../../images/2018-07-0212.43.41.png" alt=""></p>
<h4 id="消息转发流程"><a href="#消息转发流程" class="headerlink" title="消息转发流程"></a>消息转发流程</h4><p><img src="/17/2015/OC语言基础:runtime/../../../images/ 2018-07-02 2.11.14.png" alt=""></p>
<p>一个应用就是用来实现多重代理<br><a href="http://www.cocoachina.com/ios/20151208/14595.html" target="_blank" rel="external">多重代理</a></p>
<p>NSPointerArray防止循环引用</p>
<p>再一个应用就是实现@dynamic的属性</p>
<h4 id="方法交换"><a href="#方法交换" class="headerlink" title="方法交换"></a>方法交换</h4><h4 id="动态添加方法"><a href="#动态添加方法" class="headerlink" title="动态添加方法"></a>动态添加方法</h4><p>performSeletor:</p>
<h4 id="动态方法解析"><a href="#动态方法解析" class="headerlink" title="动态方法解析"></a>动态方法解析</h4><p>@dynamic</p>
<ul>
<li>动态运行时语言将函数决议推迟到运行时</li>
<li>编译语言编译时决议，无法修改</li>
</ul>
<p>[obj foo]和obj_msgSend()函数关系？<br>runtime图和通过Selector找到对应的IMP地址的？</p>
<h4 id="能否向编译后的类中添加实例变量？不能，为啥？"><a href="#能否向编译后的类中添加实例变量？不能，为啥？" class="headerlink" title="能否向编译后的类中添加实例变量？不能，为啥？"></a>能否向编译后的类中添加实例变量？不能，为啥？</h4><blockquote>
<p>答：从runtime实现原理来说，本来是可以的，但是苹果做了禁止，就像下边这样通过flag去标记这个类是已经建设完成了，还是正在建设中，编译完成的就是建设完成的，动态添加的就是正在建设中</p>
</blockquote>
<p>class_addIvar实现</p>
<pre><code>// Can only add ivars to in-construction classes.
    if (!(cls-&gt;data()-&gt;flags &amp; RW_CONSTRUCTING)) {
        return NO;
    }
</code></pre><h4 id="谈谈load和initialize的区别"><a href="#谈谈load和initialize的区别" class="headerlink" title="谈谈load和initialize的区别"></a>谈谈load和initialize的区别</h4><ul>
<li>程序运行后立即执行vs类的方法第一次被调用执行</li>
<li>不会沿用父类方法vs会沿用父类方法</li>
<li>分类中如果有定义，全部执行但后于类中的，也就是先执行类本身中的vs覆盖类中的方法，只执行一个</li>
</ul>
<h3 id="app启动流程"><a href="#app启动流程" class="headerlink" title="app启动流程"></a>app启动流程</h3><p><a href="https://techblog.toutiao.com/2017/01/17/iosspeed/" target="_blank" rel="external">头条启动优化</a></p>
<p>可以简单分为main之前喝main之后</p>
<h4 id="main之前"><a href="#main之前" class="headerlink" title="main之前"></a>main之前</h4><ul>
<li>load dylibs image 读取库镜像文件，减少系统依赖，合并自己的</li>
<li>Rebase image  </li>
<li>Bind image  减少Objc类数量， 减少selector数量，减少c++虚函数</li>
<li>Objc setup  类，分类，SEL注册</li>
<li>initializers</li>
</ul>
<h4 id="main之后"><a href="#main之后" class="headerlink" title="main之后"></a>main之后</h4><p>main()调用之后的加载时间</p>
<p>在main()被调用之后，App的主要工作就是初始化必要的服务，显示首页内容等。而我们的优化也是围绕如何能够快速展现首页来开展。 App通常在AppDelegate类中的<code>- (BOOL)Application:(UIApplication *)Application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code>方法中创建首页需要展示的view，然后在当前runloop的末尾，主动调用CA::Transaction::commit完成视图的渲染。<br>而视图的渲染主要涉及三个阶段：</p>
<p>准备阶段 这里主要是图片的解码<br>布局阶段 首页所有UIView的- (void)layoutSubViews()运行<br>绘制阶段 首页所有UIView的- (void)drawRect:(CGRect)rect运行<br>再加上启动之后必要服务的启动、必要数据的创建和读取，这些就是我们可以尝试优化的地方<br>因此，对于main()函数调用之前我们可以优化的点有：</p>
<p>不使用xib，直接视用代码加载首页视图<br>NSUserDefaults实际上是在Library文件夹下会生产一个plist文件，如果文件太大的话一次能读取到内存中可能很耗时，这个影响需要评估，如果耗时很大的话需要拆分(需考虑老版本覆盖安装兼容问题)<br>每次用NSLog方式打印会隐式的创建一个Calendar，因此需要删减启动时各业务方打的log，或者仅仅针对内测版输出log<br>梳理应用启动时发送的所有网络请求，是否可以统一在异步线程请求</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[app生命周期]]></title>
      <url>/2015/07/12/2015/app%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<p><img src="/12/2015/app生命周期/../../../images/1513666027385408.png" alt=""></p>
<p>具体执行流程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">    NSLog(@&quot;--- %s ---&quot;,__func__);//__func__打印方法名</div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line">- (void)applicationWillResignActive:(UIApplication *)application &#123;</div><div class="line">     NSLog(@&quot;--- %s ---&quot;,__func__);</div><div class="line">&#125;</div><div class="line">- (void)applicationDidEnterBackground:(UIApplication *)application &#123;</div><div class="line">   NSLog(@&quot;--- %s ---&quot;,__func__);</div><div class="line">&#125;</div><div class="line">- (void)applicationWillEnterForeground:(UIApplication *)application &#123;</div><div class="line">   NSLog(@&quot;--- %s ---&quot;,__func__);</div><div class="line">&#125;</div><div class="line">- (void)applicationDidBecomeActive:(UIApplication *)application &#123;</div><div class="line">  NSLog(@&quot;--- %s ---&quot;,__func__);</div><div class="line">&#125;</div><div class="line">- (void)applicationDidReceiveMemoryWarning:(UIApplication *)application &#123;</div><div class="line">     NSLog(@&quot;--- %s ---&quot;,__func__);</div><div class="line">&#125;</div><div class="line">- (void)applicationWillTerminate:(UIApplication *)application &#123;</div><div class="line">    NSLog(@&quot;--- %s ---&quot;,__func__);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启动程序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">-[AppDelegate application:didFinishLaunchingWithOptions:] </div><div class="line">-[AppDelegate applicationDidBecomeActive:]</div><div class="line">按下 Command + H + SHIFT</div><div class="line"></div><div class="line">-[AppDelegate applicationWillResignActive:]</div><div class="line">-[AppDelegate applicationDidEnterBackground:]</div><div class="line">重新点击 进入程序</div><div class="line"></div><div class="line">-[AppDelegate applicationWillEnterForeground:]</div><div class="line">-[AppDelegate applicationDidBecomeActive:]</div><div class="line">内存警告</div><div class="line"></div><div class="line">-[AppDelegate applicationDidReceiveMemoryWarning:]</div></pre></td></tr></table></figure>
<h4 id="UIViewController-的生命周期"><a href="#UIViewController-的生命周期" class="headerlink" title="UIViewController 的生命周期"></a>UIViewController 的生命周期</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">// 非storyBoard(xib或非xib)都走这个方法</div><div class="line">- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil &#123;</div><div class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</div><div class="line">    if (self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]) &#123;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line">// storyBoard走这个方法</div><div class="line">- (instancetype)initWithCoder:(NSCoder *)aDecoder &#123;</div><div class="line">     NSLog(@&quot;%s&quot;, __FUNCTION__);</div><div class="line">    if (self = [super initWithCoder:aDecoder]) &#123;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line">// xib 加载 完成</div><div class="line">- (void)awakeFromNib &#123;</div><div class="line">    [super awakeFromNib];</div><div class="line">     NSLog(@&quot;%s&quot;, __FUNCTION__);</div><div class="line">&#125;</div><div class="line">// 加载视图(默认从nib)</div><div class="line">- (void)loadView &#123;</div><div class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</div><div class="line">    self.view = [[UIView alloc] initWithFrame:[UIScreen mainScreen].bounds];</div><div class="line">    self.view.backgroundColor = [UIColor redColor];</div><div class="line">&#125;</div><div class="line">// 视图控制器中的视图加载完成，viewController自带的view加载完成</div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</div><div class="line">    [super viewDidLoad];</div><div class="line">&#125;</div><div class="line">// 视图将要出现</div><div class="line">- (void)viewWillAppear:(BOOL)animated &#123;</div><div class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</div><div class="line">    [super viewWillAppear:animated];</div><div class="line">&#125;</div><div class="line">// view 即将布局其 Subviews</div><div class="line">- (void)viewWillLayoutSubviews &#123;</div><div class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</div><div class="line">    [super viewWillLayoutSubviews];</div><div class="line">&#125;</div><div class="line">// view 已经布局其 Subviews</div><div class="line">- (void)viewDidLayoutSubviews &#123;</div><div class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</div><div class="line">    [super viewDidLayoutSubviews];</div><div class="line">&#125;</div><div class="line">// 视图已经出现</div><div class="line">- (void)viewDidAppear:(BOOL)animated &#123;</div><div class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</div><div class="line">    [super viewDidAppear:animated];</div><div class="line">&#125;</div><div class="line">// 视图将要消失</div><div class="line">- (void)viewWillDisappear:(BOOL)animated &#123;</div><div class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</div><div class="line">    [super viewWillDisappear:animated];</div><div class="line">&#125;</div><div class="line">// 视图已经消失</div><div class="line">- (void)viewDidDisappear:(BOOL)animated &#123;</div><div class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</div><div class="line">    [super viewDidDisappear:animated];</div><div class="line">&#125;</div><div class="line">// 出现内存警告 </div><div class="line">- (void)didReceiveMemoryWarning &#123;</div><div class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</div><div class="line">    [super didReceiveMemoryWarning];</div><div class="line">&#125;</div><div class="line">// 视图被销毁</div><div class="line">- (void)dealloc &#123;</div><div class="line">    NSLog(@&quot;%s&quot;, __FUNCTION__);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分析</p>
<h4 id="initWithNibName-bundle"><a href="#initWithNibName-bundle" class="headerlink" title="initWithNibName:bundle:"></a>initWithNibName:bundle:</h4><p>初始化UIViewController，执行关键数据初始化操作，非StoryBoard创建UIViewController都会调用这个方法。</p>
<p>注意: 不要在这里做View相关操作，View在loadView方法中才初始化。</p>
<h4 id="initWithCoder"><a href="#initWithCoder" class="headerlink" title="initWithCoder:"></a>initWithCoder:</h4><p>如果使用StoryBoard进行视图管理，程序不会直接初始化一个UIViewController，StoryBoard会自动初始化或在segue被触发时自动初始化，因此方法initWithNibName:bundle不会被调用，但是initWithCoder会被调用。</p>
<h4 id="awakeFromNib"><a href="#awakeFromNib" class="headerlink" title="awakeFromNib"></a>awakeFromNib</h4><p>当awakeFromNib方法被调用时，所有视图的outlet和action已经连接，但还没有被确定，这个方法可以算作适合视图控制器的实例化配合一起使用的，因为有些需要根据用户喜好来进行设置的内容，无法存在storyBoard或xib中，所以可以在awakeFromNib方法中被加载进来。</p>
<h4 id="loadView"><a href="#loadView" class="headerlink" title="loadView"></a>loadView</h4><p>当执行到loadView方法时，如果视图控制器是通过nib创建，那么视图控制器已经从nib文件中被解档并创建好了，接下来任务就是对view进行初始化。</p>
<p>loadView方法在UIViewController对象的view被访问且为空的时候调用。这是它与awakeFromNib方法的一个区别。</p>
<p>假设我们在处理内存警告时释放view属性：self.view = nil。因此loadView方法在视图控制器的生命周期内可能被调用多次。</p>
<p>loadView方法不应该直接被调用，而是由系统调用，它会加载或创建一个view并把它赋值给UIViewController的view属性。</p>
<p>在创建view的过程中，首先会根据nibName去找对应的nib文件然后加载。如果nibName为空或找不到对应的nib文件，则会创建一个空视图(这种情况一般是纯代码)</p>
<p>注意:在重写loadView方法的时候，不要调用父类的方法。</p>
<h4 id="viewDidLoad"><a href="#viewDidLoad" class="headerlink" title="viewDidLoad"></a>viewDidLoad</h4><p>当loadView将view载入内存中，会进一步调用viewDidLoad方法来进行进一步设置。此时，视图层次已经放到内存中，通常，我们对于各种初始化数据的载入，初始设定、修改约束、移除视图等很多操作都可以这个方法中实现。</p>
<h4 id="viewWillAppear"><a href="#viewWillAppear" class="headerlink" title="viewWillAppear"></a>viewWillAppear</h4><p>系统在载入所有的数据后，将会在屏幕上显示视图，这时会先调用这个方法，通常我们会在这个方法对即将显示的视图做进一步的设置。比如，设置设备不同方向时该如何显示；设置状态栏方向、设置视图显示样式等。</p>
<p>另一方面，当APP有多个视图时，上下级视图切换是也会调用这个方法，如果在调入视图时，需要对数据做更新，就只能在这个方法内实现。</p>
<h4 id="viewWillLayoutSubviews"><a href="#viewWillLayoutSubviews" class="headerlink" title="viewWillLayoutSubviews"></a>viewWillLayoutSubviews</h4><p>view即将布局其Subviews。 比如view的bounds改变了(例如:状态栏从不显示到显示,视图方向变化)，要调整Subviews的位置，在调整之前要做的工作可以放在该方法中实现</p>
<h4 id="viewDidLayoutSubviews"><a href="#viewDidLayoutSubviews" class="headerlink" title="viewDidLayoutSubviews"></a>viewDidLayoutSubviews</h4><p>view已经布局其Subviews，这里可以放置调整完成之后需要做的工作。</p>
<h4 id="viewDidAppear"><a href="#viewDidAppear" class="headerlink" title="viewDidAppear"></a>viewDidAppear</h4><p>在view被添加到视图层级中以及多视图，上下级视图切换时调用这个方法，在这里可以对正在显示的视图做进一步的设置。</p>
<h4 id="viewWillDisappear"><a href="#viewWillDisappear" class="headerlink" title="viewWillDisappear"></a>viewWillDisappear</h4><p>在视图切换时，当前视图在即将被移除、或被覆盖是，会调用该方法，此时还没有调用removeFromSuperview。</p>
<h4 id="viewDidDisappear"><a href="#viewDidDisappear" class="headerlink" title="viewDidDisappear"></a>viewDidDisappear</h4><p>view已经消失或被覆盖，此时已经调用removeFromSuperView;</p>
<h4 id="dealloc"><a href="#dealloc" class="headerlink" title="dealloc"></a>dealloc</h4><p>视图被销毁，此次需要对你在init和viewDidLoad中创建的对象进行释放。</p>
<h4 id="didReceiveMemoryWarning"><a href="#didReceiveMemoryWarning" class="headerlink" title="didReceiveMemoryWarning"></a>didReceiveMemoryWarning</h4><p>在内存足够的情况下，app的视图通常会一直保存在内存中，但是如果内存不够，一些没有正在显示的viewController就会收到内存不足的警告，然后就会释放自己拥有的视图，以达到释放内存的目的。但是系统只会释放内存，并不会释放对象的所有权，所以通常我们需要在这里将不需要显示在内存中保留的对象释放它的所有权，将其指针置nil。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[c/c++指针问题汇总]]></title>
      <url>/2015/07/09/2015/c-c-%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>char <em> const p;<br>char const </em> p<br>const char *p</p>
<a id="more"></a>
<p>上述三个有什么区别？<br>char <em> const p; //常量指针，p的值不可以修改<br>char const </em> p；//指向常量的指针，指向的常量值不可以改<br>const char <em>p； //和char const </em>p</p>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">char str1[] = “abc”;</div><div class="line">char str2[] = “abc”;</div><div class="line"></div><div class="line">const char str3[] = “abc”;</div><div class="line">const char str4[] = “abc”;</div><div class="line"></div><div class="line">const char *str5 = “abc”;</div><div class="line">const char *str6 = “abc”;</div><div class="line"></div><div class="line">char *str7 = “abc”;</div><div class="line">char *str8 = “abc”;</div><div class="line"></div><div class="line">cout &lt;&lt; ( str1 == str2 ) &lt;&lt; endl;</div><div class="line">cout &lt;&lt; ( str3 == str4 ) &lt;&lt; endl;</div><div class="line">cout &lt;&lt; ( str5 == str6 ) &lt;&lt; endl;</div><div class="line"></div><div class="line">cout &lt;&lt; ( str7 == str8 ) &lt;&lt; endl;</div></pre></td></tr></table></figure>
<p>打印结果是什么？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">解答：结果是：0 0 1 1</div><div class="line">str1,str2,str3,str4是数组变量，它们有各自的内存空间；而str5,str6,str7,str8是指针，它们指向相同的常量区域</div></pre></td></tr></table></figure>
<p>###3</p>
<p>以下代码中的两个sizeof用法有问题吗？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">void UpperCase( char str[] ) // 将 str 中的小写字母转换成大写字母</div><div class="line">&#123;</div><div class="line">for( size_t i=0; i&lt;sizeof(str)/sizeof(str[0]); ++i )</div><div class="line">if( ‘a’&lt;=str[i] &amp;&amp; str[i]&lt;=’z’ )</div><div class="line">str[i] -= (‘a’-&apos;A’ );</div><div class="line">&#125;</div><div class="line"></div><div class="line">char str[] = “aBcDe”;</div><div class="line">cout &lt;&lt; “str字符长度为: ” &lt;&lt; sizeof(str)/sizeof(str[0]) &lt;&lt; endl;</div><div class="line">UpperCase( str );</div><div class="line">cout &lt;&lt; str &lt;&lt; endl;</div></pre></td></tr></table></figure>
<p>答：函数内的sizeof有问题。<br>根据语法，sizeof如用于数组，只能测出静态数组的大小，无法检测动态分配的或外部数组大小。<br>函数外的str是一个静态定义的数组，因此其大小为6，<br>函数内的str实际只是一个指向字符串的指针，没有任何额外的与数组相关的信息，因此sizeof作用于上只将其当指针看，一个指针为4个字节，因此返回4。</p>
<h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">main()</div><div class="line">&#123;</div><div class="line">int a[5]=&#123;1,2,3,4,5&#125;;</div><div class="line">int *ptr=(int *)(&amp;a+1);</div><div class="line">printf(“%d,%d”,*(a+1),*(ptr-1));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果是什么？</p>
<p>答案：输出：2,5</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">*(a+1）就是a[1]，*(ptr-1)就是a[4],执行结果是2，5</div><div class="line">&amp;a+1不是首地址+1，系统会认为加一个a数组的偏移，是偏移了一个数组的大小（本例是5个int）</div><div class="line">int *ptr=(int *)(&amp;a+1);</div><div class="line">则ptr实际是&amp;(a[5]),也就是a+5</div><div class="line"></div><div class="line">原因如下：</div><div class="line"></div><div class="line">&amp;a是数组指针，其类型为 int (*)[5];</div><div class="line">而指针加1要根据指针类型加上一定的值，不同类型的指针+1之后增加的大小不同。</div><div class="line">a是长度为5的int数组指针，所以要加 5*sizeof(int)</div><div class="line">所以ptr实际是a[5]</div><div class="line">但是prt与(&amp;a+1)类型是不一样的(这点很重要)</div><div class="line">所以prt-1只会减去sizeof(int*)</div><div class="line"></div><div class="line">a,&amp;a的地址是一样的，但意思不一样</div><div class="line">a是数组首地址，也就是a[0]的地址，&amp;a是对象（数组）首地址，</div><div class="line">a+1是数组下一元素的地址，即a[1],&amp;a+1是下一个对象的地址，即a[5].</div></pre></td></tr></table></figure>
<h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>请问以下代码有什么问题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">int  main()</div><div class="line">&#123;</div><div class="line">char a;</div><div class="line">char *str=&amp;a;</div><div class="line">strcpy(str,”hello”);</div><div class="line">printf(str);</div><div class="line">return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>答案：没有为str分配内存空间，将会发生异常。问题出在将一个字符串复制进一个字符变量指针所指地址。虽然可以正确输出结果，但因为越界进行内在读写而导致程序崩溃。</p>
<h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">char* s=”AAA”;</div><div class="line">printf(“%s”,s);</div><div class="line">s[0]=’B&apos;;</div><div class="line">printf(“%s”,s);</div></pre></td></tr></table></figure>
<p>有什么错？</p>
<p>答案：<br>“AAA”是字符串常量。s是指针，指向这个字符串常量，所以声明s的时候就有问题。<br>cosnt char* s=”AAA”;<br>然后又因为是常量，所以对是s[0]的赋值操作是不合法的。</p>
<h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int (*s[10])(int) 表示的是什么？</div><div class="line"></div><div class="line">答案：int (*s[10])(int) 函数指针数组，每个指针指向一个int func(int param)的函数。</div></pre></td></tr></table></figure>
<h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p>有以下表达式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int a=248; b=4;</div><div class="line">int const c=21;</div><div class="line">const int *d=&amp;a;</div><div class="line">int *const e=&amp;b;</div><div class="line">int const *f const =&amp;a;</div></pre></td></tr></table></figure>
<p>请问下列表达式哪些会被编译器禁止？为什么？<br><em>c=32;d=&b;</em>d=43;e=34;e=&a;f=0x321f;</p>
<p>答案：<br><em>c 这是个什么东东，禁止
</em>d 说了是const， 禁止<br>e = &amp;a 说了是const 禁止<br>const *f const =&a; 禁止<br>——————————————</p>
<h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line"></div><div class="line">void getmemory(char *p)</div><div class="line">&#123; </div><div class="line">p=(char *) malloc(100);</div><div class="line">strcpy(p,”hello world”);</div><div class="line">&#125; </div><div class="line"></div><div class="line">int main( )</div><div class="line">&#123;</div><div class="line">char *str=NULL;</div><div class="line">getmemory(str);</div><div class="line">printf(“%s/n”,str);</div><div class="line">free(str);</div><div class="line">return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分析一下这段代码</p>
<p>答案：程序崩溃，getmemory中的malloc 不能返回动态内存， free（）对str操作很危险</p>
<p>博主：getmemory中p是形参，是一个指针变量，getmemory(str)调用后，传入的是指针变量保存的对象地址，p=(char <em>) malloc(100)实际上是把申请的动态内存空间的首地址付给p指向的地址（即str指向的地址null），这个是错误的。应该修改成指向指针的指针void getmemory(char **p)，这样malloc返回的地址付给</em>p（即str变量本身）。</p>
<h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">char szstr[10];</div><div class="line">strcpy(szstr,”0123456789″);</div></pre></td></tr></table></figure>
<p>产生什么结果？为什么？</p>
<p>答案：长度不一样，会造成非法的OS，字符串最后一个是’\0’所以上边应该是11</p>
<h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><p>要对绝对地址0×100000赋值，我们可以用(unsigned int*)0×100000 = 1234;<br>那么要是想让程序跳转到绝对地址是0×100000去执行，应该怎么做？</p>
<p>答案：<em>((void (</em>)( ))0×100000 ) ( );<br>首先要将0×100000强制转换成函数指针,即:<br>(void (<em>)())0×100000<br>然后再调用它:
</em>((void (<em>)())0×100000)();<br>用typedef可以看得更直观些:<br>typedef void(</em>)() voidFuncPtr;<br>*((voidFuncPtr)0×100000)();<br>——————————————</p>
<h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><p>分析下面的程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">void GetMemory(char **p,int num)</div><div class="line">&#123;                          //p，指向指针的指针，*p，p指向的指针(即str)，**p，最终的对象，str指向的单元</div><div class="line">*p=(char *)malloc(num);  //申请空间首地址付给传入的被p指向的指针，即str</div><div class="line">&#125; </div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">char *str=NULL;</div><div class="line">GetMemory(&amp;str,100);   //传入指针变量本身的地址</div><div class="line">strcpy(str,”hello”);</div><div class="line">free(str);</div><div class="line"></div><div class="line">if(str!=NULL)</div><div class="line">&#123;</div><div class="line">strcpy(str,”world”);</div><div class="line">&#125; </div><div class="line"></div><div class="line">printf(“\n str is %s”,str); 软件开发网 www.mscto.com</div><div class="line">getchar();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>问输出结果是什么？</p>
<p>答案：输出str is world。</p>
<p>free 只是释放的str指向的内存空间,它本身的值还是存在的.所以free之后，有一个好的习惯就是将str=NULL.<br>此时str指向空间的内存已被回收,如果输出语句之前还存在分配空间的操作的话,这段存储空间是可能被重新分配给其他变量的,<br>尽管这段程序确实是存在大大的问题（上面各位已经说得很清楚了），但是通常会打印出world来。<br>这是因为，进程中的内存管理一般不是由操作系统完成的，而是由库函数自己完成的。</p>
<p>当你malloc一块内存的时候，管理库向操作系统申请一块空间（可能会比你申请的大一些），然后在这块空间中记录一些管理信息（一般是在你申请的内存 前面一点），并将可用内存的地址返回。但是释放内存的时候，管理库通常都不会将内存还给操作系统，因此你是可以继续访问这块地址的。</p>
<h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">char a[10]；</div><div class="line">strlen(a)为什么等于15？</div><div class="line"></div><div class="line">#include “stdio.h”</div><div class="line">#include “string.h”</div><div class="line"></div><div class="line">void main()</div><div class="line">&#123;</div><div class="line">char aa[10];</div><div class="line">printf(“%d”,strlen(aa));</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>答案：sizeof()和初不初始化，没有关系；<br>strlen()和初始化有关。</p>
<h3 id="14"><a href="#14" class="headerlink" title="14"></a>14</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">char (*str)[20];/*str是一个数组指针，即指向数组的指针．*/</div><div class="line">char *str[20];/*str是一个指针数组，其元素为指针型数据．*/</div></pre></td></tr></table></figure>
<h3 id="15"><a href="#15" class="headerlink" title="15"></a>15</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#include&lt;iostream.h&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line">#include &lt;malloc.h&gt;</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;memory.h&gt;</div><div class="line"></div><div class="line">typedef struct  AA</div><div class="line">&#123;</div><div class="line">int b1:5;</div><div class="line">int b2:2;</div><div class="line">&#125;AA;</div><div class="line"></div><div class="line">void main()</div><div class="line">&#123;</div><div class="line">AA aa;</div><div class="line">char cc[100];</div><div class="line">strcpy(cc,”0123456789abcdefghijklmnopqrstuvwxyz”);</div><div class="line">memcpy(&amp;aa,cc,sizeof(AA));</div><div class="line">cout &lt;&lt; aa.b1 &lt;&lt;endl;</div><div class="line">cout &lt;&lt; aa.b2 &lt;&lt;endl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果是多少？</p>
<p>答案：-16和１</p>
<p>首先sizeof(AA)的大小为4,b1和b2分别占5bit和2bit.经过strcpy和memcpy后,aa的4个字节所存放的值是: 0,1,2,3的ASC码，即00110000,00110001,00110010,00110011所以，最后一步：显示的是这４个字节的前５位，和 之后的２位分别为：10000,和01，因为int是有正负之分</p>
<h3 id="16"><a href="#16" class="headerlink" title="16"></a>16</h3><p>试题三：  以下代码有哪些错误或不足之处</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">void GetMemory( char **p, int num )</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">　*p = (char *) malloc( num );</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">void Test( void )</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">　char *str = NULL;</div><div class="line"></div><div class="line">　GetMemory( &amp;str, 100 );</div><div class="line"></div><div class="line">　strcpy( str, &quot;hello&quot; );</div><div class="line"></div><div class="line">　printf( str );</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解答：</p>
<p>存在2处问题：</p>
<p>本题中的Test函数中未对malloc的内存进行释放。</p>
<p>本题中的GetMemory避免了试题一的问题，传入GetMemory的参数为字符串指针的指针，但是在GetMemory中执行申请内存及赋值语句</p>
<p><em>p = (char </em>) malloc( num );</p>
<p>后未判断内存是否申请成功，应加上：</p>
<p>if ( *p == NULL )</p>
<p>{</p>
<p>　…//进行申请内存失败处理</p>
<p>}</p>
<h3 id="17"><a href="#17" class="headerlink" title="17"></a>17</h3><p>试题四：找出下面代码的不足或错误之处<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">void Test( void )</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">　char *str = (char *) malloc( 100 );</div><div class="line"></div><div class="line">　strcpy( str, &quot;hello&quot; );</div><div class="line"></div><div class="line">　free( str );</div><div class="line"></div><div class="line">　... //省略的其它语句</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>解答：</p>
<p>存在2处问题：</p>
<p>试题四存在与试题三同样的问题，在执行char <em>str = (char </em>) malloc(100);</p>
<p>后未进行内存是否申请成功的判断；</p>
<p>另外，在free(str)后未置str为空，导致可能变成一个“野”指针，应加上：</p>
<p>str = NULL;</p>
<p>18     判断输出是乱码  还是字符或是字符串  还是表示地址值 ？ 如果是地址值就用0xF1247000代表</p>
<p>.char类型指针的输出</p>
<p>  标准库cout输出时，无法判断指针的类型，如下面程序所示：<br>char ch = ‘a’;<br>int num = 1;<br>char <em>pch = &ch;<br>int </em>pnum = &num;<br>std::cout&lt;&lt;pch&lt;&lt;std::endl; //输出：乱码<br>std::cout&lt;&lt;(void<em>)pch&lt;&lt;std::endl;   //输出：0xF1247000<br>std::cout&lt;&lt;pnum&lt;&lt;std::endl;//输出：0xF1247004<br>std::cout&lt;&lt;(void</em>)pnum&lt;&lt;std::endl;   //输出：0xF12470004</p>
<p>char <em>pch2=”Hello”;<br>std::cout&lt;&lt;pch2&lt;&lt;std::endl;//输出：Hello<br>std::cout&lt;&lt;(void</em>)pch2&lt;&lt;std::endl;//输出：16进制地址</p>
<p>  对于字符型指针，要用void*进行类型转换后，才能输出其地址，地址以16进制数的格式显示32位地址值。若不进行转换，cout会按照char类型解析指针内容。若是一个字符，没有’\0’结束符，输出乱码；若是字符串，则输出字符串内容。<br>  除了字符指针，其他指针都可以直接用cout语句来输出地址值。无须进行指针类型转换。</p>
<p>19   指针与引用的区别？</p>
<p>答案：</p>
<p>（1）非空区别。在任何情况下都不能使用指向空值的引用。因此如果你使用一个变量并让它指向一个对象，但是该变量在某些时候也可能不指向任何对象，这时你应该把变量声明为指针，因为这样你可以赋空值给该变量。相反，如果变量肯定指向一个对象，例如你的设计不允许变量为空，这时你就可以把变量声明为引用。不存在指向空值的引用这个事实意味着使用引用的代码效率比使用指针要高。</p>
<p>（2）合法性区别。在使用引用之前不需要测试它的合法性。相反，指针则应该总是被测试，防止其为空。</p>
<p>（3）可修改区别。指针与引用的另一个重要的区别是指针可以被重新赋值以指向另一个不同对象。但是引用则总是指向在初始化时被指定的对象，以后不能改变，但是指定的对象其内容可以改变。</p>
<p>思路：   遇到次类型的题目 一定要想想他们的特点是什么 抓住特点进行分析        想想他们的功能是什么   进行比较</p>
<p>20：</p>
<p>下面5个函数哪个能成功进行两个数的交换？</p>
<p>#include<iostream><br>using namespace std;</iostream></p>
<p>void swap1(int p,int q)<br>{<br>    int temp;<br>    temp=p;<br>    p=q;<br>    q=temp;<br>}</p>
<p>void swap2(int <em>p,int </em>q)<br>{<br>    int <em>temp;
    </em>temp=<em>p;
    </em>p=<em>q;
    </em>q=*temp;<br>}</p>
<p>void swap3(int <em>p,int </em>q)<br>{<br>    int *temp;<br>    temp=p;<br>    p=q;<br>    q=temp;<br>}</p>
<p>void swap4(int <em>p,int </em>q)<br>{<br>    int temp;<br>    temp=<em>p;
    </em>p=<em>q;
    </em>q=temp;<br>}</p>
<p>void swap5(int &amp;p,int &amp;q)<br>{<br>    int temp;<br>    temp=p;<br>    p=q;<br>    q=temp;<br>}</p>
<p>int main ()<br>{<br>    int a=1,b=2;<br>    //swap1(a,b);<br>    //swap2(&amp;a,&amp;b);<br>    //swap3(&amp;a,&amp;b);<br>    //swap4(&amp;a,&amp;b);<br>    //swap5(a,b);<br>    cout &lt;&lt; “a:”&lt;&lt; a &lt;&lt;endl;<br>    cout &lt;&lt; “b:”&lt;&lt; b &lt;&lt;endl;</p>
<pre><code>return 0;
</code></pre><p>}</p>
<p>解析：这道题考察的是参数传递、值传递、指针传递（地址传递）和引用传递。</p>
<pre><code>swap1传递的是值的副本，在函数中只是修改了形参p、q（实际是a、b的一个拷贝），p、q的值确实交换了，但是它们是局部变量，不会影响到主函数a和 b 。当函数swap1生命周期结束时，p、q所在的栈也就被删除了。

swap2传递的是一个地址进去，在函数体内的形参*p、*q是指向实际的参数a、b地址的两个指针。

这里要注意：

        int *temp;

        *temp=*p;

是不符合逻辑的，int *temp新建了一个指针（但是没分配内存）。*temp=*p不是指向而是拷贝。把*p所指向的内存的值（也就是a 的值）拷贝到*temp所指向内存里了。但是int *temp不是不分配内存吗？的确不分配，于是系统在拷贝时临时给了一个随机地址，让它存值。分配的随机地址是个“意外”，且函数结束后不回收，造成内存泄漏。

swap3传递的是一个地址，在函数体内的参数*p、*q是指向实际参数a、b地址的两个指针。

这里要注意：

        int *temp;

        temp=p;

int *temp新建了一个指针（但是没分配内存）。temp=p是指向而不是拷贝。temp指向了*p所指向的地址（也就是a ）。而代码：

        int *temp;

        q=temp;

但是函数swap3不能实现两数的交换，这是因为函数体内只是指针的变化，而对地址中的值却没有变化。

swap4可以实现两数的交换，因为它修改的是指针所指向地址中的值。

swap5函数与swap4相似，是一个引用传递，修改的结果直接影响实参。
</code></pre><p>答案：</p>
<p>swap4 函数和 swap5 函数。</p>
<p>21、这个函数有什么问题？该如何修改？</p>
<p>char *strA()<br>{<br>    charstr[] =”hello world”;<br>    returnstr;<br>}</p>
<p>解析：这个str里存在的地址是函数strA栈里“hello world”的首地址。函数调用完成，栈帧恢复调用strA之前的状态，临时空间被重置，堆栈“回缩”，strA栈帧不再属于应该访问的范围。这段程序可以正确输出结果，但是这种访问方法违背了函数的栈帧机制。</p>
<pre><code>但是只要另外一个函数调用的话，你就会发现，这种方式的不合理及危险性。

如果想获得正确的函数，改成下面这样就可以：
</code></pre><p>char <em>strA()<br>{<br>    char</em>str =”hello world”;<br>    returnstr;<br>}<br>      首先要搞清楚char *str 和 char str[] ：</p>
<p>1<br>char str[] = “hello world”;<br>是分配一个局部数组。局部数组是局部变量，它所对应的是内存中的栈。局部变量的生命周期结束后该变量不存在了。</p>
<p>1<br>char *str = “hello world”;</p>
<p>是指向了常量区的字符串，位于静态存储区，它在程序生命期内恒定不变，所以字符串还在。无论什么时候调用 strA，它返回的始终是同一个“只读”的内存块。</p>
<pre><code>另外想要修改，也可以这样：
</code></pre><p>char *strA()<br>{<br>    staticcharstr[] =”hello world”;<br>    returnstr;<br>}<br>      通过static开辟一段静态存贮空间。</p>
<p>答案：</p>
<p>因为这个函数返回的是局部变量的地址，当调用这个函数后，这个局部变量str就释放了，所以返回的结果是不确定的且不安全，随时都有被收回的可能。</p>
<p>22</p>
<p>int arr[] = {1,2,3,4,5,6,7,8};<br>int <em>p=arr;
</em>(p++)+=123;<br>printf(“%d,%d\n”, <em>p,</em>(++p));<br>第一行，定义数组arr，元素共八个<br>第二行，定义指针p指向arr数组<br>此时的<em>p还是等于arr数组的第0个元素，也就是1<br>第三行，p++里的++是最后才运算，所以先执行</em>p+=123，也就是arr的第0个元素被赋值为123<br>此时arr变成{123,2,3,4,5,6,7,8} ，然后是p++，此时<em>p已经是等于arr的第1个元素了，也就是2<br>第四行，在执行printf时，括号里的参数是从右往左的顺序进行读取的，也就是说先执行 </em>(++p)，也就是p先加一再指针，指向的是arr第2个元素3，然后在执行*p，还是3<br>最后显示的内容就是<br>3,3</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[算法题收集]]></title>
      <url>/2015/07/06/2015/%E7%AE%97%E6%B3%95%E9%A2%98%E6%94%B6%E9%9B%86/</url>
      <content type="html"><![CDATA[<p><a href="https://www.dooccn.com/cpp/" target="_blank" rel="external">在线运行代码</a><br><a id="more"></a><br><a href="https://xiaozhuanlan.com/topic/4985160237" target="_blank" rel="external">测试</a></p>
<p><a href="https://wangmeng.gitbooks.io/ios-note/content/interview_6.html" target="_blank" rel="external">测试1</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/33695619" target="_blank" rel="external">测试2</a></p>
<p><a href="https://www.jianshu.com/p/8a54c26a9349" target="_blank" rel="external">测试3</a></p>
<ul>
<li>字符串反转</li>
<li>链表反转</li>
<li>有序数组合并</li>
<li>Hash算法</li>
<li>查找两个子视图</li>
<li>中位数</li>
</ul>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">string reverseString(string s) &#123;//反转字符串</div><div class="line">    for (int i = 0;i &lt; (s.size() + 1) / 2;i++) &#123;</div><div class="line">        char temp = s[i];</div><div class="line">        s[i] = s[s.size()-i-1];</div><div class="line">        s[s.size()-i-1] = temp;</div><div class="line">    &#125;</div><div class="line">    return s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="字符串唯一字符，假设只有小写字母"><a href="#字符串唯一字符，假设只有小写字母" class="headerlink" title="字符串唯一字符，假设只有小写字母"></a>字符串唯一字符，假设只有小写字母</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">int firstUniqChar(string s) &#123;//字符串唯一字符，假设只有小写字母</div><div class="line">    int code[26] = &#123;0&#125;;</div><div class="line">    for (int i = 0;i &lt; s.size();i++) &#123;</div><div class="line">        char letter = s[i];</div><div class="line">        code[letter - &apos;a&apos;] ++;</div><div class="line">        // cout &lt;&lt; code[0] &lt;&lt; &quot;++++&quot; &lt;&lt;  code[letter - &apos;a&apos;] &lt;&lt; &quot;***&quot; &lt;&lt; letter - &apos;a&apos; &lt;&lt; letter &lt;&lt; endl;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    for (int i = 0;i &lt; s.size();i++) &#123;</div><div class="line">        char letter = s[i];</div><div class="line">        // cout &lt;&lt; code[letter - &apos;a&apos;] &lt;&lt; &quot;  code  &quot; &lt;&lt; letter &lt;&lt; endl;</div><div class="line">        if (code[letter - &apos;a&apos;] == 1) &#123;</div><div class="line">            return i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="字符串唯一字符，啥字母都有"><a href="#字符串唯一字符，啥字母都有" class="headerlink" title="字符串唯一字符，啥字母都有"></a>字符串唯一字符，啥字母都有</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">char findFirstChar(char* cha)</div><div class="line">&#123;</div><div class="line">    char result = &apos;\0&apos;;</div><div class="line">    // 定义一个数组 用来存储各个字母出现次数</div><div class="line">    int array[256];</div><div class="line">    // 对数组进行初始化操作</div><div class="line">    for (int i=0; i&lt;256; i++) &#123;</div><div class="line">        array[i] =0;</div><div class="line">    &#125;</div><div class="line">    // 定义一个指针 指向当前字符串头部</div><div class="line">    char* p = cha;</div><div class="line">    // 遍历每个字符</div><div class="line">    while (*p != &apos;\0&apos;) &#123;</div><div class="line">        // 在字母对应存储位置 进行出现次数+1操作</div><div class="line">        array[*(p++)]++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 将P指针重新指向字符串头部</div><div class="line">    p = cha;</div><div class="line">    // 遍历每个字母的出现次数</div><div class="line">    while (*p != &apos;\0&apos;) &#123;</div><div class="line">        // 遇到第一个出现次数为1的字符，打印结果</div><div class="line">        if (array[*p] == 1)</div><div class="line">        &#123;</div><div class="line">            result = *p;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        // 反之继续向后遍历</div><div class="line">        p++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h4 id="增加节点"><a href="#增加节点" class="headerlink" title="增加节点"></a>增加节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">void insertNode(Node *p,int i) &#123; //增加节点</div><div class="line">    Node *node = new Node;</div><div class="line">    p-&gt;next = node;</div><div class="line">    node-&gt;value = i;</div><div class="line">    node-&gt;next = p-&gt;next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void deleteNode(Node *p) &#123; //删除节点，因为不知道上一个节点，所以只能用下一个节点覆盖自己</div><div class="line">    p-&gt;next = p-&gt;next-&gt;next;</div><div class="line">    p-&gt;value = p-&gt;next-&gt;value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="寻找中间节点"><a href="#寻找中间节点" class="headerlink" title="寻找中间节点"></a>寻找中间节点</h4><p>用slow和fast指针标记，slow每次走一步，fast每次走两步，当fast到尾节点时，slow就相当于总长度的一半，即在中间节点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Node* findMidNode(Node* head)&#123;//找出中间节点</div><div class="line">    Node* slow = head;</div><div class="line">    Node* fast = head;</div><div class="line">    while (fast-&gt;next != 0&amp;&amp;fast-&gt;next-&gt;next!=0) &#123;</div><div class="line">        slow = slow-&gt;next;</div><div class="line">        fast = fast-&gt;next-&gt;next;</div><div class="line">    &#125;</div><div class="line">    return slow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="找出倒数第k个节点"><a href="#找出倒数第k个节点" class="headerlink" title="找出倒数第k个节点"></a>找出倒数第k个节点</h4><p>//用slow和fast指针标记,fast指针事先走k步，然后slow和fast同时走，当fast到达末节点时，slow在fast的前k个节点，即为倒数第k个节点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">ListNode* FindKthFromTail(ListNode* pListHead,int k)</div><div class="line">&#123;</div><div class="line">    if (pListHead == NULL || k == 0) //防止空的链表  和 k值 等于 0 的情况</div><div class="line">    &#123;</div><div class="line">        return NULL;</div><div class="line">    &#125;</div><div class="line">    ListNode* pAhead = pListHead;</div><div class="line">    ListNode* pBehind = NULL;</div><div class="line">    </div><div class="line">    for (int i = 0; i &lt; k-1; i++)</div><div class="line">    &#123;</div><div class="line">        if (pAhead-&gt;next != NULL)</div><div class="line">        &#123;</div><div class="line">            pAhead = pAhead-&gt;next;</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            return NULL;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    pBehind = pListHead;</div><div class="line">    while(pAhead-&gt;next != NULL)</div><div class="line">    &#123;</div><div class="line">        </div><div class="line">        pAhead  = pAhead-&gt;next;</div><div class="line">        pBehind = pBehind-&gt;next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return pBehind;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="链表反转"><a href="#链表反转" class="headerlink" title="链表反转"></a>链表反转</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">ListNode* reverseLinkedList3(ListNode* head)&#123;</div><div class="line">    if(NULL==head|| NULL==head-&gt;next) return head;    //少于两个节点没有反转的必要。</div><div class="line">    ListNode* p;</div><div class="line">    ListNode* q;</div><div class="line">    ListNode* r;</div><div class="line">    </div><div class="line">    p = head;</div><div class="line">    q = head-&gt;next;</div><div class="line">    head-&gt;next = NULL; //旧的头指针是新的尾指针，next需要指向NULL</div><div class="line">    while(q)&#123;</div><div class="line">        r = q-&gt;next; //先保留下一个step要处理的指针</div><div class="line">        q-&gt;next = p; //然后p q交替工作进行反向</div><div class="line">        p = q;</div><div class="line">        q = r;</div><div class="line">    &#125;</div><div class="line">    head=p; // 最后q必然指向NULL，所以返回了p作为新的头指针</div><div class="line">    return head;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="有序单链表合并"><a href="#有序单链表合并" class="headerlink" title="有序单链表合并"></a>有序单链表合并</h4><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="有序数组合并"><a href="#有序数组合并" class="headerlink" title="有序数组合并"></a>有序数组合并</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">void mergeList(int a[], int aLen, int b[], int bLen, int result[])//有序数组合并</div><div class="line">&#123;</div><div class="line">    int p = 0; // 遍历数组a的指针</div><div class="line">    int q = 0; // 遍历数组b的指针</div><div class="line">    int i = 0; // 记录当前存储位置</div><div class="line">    </div><div class="line">    // 任一数组没有到达边界则进行遍历</div><div class="line">    while (p &lt; aLen &amp;&amp; q &lt; bLen) &#123;</div><div class="line">        // 如果a数组对应位置的值小于b数组对应位置的值</div><div class="line">        if (a[p] &lt;= b[q]) &#123;</div><div class="line">            // 存储a数组的值</div><div class="line">            result[i] = a[p];</div><div class="line">            // 移动a数组的遍历指针</div><div class="line">            p++;</div><div class="line">        &#125;</div><div class="line">        else&#123;</div><div class="line">            // 存储b数组的值</div><div class="line">            result[i] = b[q];</div><div class="line">            // 移动b数组的遍历指针</div><div class="line">            q++;</div><div class="line">        &#125;</div><div class="line">        // 指向合并结果的下一个存储位置</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 如果a数组有剩余</div><div class="line">    while (p &lt; aLen) &#123;</div><div class="line">        // 将a数组剩余部分拼接到合并结果的后面</div><div class="line">        result[i] = a[p++];</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 如果b数组有剩余</div><div class="line">    while (q &lt; bLen) &#123;</div><div class="line">        // 将b数组剩余部分拼接到合并结果的后面</div><div class="line">        result[i] = b[q++];</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="无序数组中位数"><a href="#无序数组中位数" class="headerlink" title="无序数组中位数"></a>无序数组中位数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//求一个无序数组的中位数</div><div class="line">int PartSort(int a[], int start, int end)</div><div class="line">&#123;</div><div class="line">    int low = start;</div><div class="line">    int high = end;</div><div class="line">    </div><div class="line">    //选取关键字</div><div class="line">    int key = a[end];</div><div class="line">    </div><div class="line">    while (low &lt; high)</div><div class="line">    &#123;</div><div class="line">        //左边找比key大的值</div><div class="line">        while (low &lt; high &amp;&amp; a[low] &lt;= key)</div><div class="line">        &#123;</div><div class="line">            ++low;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //右边找比key小的值</div><div class="line">        while (low &lt; high &amp;&amp; a[high] &gt;= key)</div><div class="line">        &#123;</div><div class="line">            --high;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        if (low &lt; high)</div><div class="line">        &#123;</div><div class="line">            //找到之后交换左右的值</div><div class="line">            int temp = a[low];</div><div class="line">            a[low] = a[high];</div><div class="line">            a[high] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    int temp = a[high];</div><div class="line">    a[high] = a[end];</div><div class="line">    a[end] = temp;</div><div class="line">    </div><div class="line">    return low;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int findMedian(int a[], int aLen)</div><div class="line">&#123;</div><div class="line">    int low = 0;</div><div class="line">    int high = aLen - 1;</div><div class="line">    </div><div class="line">    int mid = (aLen - 1) / 2;</div><div class="line">    int div = PartSort(a, low, high);</div><div class="line">    </div><div class="line">    while (div != mid)</div><div class="line">    &#123;</div><div class="line">        if (mid &lt; div)</div><div class="line">        &#123;</div><div class="line">            //左半区间找</div><div class="line">            div = PartSort(a, low, div - 1);</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            //右半区间找</div><div class="line">            div = PartSort(a, div + 1, high);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //找到了</div><div class="line">    return a[mid];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="大数求和"><a href="#大数求和" class="headerlink" title="大数求和"></a>大数求和</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line"> </div><div class="line">/************************************************************************/</div><div class="line">/* 功能：实现两个超大数相加</div><div class="line">/* 参数：source1 -- 被加数，字符型数组,如12</div><div class="line">/*       source2 -- 加数，字符型数组,</div><div class="line">/*       result  -- 存放和，字符型数组</div><div class="line">/************************************************************************/</div><div class="line">void Add(char *source1, char *source2, char *result)</div><div class="line">&#123;</div><div class="line">	int len1 = strlen(source1);</div><div class="line">	int len2 = strlen(source2);</div><div class="line">	int len = len1 &gt;= len2 ? len1 : len2;</div><div class="line">	int i = len1 - 1, j = len2 - 1, k = 0;</div><div class="line">	char *temp = (char *)malloc(sizeof(char) * (len + 2));</div><div class="line">	char x, y, z;</div><div class="line">	int carryBit = 0;</div><div class="line">    </div><div class="line">	while (i &gt;= 0 || j &gt;= 0)</div><div class="line">	&#123;</div><div class="line">		if (i &lt; 0) x = &apos;0&apos;; </div><div class="line">		else x = source1[i];</div><div class="line"> </div><div class="line">		if (j &lt; 0) y = &apos;0&apos;;</div><div class="line">		else y = source2[j];</div><div class="line"> </div><div class="line">		z = x + y - &apos;0&apos; - &apos;0&apos; + carryBit;</div><div class="line">        temp[k++] = z % 10 + &apos;0&apos;;</div><div class="line">		carryBit = z / 10;</div><div class="line"> </div><div class="line">		i--;</div><div class="line">		j--;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	while (carryBit)</div><div class="line">	&#123;</div><div class="line">		temp[k++] = carryBit % 10 + &apos;0&apos;;</div><div class="line">		carryBit /= 10;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	for (--k, i = 0; k &gt;= 0; k--, i++)</div><div class="line">	&#123;</div><div class="line">		result[i] = temp[k];</div><div class="line">	&#125;</div><div class="line">	result[i] = &apos;\0&apos;;</div><div class="line"> </div><div class="line">	free(temp);// 释放内存</div><div class="line">&#125;</div><div class="line"> </div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	char source1[1000];</div><div class="line">	char source2[1000];</div><div class="line">	char result[1100];</div><div class="line"> </div><div class="line">	scanf(&quot;%s%s&quot;, source1, source2);</div><div class="line">	Add(source1, source2, result);</div><div class="line"> </div><div class="line">	printf(&quot;%s\n&quot;, result);</div><div class="line">	return 0;</div></pre></td></tr></table></figure>
<h3 id="TopK问题"><a href="#TopK问题" class="headerlink" title="TopK问题"></a>TopK问题</h3><p><a href="https://www.cnblogs.com/xudong-bupt/archive/2013/03/20/2971262.html" target="_blank" rel="external">TopK问题最小堆</a></p>
<p><a href="https://blog.csdn.net/ts173383201/article/details/7839482" target="_blank" rel="external">思路</a></p>
<h3 id="罗列"><a href="#罗列" class="headerlink" title="罗列"></a>罗列</h3><p>反转链表</p>
<p>二分查找法</p>
<p>冒泡排序</p>
<p>二分法</p>
<p>数据结构（链表、二叉树、算法时间复杂度、空间复杂度）</p>
<p>什么是二叉搜索树？时间复杂度是什么？</p>
<p>采用二叉树链表作为存储结构，每个左节点均小于父节点，每个右节点均大于父节点</p>
<p>O(log2(n))</p>
<p>T9算法如何实现, 全拼算法</p>
<p>最短路径算法</p>
<p>强连通量算法</p>
<p>实现连连看算法</p>
<p>如何实现一个数组每个元素依次向右移动k位。(后头的往前面补) 比如: [1, 2, 3, 4, 5] 挪两位变成[4, 5, 1, 2, 3]</p>
<p>求两个整数的最大公约数</p>
<p>微信用户都是双向的好友，a是b的好友，那么b一定是a的。给定一个用户列表，有些用户是好友，有些不是，请判断，这些用户是否可以划分为两组，每组内的用 户，互相都不是好友。如果能，请给出这个划分</p>
<p>算法题：说 预约会议室，会有n个团队预约当天会议室，时间各不相同，求最少需要几个会议室。比如：1预约的时间是[9-11], 2预约的时间是[10-12], 3预约的时间是[12-14], 此时会议最小个数是2个</p>
<p>1、就n的阶乘。（这里只是用于小数，大数会越界）</p>
<p>思路：这里面用递归实现</p>
<p>#include <stdio.h></stdio.h></p>
<p>int getNJ(int n) {<br>     || n==) {<br>        ;<br>    }<br>    );<br>}<br>int main() { </p>
<p>   printf());<br>    ;<br>}<br>运行结果如下：</p>
<p>2、判断一个字符串是否是ip。</p>
<p>思路：先将字符串分割到两个数组里面（一个数字数组，一个字符数组），然后判断数字数组内容是否满足ip条件，字符数组里面是否是”.”。这里面主要用了sscanf函数。代码如下：</p>
<p>#include <stdio.h></stdio.h></p>
<p>int checkIP(const char *p) {<br>    ];<br>    ];<br>    ],&amp;c[],&amp;n[],&amp;c[],&amp;n[],&amp;c[],&amp;n[],&amp;c[])==) {<br>        int i;<br>        ;i&lt;;i++) {<br>            if(c[i]!=’.’) {<br>                ;<br>            }<br>        }<br>        ;i&lt;;i++) {<br>            ||n[i]&lt;) {<br>                ;<br>            }<br>        }<br>        ;</p>
<pre><code>}else {
    ;
}
</code></pre><p>}</p>
<p>int main() {<br>    const char <em>x[] =<br>    {<br>        “132.168.1.1”,<br>        “10.0.0.1.”,<br>        “127.256.0.1”,<br>        “iudfdsfdasfdaf”,<br>        “172.16,2.1”<br>    };<br>    const char </em>m[] =<br>    {<br>        “不是合法的IP地址”,<br>         “是合法的IP地址”<br>    };<br>    ;<br>    ) {<br>        printf(“%s %s\n”,x[i],m[checkIP(x[i])]);<br>        i++;<br>    }<br>    ;<br>    ;<br>}<br>运行结果如下：</p>
<p>132.168.1.1 是合法的IP地址<br>10.0.0.1. 不是合法的IP地址<br>127.256.0.1 不是合法的IP地址<br>iudfdsfdasfdaf 不是合法的IP地址<br>172.16,2.1 不是合法的IP地址<br>3、二分查找</p>
<p>思路：二分查找又称折半查找，前提是待查找表为有序表。将查找目标与数组中间的数对比，如果大于中间的数就在中间数和最大数之间查找，如果小于中间数就在小数和中间数之间查找。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">int bsearchMethod(int arr[],int low,int high,int target) &#123;</div><div class="line">    while (low&lt;high) &#123;</div><div class="line">        ;</div><div class="line">        if (arr[mid]&gt;target) &#123;</div><div class="line">            high = mid-;</div><div class="line">        &#125;else if(arr[mid]&lt;target)&#123;</div><div class="line">            low = mid+;</div><div class="line">        &#125;else &#123;</div><div class="line">            return mid;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ;</div><div class="line">&#125;</div><div class="line">int main(void) &#123;</div><div class="line">    ,,,,,,,,,,&#125;;</div><div class="line">    printf(,,));</div><div class="line">    ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果为：</p>
<p>查找数在数组第5位<br>其中-1为查找失败</p>
<p>冒泡排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">冒泡排序   θ(n^2)</div><div class="line">void bubble_sort(int a[], int n)</div><div class="line">&#123;</div><div class="line">    int i, j, temp;</div><div class="line">    for (j = 0; j &lt; n - 1; j++)</div><div class="line">        for (i = 0; i &lt; n - 1 - j; i++) //外层循环每循环一次就能确定出一个泡泡（最大或者最小），所以内层循环不用再计算已经排好的部分</div><div class="line">        &#123;</div><div class="line">            if(a[i] &gt; a[i + 1])</div><div class="line">            &#123;</div><div class="line">                temp = a[i];</div><div class="line">                a[i] = a[i + 1];</div><div class="line">                a[i + 1] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>快速排序  调用方法  quickSort(a,0,n);  θ(nlogn)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">void quickSort (int a[] , int low , int high)</div><div class="line">&#123;</div><div class="line">    if (high &lt; low + 2)</div><div class="line">        return;</div><div class="line">    int start = low;</div><div class="line">    int end = high;</div><div class="line">    int temp;</div><div class="line">    </div><div class="line">    while (start &lt; end)</div><div class="line">    &#123;</div><div class="line">        while ( ++start &lt; high &amp;&amp; a[start] &lt;= a[low]);//找到第一个比a[low]数值大的位子start</div><div class="line"></div><div class="line">        while ( --end  &gt; low  &amp;&amp; a[end]  &gt;= a[low]);//找到第一个比a[low]数值小的位子end</div><div class="line"></div><div class="line">        //进行到此，a[end] &lt; a[low] &lt; a[start],但是物理位置上还是low &lt; start &lt; end，因此接下来交换a[start]和a[end],于是[low,start]这个区间里面全部比a[low]小的，[end,hight]这个区间里面全部都是比a[low]大的</div><div class="line">        </div><div class="line">        if (start &lt; end)</div><div class="line">        &#123;</div><div class="line">            temp = a[start];</div><div class="line">            a[start]=a[end];</div><div class="line">            a[end]=temp;</div><div class="line">        &#125;</div><div class="line">        //在GCC编译器下，该写法无法达到交换的目的，a[start] ^= a[end] ^= a[start] ^= a[end];编译器的问题</div><div class="line">    &#125;</div><div class="line">    //进行到此，[low,end]区间里面的数都比a[low]小的,[end,higt]区间里面都是比a[low]大的，把a[low]放到中间即可</div><div class="line"></div><div class="line">    //在GCC编译器下，该写法无法达到交换的目的，a[low] ^= a[end] ^= a[low] ^= a[end];编译器的问题</div><div class="line">    </div><div class="line">    temp = a[low];</div><div class="line">    a[low]=a[end];</div><div class="line">    a[end]=temp;</div><div class="line">    </div><div class="line">    //现在就分成了3段了，由最初的a[low]枢纽分开的</div><div class="line">    quickSort(a, low, end);</div><div class="line">    quickSort(a, start, high);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4、100层楼2个鸡蛋问题？</p>
<blockquote>
<p>换个角度，把问题转化为两个鸡蛋尝试x次，能测出的最高临界层是哪层？为了保证用x次测出临界层，第一个鸡蛋最高只能扔在x层，如果没碎下次上升x-1层，还没碎再上升x-2层，一直没碎的话最后上升1层。即尝试x次，最多测x+(x-1)+(x-2)+…+1=(x+1)x/2。再来考虑原题，为了测到100层，就要使(x+1)x/2&gt;=100，即x&gt;=14。这就证明了这种方法是最优解。</p>
</blockquote>
<p>5、字符串反转输出问题？</p>
<p>6、红黑树？</p>
<p>7、河左边有：狼、羊、白菜，一个人过河，一次只能带走一件东西，怎么做能够保证三物都到河右边?规则（狼吃羊、羊吃白菜）</p>
<p>答：先把羊带到对面，然后把白菜带到对面，这个时候把羊带走，把狼带回对面，回去再把羊带回对面。</p>
<p>8、有一张圆形的桌子,两个人轮流往桌子上放硬币,假设两人有无限多的大小相同的硬币且不考虑桌子的大小,规定硬币之间不可以重叠,但可以相互碰着边,谁最后一个放硬币谁就赢,问谁会赢,第一给放硬币的人还是第二个?</p>
<p>答：第一个出的赢，但是第一个首先的做法是：把第一个放在中心，然后当第二个人出的时候，第一个人就对称着放硬币，第一个人就赢了。</p>
<h4 id="不用中间变量-用两种方法交换A和B的值"><a href="#不用中间变量-用两种方法交换A和B的值" class="headerlink" title="不用中间变量,用两种方法交换A和B的值"></a>不用中间变量,用两种方法交换A和B的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// 1.中间变量</div><div class="line"></div><div class="line">void swap(int a, int b) &#123;</div><div class="line"></div><div class="line">int temp = a;</div><div class="line"></div><div class="line">a = b;</div><div class="line"></div><div class="line">b = temp;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// 2.加法</div><div class="line"></div><div class="line">void swap(int a, int b) &#123;</div><div class="line"></div><div class="line">a = a + b;</div><div class="line"></div><div class="line">b = a - b;</div><div class="line"></div><div class="line">a = a - b;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// 3.异或（相同为0，不同为1. 可以理解为不进位加法）</div><div class="line"></div><div class="line">void swap(int a, int b) &#123;</div><div class="line"></div><div class="line">a = a ^ b;</div><div class="line"></div><div class="line">b = a ^ b;</div><div class="line"></div><div class="line">a = a ^ b;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="求最大公约数"><a href="#求最大公约数" class="headerlink" title="求最大公约数"></a>求最大公约数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/** 1.直接遍历法 */</div><div class="line"></div><div class="line">int maxCommonDivisor(int a, int b) &#123;</div><div class="line"></div><div class="line">int max = 0;</div><div class="line"></div><div class="line">for (int i = 1; i &lt;=b; i++) &#123;</div><div class="line"></div><div class="line">if (a % i == 0 &amp;&amp; b % i == 0) &#123;</div><div class="line"></div><div class="line">max = i;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">return max;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/** 2.辗转相除法 */</div><div class="line"></div><div class="line">int maxCommonDivisor(int a, int b) &#123;</div><div class="line"></div><div class="line">int r;</div><div class="line"></div><div class="line">while(a % b &gt; 0) &#123;</div><div class="line"></div><div class="line">r = a % b;</div><div class="line"></div><div class="line">a = b;</div><div class="line"></div><div class="line">b = r;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">return b;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// 扩展：最小公倍数 = (a * b)/最大公约数</div></pre></td></tr></table></figure>
<h3 id="一个数组，里边有各种字符，如何找到第一个只出现一次的那个？"><a href="#一个数组，里边有各种字符，如何找到第一个只出现一次的那个？" class="headerlink" title="一个数组，里边有各种字符，如何找到第一个只出现一次的那个？"></a>一个数组，里边有各种字符，如何找到第一个只出现一次的那个？</h3><p>思路:</p>
<p>首先利用acci码对字符做hash的索引，value就是出现的次数，然后维护一个数组，这个数组记录出现过的字母，如果已经添加过就不再添加，然后这个过程的时间复杂度是O(n)，然后下一次不遍历字符串，直接遍历这个新数组。</p>
<h3 id="大数求和的问题，你如何去调度？"><a href="#大数求和的问题，你如何去调度？" class="headerlink" title="大数求和的问题，你如何去调度？"></a>大数求和的问题，你如何去调度？</h3><p>考虑的点</p>
<ul>
<li>机器的内存占用</li>
<li>机器的cpu情况</li>
<li>任务调度的优先级</li>
</ul>
<p>然后综合考虑得出来一个公式，用来快速得出来哪一个能用，哪一个不能用，再深入一些可能还要考虑哪些机器要载入多少进行计算，根据最后的值进行这样的一个区分。</p>
<p>然后是这些机器处理完之后，汇总的时候内存的占用问题，会不会有内存溢出，有溢出的话怎么办？</p>
<h3 id="RN这种框架如果让你设计你要考虑哪些点？RN的实现原理？"><a href="#RN这种框架如果让你设计你要考虑哪些点？RN的实现原理？" class="headerlink" title="RN这种框架如果让你设计你要考虑哪些点？RN的实现原理？"></a>RN这种框架如果让你设计你要考虑哪些点？RN的实现原理？</h3><h3 id="多读多写的情况下你如何提高效率？"><a href="#多读多写的情况下你如何提高效率？" class="headerlink" title="多读多写的情况下你如何提高效率？"></a>多读多写的情况下你如何提高效率？</h3><p>重要的是将读和写进行一个并发，方法就是将写入的文件进行切分，然后读提供一个接口类，写也提供一个接口类，写只操作最后一个文件，读可以操作前边的文件，当遇到最后一个文件在进行写的时候进行一个等待，当写结束了，再进行读。这样就可以实现外界看来的读写并发。</p>
<h3 id="异或类题"><a href="#异或类题" class="headerlink" title="异或类题"></a>异或类题</h3><h4 id="一个整型数组里除了一个数字之外，其它的数字都出现了两次。请写程序找出这个只出现一次的数字。要求时间复杂度是O-n-，空间复杂度是O-1"><a href="#一个整型数组里除了一个数字之外，其它的数字都出现了两次。请写程序找出这个只出现一次的数字。要求时间复杂度是O-n-，空间复杂度是O-1" class="headerlink" title="一个整型数组里除了一个数字之外，其它的数字都出现了两次。请写程序找出这个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)"></a>一个整型数组里除了一个数字之外，其它的数字都出现了两次。请写程序找出这个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">void weiyuansuantest() &#123;</div><div class="line">//    int findUniq(int arr[],int length);</div><div class="line">    int arr[7] = &#123;2,3,7,2,3,5,5&#125;;</div><div class="line">    int length = sizeof(arr) / sizeof(int);</div><div class="line">    int out = findUniq(arr, length);</div><div class="line">    cout &lt;&lt; &quot;++++&quot; &lt;&lt; out &lt;&lt; &quot;----&quot; &lt;&lt; endl;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int findUniq(int arr[],int length) &#123;</div><div class="line">    </div><div class="line">    if (length &lt; 2) &#123;</div><div class="line">        return -1;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    int temp = 0;</div><div class="line">    </div><div class="line">    for (int i = 0;i &lt; length;i++) &#123;</div><div class="line">        int k = arr[i];</div><div class="line">        temp = temp ^ k;</div><div class="line">        cout &lt;&lt; &quot;---&quot; &lt;&lt; temp &lt;&lt; endl;</div><div class="line">    &#125;</div><div class="line">    return temp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="现在问题升级了，变成两个出现一次的，怎么找出来？"><a href="#现在问题升级了，变成两个出现一次的，怎么找出来？" class="headerlink" title="现在问题升级了，变成两个出现一次的，怎么找出来？"></a>现在问题升级了，变成两个出现一次的，怎么找出来？</h4><p>数组里包含了两个只出现一次的数字，那么所有数字依次异或的结果就是这两个只出现一次的数字的异或结果。我们要想办法利用这个异或结果，把数组分为两个子数组，一个子数组包含一个只出现一次的数字，另一个数组包含另一个只出现一次的数字。由于这两个只出现一次的数字肯定不相等，那么这个异或结果肯定不为0，也就是说在这个结果数字的二进制表示中至少就有一位为1。我们在结果数字中找到第一个为1的位的位置，记为第N位。现在我们以第N位是不是1为标准把原数组中的数字分成两个子数组，第一个子数组中每个数字的第N位都为1，而第二个子数组的每个数字的第N位都为0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">//1.找到唯一值</div><div class="line">//2.利用唯一值的第一个1位置，将数字分成两拨</div><div class="line">//3.对两组分别求解</div><div class="line"></div><div class="line">void findTwoUniqe(int arr[],int length,int &amp;m1,int &amp;m2) &#123;</div><div class="line">    if (length &lt; 2) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    int temp = 0;</div><div class="line">    for (int i = 0; i &lt; length;i++) &#123;</div><div class="line">        int k = arr[i];</div><div class="line">        temp = temp ^ k;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    int indexN = findIndex1(temp);</div><div class="line">    </div><div class="line">    m1 = m2 = 0;</div><div class="line">    </div><div class="line">    for (int j = 0;j &lt; length;j++) &#123;</div><div class="line">        int p = arr[j];</div><div class="line">        </div><div class="line">        if (isBit1(p, indexN)) &#123;</div><div class="line">            m1 = m1 ^ p;</div><div class="line">        &#125;else &#123;</div><div class="line">            m2 = m2 ^ p;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">bool isBit1(int num,unsigned int index) &#123;</div><div class="line">    num = num &gt;&gt; index;</div><div class="line">    return (num &amp; 1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int findIndex1(int temp) &#123;</div><div class="line">    int index = 0;</div><div class="line">    while ((temp &amp; 1) != 1 &amp;&amp; index &lt; 32) &#123;</div><div class="line">        temp = temp &gt;&gt; 1;</div><div class="line">        index ++;</div><div class="line">    &#125;</div><div class="line">    return index;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="题目为：给你1-1000个连续自然数，然后从中随机去掉两个，再打乱顺序，要求只遍历一次，求出被去掉的两个数。"><a href="#题目为：给你1-1000个连续自然数，然后从中随机去掉两个，再打乱顺序，要求只遍历一次，求出被去掉的两个数。" class="headerlink" title="题目为：给你1-1000个连续自然数，然后从中随机去掉两个，再打乱顺序，要求只遍历一次，求出被去掉的两个数。"></a>题目为：给你1-1000个连续自然数，然后从中随机去掉两个，再打乱顺序，要求只遍历一次，求出被去掉的两个数。</h3><p>（基本跟上面的题一样）</p>
<p>解法1：使用异或。</p>
<p>说说异或的两个特性：顺序无关 / 对一个数异或两次等于没有异或。顺序无关就是说异或的元素可以随意交换顺序，而不会影响结果。异或两次可以理解为+x和-x。</p>
<p>首先，这两个数组(打乱前和打乱后)各自异或，也就是1^2^…^1000，得到两个异或值。再对这两个异或值进行一次异或，这样就得到了x^y的指(重复部分互相抵消了)</p>
<h3 id="给一组数字，这些数字里面每一个都重复出现了三次，只有一个数字只出现了一个，要求在时间O（n）空间O（1）内解出来"><a href="#给一组数字，这些数字里面每一个都重复出现了三次，只有一个数字只出现了一个，要求在时间O（n）空间O（1）内解出来" class="headerlink" title="给一组数字，这些数字里面每一个都重复出现了三次，只有一个数字只出现了一个，要求在时间O（n）空间O（1）内解出来"></a>给一组数字，这些数字里面每一个都重复出现了三次，只有一个数字只出现了一个，要求在时间O（n）空间O（1）内解出来</h3>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[第三方库相关]]></title>
      <url>/2015/07/05/2015/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<h3 id="AFNetworking"><a href="#AFNetworking" class="headerlink" title="AFNetworking"></a>AFNetworking</h3><p><img src="/05/2015/第三方库相关/../../../images/2018-07-052.27.05.png" alt=""></p>
<p><img src="/05/2015/第三方库相关/../../../images/2018-07-052.28.42.png" alt=""></p>
<p><img src="/05/2015/第三方库相关/../../../images/2018-07-052.29.42.png" alt=""></p>
<a id="more"></a>
<h3 id="SDWebImage"><a href="#SDWebImage" class="headerlink" title="SDWebImage"></a>SDWebImage</h3><p><img src="/05/2015/第三方库相关/../../../images/2018-07-052.34.09.png" alt=""></p>
<h3 id="ReactiveCocoa"><a href="#ReactiveCocoa" class="headerlink" title="ReactiveCocoa"></a>ReactiveCocoa</h3><ul>
<li>信号</li>
<li>订阅</li>
</ul>
<p>RACSignal–&gt;RACStream</p>
<h3 id="AsyncDisplayKit"><a href="#AsyncDisplayKit" class="headerlink" title="AsyncDisplayKit"></a>AsyncDisplayKit</h3><p>ASNode线程安全，可以放在子线程</p>
<p>针对ASNode的修改和提交，会对其进行封装并且提交到一个全局容器中，ASKD也在runloop中注册了一个Observer，当Runloop进入休眠前，ASDK执行该loop内提交所有的任务。</p>
<p><img src="/05/2015/第三方库相关/../../../images/2018-07-052.38.30.png" alt=""></p>
<p><img src="/05/2015/第三方库相关/../../../images/2018-07-052.39.29.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[架构与框架]]></title>
      <url>/2015/07/05/2015/%E6%9E%B6%E6%9E%84%E4%B8%8E%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<h3 id="图片缓存"><a href="#图片缓存" class="headerlink" title="图片缓存"></a>图片缓存</h3><p><img src="/05/2015/架构与框架/../../../images/2018-07-0511.21.13.png" alt=""></p>
<p><img src="/05/2015/架构与框架/../../../images/2018-07-0511.22.17.png" alt=""><br><a id="more"></a></p>
<h4 id="内存设计的问题？"><a href="#内存设计的问题？" class="headerlink" title="内存设计的问题？"></a>内存设计的问题？</h4><ul>
<li>Size</li>
<li>淘汰策略</li>
</ul>
<p><img src="/05/2015/架构与框架/../../../images/2018-07-0511.24.57.png" alt=""></p>
<h4 id="淘汰策略"><a href="#淘汰策略" class="headerlink" title="淘汰策略"></a>淘汰策略</h4><ul>
<li>队列先进先出</li>
<li>LRU算法(最近未使用，如30分钟)</li>
</ul>
<p><img src="/05/2015/架构与框架/../../../images/2018-07-0511.28.32.png" alt=""></p>
<h4 id="磁盘设计方案考虑"><a href="#磁盘设计方案考虑" class="headerlink" title="磁盘设计方案考虑"></a>磁盘设计方案考虑</h4><ul>
<li>存储方式</li>
<li>大小限制(100M)</li>
<li>淘汰策略，比如存储事件超过7天</li>
</ul>
<h4 id="网络部分的设计需要考虑哪些？"><a href="#网络部分的设计需要考虑哪些？" class="headerlink" title="网络部分的设计需要考虑哪些？"></a>网络部分的设计需要考虑哪些？</h4><ul>
<li>图片请求最大并发</li>
<li>请求超时</li>
<li>优先级</li>
</ul>
<h4 id="不同格式的图片，解码采用什么方式来做？"><a href="#不同格式的图片，解码采用什么方式来做？" class="headerlink" title="不同格式的图片，解码采用什么方式来做？"></a>不同格式的图片，解码采用什么方式来做？</h4><ul>
<li>应用策略模式对不同图片格式进行解码</li>
</ul>
<h4 id="哪个阶段做图片解码？"><a href="#哪个阶段做图片解码？" class="headerlink" title="哪个阶段做图片解码？"></a>哪个阶段做图片解码？</h4><ul>
<li>磁盘读取后</li>
<li>网络请求返回后</li>
</ul>
<h4 id="线程处理"><a href="#线程处理" class="headerlink" title="线程处理"></a>线程处理</h4><p><img src="/05/2015/架构与框架/../../../images/2018-07-0512.16.59.png" alt=""></p>
<h3 id="时长统计框架"><a href="#时长统计框架" class="headerlink" title="时长统计框架"></a>时长统计框架</h3><p><img src="/05/2015/架构与框架/../../../images/2018-07-0512.29.29.png" alt=""><br><img src="/05/2015/架构与框架/../../../images/2018-07-0512.32.44.png" alt=""><br><img src="/05/2015/架构与框架/../../../images/2018-07-0512.33.42.png" alt=""><br><img src="/05/2015/架构与框架/../../../images/2018-07-0512.34.37.png" alt=""><br><img src="/05/2015/架构与框架/../../../images/2018-07-0512.35.39.png" alt=""></p>
<h3 id="复杂页面设计"><a href="#复杂页面设计" class="headerlink" title="复杂页面设计"></a>复杂页面设计</h3><p><img src="/05/2015/架构与框架/../../../images/2018-07-0512.41.02.png" alt=""></p>
<p><img src="/05/2015/架构与框架/../../../images/2018-07-0512.42.29.png" alt=""></p>
<p><img src="/05/2015/架构与框架/../../../images/2018-07-0512.45.00.png" alt=""></p>
<p><img src="/05/2015/架构与框架/../../../images/2018-07-0512.48.09.png" alt=""></p>
<p><img src="/05/2015/架构与框架/../../../images/2018-07-0512.48.53.png" alt=""></p>
<p><img src="/05/2015/架构与框架/../../../images/2018-07-0512.50.13.png" alt=""></p>
<p><img src="/05/2015/架构与框架/../../../images/2018-07-0512.50.23.png" alt=""></p>
<p><img src="/05/2015/架构与框架/../../../images/2018-07-052.04.54.png" alt=""></p>
<p><img src="/05/2015/架构与框架/../../../images/2018-07-052.05.31.png" alt=""></p>
<p><img src="/05/2015/架构与框架/../images/2018-07-052.07.43.png" alt=""></p>
<p>MVVM的架构思想</p>
<p>RN数据流思想</p>
<p>UIView更新机制</p>
<p>AsyncDisplayKit关于预排版的思想</p>
<h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p><img src="/05/2015/架构与框架/../../../images/2018-07-052.21.55.png" alt=""></p>
<h4 id="客户端解耦"><a href="#客户端解耦" class="headerlink" title="客户端解耦"></a>客户端解耦</h4><ul>
<li>OpenURL</li>
<li>依赖注入</li>
</ul>
<p><img src="/05/2015/架构与框架/../../../images/2018-07-052.22.57.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式相关]]></title>
      <url>/2015/07/05/2015/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<p><img src="/05/2015/设计模式相关/../../../images/2018-07-059.39.25.png" alt=""></p>
<p>1.代理模式</p>
<p>2.观察者模式</p>
<p>3.MVC模式</p>
<p>4.单例模式</p>
<p>5.策略模式</p>
<p>6.工厂模式</p>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>责任链:响应者链条<br><a id="more"></a><br><img src="/05/2015/设计模式相关/../../../images/2018-07-059.24.05.png" alt=""></p>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><h5 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责:"></a>单一职责:</h5><p>一个类只负责一件事，比如UIView负责事件，CALayer只负责显示</p>
<h5 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则:"></a>开闭原则:</h5><p>对修改关闭，对扩展开放</p>
<p>对属性的定义要小心，以后扩展要尽量不修改类本身</p>
<h5 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离:"></a>接口隔离:</h5><p>使用很多专门协议，而不是一个庞大臃肿的协议</p>
<p>协议中的方法尽量少</p>
<p>比如tableview的datasource和delegate两种协议</p>
<h5 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则:"></a>依赖倒置原则:</h5><p>抽象不应该依赖具体实现，具体实现可以依赖抽象</p>
<p>所有上层只依赖接口定义，具体里边的实现是不关注的</p>
<h5 id="里氏替换"><a href="#里氏替换" class="headerlink" title="里氏替换:"></a>里氏替换:</h5><p>父类可以被子类无缝替换，且原有功能不受影响</p>
<p>比如KVO</p>
<h5 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则:"></a>迪米特法则:</h5><p>一个对象应当对其他对象尽可能少的了解</p>
<p>这样就可以做到高内聚，低耦合</p>
<h3 id="责任链"><a href="#责任链" class="headerlink" title="责任链"></a>责任链</h3><p>调整nextResponder指向</p>
<p><img src="/05/2015/设计模式相关/../../../images/2018-07-059.png" alt=""></p>
<h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><p>这个是一个特别牛逼的方法，举一个实际的业务场景，比如现在有3种布局样式的cell，然后还有3种插件，现在你要在一个tableview种任意组合这几种情况，如果所有的cell类型都暴露给tableview，那么这个逻辑将很复杂，那么怎么办呢？</p>
<p>解决办法是定义一个抽象类叫做A，代表cell，再定义一个抽象类B，代表插件，根据网络数据决定实际初始化A的时候初始化具体哪个子类，但是在tableview写代码的时候只需要面对A就好了，将大大将少控制器对cell的各种类型的依赖。</p>
<p><img src="/05/2015/设计模式相关/../../../images/2018-07-059.51.11.png" alt=""></p>
<h3 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h3><p>一个现有类需要适应变化的问题？</p>
<ul>
<li>对象适配器</li>
<li>类适配器</li>
</ul>
<p>解决办法是创建一个新类，对原来的类进行一个包装，然后旧对象做为一个成员变量，把你的新逻辑增加到之前的方法调用之前或者之后。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@implementation CoolTarget</div><div class="line"></div><div class="line">- (void)request</div><div class="line">&#123;</div><div class="line">    // 额外处理</div><div class="line">    </div><div class="line">    [self.target operation];</div><div class="line">    </div><div class="line">    // 额外处理</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">#import &quot;Mooc.h&quot;</div><div class="line"></div><div class="line">@implementation Mooc</div><div class="line"></div><div class="line">+ (id)sharedInstance</div><div class="line">&#123;</div><div class="line">    // 静态局部变量</div><div class="line">    static Mooc *instance = nil;</div><div class="line">    </div><div class="line">    // 通过dispatch_once方式 确保instance在多线程环境下只被创建一次</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        // 创建实例</div><div class="line">        instance = [[super allocWithZone:NULL] init];</div><div class="line">    &#125;);</div><div class="line">    return instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 重写方法【必不可少】</div><div class="line">+ (id)allocWithZone:(struct _NSZone *)zone&#123;</div><div class="line">    return [self sharedInstance];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 重写方法【必不可少】</div><div class="line">- (id)copyWithZone:(nullable NSZone *)zone&#123;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>注意三个点:</p>
<ul>
<li>重写allocWithZone</li>
<li>重写copyWithZone</li>
<li>要调用super allocWithZone，不用self防止循环调用</li>
</ul>
<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>行为参数化</p>
<p>作用，降低代码重合度</p>
<p>实际使用场景，转发，评论，赞等，如果没有命令模式，我们需要在每个页面进行相关处理，如果进行了行为参数化，那么就能省下很多东西。</p>
<p>我们需要两个模块，一个是命令管理者，一个是命令的虚拟类，最后是很多命令的具体子类。</p>
<p>当我们需要执行一个命令的时候就直接调用这个管理者，然后执行这个命令就好了。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[网络相关]]></title>
      <url>/2015/07/04/2015/%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p><img src="/04/2015/网络相关/../../../images/2018-07-049.10.24.png" alt=""><br><a id="more"></a><br>请求行</p>
<p>首部字段区</p>
<p>实体主体，get没有，post有</p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-049.10.42.png" alt=""><br>响应行</p>
<p>首部字段区</p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-049.11.18.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-049.12.38.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-049.13.08.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-049.14.53.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-049.16.57.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-049.22.50.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-049.24.05.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-049.25.13.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-049.26.06.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-04.27.38.png" alt=""></p>
<p>https的建立流程<br><img src="/04/2015/网络相关/../../../images/2018-07-049.33.19.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-049.34.25.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-049.35.52.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-049.36.53.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-049.37.39.png" alt=""></p>
<p><a href="https://blog.csdn.net/u013401853/article/details/52781072" target="_blank" rel="external">https建立连接详细</a></p>
<p>靠签名知道谁是谁，所以，签名一定是私钥。</p>
<h4 id="关于加密算法"><a href="#关于加密算法" class="headerlink" title="关于加密算法"></a>关于加密算法</h4><p>非对称</p>
<ul>
<li>RSA</li>
</ul>
<p>对称</p>
<ul>
<li>DES</li>
</ul>
<h3 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP/UDP"></a>TCP/UDP</h3><blockquote>
<p>与http的关系，TPC/IP协议是传输层协议，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据，把IP想像成一种高速公路，它允许其它协议在上面行驶并找到到其它电脑的出口。TCP和UDP是高速公路上的“卡车”，它们携带的货物就是像HTTP，文件传输协议FTP这样的协议等</p>
</blockquote>
<p><img src="/04/2015/网络相关/../../../images/2018-07-049.52.56.png" alt=""></p>
<h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP ==================="></a>UDP ===================</h4><p>特点与功能</p>
<p>特点:面向报文，既不合并也不拆分</p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-0410.51.00.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-0410.51.50.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-0410.52.41.png" alt=""></p>
<p>差错检测的思路和策略可以用在微信等IM应用上<br><img src="/04/2015/网络相关/../../../images/2018-07-0410.55.39.png" alt=""></p>
<h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP ======================"></a>TCP ======================</h4><h5 id="TCP中的状态码"><a href="#TCP中的状态码" class="headerlink" title="TCP中的状态码"></a>TCP中的状态码</h5><p>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.</p>
<p>其中，对于我们日常的分析有用的就是前面的五个字段。</p>
<p>它们的含义是：</p>
<p>SYN表示建立连接，</p>
<p>FIN表示关闭连接，</p>
<p>ACK表示响应，</p>
<p>PSH表示有 DATA数据传输，</p>
<p>RST表示连接重置</p>
<h5 id="TCP连接和断开"><a href="#TCP连接和断开" class="headerlink" title="TCP连接和断开"></a>TCP连接和断开</h5><p><img src="/04/2015/网络相关/../../../images/2018-07-0410.56.57.png" alt=""></p>
<p>为什么三次握手？</p>
<p>假设超时，会触发client的超时重传，新的syn会创建一个新的连接，这个时候服务端会启一个进程来处理这个连接，如果这个时候client的旧的syn到达了，server会给client一个确认，但是在client看来这是一个请求，就不会给ack发送ack确认，那么server就不会启动新进程处理这个，这样就能规避连接异常的问题。</p>
<p>为啥要四次挥手？</p>
<p>因为建立的连接是双向通讯的，学名叫做双工，先是client到server的传输关闭，这个时候server到client是可以发送数据的，后边在合适的时间，server再断掉它的连接</p>
<p>可靠性如何保证？</p>
<p>超时重传，丢弃，忽略</p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-0411.03.18.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-0411.05.45.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-0411.06.57.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-0411.07.28.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-0411.08.19.png" alt=""></p>
<h4 id="面向字节流"><a href="#面向字节流" class="headerlink" title="面向字节流"></a>面向字节流</h4><p>不管发送方给tcp多少数据，tcp会根据实际情况，进行拆分或者合并，进行传输，这里有一个发送缓存和接收缓存的概念</p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-042.28.17.png" alt=""></p>
<h4 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h4><p>基于滑动窗口协议，这个协议也可以保障按序到达</p>
<p>每个数据包先加一个tcp头，再加一个ip头。</p>
<p>TCP并不是每一个报文段都会回复ACK的，可能会对两个报文段发送一个ACK，也可能会对多个报文段发送1个ACK【累计ACK】，比如说发送方有1/2/3 3个报文段，先发送了2,3 两个报文段，但是接收方期望收到1报文段，这个时候2,3报文段就只能放在缓存中等待报文1的空洞被填上，如果报文1，一直不来，报文2/3也将被丢弃，如果报文1来了，那么会发送一个ACK对这3个报文进行一次确认。</p>
<p>举一个例子来说明一下滑动窗口的原理：</p>
<ol>
<li><p>假设32~45 这些数据，是上层Application发送给TCP的，TCP将其分成四个Segment来发往internet</p>
</li>
<li><p>seg1 32~34 seg3 35~36 seg3 37~41 seg4 42~45  这四个片段，依次发送出去，此时假设接收端之接收到了seg1 seg2 seg4</p>
</li>
<li><p>此时接收端的行为是回复一个ACK包说明已经接收到了32~36的数据，并将seg4进行缓存（保证顺序，产生一个保存seg3 的hole）</p>
</li>
<li><p>发送端收到ACK之后，就会将32~36的数据包从发送并没有确认切到发送已经确认，提出窗口，这个时候窗口向右移动</p>
</li>
<li><p>假设接收端通告的Window Size仍然不变，此时窗口右移，产生一些新的空位，这些是接收端允许发送的范畴</p>
</li>
<li><p>对于丢失的seg3，如果超过一定时间，TCP就会重新传送（重传机制），重传成功会seg3 seg4一块被确认，不成功，seg4也将被丢弃</p>
</li>
</ol>
<p><a href="https://v.youku.com/v_show/id_XNDg1NDUyMDUy.html" target="_blank" rel="external">滑动窗口动画</a></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-045.23.09.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-045.34.00.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-045.35.19.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-045.34.34.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-045.38.43.png" alt=""></p>
<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p><img src="/04/2015/网络相关/../../../images/2018-07-046.05.42.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-046.06.27.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-046.07.07.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-046.09.26.png" alt=""></p>
<p>DNS转发有个问题，就是可能返回一个错误的ip导致跨网访问，就是导致慢</p>
<blockquote>
<p>当我们在浏览器输入一个 URL 后，是在什么时候、谁进行的查询？<br>浏览器获得这个请求后，甩给了操作系统，操作系统甩给了网卡，网卡作为真正干活的人把包按照链路层协议送了出去。<br>DNS 发生在 TCP/IP 之前。前面已经提过，到 TCP/IP 协议栈的时候已经是有 IP 地址了。<br>真相就是操作系统进行的 DNS 查询。所以在操作系统的网络设置中，可以进行 DNS 服务器的配置。操作系统也同时管理了 DNS 的缓存。《iOS网络请求优化之DNS映射》中提到：</p>
<p>像 iOS 系统一般是 24 小时之后会过期，还有进入飞行模式再切回来，开关机，重置网络设置等也会导致 DNS cache 的清除。所以一般情况下用户在第二天打开你的 app 都会经历一次完整的 DNS 解析请求。</p>
</blockquote>
<p><img src="/04/2015/网络相关/../../../images/2018-07-046.10.07.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-046.14.36.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-046.24.53.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-046.25.41.png" alt=""></p>
<h3 id="Session-Cookie"><a href="#Session-Cookie" class="headerlink" title="Session/Cookie"></a>Session/Cookie</h3><p><img src="/04/2015/网络相关/../../../images/2018-07-046.38.14.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-046.38.54.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-046.39.43.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-046.41.23.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-046.40.41.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-046.41.35.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-046.44.10.png" alt=""></p>
<p><img src="/04/2015/网络相关/../../../images/2018-07-046.42.47.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入理解block]]></title>
      <url>/2015/07/02/2015/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3block/</url>
      <content type="html"><![CDATA[<ul>
<li>block介绍</li>
<li>截获变量</li>
<li>__block</li>
<li>内存管理</li>
<li>循环引用</li>
</ul>
<a id="more"></a>
<h3 id="什么是block"><a href="#什么是block" class="headerlink" title="什么是block"></a>什么是block</h3><p>是将函数及其执行上下文封装起来的对象。</p>
<p>查看编译后的内容<code>clang -rewrite-objc file.m</code><br>查看含有UIKit.h的</p>
<p><code>clang -x objective-c -rewrite-objc -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk xxxx</code></p>
<h3 id="什么是block调用"><a href="#什么是block调用" class="headerlink" title="什么是block调用"></a>什么是block调用</h3><p>block调用就是函数调用</p>
<h3 id="截获变量"><a href="#截获变量" class="headerlink" title="截获变量"></a>截获变量</h3><ul>
<li>局部变量<ul>
<li>基本数据类型，截获其值</li>
<li>对象，连同所有权修饰符一起截获，__weak就是弱引用，没有修饰符就是默认strong，就是强引用</li>
</ul>
</li>
<li>静态局部变量(static)，以指针形式进行截获</li>
<li>全局变量，不截获</li>
<li>静态全局变量，不截获</li>
</ul>
<p>总结</p>
<blockquote>
<p>只有基本数据类型才会直接使用值，如果用__block修饰也就是指针了，其他情况都是指针</p>
</blockquote>
<h3 id="block什么时候使用"><a href="#block什么时候使用" class="headerlink" title="__block什么时候使用"></a>__block什么时候使用</h3><p><strong>block 改变存储方式，_block修饰自动变量后，_block的变量也被转化成了一个结构体:</strong>Block_byref_i_0,这个结构体有5个成员变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">struct __Block_byref_i_0 &#123;</div><div class="line">  void *__isa;   指针</div><div class="line">__Block_byref_i_0 *__forwarding; 指向自身类型的__forwarding指针</div><div class="line"> int __flags; 标记flag</div><div class="line"> int __size;大小</div><div class="line"> int i; 变量值</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>一般情况下，对被截获变量进行赋值操作需要添加__block修饰符，注意赋值不等于操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">__block NSMutableArray *arr = nil;</div><div class="line">void(^Block)(void) = ^&#123;</div><div class="line">    arr = [NSMutableArray array];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种没有__block直接会报错</p>
<h3 id="block的原理是什么？"><a href="#block的原理是什么？" class="headerlink" title="__block的原理是什么？"></a>__block的原理是什么？</h3><p>__block修饰后的int类型会变成结构体，也就是对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">__block int muti = 6;</div><div class="line">    int(^newBlock)(int) = ^int(int num) &#123;</div><div class="line">        return muti * num;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    muti = 4;</div><div class="line">    </div><div class="line">    newBlock(2);</div></pre></td></tr></table></figure>
<p>这个结果是8</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">int muti = 6;</div><div class="line">int(^newBlock)(int) = ^int(int num) &#123;</div><div class="line">    return muti * num;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">muti = 4;</div><div class="line"></div><div class="line">newBlock(2);</div></pre></td></tr></table></figure>
<p>这个结果是12</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">static int muti = 6;</div><div class="line">int(^newBlock)(int) = ^int(int num) &#123;</div><div class="line">    return muti * num;</div><div class="line">&#125;;</div><div class="line">    </div><div class="line">muti = 4;</div><div class="line">    </div><div class="line">newBlock(2);</div></pre></td></tr></table></figure>
<p>这个结果也是8</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">NSMutableString *mutable_string = [NSMutableString stringWithString:@&quot;aaa&quot;];</div><div class="line">    void(^mutable_append)(void)=^&#123;</div><div class="line">        [mutable_string appendString:@&quot;ccc&quot;];</div><div class="line">    &#125;;</div><div class="line">    [mutable_string appendString:@&quot;bbb&quot;];</div><div class="line">    mutable_append();</div><div class="line">    NSLog(@&quot;\\n %@&quot;,mutable_string);  //结果：aaabbbccc</div><div class="line">    // 没有__block，但是也没有涉及到直接指针的修改，只是操作而已，因此aaabbbccc</div><div class="line"></div><div class="line">    NSString *string = @&quot;aaa&quot;;</div><div class="line">    NSString*(^append)(void)=^&#123;</div><div class="line">        return [string stringByAppendingString:@&quot;ccc&quot;];</div><div class="line">    &#125;;</div><div class="line">    string = @&quot;bbb&quot;;</div><div class="line">    NSLog(@&quot;\\n %@&quot;,append());  //结果：aaaccc</div><div class="line">    // 没有__block，copy值，截获之后和外部都指向@&quot;aaa&quot;，但是外部string修改了指向为@&quot;bbb&quot;,内部指针还是指向@&quot;aaa&quot;，所以aaaccc</div><div class="line"></div><div class="line">    __block NSString *block_string = @&quot;aaa&quot;;</div><div class="line">    NSString*(^block_append)(void)=^&#123;</div><div class="line">        return [block_string stringByAppendingString:@&quot;ccc&quot;];</div><div class="line">    &#125;;</div><div class="line">    block_string = @&quot;bbb&quot;;</div><div class="line">    NSLog(@&quot;\\n %@&quot;,block_append()); //结果: bbbccc</div><div class="line">    // 有__block，自动转换成新的结构体，string变成其内部属性，block截获的是新结构体的地址，外部block_string重新赋值，也不是简单的赋值，内部转换成`a.__forwarding.a`的代码，可以理解为通过新的结构体改变指针所指向的值，通过__block所形成的新结构体作为载体，之后所有的操作都是操作同一个对象，理解为指针操作，因此，形成一致，打印bbbccc</div><div class="line"></div><div class="line">    __block NSString *name = [NSString stringWithFormat:@&quot;%@&quot;,@&quot;mikejing&quot;];</div><div class="line"></div><div class="line">    NSString *(^addaa)(void) = ^&#123;</div><div class="line">        return [name stringByAppendingString:@&quot;cjj&quot;];</div><div class="line">    &#125;;</div><div class="line">    name = @&quot;MKJ&quot;;</div><div class="line">    NSLog(@&quot;\\n %@&quot;,addaa()); // \n MKJcj</div><div class="line">    // 同上</div><div class="line"></div><div class="line">    char *ch = &quot;b =\n&quot;;</div><div class="line">    void (^block)(void) = ^&#123;</div><div class="line">        printf(&quot;%s&quot;,ch); // b =</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    ch = &quot;value had changed.b =\n&quot;;</div><div class="line">    block();</div><div class="line">    // 无法修改，上面已经介绍</div></pre></td></tr></table></figure>
<p>下边这段代码如何使其打印20？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">int i = 10;</div><div class="line">    </div><div class="line">void (^block)() = ^ &#123;</div><div class="line">    NSLog(@&quot;%d&quot;, i);</div><div class="line">&#125;;</div><div class="line">    </div><div class="line">i = 20;</div><div class="line">    </div><div class="line">block();</div></pre></td></tr></table></figure>
<p>__block或者static</p>
<p>这段代码打印什么？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">int i = 10;</div><div class="line">    </div><div class="line">void (^block)() = ^ &#123;</div><div class="line">    i = 30;</div><div class="line">    NSLog(@&quot;%d&quot;, i);</div><div class="line">&#125;;</div><div class="line">    </div><div class="line">i = 20;</div><div class="line">    </div><div class="line">block();</div></pre></td></tr></table></figure>
<p>啥都打印不了，直接报错了</p>
<p>但是改成下边这样就没有问题，或者用static</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">__block int i = 10;</div><div class="line">    </div><div class="line">    void (^block)() = ^ &#123;</div><div class="line">        i = 30;</div><div class="line">        NSLog(@&quot;+++++%d&quot;, i);</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    i = 20;</div><div class="line">    </div><div class="line">    block();</div></pre></td></tr></table></figure>
<p>这段代码有没有问题？答案是没有，这里是修改的内存中的内容，并没有修改内存地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (void)blockDemo3</div><div class="line">&#123;</div><div class="line">    NSMutableString *strM= [NSMutableString stringWithString:@&quot;hello&quot;];</div><div class="line"></div><div class="line">    void (^block)() = ^ &#123;</div><div class="line">        [strM appendString:@&quot;hehe&quot;];</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    block();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样写有没有问题？这样写直接就报错了，没有__block修饰不允许修改指针地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> NSMutableString *strM= [NSMutableString stringWithString:@&quot;hello&quot;];</div><div class="line">    </div><div class="line">void (^block)() = ^ &#123;</div><div class="line">    strM = @&quot;hehe&quot;;</div><div class="line">&#125;;</div><div class="line">    </div><div class="line">block();</div></pre></td></tr></table></figure></p>
<h3 id="block内存管理"><a href="#block内存管理" class="headerlink" title="block内存管理"></a>block内存管理</h3><p><img src="/02/2015/深入理解block/../../../images/2018-07-029.26.24.png" alt=""></p>
<p>&gt;</p>
<blockquote>
<ul>
<li>如果block实现中没有访问任何”外部”变量(包括局部和全局), 该block为GlobalBlock</li>
<li>如果block实现中访问了任何”外部”变量(包括局部和全局), 该block为StackBlock</li>
<li>对StackBlock进行拷贝(copy/Block_copy), 该block为MallocBlock</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">__block NSMutableString *strM= [NSMutableString stringWithString:@&quot;hello&quot;];</div><div class="line">    </div><div class="line">void (^block)() = ^&#123;</div><div class="line">    strM = @&quot;hehe&quot;;</div><div class="line">&#125;;</div><div class="line">    </div><div class="line">block();</div><div class="line">    </div><div class="line">NSLog(@&quot;%@&quot;,^&#123;&#125;);</div><div class="line">NSLog(@&quot;%@&quot;, ^&#123;strM = @&quot;123&quot;;&#125;);</div><div class="line">NSLog(@&quot;%@&quot;,block);</div></pre></td></tr></table></figure>
<p>2018-07-03 10:02:20.760734+0800 xiancheng[77686:36486980] <__nsglobalblock__: 0x104050138=""><br>2018-07-03 10:02:20.763747+0800 xiancheng[77686:36486980] <__nsstackblock__: 0x7fff5bbb0b88=""><br>2018-07-03 10:02:20.764553+0800 xiancheng[77686:36486980] <__nsmallocblock__: 0x608000058e70=""></__nsmallocblock__:></__nsstackblock__:></__nsglobalblock__:></p>
<p><img src="/02/2015/深入理解block/../../../images/2018-07-029.26.30.png" alt=""></p>
<p><img src="/02/2015/深入理解block/../../../images/2018-07-029.26.47.png" alt=""></p>
<p><img src="/02/2015/深入理解block/../../../images/2018-07-029.26.58.png" alt=""><br>这个是会有内存泄漏的，栈上的会释放，但是堆上的不会</p>
<p><img src="/02/2015/深入理解block/../../../images/2018-07-029.27.17.png" alt=""></p>
<p><img src="/02/2015/深入理解block/../../../images/2018-07-029.27.28.png" alt=""></p>
<h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><h4 id="weakSelf-StrongSelf-的使用"><a href="#weakSelf-StrongSelf-的使用" class="headerlink" title="weakSelf StrongSelf 的使用"></a>weakSelf StrongSelf 的使用</h4><p>解决循环应用的问题一定要分析清楚哪里出现了循环引用，只需要把其中一环加上weakSelf这类似的宏，就可以解决循环引用。_weak的实现原理，在原对象释放之后，_weak对象就会变成null，防止野指针。所以就输出了null了。</p>
<p>那么我们怎么才能在weakSelf之后，block里面还能继续使用weakSelf之后的对象呢？</p>
<p>究其根本原因就是weakSelf之后，无法控制什么时候会被释放，为了保证在block内不会被释放，需要添加_strong。</p>
<p>在block里面使用的_strong修饰的weakSelf是为了在函数生命周期中防止self提前释放。strongSelf是一个自动变量当block执行完毕就会释放自动变量strongSelf不会对self进行一直进行强引用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> __weak typeof(student) weakSelf = student;</div><div class="line"></div><div class="line">student.study = ^&#123;</div><div class="line">    __strong typeof(student) strongSelf = weakSelf;</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;my name is = %@&quot;,strongSelf.name);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里有一个问题，看上去最终也是通过__storng来抢引用self的，那么为什么不会引起循环引用呢？其实这里也是会造成循环引用，而且必须是一个循环引用才可以，但是这个循环引用不是永久的，是在一个时间段内，这个时间段就是在block执行的时候。</p>
<blockquote>
<p>要有一个概念，block内的代码只有在执行的时候才会生效，但是变量捕获却是在编译的时候就会生效，所以我们捕获了一个weakself，但是在运行的时候对这个self做了一次retain，这就意味着在block运行的时候self绝对不会释放，但是block一旦执行完毕，里边的变量就会被释放，这个时候self就跟我没有关系了，该释放就释放。</p>
<p>如果我们直接引用self，那么这个是永久的，不管你block是否执行，这个引用都是永久存在的</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[UIView animateWithDuration:0.2 animations:^&#123;</div><div class="line">    self.alpha = 1;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>这个情况直接使用self是没有问题的，因为引用block的是animation内的某个对象，当动画执行结束之后block就会被释放，self也会被释放。    </p>
<h4 id="如果只使用成员变量呢？"><a href="#如果只使用成员变量呢？" class="headerlink" title="如果只使用成员变量呢？"></a>如果只使用成员变量呢？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">_block = ^NSString *(NSString *num) &#123;</div><div class="line">        return [NSString stringWithFormat:@&quot;%@&quot;, _arr[0]];</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">static NSString * __ViewController__viewDidLoad_block_func_0(struct __ViewController__viewDidLoad_block_impl_0 *__cself, NSString *num) &#123;</div><div class="line">  ViewController *self = __cself-&gt;self; // bound by copy</div><div class="line"></div><div class="line">        return ((NSString *(*)(id, SEL, NSString *, ...))(void *)objc_msgSend)((id)objc_getClass(&quot;NSString&quot;), sel_registerName(&quot;stringWithFormat:&quot;), (NSString *)&amp;__NSConstantStringImpl__var_folders_h6_b8d2vwjj7hz3kdq9kpxts5j00000gq_T_ViewController_ed107b_mi_1, </div><div class="line">        ((id (*)(id, SEL, NSUInteger))(void *)objc_msgSend)((id)(*(NSMutableArray **)((char *)self + OBJC_IVAR_$_ViewController$_arr)), sel_registerName(&quot;objectAtIndexedSubscript:&quot;), (NSUInteger)0));</div><div class="line"></div><div class="line">&#125;</div><div class="line">//这种情况是捕获self的</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"> _block = ^NSString *(NSString *num) &#123;</div><div class="line">        return [NSString stringWithFormat:@&quot;%@&quot;, self.arr[0]];</div><div class="line">    &#125;;</div><div class="line">   </div><div class="line">    static NSString * __ViewController__viewDidLoad_block_func_0(struct __ViewController__viewDidLoad_block_impl_0 *__cself, NSString *num) &#123;</div><div class="line">  ViewController *self = __cself-&gt;self; // bound by copy</div><div class="line"></div><div class="line">        return ((NSString *(*)(id, SEL, NSString *, ...))(void *)objc_msgSend)((id)objc_getClass(&quot;NSString&quot;), sel_registerName(&quot;stringWithFormat:&quot;), (NSString *)&amp;__NSConstantStringImpl__var_folders_h6_b8d2vwjj7hz3kdq9kpxts5j00000gq_T_ViewController_5b51e6_mi_1, </div><div class="line">        ((id (*)(id, SEL, NSUInteger))(void *)objc_msgSend)((id)((NSMutableArray *(*)(id, SEL))(void *)objc_msgSend)((id)self, sel_registerName(&quot;arr&quot;)), sel_registerName(&quot;objectAtIndexedSubscript:&quot;), (NSUInteger)0));</div><div class="line">&#125;</div><div class="line">//这种情况更是捕获self</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">_block = ^NSString *(NSString *num) &#123;</div><div class="line">        return @&quot;afdasf&quot;;</div><div class="line">    &#125;;</div><div class="line">    static NSString * __ViewController__viewDidLoad_block_func_0(struct __ViewController__viewDidLoad_block_impl_0 *__cself, NSString *num) &#123;</div><div class="line"></div><div class="line">        return (NSString *)&amp;__NSConstantStringImpl__var_folders_h6_b8d2vwjj7hz3kdq9kpxts5j00000gq_T_ViewController_599c3a_mi_1;</div><div class="line">    &#125;</div><div class="line">//啥都不捕获</div><div class="line"></div><div class="line">_arr = [NSMutableArray arrayWithObject:@&quot;123&quot;];</div><div class="line">    </div><div class="line">    </div><div class="line">    __unsafe_unretained NSArray * weakArr = _arr;</div><div class="line">    _block = ^NSString *(NSString *num) &#123;</div><div class="line">        return [NSString stringWithFormat:@&quot;%@&quot;, weakArr[0]];</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line"></div><div class="line">static NSString * __ViewController__viewDidLoad_block_func_0(struct __ViewController__viewDidLoad_block_impl_0 *__cself, NSString *num) &#123;</div><div class="line">  NSArray *weakArr = __cself-&gt;weakArr; // bound by copy</div><div class="line"></div><div class="line">        return ((NSString *(*)(id, SEL, NSString *, ...))(void *)objc_msgSend)((id)objc_getClass(&quot;NSString&quot;), sel_registerName(&quot;stringWithFormat:&quot;), (NSString *)&amp;__NSConstantStringImpl__var_folders_h6_b8d2vwjj7hz3kdq9kpxts5j00000gq_T_ViewController_cba29f_mi_1, ((id (*)(id, SEL, NSUInteger))(void *)objc_msgSend)((id)weakArr, sel_registerName(&quot;objectAtIndexedSubscript:&quot;), (NSUInteger)0));</div><div class="line">    &#125;    </div><div class="line">//只是捕获weak变量</div></pre></td></tr></table></figure>
<p>说明一下_arr实际上是self-&gt;_arr，也是需要依赖self才能访问的，即使在内部，属性和成员变量的访问都是需要依赖对象。再从runtime角度看一下，当我调用一个方法的时候，经过msg_send函数转发，这里的参数只有self，和SEL以及参数，没有self的成员变量，所以只能依靠self去获取，这样的话无论如何都要穿入self才行。</p>
<h4 id="block在MRC和ARC下的区别"><a href="#block在MRC和ARC下的区别" class="headerlink" title="__block在MRC和ARC下的区别"></a>__block在MRC和ARC下的区别</h4><p>使用弱引用打断block里面的retain cycle<br>MRC中<strong> _block 是不会引起retain；但在ARC中 _block 则会引起retain。ARC中应该使用 _weak </strong>或__unsafe_unretained弱引用</p>
<p>下边这种写法使block持有了blockSelf这个对象，这个强引用在，解决的办法是破环，使用完之后释放blockSelf，这个方案的弊端是，如果这个block不调用，那么这个环就一直存在。</p>
<p>我们经常会听说如何解决block的循环引用？一般都会说用<strong>weak和</strong>block，那么<strong>block实现解除循环引用的本质就是下边这段代码，使用完了之后可以将这个引用设置为nil，其他的做法就不可以，因为不用</strong>block修饰根本就不能更改指针指向。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">__block typeof(self) blockSelf = self;</div><div class="line">    </div><div class="line">_block = ^NSString *(NSString *num) &#123;</div><div class="line">    NSLog(@&quot;%@&quot;, blockSelf.arr[0]);</div><div class="line">//    blockSelf = nil;</div><div class="line">    return @&quot;123&quot;;</div><div class="line">&#125;;</div><div class="line">    </div><div class="line">=========================================</div><div class="line"></div><div class="line">static NSString * __ViewController__viewDidLoad_block_func_0(struct __ViewController__viewDidLoad_block_impl_0 *__cself, NSString *num) &#123;</div><div class="line">__Block_byref_blockSelf_0 *blockSelf = __cself-&gt;blockSelf; // bound by ref</div><div class="line"></div><div class="line">    NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_h6_b8d2vwjj7hz3kdq9kpxts5j00000gq_T_ViewController_614b65_mi_0, ((id (*)(id, SEL, NSUInteger))(void *)objc_msgSend)((id)((NSMutableArray *(*)(id, SEL))(void *)objc_msgSend)((id)(blockSelf-&gt;__forwarding-&gt;blockSelf), sel_registerName(&quot;arr&quot;)), sel_registerName(&quot;objectAtIndexedSubscript:&quot;), (NSUInteger)0));</div><div class="line">    return (NSString *)&amp;__NSConstantStringImpl__var_folders_h6_b8d2vwjj7hz3kdq9kpxts5j00000gq_T_ViewController_614b65_mi_1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/02/2015/深入理解block/../../../images/2018-07-033.03.09.png" alt=""></p>
<h3 id="block和代理如何选择使用"><a href="#block和代理如何选择使用" class="headerlink" title="block和代理如何选择使用"></a>block和代理如何选择使用</h3><p>delegate更轻量，但是写起来麻烦，block用起来写起来很简单，但是运行起来消耗大。</p>
<p>优先使用block。<br>如果回调的状态很多，多于三个使用代理。<br>如果回调的很频繁，次数很多，像UITableview，每次初始化、滑动、点击都会回调，使用代理。<br>又或者说， delegate 的回调更多的面向过程，而 block 则是面向结果的。如果你需要得到一条多步进程的通知，你应该使用 delegation，如果你需要一个最终的结果你应该使用delegate</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[runloop相关]]></title>
      <url>/2015/07/02/2015/runloop%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<h3 id="什么是runloop"><a href="#什么是runloop" class="headerlink" title="什么是runloop"></a>什么是runloop</h3><p>是通过内部维护事件循环来对事件/消息进行管理的一个对象。</p>
<p>没有消息处理的时候，是用户态到内核态，有消息需要处理的时候，是内核态到用户态。</p>
<p>状态的切换才是关键。</p>
<h3 id="数据结构解析"><a href="#数据结构解析" class="headerlink" title="数据结构解析"></a>数据结构解析</h3><p><img src="/02/2015/runloop相关/../../../images/2018-07-035.51.14.png" alt=""></p>
<p>说明：</p>
<p>与pthread是一对一的关系</p>
<p>models是一个集合NSMutableSet<cfrunloopmode*></cfrunloopmode*></p>
<p>commonModes也是一个集合，NSMutableSet<nsstring*></nsstring*></p>
<p><img src="/02/2015/runloop相关/../../../images/2018-07-036.05.38.png" alt=""></p>
<p>说明：</p>
<p>source0和source1是NSMutableSet类型，无序</p>
<p>observers和timers是NSMutableArray类型，有序</p>
<h4 id="runloopMode"><a href="#runloopMode" class="headerlink" title="runloopMode"></a>runloopMode</h4><p>当运行在mode1的情况下，无法接受mode2种的一些事件，比如在滑动的时候无法接受正常状态的事件。</p>
<h4 id="CommonMode"><a href="#CommonMode" class="headerlink" title="CommonMode"></a>CommonMode</h4><p>不是一种实际存在的mode，它是同步source/timer/observer到多个mode的一种技术方案</p>
<h3 id="从点击app图标开始发生了什么？"><a href="#从点击app图标开始发生了什么？" class="headerlink" title="从点击app图标开始发生了什么？"></a>从点击app图标开始发生了什么？</h3><h3 id="常驻线程"><a href="#常驻线程" class="headerlink" title="常驻线程"></a>常驻线程</h3><p><img src="/02/2015/runloop相关/../../../../../images/2018-07-039.31.30.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多线程技术]]></title>
      <url>/2015/07/01/2015/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%8A%80%E6%9C%AF/</url>
      <content type="html"><![CDATA[<h2 id="多线程相关概念理解"><a href="#多线程相关概念理解" class="headerlink" title="多线程相关概念理解"></a>多线程相关概念理解</h2><h4 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h4><p>并行可以在计算机的多个抽象层次上运用，这里仅讨论任务级并行（程序设计层面），不讨论指令级并行等。</p>
<p>并发指能够让多个任务在逻辑上同时执行的程序设计，而并行则是指在物理上真正的同时执行。并行是并发的子集，属于并发的一种实现方式。通过时间片轮转实现的多任务同时执行是通过调度算法实现逻辑上的同步执行，属于并发，他们不是真正物理上的同时执行，不属于并行。当通过多核 CPU 实现并发时，多任务是真正物理上的同时执行，才属于并行。</p>
<a id="more"></a>
<h4 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h4><p><img src="/01/2015/多线程技术/../../../images/1499394752139363.png" alt=""></p>
<p>下面分别阐述线程生命周期中的每一步</p>
<ul>
<li><p>新建：实例化线程对象</p>
</li>
<li><p>就绪：向线程对象发送start消息，线程对象被加入可调度线程池等待CPU调度。</p>
</li>
<li><p>运行：CPU 负责调度可调度线程池中线程的执行。线程执行完成之前，状态可能会在就绪和运行之间来回切换。就绪和运行之间的状态变化由CPU负责，程序员不能干预。</p>
</li>
<li><p>阻塞：当满足某个预定条件时，可以使用休眠或锁，阻塞线程执行。sleepForTimeInterval（休眠指定时长），sleepUntilDate（休眠到指定日期），@synchronized(self)：（互斥锁）。</p>
</li>
<li><p>死亡：正常死亡，线程执行完毕。非正常死亡，当满足某个条件后，在线程内部中止执行/在主线程中止线程对象</p>
</li>
<li><p>还有线程的exit和cancel</p>
<ul>
<li><p>[NSThread exit]：一旦强行终止线程，后续的所有代码都不会被执行。</p>
</li>
<li><p>[thread cancel]取消：并不会直接取消线程，只是给线程对象添加 isCancelled 标记。</p>
</li>
</ul>
</li>
</ul>
<h4 id="线程与队列的关系"><a href="#线程与队列的关系" class="headerlink" title="线程与队列的关系"></a>线程与队列的关系</h4><p>我们可以把队列理解成生产者，而线程是消费者。</p>
<p>我们是理解runloop来干活的逻辑，但是其实本质来讲真正干活的是线程，只不过没有runloop就干完活，没有新活了就被系统释放掉了，当然如果在线程池里边的线程处理完一个工作之后，有新的工作需要处理，那么它继续处理，不会被释放掉的。</p>
<h4 id="串行队列与并发队列"><a href="#串行队列与并发队列" class="headerlink" title="串行队列与并发队列"></a>串行队列与并发队列</h4><p>串行队列的任务是一个一个排着队执行的，前一个执行完之后再执行下一个，但是并发队列也是需要排着队执行的，但是不需要等着上一个执行完，下一个就可以接着执行。</p>
<p>那这个是怎么实现的呢？根据上边说线程才是真正干活的角色，所以我们就有了答案，串行队列绑定了一个线程，不一定是主线程，并发队列有开新线程的能力，如果发现线程池里边没有可用的线程，但是我又有一个任务，那我直接开一个新的线程来处理。</p>
<p>这样看的话，并发队列也是一个队列，而不是很多个队列，这个点容易理解错误。</p>
<h4 id="多线程的安全问题"><a href="#多线程的安全问题" class="headerlink" title="多线程的安全问题"></a>多线程的安全问题</h4><p>多个线程访问同一块资源进行读写，如果不加控制随意访问容易产生数据错乱从而引发数据安全问题。为了解决这一问题，就有了加锁的概念。加锁的原理就是当有一个线程正在访问资源进行写的时候，不允许其他线程再访问该资源，只有当该线程访问结束后，其他线程才能按顺序进行访问。对于读取数据，有些程序设计是允许多线程同时读的，有些不允许。UIKit中几乎所有控件都不是线程安全的，因此需要在主线程上更新UI。</p>
<p>解决多线程安全问题：</p>
<p>（1）互斥锁</p>
<p>// 注意：锁定1份代码只用1把锁，用多把锁是无效的<br>@synchronized(锁对象) { // 需要锁定的代码  }<br>使用互斥锁，在同一个时间，只允许一条线程执行锁中的代码。因为互斥锁的代价非常昂贵，所以锁定的代码范围应该尽可能小，只要锁住资源读写部分的代码即可。使用互斥锁也会影响并发的目的。</p>
<p>（2）使用NSLock对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">_lock = [[NSLock alloc] init];</div><div class="line">- (void)synchronizedMethod &#123;</div><div class="line">	[_lock lock];</div><div class="line">	//safe</div><div class="line">	[_lock unlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（3）atomic加锁</p>
<p>OC在定义属性时有nonatomic和atomic两种选择。</p>
<p>atomic：原子属性，为setter方法加锁（默认就是atomic）。</p>
<p>nonatomic：非原子属性，不会为setter方法加锁。</p>
<p>atomic加锁原理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@property (assign, atomic) int age;</div><div class="line"></div><div class="line">- (void)setAge:(int)age</div><div class="line">&#123; </div><div class="line"></div><div class="line">    @synchronized(self) &#123; </div><div class="line">       _age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>atomic：线程安全，需要消耗大量的资源</p>
<p>nonatomic：非线程安全，适合内存小的移动设备</p>
<p>iOS开发的建议:</p>
<p>（1）所有属性都声明为nonatomic</p>
<p>（2）尽量避免多线程抢夺同一块资源</p>
<p>（3）尽量将加锁、资源抢夺的业务逻辑交给服务器端处理，减小移动客户端的压力    </p>
<h2 id="多线程实现手段"><a href="#多线程实现手段" class="headerlink" title="多线程实现手段"></a>多线程实现手段</h2><p><img src="/01/2015/多线程技术/../../../images/1499394732413995.png" alt=""></p>
<h3 id="NSThread"><a href="#NSThread" class="headerlink" title="NSThread"></a>NSThread</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>NSThread有三种创建方式：</p>
<ul>
<li><p>init方式</p>
</li>
<li><p>detachNewThreadSelector创建好之后自动启动</p>
</li>
<li><p>performSelectorInBackground创建好之后也是直接启动</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/** 方法一，需要start */</div><div class="line">NSThread *thread1 = [[NSThread alloc] initWithTarget:self selector:@selector(doSomething1:) object:@&quot;NSThread1&quot;];</div><div class="line">// 线程加入线程池等待CPU调度，时间很快，几乎是立刻执行</div><div class="line">[thread1 start];</div><div class="line"> </div><div class="line">/** 方法二，创建好之后自动启动 */</div><div class="line">[NSThread detachNewThreadSelector:@selector(doSomething2:) toTarget:self withObject:@&quot;NSThread2&quot;];</div><div class="line"> </div><div class="line">/** 方法三，隐式创建，直接启动 */</div><div class="line">[self performSelectorInBackground:@selector(doSomething3:) withObject:@&quot;NSThread3&quot;];</div><div class="line"> </div><div class="line">- (void)doSomething1:(NSObject *)object &#123;</div><div class="line">    // 传递过来的参数</div><div class="line">    NSLog(@&quot;%@&quot;,object);</div><div class="line">    NSLog(@&quot;doSomething1：%@&quot;,[NSThread currentThread]);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">- (void)doSomething2:(NSObject *)object &#123;</div><div class="line">    NSLog(@&quot;%@&quot;,object);</div><div class="line">    NSLog(@&quot;doSomething2：%@&quot;,[NSThread currentThread]);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">- (void)doSomething3:(NSObject *)object &#123;</div><div class="line">    NSLog(@&quot;%@&quot;,object);</div><div class="line">    NSLog(@&quot;doSomething3：%@&quot;,[NSThread currentThread]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="NSThread的类方法"><a href="#NSThread的类方法" class="headerlink" title="NSThread的类方法"></a>NSThread的类方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">返回当前线程</div><div class="line"></div><div class="line">// 当前线程</div><div class="line">[NSThread currentThread];</div><div class="line">NSLog(@&quot;%@&quot;,[NSThread currentThread]);</div><div class="line"> </div><div class="line">// 如果number=1，则表示在主线程，否则是子线程</div><div class="line">打印结果：&#123;number = 1, name = main&#125;</div><div class="line"></div><div class="line">阻塞休眠</div><div class="line">//休眠多久</div><div class="line">[NSThread sleepForTimeInterval:2];</div><div class="line">//休眠到指定时间</div><div class="line">[NSThread sleepUntilDate:[NSDate date]];</div><div class="line">类方法补充</div><div class="line"></div><div class="line">//退出线程</div><div class="line">[NSThread exit];</div><div class="line">//判断当前线程是否为主线程</div><div class="line">[NSThread isMainThread];</div><div class="line">//判断当前线程是否是多线程</div><div class="line">[NSThread isMultiThreaded];</div><div class="line">//主线程的对象</div><div class="line">NSThread *mainThread = [NSThread mainThread];</div></pre></td></tr></table></figure>
<h4 id="NSThread的一些属性"><a href="#NSThread的一些属性" class="headerlink" title="NSThread的一些属性"></a>NSThread的一些属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//线程是否在执行</div><div class="line">thread.isExecuting;</div><div class="line">//线程是否被取消</div><div class="line">thread.isCancelled;</div><div class="line">//线程是否完成</div><div class="line">thread.isFinished;</div><div class="line">//是否是主线程</div><div class="line">thread.isMainThread;</div><div class="line">//线程的优先级，取值范围0.0到1.0，默认优先级0.5，1.0表示最高优先级，优先级高，CPU调度的频率高</div><div class="line">thread.threadPriority;</div></pre></td></tr></table></figure>
<h4 id="NSThread使用场景"><a href="#NSThread使用场景" class="headerlink" title="NSThread使用场景"></a>NSThread使用场景</h4><p>常驻线程的实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">1.设置成全局的，如果是线程对象是局部的就会死掉</div><div class="line">@property (nonatomic,strong) NSThread *thread;</div><div class="line">2.初始化线程并启动</div><div class="line"></div><div class="line">self.thread = [[NSThread alloc]initWithTarget:self selector:@selector(run) object:nil];</div><div class="line">[self.thread start];</div><div class="line"></div><div class="line"></div><div class="line">3.启动RunLoop，子线程的RunLoop默认是停止的</div><div class="line"></div><div class="line">- (void)run&#123;</div><div class="line">    //只要往RunLoop中添加了  timer、source或者observer就会继续执行，一个Run Loop通常必须包含一个输入源或者定时器来监听事件，如果一个都没有，Run Loop启动后立即退出。</div><div class="line">    </div><div class="line">    @autoreleasepool &#123;</div><div class="line">    </div><div class="line">    //1、添加一个input source</div><div class="line">        [[NSRunLoop currentRunLoop] addPort:[NSPort port] forMode:NSDefaultRunLoopMode];</div><div class="line">    [[NSRunLoop currentRunLoop] run];</div><div class="line">    //2、添加一个定时器</div><div class="line">    NSTimer *timer = [NSTimer timerWithTimeInterval:2.0 target:self selector:@selector(test) userInfo:nil repeats:YES];</div><div class="line">    [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];</div><div class="line">    [[NSRunLoop currentRunLoop] run];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">这样thread这个线程就会一直存在，当需要使用此线程在处理一些事情的时候就这么调用</div><div class="line"></div><div class="line">4.利用常驻线程处理事情</div><div class="line"></div><div class="line">[self performSelector:@selector(action) onThread:self.thread withObject:nil waitUntilDone:NO ];</div></pre></td></tr></table></figure>
<p>看一下这个代码的问题:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        NSTimer * timer = [NSTimer timerWithTimeInterval:1.f repeats:YES block:^(NSTimer * _Nonnull timer) &#123;</div><div class="line">            static int count = 0;</div><div class="line">            [NSThread sleepForTimeInterval:1];</div><div class="line">            //休息一秒钟，模拟耗时操作</div><div class="line">            NSLog(@&quot;%s - %d&quot;,__func__,count++);</div><div class="line">        &#125;];</div><div class="line">        [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>根本啥都不会发生，因为这个子线程的runloop需要调用run方法才可以。</p>
<p><code>[[NSRunLoop currentRunLoop] run];</code>//子线程需要手动开启Runloop</p>
<h4 id="thread启动流程"><a href="#thread启动流程" class="headerlink" title="thread启动流程"></a>thread启动流程</h4><p><img src="/01/2015/多线程技术/../images/2018-07-034.50.21.png" alt=""></p>
<p>长驻子线程是在selector中进行，如上</p>
<h5 id="那么这里就有一个问题了，NSThread启动的时候是否需要手动创建释放池？"><a href="#那么这里就有一个问题了，NSThread启动的时候是否需要手动创建释放池？" class="headerlink" title="那么这里就有一个问题了，NSThread启动的时候是否需要手动创建释放池？"></a>那么这里就有一个问题了，NSThread启动的时候是否需要手动创建释放池？</h5><p>答案是不需要，验证，当pthread_exit退出时，触发了_pthread_tsd_cleanup，触发AutoreleasePoolPage的tls_dealloc(void*)，然后回收autorelease对象。</p>
<p>所以我们可以得出来一个结论，线程创建的时候会自动创建一个自动释放池，当线程退出的时候清空这个池子，释放内存。</p>
<h3 id="GCD的理解与使用"><a href="#GCD的理解与使用" class="headerlink" title="GCD的理解与使用"></a>GCD的理解与使用</h3><p>GCD是对pthread的封装，目的在于替代NSThread的，有点在于自动管理线程的生命周期(创建，调度，销毁)，我们只需要告诉GCD想要执行什么任务，不需要写任何线程管理代码。</p>
<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ol>
<li><p>并发执行的本质是多线程，不是多队列，一个并发队列搞定</p>
</li>
<li><p>开不开线程，取决于执行任务的队列，如果串行队列，有线程对应该队列就不开了，并发队列如果在线程池取不到队列就会新开线程。</p>
</li>
<li><p>开几条线程，这个如果是串行队列有一个线程就行了，如果是并发队列，就要看具体情况了，这个是由系统来决定的。</p>
</li>
<li><p>主队列：  专门用来在主线程上调度任务的”队列”，主队列不能在其他线程中调度任务！</p>
</li>
<li><p>如果主线程上当前正在有执行的任务，主队列暂时不会调度任务的执行！主队列同步任务，会造成死锁。原因是循环等待</p>
</li>
<li><p>同步任务可以队列调度多个异步任务前，指定一个同步任务，让所有的异步任务，等待同步任务执行完成，这是依赖关系。</p>
</li>
<li><p>全局队列：并发，能够调度多个线程，执行效率高，但是相对费电。 串行队列效率较低，省电省流量，或者是任务之间需要依赖也可以使用串行队列。</p>
</li>
<li><p>也可以通过判断当前用户的网络环境来决定开的线程数。WIFI下6条，3G/4G下2～3条。</p>
</li>
</ol>
<h4 id="队列的选择"><a href="#队列的选择" class="headerlink" title="队列的选择"></a>队列的选择</h4><p>选择队列当然是要先了解队列的特点：<br>串行队列：对执行效率要求不高，对执行顺序要求高，性能消耗小<br>并发队列：对执行效率要求高，对执行顺序要求不高，性能消耗大</p>
<h4 id="队列的创建方法"><a href="#队列的创建方法" class="headerlink" title="队列的创建方法"></a>队列的创建方法</h4><p>使用<code>dispatch_queue_create</code>来创建队列对象，传入两个参数，第一个参数表示队列的唯一标识符，可为空。第二个参数用来表示串行队列<code>（DISPATCH_QUEUE_SERIA）</code>或并发队列<code>（DISPATCH_QUEUE_CONCURRENT）</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 串行队列</div><div class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;test&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line">// 串行队列</div><div class="line">dispatch_queue_t myQueueS = dispatch_queue_create(&quot;com.kugou.gcd.myQueue&quot;, NULL);</div><div class="line">// 并发队列</div><div class="line">dispatch_queue_t queue1 = dispatch_queue_create(&quot;test&quot;, DISPATCH_QUEUE_CONCURRENT);</div></pre></td></tr></table></figure>
<blockquote>
<p>第一个参数为名字，一定要设置这个参数，因为发生崩溃的时候，这个将是一个很重要的指引，这个名字会出现在崩溃信息中，第二个参数如果要创建serial queue就设置为NULL，代表空的c指针，如果是另外一种就设置为DISPATCH_QUEUE_CONCURRENT</p>
</blockquote>
<p>另外要注意的是，虽然我们已经步入了ARC时代，但是Dispatch Queue必须由开发人员来释放，接着上班的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dispatch_async(myQueueS, ^&#123;NSLog(@&quot;123&quot;)&#125;);</div><div class="line">dispatch_release(myQueueS);</div></pre></td></tr></table></figure>
<p>在调用async之后立刻释放queue，这样并不会有问题，因为此时block已经对齐有一个引用了。当block结束之后就会释放这个queue。<br>凡是由create创建的对象都要记得手动释放。</p>
<h5 id="GCD的队列还有另外两种："><a href="#GCD的队列还有另外两种：" class="headerlink" title="GCD的队列还有另外两种："></a>GCD的队列还有另外两种：</h5><p>主队列：主队列负责在主线程上调度任务，如果在主线程上已经有任务正在执行，主队列会等到主线程空闲后再调度任务。通常是返回主线程更新UI的时候使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dispatch_get_main_queue()</div><div class="line"></div><div class="line">  dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">      // 耗时操作放在这里</div><div class="line">3</div><div class="line">      dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">          // 回到主线程进行UI操作</div><div class="line">3</div><div class="line">      &#125;);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>全局并发队列：全局并发队列是就是一个并发队列，是为了让我们更方便的使用多线程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">dispatch_get_global_queue(0, 0)</div><div class="line"></div><div class="line">//全局并发队列</div><div class="line">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">//全局并发队列的优先级</div><div class="line">#define DISPATCH_QUEUE_PRIORITY_HIGH 2 // 高优先级</div><div class="line">#define DISPATCH_QUEUE_PRIORITY_DEFAULT 0 // 默认（中）优先级</div><div class="line">#define DISPATCH_QUEUE_PRIORITY_LOW (-2) // 低优先级</div><div class="line">#define DISPATCH_QUEUE_PRIORITY_BACKGROUND INT16_MIN // 后台优先级</div><div class="line">//iOS8开始使用服务质量，现在获取全局并发队列时，可以直接传0</div><div class="line">dispatch_get_global_queue(0, 0);</div></pre></td></tr></table></figure>
<p>我们通过<code>dispatch_get_global_queue</code>来获取一个queue，那么问题来了，你获取一个什么样的queue呢？一个有几个全局的queue呢？从下边的参数来看，一共有四种，具体来讲有四个，每种一个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#define DISPATCH_QUEUE_PRIORITY_HIGH 2</div><div class="line">#define DISPATCH_QUEUE_PRIORITY_DEFAULT 0</div><div class="line">#define DISPATCH_QUEUE_PRIORITY_LOW (-2)</div><div class="line">#define DISPATCH_QUEUE_PRIORITY_BACKGROUND INT16_MIN</div></pre></td></tr></table></figure>
<p>在并行的队列也就是<code>dispatch_get_global_queue</code>，一共4个可用，当<code>dispatch_sync</code>调用一次，会占用阻塞一个，直到用完，<code>dispatch_get_global_queue</code>只能添加的时候安排优先级，不能去操作里面的调度</p>
<h4 id="任务提交方式dispatch-sync-async"><a href="#任务提交方式dispatch-sync-async" class="headerlink" title="任务提交方式dispatch_sync/async"></a>任务提交方式<code>dispatch_sync/async</code></h4><p>我们来看看这两个函数到底该怎么理解。</p>
<p>disptach_async是异步扔一个block到queue中，即扔完我就不管了，继续执行我的下一行代码。实际上当下一行代码执行时，这个block还未执行，只是入了队列queue，queue会排队来执行这个block。</p>
<p>而disptach_sync则是同步扔一个block到queue中，即扔了我就等着，等到queue排队把这个block执行完了之后，才继续执行下一行代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dispatch_sync(seriqueue, ^&#123;</div><div class="line">	[self test];</div><div class="line">&#125;);</div><div class="line">    </div><div class="line">dispatch_async(seriqueue, ^&#123;</div><div class="line">	[self test];</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="dispatch-sync使用场景"><a href="#dispatch-sync使用场景" class="headerlink" title="dispatch_sync使用场景"></a>dispatch_sync使用场景</h5><p>主要用于代码上下文对时序有强要求的场景。简单点说，就是下一行代码的执行，依赖于上一行代码的结果。</p>
<p>例如说，我们需要在子线程中读取一个image对象，使用接口[UIImage imageNamed:]，但imageNamed:实际上在iOS9以后才是线程安全的，iOS9之前都需要在主线程获取。所以，我们需要从子线程切换到主线程获取image，然后再切回子线程拿到这个image。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">__block UIImage *image;</div><div class="line">if (![NSThread isMainThread]) &#123;</div><div class="line">    dispatch_sync(dispatch_get_main_queue(), ^&#123;</div><div class="line">        image = [UIImage imageNamed:@&quot;ceshi&quot;];</div><div class="line">    &#125;);</div><div class="line">    attachment.image = image;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里要说明一点，切换到主线程，使用sync和async其实都可以，区别在于是否会堵塞，在这个场景里，子线程需要等待主线程这个任务完成，所以选择用sync，但是如果是回到主线程刷新一个UI，下边的任务不依赖上边的任务，这个时候我会选择async。</p>
<p>再比如，并发队列中，利用同步任务，能够做到任务依赖关系，第一个任务（登录）是同步任务，这个任务不执行完，队列就不会调度后面的任务（支付、下载）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t q = dispatch_queue_create(&quot;test&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line"></div><div class="line">//1.用户登录 开启了同步任务，相当于用了一把锁，所有的主线程都执行完后，才会执行队列里的子线程任务</div><div class="line"></div><div class="line">dispatch_sync(q, ^&#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;用户登录：%@&quot;, [NSThread currentThread]);</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">//2.用户支付</div><div class="line"></div><div class="line">dispatch_async(q, ^&#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;用户支付：%@&quot;, [NSThread currentThread]);</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">//3.用户下载</div><div class="line"></div><div class="line">dispatch_async(q, ^&#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;用户下载：%@&quot;, [NSThread currentThread]);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="栅栏的使用dispatch-barrier-async"><a href="#栅栏的使用dispatch-barrier-async" class="headerlink" title="栅栏的使用dispatch_barrier_async"></a>栅栏的使用<code>dispatch_barrier_async</code></h4><p>当任务需要异步进行，但是这些任务需要分成两组来执行，第一组完成之后才能进行第二组的操作。这时候就用了到GCD的栅栏方法dispatch_barrier_async。</p>
<p><a href="https://blog.csdn.net/u013046795/article/details/47057585" target="_blank" rel="external">sync与async区别</a></p>
<blockquote>
<p>dispatch_barrier_sync和dispatch_barrier_async的共同点：<br>1、都会等待在它前面插入队列的任务（1、2、3）先执行完<br>2、都会等待他们自己的任务（0）执行完再执行后面的任务（4、5、6）</p>
<p>dispatch_barrier_sync和dispatch_barrier_async的不共同点：<br>在将任务插入到queue的时候，dispatch_barrier_sync需要等待自己的任务（0）结束之后才会继续程序，然后插入被写在它后面的任务（4、5、6），然后执行后面的任务<br>而dispatch_barrier_async将自己的任务（0）插入到queue之后，不会等待自己的任务结束，它会继续把后面的任务（4、5、6）插入到queue</p>
<p>所以，dispatch_barrier_async的不等待（异步）特性体现在将任务插入队列的过程，它的等待特性体现在任务真正执行的过程。</p>
</blockquote>
<p>如果现在我们是10个读取的操作，然后并发执行并没有问题，但是如果有一个写入的操作掺杂在其中，这个时候就有点问题了，读写同时进行，就会出问题。</p>
<p>该函数与Concurrent Dispatch Queue同时使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t queueC = dispatch_queue_create(&quot;com.kugou.gcd.myQueue&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">dispatch_async(queue, blk0_reading);</div><div class="line">dispatch_async(queue, blk1_reading);</div><div class="line">dispatch_async(queue, blk2_reading);</div><div class="line">dispatch_barrier_async(queue, blk3_writing);</div><div class="line">dispatch_async(queue, blk4_reading);</div><div class="line">dispatch_async(queue, blk5_reading);</div><div class="line">dispatch_async(queue, blk6_reading);</div></pre></td></tr></table></figure></p>
<p>这样写系统会等0，1，2并发执行完，执行blk3，等blk3执行完再并发执行4，5，6</p>
<p>再比如多读单写的实现。</p>
<h4 id="队列组-调度组dispatch-group-async"><a href="#队列组-调度组dispatch-group-async" class="headerlink" title="队列组/调度组dispatch_group_async"></a>队列组/调度组<code>dispatch_group_async</code></h4><p>异步执行几个耗时操作，当这几个操作都完成之后再回到主线程进行操作，就可以用到队列组了。</p>
<p>队列组有下面几个特点：</p>
<ul>
<li><p>所有的任务会并发的执行(不按序)。</p>
</li>
<li><p>所有的异步函数都添加到队列中，然后再纳入队列组的监听范围。</p>
</li>
<li><p>使用dispatch_group_notify函数，来监听上面的任务是否完成，如果完成, 就会调用这个方法。</p>
</li>
</ul>
<p>下载很多图片，当都下载完成之后再进行下一步操作。</p>
<p>很多情况下我们都需要做结束操作，这个操作肯定是在最后的，如果是serial queue肯定没有问题，把代码放在最后就好了，可是concurrent queue怎么办呢？这个时候我们可以考虑dispatch_grounp。</p>
<h5 id="场景1"><a href="#场景1" class="headerlink" title="场景1:"></a>场景1:</h5><p>现在有4个任务，任务1、任务2、任务3、任务4. 任务3必须在任务2之后，任务4必须在前3个任务都执行完成后，才能执行，并且需要在主线程更新UI。</p>
<p>思路分析：</p>
<p>任务3必须在任务2之后，所以这两个必须串行执行，同时，任务2和3整体可以和任务1并行执行，最后，任务4只能等待前3个任务全部执行完成，才能执行。这里就可以用group快速实现场景需求。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">-(void)disGroup&#123;</div><div class="line">    dispatch_queue_t globalQuene = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">    dispatch_queue_t selfQuene = dispatch_queue_create(&quot;myQuene&quot;, 0);</div><div class="line">    dispatch_group_t group = dispatch_group_create();</div><div class="line">    dispatch_group_async(group, globalQuene, ^&#123;</div><div class="line">        NSLog(@&quot;run task 1&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_async(group, selfQuene, ^&#123;</div><div class="line">        NSLog(@&quot;run task 2&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_async(group, selfQuene, ^&#123;</div><div class="line">        NSLog(@&quot;run task 3&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;run task 4&quot;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="场景2-dispatch-group-enter的使用"><a href="#场景2-dispatch-group-enter的使用" class="headerlink" title="场景2:dispatch_group_enter的使用"></a>场景2:<code>dispatch_group_enter</code>的使用</h5><p>某界面存在多个请求，希望所有请求均结束才进行某操作，注意这里的一个不同点，如果只是几个block执行完毕就可以执行一个统一的block，那么用group的notify就可以了，但是这里不但要block执行完，还要监听block里边的一个异步的回调是不是完成，这样直接用group的notify就不好使用。</p>
<p><a href="https://www.jianshu.com/p/657e994aeee2" target="_blank" rel="external">一个页面同时多个请求的写法</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">dispatch_group_t group = dispatch_group_create();</div><div class="line">dispatch_group_enter(group);</div><div class="line">dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line">    //请求1</div><div class="line">    [网络请求:&#123;</div><div class="line">    成功：dispatch_group_leave(group);</div><div class="line">    失败：dispatch_group_leave(group);</div><div class="line">&#125;];</div><div class="line">&#125;);</div><div class="line">dispatch_group_enter(group);</div><div class="line">dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line">    //请求2</div><div class="line">    [网络请求:&#123;</div><div class="line">    成功：dispatch_group_leave;</div><div class="line">    失败：dispatch_group_leave;</div><div class="line">&#125;];</div><div class="line">&#125;);</div><div class="line">dispatch_group_enter(group);</div><div class="line">dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line">    //请求3</div><div class="line">    [网络请求:&#123;</div><div class="line">    成功：dispatch_group_leave(group);</div><div class="line">    失败：dispatch_group_leave(group);</div><div class="line">&#125;];</div><div class="line">    &#125;);</div><div class="line">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</div><div class="line">    //界面刷新</div><div class="line">    NSLog(@&quot;任务均完成，刷新界面&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里要用一个dispatch_group_enter，因为我们并不知道网络什么时候回来，如果没有这个group_entre方法，那么网络发送出去，这个block就执行结束了，就回去刷新UI，但是实际情况是网络并没有返回。</p>
<p>思考一个问题如果这里<code>dispatch_group_notify</code>，换成<code>dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</code>会是什么效果呢？</p>
<p>不同点在于dispatch_group_wait会阻塞线程，而dispatch_group_notify会让线程继续往下走，等group完成之后再回调我的这个block。</p>
<h4 id="一次性执行"><a href="#一次性执行" class="headerlink" title="一次性执行"></a>一次性执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 使用dispatch_once函数能保证某段代码在程序运行过程中只被执行1次</div><div class="line">static dispatch_once_t onceToken;</div><div class="line">dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">    // 只执行1次的代码(这里面默认是线程安全的)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="dispatch-set-target-queue"><a href="#dispatch-set-target-queue" class="headerlink" title="dispatch_set_target_queue"></a>dispatch_set_target_queue</h4><p>dispatch_queue_create函数生成的Dispatch Queue不管是Serial Dispatch Queue还是Concurrent Dispatch Queue，多使用与默认优先级Global Dispatch Queue相同执行优先级的线程，变更执行优先级使用dispatch_set_target_queue函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t mySerialQueue = dispatch_queue_create(&quot;com.kugou.mySerQueue&quot;, NULL);</div><div class="line">dispatch_queue_t myGlobalQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND,0);</div><div class="line">dispatch_set_target_queue(mySerialQueue, myGlobalQueue);</div></pre></td></tr></table></figure></p>
<p>指定第一个参数与第二个参数优先级相同</p>
<h4 id="dispatch-after"><a href="#dispatch-after" class="headerlink" title="dispatch_after"></a>dispatch_after</h4><p>用于延时执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dispatch_time_t time = dispatch_time(DISPATCH_TIME_NOW,3ULL * NSEC_PER_SEC);</div><div class="line">dispatch_after(time, dispatch_get_main_queue(),^&#123;</div><div class="line"> NSLog(@&quot;123&quot;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>注意，dispatch_after函数并不是在指定时间后执行，而只是在指定时间追加处理到dispatch_queue，此源码在3秒后用dispatch_async函数追加block到main dispatch queue相同。在严格时间要求下这个函数的使用会出问题。</p>
<h4 id="dispatch-apply"><a href="#dispatch-apply" class="headerlink" title="dispatch_apply"></a>dispatch_apply</h4><h4 id="dispatch-semaphore-t"><a href="#dispatch-semaphore-t" class="headerlink" title="dispatch_semaphore_t"></a><code>dispatch_semaphore_t</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dispatch_semaphore_t t = dispatch_semaphore_create(1); //创建</div><div class="line">dispatch_semaphore_wait(t, DISPATCH_TIME_FOREVER); //等待哪个，永远</div><div class="line">dispatch_semaphore_signal(t);</div></pre></td></tr></table></figure>
<p><img src="/01/2015/多线程技术/../../../images/2018-07-035.07.23.png" alt=""></p>
<p><img src="/01/2015/多线程技术/../../../images/2018-07-035.08.09.png" alt=""></p>
<h5 id="为线程加锁"><a href="#为线程加锁" class="headerlink" title="为线程加锁"></a>为线程加锁</h5><p>信号量：就是一种可用来控制访问资源的数量的标识，设定了一个信号量，在线程访问之前，加上信号量的处理，则可告知系统按照我们指定的信号量数量来执行多个线程。</p>
<p>其实，这有点类似锁机制了，只不过信号量都是系统帮助我们处理了，我们只需要在执行线程之前，设定一个信号量值，并且在使用时，加上信号量处理方法就行了。</p>
<p>理解成停车位，dispatch_semaphore_t个数，dispatch_semaphore_wait减少一个可用，dispatch_semaphore_signal增加一个可用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">-(void)dispatchSignal&#123;</div><div class="line">    //crate的value表示，最多几个资源可访问</div><div class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(2);  //同时只能有两个线程去处理 </div><div class="line">    dispatch_queue_t quene = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">     </div><div class="line">    //任务1</div><div class="line">    dispatch_async(quene, ^&#123;</div><div class="line">        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">        NSLog(@&quot;run task 1&quot;);</div><div class="line">        sleep(1);</div><div class="line">        NSLog(@&quot;complete task 1&quot;);</div><div class="line">        dispatch_semaphore_signal(semaphore);       </div><div class="line">    &#125;);&lt;br&gt;</div><div class="line">    //任务2</div><div class="line">    dispatch_async(quene, ^&#123;</div><div class="line">        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">        NSLog(@&quot;run task 2&quot;);</div><div class="line">        sleep(1);</div><div class="line">        NSLog(@&quot;complete task 2&quot;);</div><div class="line">        dispatch_semaphore_signal(semaphore);       </div><div class="line">    &#125;);&lt;br&gt;</div><div class="line">    //任务3</div><div class="line">    dispatch_async(quene, ^&#123;</div><div class="line">        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">        NSLog(@&quot;run task 3&quot;);</div><div class="line">        sleep(1);</div><div class="line">        NSLog(@&quot;complete task 3&quot;);</div><div class="line">        dispatch_semaphore_signal(semaphore);       </div><div class="line">    &#125;);   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="异步线程进行同步"><a href="#异步线程进行同步" class="headerlink" title="异步线程进行同步"></a>异步线程进行同步</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">   dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);</div><div class="line"></div><div class="line">   __block int j = 0;</div><div class="line">   dispatch_async(queue, ^&#123;</div><div class="line">        j = 100;</div><div class="line">        dispatch_semaphore_signal(semaphore);</div><div class="line">   &#125;);</div><div class="line"></div><div class="line">   dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">   NSLog(@&quot;finish j = %zd&quot;, j);</div><div class="line">```   </div><div class="line"></div><div class="line">结果输出 j ＝ 100； </div><div class="line"></div><div class="line">如果注掉dispatch_semaphore_wait这一行，则 j ＝ 0； </div><div class="line">注释： block块异步执行添加到了全局并发队列里，所以程序在主线程会跳过block块（同时开辟子线程异步执行block块），执行块外的代码dispatch_semaphore_wait，因为semaphore信号量为0，且时间为DISPATCH_TIME_FOREVER，所以会阻塞当前线程（主线程），进而只执行子线程的block块，直到执行块内部的dispatch_semaphore_signal使得信号量+1。正在被阻塞的线程（主线程）会恢复继续执行。这样保证了线程之间的同步。</div><div class="line"></div><div class="line">##### 通讯录相关</div></pre></td></tr></table></figure>
<p>//这个变量用于记录授权是否成功，即用户是否允许我们访问通讯录<br>    int __block tip=0;</p>
<pre><code>//创建通讯簿的引用
ABAddressBookRef addressBooks=ABAddressBookCreateWithOptions(NULL, NULL);
//创建一个初始信号量为0的信号
dispatch_semaphore_t sema=dispatch_semaphore_create(0);
//申请访问权限
ABAddressBookRequestAccessWithCompletion(addressBooks, ^(bool granted, CFErrorRef error)        {
  //granted为YES是表示用户允许，否则为不允许
  if (!granted) {
      tip=1;
  }
  //发送一次信号
  dispatch_semaphore_signal(sema);
});
//等待信号触发
dispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);
CFRelease(addressBooks);
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">##### 使用 Dispatch Semaphore 控制并发线程数量</div></pre></td></tr></table></figure>
<p> void dispatch_async_limit(dispatch_queue_t queue,NSUInteger limitSemaphoreCount, dispatch_block_t block) {<br>//控制并发数的信号量<br>    static dispatch_semaphore_t limitSemaphore;</p>
<pre><code>//专门控制并发等待的线程
static dispatch_queue_t receiverQueue;

//使用 dispatch_once而非 lazy 模式，防止可能的多线程抢占问题
static dispatch_once_t onceToken;
dispatch_once(&amp;onceToken, ^{
    limitSemaphore = dispatch_semaphore_create(limitSemaphoreCount);
    receiverQueue = dispatch_queue_create(&quot;receiver&quot;, DISPATCH_QUEUE_SERIAL);
});

// 如不加 receiverQueue 放在主线程会阻塞主线程
dispatch_async(receiverQueue, ^{
    //可用信号量后才能继续，否则等待
    dispatch_semaphore_wait(limitSemaphore, DISPATCH_TIME_FOREVER);
    dispatch_async(queue, ^{
        !block ? : block();
        //在该工作线程执行完成后释放信号量
        dispatch_semaphore_signal(limitSemaphore);
    });
});
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 保持异步线程同步的方案</div><div class="line"></div><div class="line">- 1.dispatch_group </div><div class="line"></div><div class="line">- 2.dispatch_barrier </div><div class="line"></div><div class="line">- 3.dispatch_semaphore</div><div class="line"></div><div class="line"></div><div class="line">### NSOperation</div><div class="line"></div><div class="line">NSOperation是一个抽象类，可以使用系统提供的子类或者自己实现它的子类，来完成多线程。我们平时提到的NSOperation就默认包含了它的子类，具有以下特性：</div><div class="line"></div><div class="line">- 是OC语言中基于GCD(GCD详解)的面向对象的封装；</div><div class="line"></div><div class="line">- 使用起来比GCD更加简单(面向对象)；</div><div class="line"></div><div class="line">- 提供了一些用GCD不好实现的功能，比如可以取消在任务处理队列中的任务，添加任务间的依赖关系等等；</div><div class="line"></div><div class="line">- 苹果推荐使用,使用NSOperation不用关心线程以及线程的生命周期；</div><div class="line"></div><div class="line">- 可以指定操作之间的依赖关系，是将操作添加到队列。</div><div class="line"></div><div class="line">- 并发队列，异步执行(多个线程，无序执行)。</div><div class="line"></div><div class="line">#### 与GCD对比</div><div class="line"></div><div class="line">提供了GCD不好实现的：</div><div class="line"></div><div class="line">1.最大并发数</div><div class="line"></div><div class="line">2.暂停和继续</div><div class="line"></div><div class="line">3.取消所有任务</div><div class="line"></div><div class="line">4.依赖关系</div><div class="line"></div><div class="line">#### NSOperation子类</div><div class="line"></div><div class="line">NSOperation是一个抽象类，实现NSOperation子类的方式有3种：</div><div class="line"></div><div class="line">- NSInvocationOperation：较少使用；</div><div class="line">- NSBlockOperation：最常使用；</div><div class="line">- 自定义子类继承NSOperation，实现内部相应的方法：很少使用。</div><div class="line">我们要做的就是将以上3种操作的任意一种添加到NSOperationQueue来使用。</div></pre></td></tr></table></figure></p>
<p>//NSOperation能做啥</p>
<ul>
<li>添加任务依赖</li>
<li>任务执行状态控制</li>
<li>最大编发量控制</li>
</ul>
<p>// 任务状态控制有哪些？</p>
<ul>
<li>isReady</li>
<li>isExecting</li>
<li>isFinished</li>
<li>isCancelled</li>
</ul>
<p>// 怎么控制状态</p>
<ul>
<li>如果只重写了main，底层控制变更任务执行完成状态</li>
<li>如果重写了start，需要自行控制状态</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### NSInvocationOperation</div></pre></td></tr></table></figure>
<p>/// 点击屏幕调用，创建一个操作并执行</p>
<ul>
<li>(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event {<br>  NSInvocationOperation *operation = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(demo:) object:@”这是一个参数”];<br>  [operation start];<br>}<br>/// 将参数与当前线程打印</li>
<li>(void)demo:(NSString *)str {<br>  NSLog(@”%@–%@”,str,[NSThread currentThread]);<br>}</li>
</ul>
<p>/<strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong>执行结果<strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong>/<br>2015-09-17 15:11:54.030 NSOperationTest[2595:162235] 这是一个参数 <nsthread: 0x7fa759c173a0="">{number = 1, name = main}</nsthread:></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">默认情况下，调用了start方法后并不会开一条新线程去执行操作，而是在当前线程同步执行操作。</div><div class="line"></div><div class="line">只有将operation放到一个NSOperationQueue中，才会异步执行操作。</div></pre></td></tr></table></figure>
<p>/// 点击屏幕调用，创建一个操作并执行</p>
<ul>
<li>(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event {<br>  [self invocationTest];<br>}<br>/// 将操作添加到队列</li>
<li>(void)invocationTest {<br>  // 创建操作队列<br>  NSOperationQueue <em>operationQueue = [[NSOperationQueue alloc] init];<br>  // 创建操作（最后的object参数是传递给selector方法的参数）<br>  NSInvocationOperation </em>operation = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(demo:) object:@”这是一个参数”];<br>  // 将操作添加到操作队列<br>  [operationQueue addOperation:operation];<br>}<br>/// 将参数与当前线程打印</li>
<li>(void)demo:(NSString *)str {<br>  NSLog(@”%@–%@”,str,[NSThread currentThread]);<br>}</li>
</ul>
<p>/<strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong>执行结果<strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong>/<br>2015-09-17 15:36:23.777 NSOperationTest[2943:182362] 这是一个参数–<nsthread: 0x7ff68af15b00="">{number = 2, name = (null)}</nsthread:></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### NSBlockOperation</div><div class="line"></div><div class="line">执行一个操作（同步)</div></pre></td></tr></table></figure>
<p>NSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^(){<br>    NSLog(@”%@”,[NSThread currentThread]);<br>}];<br>// 开始执行任务<br>[operation start];</p>
<p>/<strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong>执行结果<strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong>/<br>2015-09-17 15:47:58.791 NSOperationTest[3015:191317] <nsthread: 0x7fe6abd02b70="">{number = 1, name = main}</nsthread:></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">添加多个操作执行（操作异步，整体还是同步），NSBlockOperation只有在封装的操作数大于1时才会开启子线程执行，否则默认执行在主线程。</div></pre></td></tr></table></figure>
<p>NSLog(@”——start one——–”);<br>// 初始化一个对象<br>NSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^(){<br>    sleep(1);<br>    NSLog(@”1：%@”,[NSThread currentThread]);<br>}];<br>// 再添加3操作<br>[operation addExecutionBlock:^() {<br>    NSLog(@”2：%@”, [NSThread currentThread]);<br>}];<br>[operation addExecutionBlock:^() {<br>    NSLog(@”3：%@”, [NSThread currentThread]);<br>}];<br>[operation addExecutionBlock:^() {<br>    sleep(3);<br>    NSLog(@”4：%@”, [NSThread currentThread]);<br>}];<br>NSLog(@”——start two——–”);<br>// 开始执行任务<br>[operation start];<br>NSLog(@”=========the end==========”);</p>
<p>/<strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong>执行结果<strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong>/<br>2018-03-19 20:35:14.961863+0800 NSOperationTest[9329:21176421] ——start one——–<br>2018-03-19 20:35:14.962419+0800 NSOperationTest[9329:21176421] ——start two——–<br>2018-03-19 20:35:14.962771+0800 NSOperationTest[9329:21176565] 2：<nsthread: 0x6040004642c0="">{number = 4, name = (null)}<br>2018-03-19 20:35:14.962771+0800 NSOperationTest[9329:21176566] 3：<nsthread: 0x600000272140="">{number = 3, name = (null)}<br>2018-03-19 20:35:15.963071+0800 NSOperationTest[9329:21176421] 1：<nsthread: 0x6040000684c0="">{number = 1, name = main}<br>2018-03-19 20:35:17.964043+0800 NSOperationTest[9329:21176568] 4：<nsthread: 0x6040004646c0="">{number = 5, name = (null)}<br>2018-03-19 20:35:17.964471+0800 NSOperationTest[9329:21176421] =========the end==========</nsthread:></nsthread:></nsthread:></nsthread:></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">当添加多个操作时，开启新的线程，多个操作之间是异步执行的，以加快效率。整体是还是同步执行。</div><div class="line"></div><div class="line"></div><div class="line">##### 自定义NSOperation</div><div class="line"></div><div class="line">自定义NSOperation最主要的就是重载-(void)main这个方法，在这个方法里面添加需要执行的操作。当执行这个操作时，系统会自动调用-(void)main这个方法</div></pre></td></tr></table></figure>
<p>#import “CustomOpertaionTest.h”</p>
<p>@implementation CustomOpertaionTest</p>
<ul>
<li>(void)main {<br>  // 新建一个自动释放池，避免内存泄露<br>  @autoreleasepool {<pre><code>// 执行的代码
NSLog(@&quot;这是一个测试:%@&quot;,[NSThread currentThread]);
</code></pre>  }<br>}<br>@end</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">在主控制器中调用，一共两种：一种同步一种异步</div></pre></td></tr></table></figure>
<p>/<strong><strong><strong><strong><em>**</em></strong></strong></strong></strong>1.直接执行，同步<strong><strong><strong><em>*</em></strong></strong></strong>/<br>CustomOpertaionTest *operation = [[CustomOpertaionTest alloc] init];<br>// 开始执行任务<br>[operation start];</p>
<p>/<strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong>执行结果<strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong>/<br>2015-09-17 16:24:27.620 NSOperationTest[3368:222036] 这是一个测试:<nsthread: 0x7ff420d28000="">{number = 1, name = main}</nsthread:></p>
<p>/<em>——————————————————</em>/</p>
<p>/<strong><strong><strong><strong><em>**</em></strong></strong></strong></strong>2.添加到队列，异步<strong><strong><strong><em>*</em></strong></strong></strong>/<br>NSOperationQueue <em>operationQueue = [[NSOperationQueue alloc] init];<br>CustomOpertaionTest </em>operation = [[CustomOpertaionTest alloc] init];<br>[operationQueue addOperation:operation];</p>
<p>/<strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong>执行结果<strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong>/<br>2015-09-17 16:27:13.594 NSOperationTest[3401:225178] 这是一个测试:<nsthread: 0x7ff2d0539d70="">{number = 2, name = (null)}</nsthread:></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### NSOperationQueue</div><div class="line"></div><div class="line">通过上面的三种方式生成NSOperation调用start函数，因为都是默认执行在主任务队列mainQueue中，所以才会执行在主线程中，如果采用下面这种方式都会执行在异步子线程中。</div></pre></td></tr></table></figure>
<p>//创建NSOperationQueue<br>NSOperationQueue * queue=[[NSOperationQueue alloc]init];<br>//设置NSOperationQueue最大并发任务数<br>queue.maxConcurrentOperationCount=3;</p>
<p>NSInvocationOperation <em>operation1= [[NSInvocationOperation alloc]initWithTarget:self selector:@selector(operationTask) object:nil];<br>NSInvocationOperation </em>operation2= [[NSInvocationOperation alloc]initWithTarget:self selector:@selector(operationTask) object:nil];</p>
<p>NSBlockOperation *operation3=[NSBlockOperation blockOperationWithBlock:^{<br>    [NSThread sleepForTimeInterval:1];<br>     NSLog(@”operationTask:%@ isMainThread：%@”,[NSThread currentThread],[[NSThread currentThread] isMainThread]?@”YES”:@”NO”);<br>}];</p>
<p>[operation3 addExecutionBlock:^{<br>    [NSThread sleepForTimeInterval:1];<br>    NSLog(@”operationTask:%@ isMainThread：%@”,[NSThread currentThread],[[NSThread currentThread] isMainThread]?@”YES”:@”NO”);        }];</p>
<p>[queue addOperation:operation1];<br>[queue addOperation:operation2];<br>[queue addOperation:operation3];</p>
<p>for (int i =0; i<9; i++)="" {="" [queue="" addoperationwithblock:^{="" [nsthread="" sleepfortimeinterval:1];="" nslog(@"operationtask:%@="" ismainthread：%@",[nsthread="" currentthread],[[nsthread="" currentthread]="" ismainthread]?@"yes":@"no");="" }];="" }="" <figure="" class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### 任务依赖</div></pre></td></tr></table></9;></p>
<p>NSOperationQueue *queue = [[NSOperationQueue alloc] init];</p>
<p>NSBlockOperation *operation1 = [NSBlockOperation blockOperationWithBlock:^(){<br>    NSLog(@”执行第1次操作，线程：%@”, [NSThread currentThread]);<br>}];</p>
<p>NSBlockOperation *operation2 = [NSBlockOperation blockOperationWithBlock:^(){<br>    NSLog(@”执行第2次操作，线程：%@”, [NSThread currentThread]);<br>}];<br>// operation1依赖于operation2<br>[operation1 addDependency:operation2];</p>
<p>[queue addOperation:operation1];<br>[queue addOperation:operation2];<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">这种情况先执行2在执行1，否则会按照顺序来执行</div><div class="line"></div><div class="line">##### 设置队列的最大并发操作数量</div><div class="line"></div><div class="line"></div><div class="line">队列的最大并发操作数量，意思是队列中最多同时运行几条线程</div><div class="line"></div><div class="line">虽然NSOperationQueue类设计用于并发执行Operations,你也可以强制单个queue一次只能执行一个Operation。setMaxConcurrentOperationCount:方法可以配置queue的最大并发操作数量。设为1就表示queue每次只能执行一个操作。不过operation执行的顺序仍然依赖于其它因素,比如operation是否准备好和operation的优先级等。因此串行化的operation queue并不等同于GCD中的串行dispatch queue</div></pre></td></tr></table></figure></p>
<p>// 每次只能执行一个操作<br>queue.maxConcurrentOperationCount = 1;<br>// 或者这样写<br>[queue setMaxConcurrentOperationCount:1];<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### NSOperation的取消</div><div class="line"></div><div class="line">分为两种</div><div class="line"></div><div class="line">- 在队列中没有执行的</div><div class="line">- 在执行中的</div><div class="line"></div><div class="line">无论是挂起，还是取消全部，都无法取消正在执行的操作。</div><div class="line"></div><div class="line">如果一定要取消正在执行的操作：需要在main方法中周期性的检查cancelled状态。</div></pre></td></tr></table></figure></p>
<p>/**<br> 在合适的时机检查cancelled状态，退出当前任务.<br> 三个切入点：</p>
<ol>
<li>开始执行任务之前</li>
<li>每个for循环中</li>
<li>阶段性的任务之间<br>*/<ul>
<li>(void)main<br>{<br>@autoreleasepool {<br>  if(self.isCancelled)<br>  {<pre><code>return;
</code></pre>  }<br>  //TODO:获取数据<br>  if(self.isCancelled)<br>  {<pre><code>//释放资源
return;
</code></pre>  }<br>  //TODO:处理数据<br>  if(self.isCancelled)<br>  {<pre><code>//释放资源
return;
</code></pre>  }<br>  //TODO:通知主线程处理<br>}<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">取消位于队列中等待执行的操作：start方法的默认实现会检查cancelled状态，如果为YES，则立即退出，不会调用main方法。</div><div class="line"></div><div class="line">通常来说，当我们自定义一个 operation 类时，我们需要考虑在以下几个关键点检查 isCancelled 方法的返回值：</div><div class="line"></div><div class="line">在真正开始执行任务之前；</div><div class="line">至少在每次循环中检查一次，而如果一次循环的时间本身就比较长的话，则需要检查得更加频繁；</div><div class="line">在任何相对来说比较容易中止 operation 的地方。</div><div class="line"></div><div class="line">##### 如果想在一个NSOperation执行完毕后做一些事情</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<p>operation.completionBlock = ^() {<br>    // 所有操作执行完成后执行<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### 用NSOpertion和NSOpertionQueue处理A、B、C三个线程，要求执行完A、B后才能执行C，怎么做？</div></pre></td></tr></table></figure></p>
<p>//1. 创建队列<br>NSOperationQueue *queue = [[NSOpertionQueue alloc] init];</p>
<p>//2. 创建3个操作<br>NSOperation <em>a = [NSOperation blockOperationWithBlock:^{<br>NSLog(@”operation—“);<br>}];<br>NSOperation </em>b = [NSOperation blockOperationWithBlock:^{<br>NSLog(@”operation—“);<br>}];<br>NSOperation *c = [NSOperation blockOperationWithBlock:^{<br>NSLog(@”operation—“);<br>}];</p>
<p>//3. 添加依赖<br>[c addDependency:a];<br>[c addDependency:b];</p>
<p>//4. 执行操作<br>[queue addOperation:a];<br>[queue addOperation:b];<br>[queue addOperation:c];<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 一些经典的题目</div><div class="line">在主线程中的某个函数里调用了异步函数，怎么样 block 当前线程 , 且还能响应当前线程的 timer 事件， touch 事件等</div><div class="line"></div><div class="line">&gt;思路便是：利用wait函数，不断地检测是否完成异步操作，然后同时开启一个类死循环，不过这函数的互相调用要用performafter为了给事件和timer调用留出机会和时间。</div></pre></td></tr></table></figure></p>
<p>@interface ViewController ()<br>{<br>    dispatch_group_t group;<br>}<br>@property (nonatomic, strong) RedView <em>redView;<br>@property (nonatomic, assign) NSInteger result;<br>@property (nonatomic, strong) UIButton </em>btn;<br>@property (nonatomic, strong) NSTimer *timer;<br>@end</p>
<p>@implementation ViewController</p>
<ul>
<li><p>(UIButton *)btn {<br>  if (!_btn) {</p>
<pre><code>_btn = [UIButton buttonWithType:UIButtonTypeCustom];
[_btn setTitle:@&quot;点击我啊&quot; forState:UIControlStateNormal];
[_btn sizeToFit];
_btn.frame = CGRectMake(100, 100, _btn.bounds.size.width, _btn.bounds.size.height);
[_btn setTitleColor:[UIColor redColor] forState:UIControlStateNormal];
[_btn addTarget:self action:@selector(change) forControlEvents:UIControlEventTouchUpInside];
</code></pre><p>  }<br>  return _btn;<br>}</p>
</li>
<li><p>(void)viewDidLoad {<br>  [super viewDidLoad];</p>
<p>  [self.view addSubview:self.btn];</p>
<p>  self.timer = [NSTimer scheduledTimerWithTimeInterval:0.5 target:self selector:@selector(chang1) userInfo:nil repeats:YES];</p>
<p>  group = dispatch_group_create();<br>  dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0);<br>  dispatch_group_async(group, queue, ^{</p>
<pre><code>for (int i = 0; i &lt; 10000; i++) {
    NSLog(@&quot;%d&quot;, i);
}
</code></pre><p>  });</p>
<p>  [self wait];</p>
</li>
</ul>
<p>}</p>
<ul>
<li><p>(void)wait {</p>
<p>  self.result = dispatch_group_wait(group, 10 * NSEC_PER_SEC);<br>  if (self.result == 0) {</p>
<pre><code>NSLog(@&quot;结束&quot;);
</code></pre><p>  }else {</p>
<pre><code>NSLog(@&quot;rsout--%ld&quot;, self.result);
[self performSelector:@selector(wait1) withObject:nil afterDelay:0];
</code></pre><p>  }</p>
</li>
</ul>
<p>}</p>
<ul>
<li><p>(void)wait1 {</p>
<p>  self.result = dispatch_group_wait(group, 10 * NSEC_PER_SEC);<br>  if (self.result == 0) {</p>
<pre><code>NSLog(@&quot;结束&quot;);
</code></pre><p>  }else {</p>
<pre><code>NSLog(@&quot;rsout--%ld&quot;, self.result);
[self performSelector:@selector(wait) withObject:nil afterDelay:0];
</code></pre><p>  }</p>
</li>
</ul>
<p>}</p>
<ul>
<li><p>(void)next {<br>  NSLog(@”1234567”);<br>}</p>
</li>
<li><p>(void)change {<br>  self.view.backgroundColor = [UIColor redColor];<br>}</p>
</li>
<li><p>(void)chang1 {<br>  NSLog(@”哇哈哈哈哈”);<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">#### 死锁的例子</div></pre></td></tr></table></figure>
</li>
<li><p>(void)viewDidLoad {<br>  [super viewDidLoad];</p>
<p>  dispatch_sync(dispatch_get_main_queue(), ^{</p>
<pre><code>[self dosomething];
</code></pre><p>  });<br>}</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">同步提交到主队列的任务，在主线程执行，那么viewDidLoad这个方法和block在同一个队列，以前一后，viewDidLoad完成药等到block执行完，但是block执行完在队列中要等待viewDidLoad完成，这个时候出现了死锁</div><div class="line"></div><div class="line">![](../../../images/2018-07-033.31.23.png)</div><div class="line"></div><div class="line">那么下边这种呢</div></pre></td></tr></table></figure>
<ul>
<li><p>(void)viewDidLoad {<br>  [super viewDidLoad];</p>
<p>  dispatch_queue_t serialQueue = dispatch_queue_create(“com.kugou.gcd.myQueue”, NULL);</p>
<p>  dispatch_sync(serialQueue, ^{</p>
<pre><code>[self dosomething];
</code></pre><p>  });<br>}</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">这个会执行正常，因为我们新建了一个串行队列，虽然sync仍然在主线程去执行这个任务，但是在新队列中，block并不需要等待viewDidLoad完成才执行。如果viewDidLoad也放在了serialQueue，那么也会死锁的。</div><div class="line"></div><div class="line">![](../../../images/2018-07-033.35.27.png)</div><div class="line"></div><div class="line">请思考下边这个输入的结果是啥样的？</div></pre></td></tr></table></figure>
<p>dispatch_queue_t global = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0);<br>    NSLog(@”0”);<br>    dispatch_sync(global, ^{<br>        NSLog(@”1”);<br>        dispatch_sync(global, ^{<br>            NSLog(@”2”);<br>            dispatch_sync(global, ^{<br>                NSLog(@”3”);</p>
<pre><code>        });
    });
    NSLog(@&quot;4&quot;);
});
NSLog(@&quot;5&quot;);
</code></pre><p>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">结果是1，2，3，4，5，理解的要点在于，sync是在当前线程直接当前线程执行，虽然是全局队列会有多个，对不起不好使，线程只有一个，并发与否取决于线程，所以还是在当前线程老老实实排队吧。如果这里的globalqueue换成串行队列，那么就会产生死锁，原因和最上边那个一样。</div><div class="line"></div><div class="line"></div><div class="line">这句打印的是啥内容？</div></pre></td></tr></table></figure>
<ul>
<li>(void)viewDidLoad {<br>  dispatch_async(dispatch_get_main_queue(), ^{<pre><code>NSLog(@&quot;%@&quot;,[NSThread currentThread]);
</code></pre>  });<br>}</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">答案是main，因为主队列只能在主线程执行。</div><div class="line"></div><div class="line"></div><div class="line">下边这个输出啥？</div></pre></td></tr></table></figure>
<p>dispatch_queue_t gloabl = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0);<br>    dispatch_async(gloabl, ^{<br>        NSLog(@”123”);<br>        NSLog(@”%@”,[NSThread currentThread]);<br>        [self performSelector:@selector(dosomething) withObject:nil afterDelay:0];<br>    });<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>123</p>
<p><nsthread: 0x60400027a800="">{number = 3, name = (null)}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">为啥没有dosomething？因为performselector需要timer添加到runloop，但是直接开线程是没有runloop的</div></pre></td></tr></table></figure></nsthread:></p>
<p>dispatch_queue_t queue = dispatch_queue_create(“com.demo.serialQueue”, DISPATCH_QUEUE_SERIAL);<br>NSLog(@”1”); // 任务1<br>dispatch_async(queue, ^{<br>    NSLog(@”2”); // 任务2<br>    dispatch_sync(queue, ^{<br>        NSLog(@”3”); // 任务3<br>    });<br>    NSLog(@”4”); // 任务4<br>});<br>NSLog(@”5”); // 任务5<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这个输出啥呢？</div><div class="line"></div><div class="line">1,5,2(5，2顺序不一定)</div></pre></td></tr></table></figure></p>
<p>NSLog(@”1”); // 任务1<br>dispatch_async(dispatch_get_global_queue(0, 0), ^{<br>    NSLog(@”2”); // 任务2<br>    dispatch_sync(dispatch_get_main_queue(), ^{<br>        NSLog(@”3”); // 任务3<br>    });<br>    NSLog(@”4”); // 任务4<br>});<br>NSLog(@”5”); // 任务5<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">这个输出1,5,2,3,4，之所以不堵塞，是因为这2后边的都执行在别的队列上，然后回到主队列打印一个3，然后再回来，啥都不耽误</div></pre></td></tr></table></figure></p>
<p>dispatch_async(dispatch_get_global_queue(0, 0), ^{<br>    NSLog(@”1”); // 任务1<br>    dispatch_sync(dispatch_get_main_queue(), ^{<br>        NSLog(@”2”); // 任务2<br>    });<br>    NSLog(@”3”); // 任务3<br>});<br>NSLog(@”4”); // 任务4<br>while (1) {<br>}<br>NSLog(@”5”); // 任务5<br>```</p>
<p>那么这个呢？打印4，1，顺序不一定</p>
<h3 id="锁相关"><a href="#锁相关" class="headerlink" title="锁相关"></a>锁相关</h3><ul>
<li>@synchronized，单例对象的时候使用</li>
<li>atomic，赋值操作原子性，但不保证使用</li>
<li>OSSpinLock，自旋锁，循环等待，并不释放当前资源，一直等到能够获取这个锁，用于轻量级数据访问</li>
<li>NSRecursiveLock，递归锁，可以重复</li>
<li>NSLock，互斥锁，不能重复，比如我获取了锁，没有解的时候又获取锁，就会死锁</li>
<li>dispatch_semaphore_t，信号量</li>
</ul>
<p><img src="/01/2015/多线程技术/../../../images/2018-07-034.59.21.png" alt=""></p>
<p><img src="/01/2015/多线程技术/../../../images/2018-07-034.59.40.png" alt=""></p>
<h3 id="题目总结"><a href="#题目总结" class="headerlink" title="题目总结:"></a>题目总结:</h3><h4 id="多读单写"><a href="#多读单写" class="headerlink" title="多读单写"></a>多读单写</h4><h4 id="几种多线程技术，怎么选择？"><a href="#几种多线程技术，怎么选择？" class="headerlink" title="几种多线程技术，怎么选择？"></a>几种多线程技术，怎么选择？</h4><p>GCD用来实现简单的线程同步，多读单写，没有依赖，不需要监听状态</p>
<p>NSOperation，任务之间有依赖或者要监听任务的执行情况，并且加以控制则使用NSOperationQueue，在AFN中有使用</p>
<p>NSThread用来实现常驻线程</p>
<h4 id="如何终止一个正在运行的线程"><a href="#如何终止一个正在运行的线程" class="headerlink" title="如何终止一个正在运行的线程"></a>如何终止一个正在运行的线程</h4><p>URLSession有cancle的方法，可以直接取消，而执行耗时操作需要提前预置flag，通过更改flag进行return。</p>
<p>线程间共享资源，可以在任何地方进行flag修改。</p>
<h4 id="比较复杂的依赖情况"><a href="#比较复杂的依赖情况" class="headerlink" title="比较复杂的依赖情况"></a>比较复杂的依赖情况</h4><ul>
<li>A必须在B，C之前，BC随意(并发队列+sync函数)</li>
<li>C必须在AB之后，AB随意(group_notify)</li>
<li>AB必须在DE之前，C在他们之间，他们之间随意(group_barriry)</li>
</ul>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UI与Runtime]]></title>
      <url>/2015/07/01/2015/UI%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h3 id="UI视图相关"><a href="#UI视图相关" class="headerlink" title="UI视图相关"></a>UI视图相关</h3><h4 id="UIViewController生命周期"><a href="#UIViewController生命周期" class="headerlink" title="UIViewController生命周期"></a>UIViewController生命周期</h4><p>当一个视图控制器被创建，并在屏幕上显示的时候。 代码的执行顺序</p>
<p>1、 alloc                                   创建对象，分配空间</p>
<p>2、init (initWithNibName) 初始化对象，初始化数据</p>
<p>3、loadView                          从nib载入视图 ，通常这一步不需要去干涉。除非你没有使用xib文件创建视图</p>
<p>4、viewDidLoad                   载入完成，可以进行自定义数据以及动态创建其他控件</p>
<p>5、viewWillAppear              视图将出现在屏幕之前，马上这个视图就会被展现在屏幕上了</p>
<p>6、viewDidAppear               视图已在屏幕上渲染完成</p>
<p>当一个视图被移除屏幕并且销毁的时候的执行顺序，这个顺序差不多和上面的相反</p>
<p>1、viewWillDisappear            视图将被从屏幕上移除之前执行</p>
<p>2、viewDidDisappear             视图已经被从屏幕上移除，用户看不到这个视图了</p>
<p>3、dealloc                                 视图被销毁，此处需要对你在init和</p>
<p>viewDidLoad中创建的对象进行释放</p>
<a id="more"></a>
<h4 id="tableview的cell重用机制"><a href="#tableview的cell重用机制" class="headerlink" title="tableview的cell重用机制"></a>tableview的cell重用机制</h4><h4 id="tablevie的数据源同步"><a href="#tablevie的数据源同步" class="headerlink" title="tablevie的数据源同步"></a>tablevie的数据源同步</h4><p>两种一种是拷贝数据，然后并发执行，一种是在串行队列中去执行</p>
<p><img src="/01/2015/UI基础/../../../images/2018-07-01 9.47.40.png" alt=""></p>
<p><img src="/01/2015/UI基础/../../../images/2018-07-019.49.24.png" alt=""></p>
<h4 id="UIView与CALayer的区别"><a href="#UIView与CALayer的区别" class="headerlink" title="UIView与CALayer的区别"></a>UIView与CALayer的区别</h4><p>UIView参与响应链条，处理事件，CALayer负责显示内容<br>单一职责原则</p>
<h4 id="事件传递"><a href="#事件传递" class="headerlink" title="事件传递"></a>事件传递</h4><p><img src="/01/2015/UI基础/../../../images/2018-07-01 9.57.57.png" alt=""></p>
<p><img src="/01/2015/UI基础/../../../images/2018-07-01 9.57.35.png" alt=""></p>
<p><img src="/01/2015/UI基础/../../../images/2018-07-01 10.01.52.png" alt=""></p>
<p>如何实现一个正方形，只有中间圆形响应事件呢？<br>重写<code>- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event</code></p>
<p>问题，如何让一个在父视图外的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event &#123;</div><div class="line">    UIView *view = [super hitTest:point withEvent:event];</div><div class="line">    if (view == nil) &#123;</div><div class="line">        CGPoint yellowPoint = [self convertPoint:point toView:self.testBtn];</div><div class="line">        if ([self.testBtn pointInside:yellowPoint withEvent:event]) &#123;</div><div class="line">            view = self.testBtn;</div><div class="line">        &#125;</div><div class="line">//        self.testBtn.istarget = YES;</div><div class="line">    &#125;</div><div class="line">    return view;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说明当，第一个view返回nil的时候，说明点击不在这个view上，那么下一步判断，点击在不在子控件，testBtn上，注意这里要先转化坐标系，如果在的话那就直接返回这个testBtn</p>
<p>如果是子控件的子控件怎么办呢？提供一个注册类，当返回为nil的时候就交给这个注册的对象来处理事件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#import &quot;backView.h&quot;</div><div class="line"></div><div class="line">@interface backView()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">static __weak UIView *targetView;</div><div class="line"></div><div class="line">@implementation backView</div><div class="line"></div><div class="line">- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event &#123;</div><div class="line">    UIView *view = [super hitTest:point withEvent:event];</div><div class="line">    if (view == nil) &#123;</div><div class="line">        CGPoint yellowPoint = [self convertPoint:point toView:targetView];</div><div class="line">        if ([targetView pointInside:yellowPoint withEvent:event]) &#123;</div><div class="line">            view = targetView;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return view;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (void)registerTargetView:(UIView *)view &#123;</div><div class="line">    targetView = view;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h5 id="接着上边的问题，如果是一个下边这样的结构你怎么实现？"><a href="#接着上边的问题，如果是一个下边这样的结构你怎么实现？" class="headerlink" title="接着上边的问题，如果是一个下边这样的结构你怎么实现？"></a>接着上边的问题，如果是一个下边这样的结构你怎么实现？</h5><p><img src="/01/2015/UI基础/../../../images/20160816150706493.png" alt=""></p>
<p>仍然用上边的代码总体结构不动，几点细节需要注意:</p>
<ul>
<li>注册的tagetView变成tableview</li>
<li>返回的view是最终处理事件的view，所以这里返回的并不是targetview，而是返回其子view，那么怎么返回呢？继续调用hitTest方法，但是这里注意传入的应该是转换后的坐标，否则子试图使用的是在父试图中的坐标，这里肯定对不上</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">@interface backView()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">static __weak UIView *targetView;</div><div class="line"></div><div class="line">@implementation backView</div><div class="line"></div><div class="line">- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event &#123;</div><div class="line">    UIView *view = [super hitTest:point withEvent:event];</div><div class="line">    if (view == nil) &#123;</div><div class="line">        CGPoint yellowPoint = [self convertPoint:point toView:targetView];</div><div class="line">        if ([targetView pointInside:yellowPoint withEvent:event]) &#123;</div><div class="line">            view = [targetView hitTest:yellowPoint withEvent:event];//关键在这里需要传入转换之后的坐标</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return view;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (void)registerTargetView:(UIView *)view &#123;</div><div class="line">    targetView = view;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>再注意，<code>-(UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event</code>和<code>pointInside:(CGPoint)pointwithEvent:(UIEvent *)event</code>中的point都是调用这个方法的view的坐标系内的坐标，所以一定要记得提前转换。</p>
<p>使用的方法就是<code>[self convertPoint:point toView:targetView]</code>，这里也要注意，这个point要是self的坐标系内的，现在给转移到tagetView的坐标系内。</p>
<p><code>问题？怎么找到一个view所以依赖的第一个控制器？</code></p>
<p>答案:响应者链条，最终会找到UIApplication这个类。</p>
<h4 id="cpu"><a href="#cpu" class="headerlink" title="cpu"></a>cpu</h4><p>cpu负责 <code>布局和文本计算，绘制，图片编解码，提交位图</code></p>
<h4 id="卡顿和掉帧的根本原因"><a href="#卡顿和掉帧的根本原因" class="headerlink" title="卡顿和掉帧的根本原因"></a>卡顿和掉帧的根本原因</h4><h4 id="滑动优化"><a href="#滑动优化" class="headerlink" title="滑动优化"></a>滑动优化</h4><p>CPU</p>
<ul>
<li>对象的创建，销毁，调整</li>
<li>预排版(布局计算，文本计算)</li>
<li>预渲染(文本异步绘制，图片解码)</li>
</ul>
<p>GPU</p>
<ul>
<li>离屏渲染</li>
<li>视图混合(透明度)</li>
</ul>
<h4 id="UIView绘制流程"><a href="#UIView绘制流程" class="headerlink" title="UIView绘制流程"></a>UIView绘制流程</h4><p><img src="/01/2015/UI基础/../../../images/2018-07-01 10.11.15.png" alt=""></p>
<p>系统绘制流程图</p>
<p><img src="/01/2015/UI基础/../../../images/2018-07-01 10.12.22.png" alt=""></p>
<p>异步绘制流程</p>
<p><code>[layer.delegate displayLayer:]</code></p>
<ul>
<li>代理负责生成bitmap</li>
<li>设置bitmap为layer的contents属性</li>
</ul>
<p><img src="/01/2015/UI基础/../../../images/2018-07-01 10.15.56.png" alt=""></p>
<p>现在问一个问题，异步绘制的时候，是在本次runloop的时候提交gpu的吗？</p>
<p>并不是，是在下一次绘制的时候。</p>
<h5 id="drawrect为什么会导致内存暴增"><a href="#drawrect为什么会导致内存暴增" class="headerlink" title="drawrect为什么会导致内存暴增"></a>drawrect为什么会导致内存暴增</h5><p><a href="https://blog.csdn.net/jijiji000111/article/details/50480405/" target="_blank" rel="external">原文链接</a></p>
<p><code>- (void)drawLayer:(CALayer *)layer inContext:(CGContextRef)ctx;</code><br>这个方法调用之前，CALayer创建了一个合适尺寸的空寄宿图（尺寸由bounds和contentsScale决定）和一个Core Graphics的绘制上下文环境，为绘制寄宿图做准备，它作为ctx参数传入。在这一步生成的空寄宿图内存是相当巨大的，它就是本次内存问题的关键，一旦你实现了CALayerDelegate协议中的-drawLayer:inContext:方法或者UIView中的-drawRect:方法（其实就是前者的包装方法），图层就创建了一个绘制上下文，这个上下文需要的内存可从这个公式得出：图层宽<em>图层高</em>4 字节，宽高的单位均为像素。而我们的画板程序因为要支持像猿题库一样两指挪动的效果，我们开辟的画板大小为：</p>
<p><code>_myDrawer = [[BHBMyDrawer alloc] initWithFrame:
     CGRectMake(0, 0, SCREEN_SIZE.width*5, SCREEN_SIZE.height*2)];</code><br>我们的画板程序的画板视图它在iPhone6s plus机器上的上下文内存量就是 1920<em>2</em>1080<em>5</em>4 字节， 相当于79MB内存，图层每次重绘的时候都需要重新抹掉内存然后重新分配。它就是我们画板程序内存暴增的真正原因</p>
<p>drawRect方法依赖Core Graphics框架来进行自定义的绘制，但这种方法主要的缺点就是它处理touch事件的方式：每次按钮被点击后，都会用setNeddsDisplay进行强制重绘；而且不止一次，每次单点事件触发两次执行。这样的话从性能的角度来说，对CPU和内存来说都是欠佳的。特别是如果在我们的界面上有多个这样的UIButton实例</p>
<h4 id="离屏渲染"><a href="#离屏渲染" class="headerlink" title="离屏渲染"></a>离屏渲染</h4><p>这个概念起源于GPU，当某些视图的某些属性不能在未合成之前用于屏幕直接显示的时候就会在当前屏幕缓冲区之外再开辟一个缓冲区进行渲染操作。</p>
<h5 id="何时触发？"><a href="#何时触发？" class="headerlink" title="何时触发？"></a>何时触发？</h5><ul>
<li>圆角和masktobound一起设置</li>
<li>图层蒙版</li>
<li>光栅化</li>
<li>阴影</li>
</ul>
<h5 id="为何要避免"><a href="#为何要避免" class="headerlink" title="为何要避免"></a>为何要避免</h5><p>UI卡顿和掉帧</p>
<ul>
<li>创建新的缓冲区</li>
<li>上下文切换</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS中的内存管理]]></title>
      <url>/2015/06/30/2015/iOS%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<ul>
<li>内存布局</li>
<li>内存管理方案</li>
<li>内存布局</li>
<li>MRC/ARC</li>
<li>引用计数</li>
<li>弱引用</li>
<li>自动释放池</li>
<li>循环引用</li>
</ul>
<h3 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h3><p><img src="/30/2015/iOS中的内存管理/../../../images/2018-06-305.51.54.png" alt=""></p>
<h5 id="栈-stack"><a href="#栈-stack" class="headerlink" title="栈(stack)"></a>栈(stack)</h5><p>方法调用都是在栈区，栈向下增长，</p>
<h5 id="堆-heap"><a href="#堆-heap" class="headerlink" title="堆(heap)"></a>堆(heap)</h5><p>alloc的数据都是在堆区间，还有copy过的block</p>
<h5 id="代码段-text"><a href="#代码段-text" class="headerlink" title="代码段(text)"></a>代码段(text)</h5><h3 id="内存管理方案"><a href="#内存管理方案" class="headerlink" title="内存管理方案"></a>内存管理方案</h3><p><a href="https://blog.csdn.net/axllll/article/details/53926144" target="_blank" rel="external">strong实现探究</a></p>
<p><a href="https://blog.csdn.net/axllll/article/details/52661374" target="_blank" rel="external">weak实现探究</a></p>
<p>不同场景，不同方案</p>
<ul>
<li>小数据 TaggedPointer(NSNumber)</li>
<li>NONPOINTER_ISA，剩余多余的位数用来存储点别的，这个其实就是isa</li>
<li>散列表，包括引用计数表和弱引用表(SideTables)</li>
</ul>
<p><a href="http://yulingtianxia.com/blog/2015/12/06/The-Principle-of-Refenrence-Counting/" target="_blank" rel="external">OC引用计数原理</a></p>
<p>TaggedPointer<br>判断当前对象是否在使用 TaggedPointer 是看标志位是否为 1 ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#if SUPPORT_MSB_TAGGED_POINTERS</div><div class="line">#   define TAG_MASK (1ULL&lt;&lt;63)</div><div class="line">#else</div><div class="line">#   define TAG_MASK 1</div><div class="line"></div><div class="line">inline bool </div><div class="line">objc_object::isTaggedPointer() </div><div class="line">&#123;</div><div class="line">#if SUPPORT_TAGGED_POINTERS</div><div class="line">    return ((uintptr_t)this &amp; TAG_MASK);</div><div class="line">#else</div><div class="line">    return false;</div><div class="line">#endif</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>id 其实就是 objc_object <em> 的简写（typedef struct objc_object </em>id;），它的 isTaggedPointer() 方法经常会在操作引用计数时用到，因为这决定了存储引用计数的策略</p>
<blockquote>
<p>有些对象如果支持使用 TaggedPointer，苹果会直接将其指针值作为引用计数返回；如果当前设备是 64 位环境并且使用 Objective-C 2.0，那么“一些”对象会使用其 isa 指针的一部分空间来存储它的引用计数；否则 Runtime 会使用一张散列表来管理引用计数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">NSNumber *nu = [NSNumber numberWithInteger:3];</div><div class="line">    </div><div class="line">NSLog(@&quot;%@---%p---%@&quot;, nu,nu,[nu valueForKey:@&quot;retainCount&quot;]);</div><div class="line">    </div><div class="line">NSNumber *nu1 = [NSNumber numberWithInteger:1];</div><div class="line">    </div><div class="line">NSLog(@&quot;%@---%p---%@&quot;, nu1,nu1,[nu1 valueForKey:@&quot;retainCount&quot;]);</div><div class="line">    </div><div class="line">NSNumber *nu2 = [NSNumber numberWithInteger:2];</div><div class="line">    </div><div class="line">NSLog(@&quot;%@---%p---%@&quot;, nu2,nu2,[nu2 valueForKey:@&quot;retainCount&quot;]);</div><div class="line">    </div><div class="line"></div><div class="line">3---0xb000000000000033---9223372036854775807</div><div class="line">1---0xb000000000000013---9223372036854775807</div><div class="line">2---0xb000000000000023---9223372036854775807</div></pre></td></tr></table></figure>
<p>看上边数据3，1，2直接存在了指针里，只要指针存在，那么数据就存在，没有isa指针，不受retainCount管理。</p>
<h4 id="TaggedPointer与引用计数"><a href="#TaggedPointer与引用计数" class="headerlink" title="TaggedPointer与引用计数"></a>TaggedPointer与引用计数</h4><p><a href="http://www.infoq.com/cn/articles/deep-understanding-of-tagged-pointer" target="_blank" rel="external">TaggedPointer原理</a></p>
<h4 id="NONPOINTER-ISA与引用计数。"><a href="#NONPOINTER-ISA与引用计数。" class="headerlink" title="NONPOINTER-ISA与引用计数。"></a>NONPOINTER-ISA与引用计数。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">struct objc_object &#123;</div><div class="line">private:</div><div class="line">    isa_t isa;</div><div class="line"></div><div class="line">public:</div><div class="line">xxxx</div><div class="line">xxxx</div><div class="line">xxxx</div></pre></td></tr></table></figure>
<p>对象中有一个isa_t类型的对象，isa是一个联合体，其中包含了这样的一组定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># if __arm64__</div><div class="line">#   define ISA_MASK        0x0000000ffffffff8ULL</div><div class="line">#   define ISA_MAGIC_MASK  0x000003f000000001ULL</div><div class="line">#   define ISA_MAGIC_VALUE 0x000001a000000001ULL</div><div class="line">    struct &#123;</div><div class="line">        uintptr_t nonpointer        : 1;</div><div class="line">        uintptr_t has_assoc         : 1;</div><div class="line">        uintptr_t has_cxx_dtor      : 1;</div><div class="line">        uintptr_t shiftcls          : 33; // MACH_VM_MAX_ADDRESS 0x1000000000</div><div class="line">        uintptr_t magic             : 6;</div><div class="line">        uintptr_t weakly_referenced : 1;</div><div class="line">        uintptr_t deallocating      : 1;</div><div class="line">        uintptr_t has_sidetable_rc  : 1;</div><div class="line">        uintptr_t extra_rc          : 19;</div><div class="line">#       define RC_ONE   (1ULL&lt;&lt;45)</div><div class="line">#       define RC_HALF  (1ULL&lt;&lt;18)</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>我们可以看到，当使用Tagged Pointer时候，从指针的第45位开始，一共19位，存储的都是对象的引用计数信息，标志为extra_rc。当存储空间不够时，苹果会使用对象的sidetable来存储对象的引用计数信息</p>
<h4 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h4><p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-02 2.33.00.png" alt=""></p>
<p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-022.33.20.png" alt=""></p>
<p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-022.36.06.png" alt=""></p>
<p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-022.37.15.png" alt=""></p>
<p>如何实现快速分流，也就是找到SideTable的位置的？<br><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-022.39.06.png" alt=""><br><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-02.png2.39.59.png" alt=""></p>
<h4 id="散列式数据结构"><a href="#散列式数据结构" class="headerlink" title="散列式数据结构"></a>散列式数据结构</h4><h5 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h5><p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-023.21.23.png" alt=""></p>
<h5 id="RedcountMap-引用计数"><a href="#RedcountMap-引用计数" class="headerlink" title="RedcountMap(引用计数)"></a>RedcountMap(引用计数)</h5><p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-023.17.12.png" alt=""></p>
<h5 id="弱引用表"><a href="#弱引用表" class="headerlink" title="弱引用表"></a>弱引用表</h5><p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-023.19.10.png" alt=""></p>
<h3 id="MRC和ARC"><a href="#MRC和ARC" class="headerlink" title="MRC和ARC"></a>MRC和ARC</h3><p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-023.25.46.png" alt=""></p>
<p>之所以说ARC需要用到runtime比如weak关键字的实现</p>
<p>禁止调用只是禁止显示调用，我们仍然可以用kvc来进行调用。</p>
<p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-023.28.20.png" alt=""></p>
<p>这里需要看一下refcntStorage，从下表中可以推测，这个变量size_t类型存储了很多信息，不单单是retainCount那么简单，0位势弱引用信息，是否有弱引用，1位存储了是否要被dealloc，2位才是真正的引用计数，再看一个细节，MSB-ward是什么意思？LSB是最低有效位，那么这个MSB就是最高有效位了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#define SIDE_TABLE_WEAKLY_REFERENCED (1UL&lt;&lt;0)</div><div class="line">#define SIDE_TABLE_DEALLOCATING      (1UL&lt;&lt;1)  // MSB-ward of weak bit</div><div class="line">#define SIDE_TABLE_RC_ONE            (1UL&lt;&lt;2)  // MSB-ward of deallocating bit</div><div class="line">#define SIDE_TABLE_RC_PINNED         (1UL&lt;&lt;(WORD_BITS-1))</div></pre></td></tr></table></figure>
<p>这里又衍生了一个问题，为什么要在这边记录weak和dealloc呢？<br>答案是提供状态查询，查询一个对象是不是有weak引用，或者正在deallocing，注意，这里不是已经dealloc了，而是正在销毁，这是一个过程，一旦进入到了这个过程就会通过这个函数去标记，去告诉别人我要销毁了，不要使用我了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">objc_object::sidetable_isDeallocating()</div><div class="line">&#123;</div><div class="line">    SideTable&amp; table = SideTables()[this];</div><div class="line"></div><div class="line">    // NO SPINLOCK HERE</div><div class="line">    // _objc_rootIsDeallocating() is called exclusively by _objc_storeWeak(), </div><div class="line">    // which already acquired the lock on our behalf.</div><div class="line"></div><div class="line"></div><div class="line">    // fixme can&apos;t do this efficiently with os_lock_handoff_s</div><div class="line">    // if (table.slock == 0) &#123;</div><div class="line">    //     _objc_fatal(&quot;Do not call -_isDeallocating.&quot;);</div><div class="line">    // &#125;</div><div class="line"></div><div class="line">    RefcountMap::iterator it = table.refcnts.find(this);</div><div class="line">    return (it != table.refcnts.end()) &amp;&amp; (it-&gt;second &amp; SIDE_TABLE_DEALLOCATING);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-023.29.37.png" alt=""></p>
<p>所以说明dealloc是在release方法中调用的。</p>
<p>Objective-C的引用计数管理使用两种方式相结合，sidetable和isa指针（指针并不是对象的真正内存地址，而是某些位用来进行了一些标志位的存放）；接下来，我将以sidetable进行release来讨论dealloc的调用，直接上代码，如下sidetable_release（下文所有都会用sidetable_release来讨论）函数会在给对象发送release消息的时候调用，sidetable_release方法首先获取对象的引用计数，对引用计数相关标志位做操作，若对象实例可以被释放，将通过objc_msgSend发送SEL_dealloc消息，既调用对象的dealloc方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">uintptr_t</div><div class="line">objc_object::sidetable_release(bool performDealloc)</div><div class="line">&#123;</div><div class="line">#if SUPPORT_NONPOINTER_ISA</div><div class="line">    assert(!isa.nonpointer);</div><div class="line">#endif</div><div class="line">    SideTable&amp; table = SideTables()[this];</div><div class="line"></div><div class="line">    bool do_dealloc = false;</div><div class="line"></div><div class="line">    table.lock();</div><div class="line">    RefcountMap::iterator it = table.refcnts.find(this);</div><div class="line">    if (it == table.refcnts.end()) &#123;//如果没有这个对象的引用信息，那么直接走dealloc逻辑，将这个对象的dealloc标记置为1</div><div class="line">        do_dealloc = true;</div><div class="line">        table.refcnts[this] = SIDE_TABLE_DEALLOCATING;</div><div class="line">    &#125; else if (it-&gt;second &lt; SIDE_TABLE_DEALLOCATING) &#123;//如果size_t信息在dealloc信息有效位以下，那么也直接走dealloc逻辑</div><div class="line">        // SIDE_TABLE_WEAKLY_REFERENCED may be set. Don&apos;t change it.</div><div class="line">        do_dealloc = true;</div><div class="line">        it-&gt;second |= SIDE_TABLE_DEALLOCATING;</div><div class="line">    &#125; else if (! (it-&gt;second &amp; SIDE_TABLE_RC_PINNED)) &#123;//如果是有效的那么直接将计数减少4，因为retainCount会右移动4位，所以反应到retainCount就会是1</div><div class="line">        it-&gt;second -= SIDE_TABLE_RC_ONE;</div><div class="line">    &#125;</div><div class="line">    table.unlock();</div><div class="line">    if (do_dealloc  &amp;&amp;  performDealloc) &#123;//如果要销毁那么直接执行dealloc</div><div class="line">        ((void(*)(objc_object *, SEL))objc_msgSend)(this, SEL_dealloc);</div><div class="line">    &#125;</div><div class="line">    return do_dealloc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-023.30.57.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">TestView *test1 = [[TestView alloc] init];</div><div class="line">self.test = test1;</div><div class="line">NSLog(@&quot;%@&quot;,[[[TestView alloc] init] valueForKey:@&quot;retainCount&quot;]);</div><div class="line">NSLog(@&quot;%@&quot;,[test1 valueForKey:@&quot;retainCount&quot;]);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2018-07-07 17:37:03.997243+0800 gpu[57393:720434] 1</div><div class="line">2018-07-07 17:45:56.191210+0800 gpu[57878:728352] -[TestView dealloc]</div><div class="line">2018-07-07 17:37:03.997573+0800 gpu[57393:720434] 2</div></pre></td></tr></table></figure>
<p>这里要说的是调用alloc以后，并没有对其retain，但是当调用retainCount的时候会变成1的，因为最开始并没有这个对象对应的table，所以不会做到if逻辑里边去，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">objc_object::sidetable_retainCount()</div><div class="line">&#123;</div><div class="line">    SideTable&amp; table = SideTables()[this];</div><div class="line"></div><div class="line">    size_t refcnt_result = 1;</div><div class="line">    </div><div class="line">    table.lock();</div><div class="line">    RefcountMap::iterator it = table.refcnts.find(this);</div><div class="line">    if (it != table.refcnts.end()) &#123;</div><div class="line">        // this is valid for SIDE_TABLE_RC_PINNED too</div><div class="line">        refcnt_result += it-&gt;second &gt;&gt; SIDE_TABLE_RC_SHIFT;</div><div class="line">    &#125;</div><div class="line">    table.unlock();</div><div class="line">    return refcnt_result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="dealloc的实现"><a href="#dealloc的实现" class="headerlink" title="dealloc的实现"></a>dealloc的实现</h5><p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-023.39.10.png" alt=""></p>
<p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-023.40.04.png" alt=""></p>
<p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-023.41.21.png" alt=""></p>
<p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-023.42.38.png" alt=""></p>
<h4 id="弱引用相关"><a href="#弱引用相关" class="headerlink" title="弱引用相关"></a>弱引用相关</h4><p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-024.png" alt=""><br>源码入口<code>NSObject.mm/objc_initWeak</code></p>
<p><a href="https://blog.csdn.net/axllll/article/details/52661374" target="_blank" rel="external">weak实现探究</a></p>
<p>这里有个问题需要思考，既然前边提到table_t中的refcntStorage可以存储弱引用相关的信息，那么为什么还需要一个weak_table呢，并且弱引用并不增加计数，那么我们存储这些信息又有什么意义呢？</p>
<p>其实这是为了实现后边weak关键字修饰的指针，在对象被释放后指针变为nil的功能，既然要将这个指针设置为nil，那么我们就需要记录这些指向这个对象的这些weak指针，对比看strong修饰的指针就不需要记录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">struct SideTable &#123;</div><div class="line">    spinlock_t slock;</div><div class="line">    RefcountMap refcnts;</div><div class="line">    weak_table_t weak_table;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>weak_table_t</code>中有一个weak_entries这是一个数组，这里存储的是weak_entry_t类型的结构体。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">struct weak_table_t &#123;</div><div class="line">    weak_entry_t *weak_entries;</div><div class="line">    size_t    num_entries;</div><div class="line">    uintptr_t mask;</div><div class="line">    uintptr_t max_hash_displacement;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>weak_entry_t</code>中呢存储的是一个referrers，这个又是一个weak_referrer_t的数组，这里边的成员是weak_referrer_t，我们可以看到，它的实质类型是一个地址，这个地址存储的是weak指针的地址，看清楚这不是对象的地址，是指针的地址，为了方便后边将这个指针设置为nil</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">struct weak_entry_t &#123;</div><div class="line">    DisguisedPtr&lt;objc_object&gt; referent;</div><div class="line">    union &#123;</div><div class="line">        struct &#123;</div><div class="line">            weak_referrer_t *referrers;</div><div class="line">            uintptr_t        out_of_line : 1;</div><div class="line">            uintptr_t        num_refs : PTR_MINUS_1;</div><div class="line">            uintptr_t        mask;</div><div class="line">            uintptr_t        max_hash_displacement;</div><div class="line">        &#125;;</div><div class="line">        struct &#123;</div><div class="line">            // out_of_line=0 is LSB of one of these (don&apos;t care which)</div><div class="line">            weak_referrer_t  inline_referrers[WEAK_INLINE_COUNT];</div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/// The address of a __weak object reference</div><div class="line">typedef objc_object ** weak_referrer_t;</div></pre></td></tr></table></figure>
<h5 id="weak-clear-no-lock的实现"><a href="#weak-clear-no-lock的实现" class="headerlink" title="weak_clear_no_lock的实现"></a><code>weak_clear_no_lock</code>的实现</h5><p>这个实现也印证了我们之前的判断，这里就是通过一个对象的地址<code>referent_id</code>来寻找这个对象存储于哪个<code>weak_table_t</code>找到之后从中找到这个对象的存储实体，weak_entry_t，这里存储的就是这个对象的weak指针了，后边我们看到循环遍历*referrer = nil;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">weak_clear_no_lock(weak_table_t *weak_table, id referent_id) </div><div class="line">&#123;</div><div class="line">    objc_object *referent = (objc_object *)referent_id;</div><div class="line"></div><div class="line">    weak_entry_t *entry = weak_entry_for_referent(weak_table, referent);</div><div class="line">    if (entry == nil) &#123;</div><div class="line">        /// XXX shouldn&apos;t happen, but does with mismatched CF/objc</div><div class="line">        //printf(&quot;XXX no entry for clear deallocating %p\n&quot;, referent);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // zero out references</div><div class="line">    weak_referrer_t *referrers;</div><div class="line">    size_t count;</div><div class="line">    </div><div class="line">    if (entry-&gt;out_of_line) &#123;</div><div class="line">        referrers = entry-&gt;referrers;</div><div class="line">        count = TABLE_SIZE(entry);</div><div class="line">    &#125; </div><div class="line">    else &#123;</div><div class="line">        referrers = entry-&gt;inline_referrers;</div><div class="line">        count = WEAK_INLINE_COUNT;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    for (size_t i = 0; i &lt; count; ++i) &#123;</div><div class="line">        objc_object **referrer = referrers[i];</div><div class="line">        if (referrer) &#123;</div><div class="line">            if (*referrer == referent) &#123;</div><div class="line">                *referrer = nil;</div><div class="line">            &#125;</div><div class="line">            else if (*referrer) &#123;</div><div class="line">                _objc_inform(&quot;__weak variable at %p holds %p instead of %p. &quot;</div><div class="line">                             &quot;This is probably incorrect use of &quot;</div><div class="line">                             &quot;objc_storeWeak() and objc_loadWeak(). &quot;</div><div class="line">                             &quot;Break on objc_weak_error to debug.\n&quot;, </div><div class="line">                             referrer, (void*)*referrer, (void*)referent);</div><div class="line">                objc_weak_error();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    weak_entry_remove(weak_table, entry);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="自动释放池"><a href="#自动释放池" class="headerlink" title="自动释放池"></a>自动释放池</h3><p>AutoreleasePool 原理？<br>为何可以嵌套使用？</p>
<p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-024.42.22.png" alt=""></p>
<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p><code>objc_autoreleasePoolPush</code>调用<code>AutoreleasePoolPage::push</code>，一次pop相当于批量的pop</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class AutoreleasePoolPage </div><div class="line">&#123;</div><div class="line">	id *next; //指向下一个可添加节点</div><div class="line">	pthread_t const thread;</div><div class="line">	AutoreleasePoolPage * const parent;</div><div class="line">	AutoreleasePoolPage *child;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-024.44.52.png" alt=""></p>
<p>栈结构复习</p>
<p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-024.46.29.png" alt=""></p>
<p>双向链表结构复习</p>
<p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-024.46.16.png" alt=""></p>
<p>Push的时候发生了什么<br><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-024.53.19.png" alt=""><br>创建一个自动释放池就会创建一个哨兵，然后返回这个哨兵的位置，然后next向上移动，然后在池子中间创建的对象都会被自动添加到这个池子中，next不断移动，当执行pop的时候，中间的内容都会接收到release消息被释放，next指针会移动到哨兵的位置。</p>
<p><code>[obj autorelease]的调用逻辑</code></p>
<p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-024.53.40.png" alt=""><br>这里一个逻辑有一点要注意就是如果这个栈已经满了，再添加节点在链表上，然后增加栈节点。</p>
<h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><ul>
<li>自循环引用</li>
<li>相互循环引用</li>
<li>多循环引用</li>
</ul>
<p>常考<br>&gt;</p>
<blockquote>
<ul>
<li>代理</li>
<li>Block</li>
<li>NSTimer</li>
<li>大环</li>
</ul>
</blockquote>
<p>解决思路:</p>
<ul>
<li>避免产生</li>
<li>在何时时机手动断环</li>
</ul>
<p>具体的方案:</p>
<ul>
<li>__weak，不增加计数</li>
<li>__block</li>
<li>__unsafe_unretained，不会增加计数，但是会产生悬垂指针</li>
</ul>
<h5 id="block注意"><a href="#block注意" class="headerlink" title="__block注意"></a>__block注意</h5><ul>
<li>MRC下，__block修饰对象不会增加引用计数</li>
<li>ARC下，__block修饰的对象会被强引用，无法避免循环引用，需要手动破解环</li>
</ul>
<h4 id="NSTimer的循环引用"><a href="#NSTimer的循环引用" class="headerlink" title="NSTimer的循环引用"></a>NSTimer的循环引用</h4><p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-025.29.27.png" alt=""></p>
<p>即使对象不引用Timer，也没用，因为Runloop会引用Timer，Timer的taget是对象，依然会增加对其的引用，当然如果timer只执行一次，我们可以断掉runloop的引用，但是如果是多次的timer咋办呢？</p>
<p>解决方案：<br>增加中间对象</p>
<p><img src="/30/2015/iOS中的内存管理/../../../images/2018-07-025.33.14.png" alt=""></p>
<h3 id="在内存管理上能够优化的点"><a href="#在内存管理上能够优化的点" class="headerlink" title="在内存管理上能够优化的点"></a>在内存管理上能够优化的点</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>   1.用ARC去管理内存（Use ARC to Manage Memory）</p>
<p>   2.适当的地方使用reuseIdentifier（Use a reuseIdentifier Where Appropriate）</p>
<p>   3.尽可能设置视图为不透明（Set View as Opaque When Possible）</p>
<p>   4.避免臃肿的XIBs文件（Avoid Fat XiBs）</p>
<p>   5.不要阻塞主进程（Don’t Block the Main Thread）</p>
<p>   6.调整图像视图中的图像尺寸（Size Images to Image Views）</p>
<p>   7.选择正确集合（Choose the Correct Collection）</p>
<p>   8.启用Gzip压缩（Enable GZIP Compression）</p>
<h4 id="中级"><a href="#中级" class="headerlink" title="中级"></a>中级</h4><p>   9.重用和延迟加载视图（Reuse and Lazy Load Views）</p>
<p>   10.缓存，缓存，缓存（Cache,Cache,Cache）</p>
<p>   11.考虑绘图（Consider Drawing）</p>
<p>   12.处理内存警告（Handle Memory Warnings）</p>
<p>   13.重用大开销对象（Reuse Expensive Objects）</p>
<p>   14.使用精灵表（Use Sprite Sheets ）</p>
<p>   15.避免重复处理数据（Avoid Re-Processing Data）</p>
<p>   16.选择正确的数据格式（Choose the Right Data Format）</p>
<p>   17.适当的设置背景图片（Set  Background Images Appropriately）</p>
<p>   18.减少你的网络占用（Reduce Your Web Footprint）  </p>
<p>   19.设置阴影路径（Set the Shadow Path ）</p>
<p>   20.你的表格视图Optimize Your Table Views）</p>
<p>   21.选择正确的数据存储方式（Choose Correct Data Storage Option）</p>
<h4 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h4><p>   22.加速启动时间（Speed up Launch Time ）</p>
<p>   23.使用自动释放池（Use AutoRelease Pool）</p>
<p>   24.缓存图像（Cache Images-Or not ）</p>
<p>   25.尽可能避免日期格式化器（Avoid Date Formatters Where Possible）</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><h4 id="图片残留"><a href="#图片残留" class="headerlink" title="图片残留"></a>图片残留</h4><p>instrument调试后，发现没被释放的全是imageIO，差不多就知道了，把读图的方式，从[UIImage imageNamed:@””],改成imageWithContentsOfFile，就可以了。<br>2.png</p>
<p>问题原因：</p>
<ul>
<li>imageNamed读取图片的方法，会缓存在内存中，所以较大的图片，还是用imageWithContentsOfFile，比如说引导页背景(图片全屏, 有时候运行APP会显示, 有时候根本就用不到).</li>
<li>TIPs1：.xcassets里的图片无法用imageWithContentsOfFile读取；</li>
<li>TIPs2：imageWithContentsOfFile读取图片需要加文件后缀名如png，jpg等；</li>
</ul>
<h4 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h4><p>更多的view意味着更多的渲染，也就是更多的CPU和内存消耗，对于那种嵌套了很多view在UIScrollView里边的app更是如此。</p>
<p>这里我们用到的技巧就是模仿<code>UITableView</code>和<code>UICollectionView</code>的操作:不要一次创建所有的subview，而是当需要时才创建，当它们完成了使命，把他们放进一个可重用的队列中。</p>
<p>这样的话你就只需要在滚动发生时创建你的views，避免了不划算的内存分配。</p>
<p>创建views的能效问题也适用于你app的其它方面。想象一下一个用户点击一个按钮的时候需要呈现一个view的场景。有两种实现方法：</p>
<ol>
<li><p>创建并隐藏这个view当这个screen加载的时候，当需要时显示它；</p>
</li>
<li><p>当需要时才创建并展示。</p>
</li>
</ol>
<p>每个方案都有其优缺点。用第一种方案的话因为你需要一开始就创建一个view并保持它直到不再使用，这就会更加消耗内存。然而这也会使你的app操作更敏感因为当用户点击按钮的时候它只需要改变一下这个view的可见性。</p>
<p>第二种方案则相反-消耗更少内存，但是会在点击按钮的时候比第一种稍显卡顿。</p>
<h3 id="比较两个对象"><a href="#比较两个对象" class="headerlink" title="比较两个对象"></a>比较两个对象</h3><p>对NSObject的实例进行比较，有2种不同的方式：</p>
<ol>
<li>运算符 ==。</li>
<li>方法 <code>- (BOOL)isEqual:(id)anotherInstance</code></li>
</ol>
<p>它们的区别在于：<br>方式一，是依据实例的内存地址来进行比较的。如果实例的内存地址相等，说明实例们是指向同一片内存区间，则肯定是相同的。<br>方式二，则比较的是实例的可读属性<code>hash</code>。如果两实例的<code>hash</code>属性值相等，则认为这两个实例是相等的，<code>- (BOOL)isEqual:</code>返回真。  </p>
<h3 id="autoreleasepool使用场景"><a href="#autoreleasepool使用场景" class="headerlink" title="autoreleasepool使用场景"></a>autoreleasepool使用场景</h3><p>我们读取一个文件，然后取其中某些内容，并且循环来做，就会导致文件数据在内存中堆积。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">NSArray *urls = &lt;# An array of file URLs #&gt;;</div><div class="line"></div><div class="line">for(NSURL *url in urls) &#123;</div><div class="line"></div><div class="line">@autoreleasepool &#123;</div><div class="line"></div><div class="line">NSError *error;</div><div class="line"></div><div class="line">NSString *fileContents = [NSString stringWithContentsOfURL:url encoding:NSUTF8StringEncoding error:&amp;error];</div><div class="line"></div><div class="line">/* Process the string, creating and autoreleasing more objects. */</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="内存优化大的思路"><a href="#内存优化大的思路" class="headerlink" title="内存优化大的思路"></a>内存优化大的思路</h3><p>正确的</p>
<ul>
<li>创建，懒加载</li>
<li>销毁，autoreleasepool</li>
<li>缓存，高频率，小图，高度等，其他不该缓存的不缓存比如大图</li>
<li>复用，大对象</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS中的视图渲染流程 iOS Rendering Process]]></title>
      <url>/2015/06/26/2015/iOS%E4%B8%AD%E7%9A%84%E8%A7%86%E5%9B%BE%E6%B8%B2%E6%9F%93/</url>
      <content type="html"><![CDATA[<p>从软件层面上，iOS借助<code>Core Graohics</code>，<code>Core Animation</code>，<code>Core Image</code>完成图形的处理，它们又都是借助OpenGL ES来完成底层的工作，如下图</p>
<p><img src="/26/2015/iOS中的视图渲染/../../../images/arch01.png" alt="Text"></p>
<p><img src="/26/2015/iOS中的视图渲染/../../../images/QcQlN7B.png" alt="Text"></p>
<p><img src="/26/2015/iOS中的视图渲染/../../../images/offscreen06.png" alt="Text"></p>
<p><img src="/26/2015/iOS中的视图渲染/../../../images/arch03.png" alt="Text"></p>
<p>计算机系统中 CPU、GPU、显示器是以上面这种方式协同工作的。CPU 计算好显示内容提交到 GPU，GPU 渲染完成后将渲染结果放入帧缓冲区，随后视频控制器会按照 VSync 信号逐行读取帧缓冲区的数据，经过可能的数模转换传递给显示器显示。</p>
<p>在最简单的情况下，帧缓冲区只有一个，这时帧缓冲区的读取和刷新都都会有比较大的效率问题。为了解决效率问题，显示系统通常会引入两个缓冲区，即双缓冲机制。在这种情况下，GPU 会预先渲染好一帧放入一个缓冲区内，让视频控制器读取，当下一帧渲染好后，GPU 会直接把视频控制器的指针指向第二个缓冲器。如此一来效率会有很大的提升。</p>
<p>在 iOS上，动画和视图的渲染其实是在另外一个进程做的（下面我们叫这个进程 render server），在 iOS 5 以前这个进程叫 SpringBoard，在 iOS 6 之后叫 BackBoard。</p>
<blockquote>
<p>对Core Animation的理解，不能认为这是一个动画框架，其实之前它叫做Layer Kit</p>
</blockquote>
<p>CoreAnimation的渲染流程可以用下图来概括:</p>
<p><img src="/26/2015/iOS中的视图渲染/../../../images/offscreen07.png" alt="Text"></p>
<h3 id="视图或者动画渲染的几个阶段"><a href="#视图或者动画渲染的几个阶段" class="headerlink" title="视图或者动画渲染的几个阶段"></a>视图或者动画渲染的几个阶段</h3><h4 id="在-APP-内部的有4个阶段"><a href="#在-APP-内部的有4个阶段" class="headerlink" title="在 APP 内部的有4个阶段"></a>在 APP 内部的有4个阶段</h4><ul>
<li><p>布局：在这个阶段，程序设置 View/Layer 的层级信息，设置 layer 的属性，如 frame，background color 等等。</p>
</li>
<li><p>创建 backing image：在这个阶段程序会创建 layer 的 backing image，无论是通过 setContents 将一个 image 传給 layer，还是通过 drawRect：或 drawLayer:inContext：来画出来的。所以 drawRect：等函数是在这个阶段被调用的。注意最终显示的图像</p>
</li>
<li><p>准备：在这个阶段，Core Animation 框架准备要渲染的 layer 的各种属性数据，以及要做的动画的参数，准备传递給 render server。同时在这个阶段也会解压要渲染的 image。（除了用 imageNamed：方法从 bundle 加载的 image 会立刻解压之外，其他的比如直接从硬盘读入，或者从网络上下载的 image 不会立刻解压，只有在真正要渲染的时候才会解压）。</p>
</li>
<li><p>提交：在这个阶段，Core Animation 打包 layer 的信息以及需要做的动画的参数，通过 IPC（inter-Process Communication）传递給 render server。</p>
</li>
</ul>
<h4 id="在-APP-外部的2个阶段"><a href="#在-APP-外部的2个阶段" class="headerlink" title="在 APP 外部的2个阶段"></a>在 APP 外部的2个阶段</h4><p>当这些数据到达 render server 后，会被反序列化成 render tree。然后 render server 会做下面的两件事：</p>
<ul>
<li><p>根据 layer 的各种属性（如果是动画的，会计算动画 layer 的属性的中间值），用 OpenGL 准备渲染。</p>
</li>
<li><p>渲染这些可视的 layer 到屏幕。</p>
</li>
</ul>
<h3 id="具体的UIView绘制流程"><a href="#具体的UIView绘制流程" class="headerlink" title="具体的UIView绘制流程"></a>具体的UIView绘制流程</h3><p><img src="/26/2015/iOS中的视图渲染/../../../images/572639-02b179aa4d510a8a.png" alt="UIView"><br>下面我们来对这个流程进行说明：</p>
<ul>
<li>当我们调用[UIView setNeedsDisplay]方法时，并没有执行立即执行绘制工作。</li>
<li>而是马上调用[view.layer setNeedsDisplay]方法，给当前layer打上脏标记。<br>在当前RunLoop快要结束的时候调用layer 的display方法，来进入到当前视图的真正绘制当中。</li>
<li>在layer的display方法内部，系统会判断layer的layer.delegate是否实现了displayLayer:方法，a.如果没有实现，则执行系统的绘制流程;b.如果实现了则会进入异步绘制的入口。</li>
<li>最后把绘制完的backing store（可以理解为位图）提交给GPU。</li>
</ul>
<p><img src="/26/2015/iOS中的视图渲染/../../../images/572639-cf50391b5f8a5bfc.png" alt="UIView"></p>
<p>对流程加以说明：</p>
<ul>
<li>在layer内部会创建一个backing store，我们可以理解为CGContextRef上下文。<br>判断layer是否有delegate:</li>
<li>如果有delegate，则会执行[layer.delegate drawLayer:inContext]（这个方法的执行是在系统内部执行的），然后在这个方法中会调用view的drawRect:方法，也就是我们重写view的drawRect:方法才会被调用到。</li>
<li>如果没有delegate，会调用layer的drawInContext方法，也就是我们可以重写的layer的该方法，此刻会被调用到。</li>
<li>最后把绘制完的backing store（可以理解为位图）提交给GPU。</li>
</ul>
<h3 id="与runloop的关系"><a href="#与runloop的关系" class="headerlink" title="与runloop的关系"></a>与runloop的关系</h3><p><img src="/26/2015/iOS中的视图渲染/../../../images/offscreen.png" alt="UIView"></p>
<h3 id="View的绘制与CPU"><a href="#View的绘制与CPU" class="headerlink" title="View的绘制与CPU"></a>View的绘制与CPU</h3><p><img src="/26/2015/iOS中的视图渲染/../../../images/process.png" alt="UIView"></p>
<h3 id="View的绘制与GPU"><a href="#View的绘制与GPU" class="headerlink" title="View的绘制与GPU"></a>View的绘制与GPU</h3><h4 id="GPU功能"><a href="#GPU功能" class="headerlink" title="GPU功能"></a>GPU功能</h4><p>GPU处理的单位是Texture<br>基本上我们控制GPU都是通过OpenGL来完成的，但是从bitmap到Texture之间需要一座桥梁，Core Animation正好充当了这个角色：<br>Core Animation对OpenGL的api有一层封装，当我们的要渲染的layer已经有了bitmap content的时候，这个content一般来说是一个CGImageRef，CoreAnimation会创建一个OpenGL的Texture并将CGImageRef（bitmap）和这个Texture绑定，通过TextureID来标识。<br>这个对应关系建立起来之后，剩下的任务就是GPU如何将Texture渲染到屏幕上了。</p>
<h4 id="GPU工作模式："><a href="#GPU工作模式：" class="headerlink" title="GPU工作模式："></a>GPU工作模式：</h4><p>整个过程也就是一件事：CPU将准备好的bitmap放到RAM里，GPU去搬这快内存到VRAM中处理。<br>而这个过程GPU所能承受的极限大概在16.7ms完成一帧的处理，所以最开始提到的60fps其实就是GPU能处理的最高频率。</p>
<h4 id="GPU性能瓶颈"><a href="#GPU性能瓶颈" class="headerlink" title="GPU性能瓶颈"></a>GPU性能瓶颈</h4><p>因此，GPU的挑战有两个：<br>• 将数据从RAM搬到VRAM中<br>• 将Texture渲染到屏幕上<br>这两个中瓶颈基本在第二点上。渲染Texture基本要处理这么几个问题：</p>
<h5 id="Compositing："><a href="#Compositing：" class="headerlink" title="Compositing："></a>Compositing：</h5><p>Compositing是指将多个纹理拼到一起的过程，对应UIKit，是指处理多个view合到一起的情况，如</p>
<p>[self.view addsubview : subview]<br>1<br>如果view之间没有叠加，那么GPU只需要做普通渲染即可。 如果多个view之间有叠加部分，GPU需要做blending。<br>加入两个view大小相同，一个叠加在另一个上面，那么计算公式如下：</p>
<p>R = S+D*(1-Sa)</p>
<p>R: 为最终的像素值<br>S: 代表 上面的Texture（Top Texture）<br>D: 代表下面的Texture(lower Texture)<br>Sa代表Texture的alpha值。<br>其中S,D都已经pre-multiplied各自的alpha值。<br>假如Top Texture（上层view）的alpha值为1，即不透明。那么它会遮住下层的Texture。即,R = S。是合理的。 假如Top Texture（上层view）的alpha值为0.5，S 为 (1,0,0)，乘以alpha后为(0.5,0,0）。D为(0，0，1)。 得到的R为（0.5，0，0.5）。<br>基本上每个像素点都需要这么计算一次。<br>因此，view的层级很复杂，或者view都是半透明的（alpha值不为1）都会带来GPU额外的计算工作。<br>应用应当尽量减少视图数量和层次，并在不透明的视图里标明 opaque 属性以避免无用的 Alpha 通道合成。</p>
<h5 id="Size"><a href="#Size" class="headerlink" title="Size"></a>Size</h5><p>这个问题，主要是处理image带来的，假如内存里有一张400x400的图片，要放到100x100的imageview里，如果不做任何处理，直接丢进去，问题就大了，这意味着，GPU需要对大图进行缩放到小的区域显示，需要做像素点的sampling，这种smapling的代价很高，又需要兼顾pixel alignment。计算量会飙升。</p>
<h5 id="shouldRasterize"><a href="#shouldRasterize" class="headerlink" title="shouldRasterize"></a>shouldRasterize</h5><p>其中shouldRasterize（光栅化）是比较特别的一种：<br>光栅化概念：将图转化为一个个栅格组成的图象。<br>光栅化特点：每个元素对应帧缓冲区中的一像素。</p>
<p>shouldRasterize = YES在其他属性触发离屏渲染的同时，会将光栅化后的内容缓存起来，如果对应的layer及其sublayers没有发生改变，在下一帧的时候可以直接复用。shouldRasterize = YES，这将隐式的创建一个位图，各种阴影遮罩等效果也会保存到位图中并缓存起来，从而减少渲染的频度（不是矢量图）。</p>
<p>相当于光栅化是把GPU的操作转到CPU上了，生成位图缓存，直接读取复用。</p>
<p>当你使用光栅化时，你可以开启“Color Hits Green and Misses Red”来检查该场景下光栅化操作是否是一个好的选择。绿色表示缓存被复用，红色表示缓存在被重复创建。</p>
<p>如果光栅化的层变红得太频繁那么光栅化对优化可能没有多少用处。位图缓存从内存中删除又重新创建得太过频繁，红色表明缓存重建得太迟。可以针对性的选择某个较小而较深的层结构进行光栅化，来尝试减少渲染时间。</p>
<p>注意：<br>对于经常变动的内容,这个时候不要开启,否则会造成性能的浪费</p>
<p>例如我们日程经常打交道的TableViewCell,因为TableViewCell的重绘是很频繁的（因为Cell的复用）,如果Cell的内容不断变化,则Cell需要不断重绘,如果此时设置了cell.layer可光栅化。则会造成大量的离屏渲染,降低图形性能。</p>
<h5 id="Offscreen-Rendering-And-Mask（离屏渲染）"><a href="#Offscreen-Rendering-And-Mask（离屏渲染）" class="headerlink" title="Offscreen Rendering And Mask（离屏渲染）"></a>Offscreen Rendering And Mask（离屏渲染）</h5><p>GPU屏幕渲染有以下两种方式：</p>
<p>On-Screen Rendering<br>意为当前屏幕渲染，指的是GPU的渲染操作是在当前用于显示的屏幕缓冲区中进行。</p>
<p>Off-Screen Rendering<br>意为离屏渲染，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。</p>
<p>相比于当前屏幕渲染，离屏渲染的代价是很高的，主要体现在两个方面：</p>
<ul>
<li><p>创建新缓冲区<br>要想进行离屏渲染，首先要创建一个新的缓冲区。</p>
</li>
<li><p>上下文切换<br>&gt;<br>离屏渲染的整个过程，需要多次切换上下文环境：先是从当前屏幕（On-Screen）切换到离屏（Off-Screen）；等到离屏渲染结束以后，将离屏缓冲区的渲染结果显示到屏幕上有需要将上下文环境从离屏切换到当前屏幕。而上下文环境的切换是要付出很大代价的。</p>
</li>
</ul>
<p>设置了以下属性时，都会触发离屏绘制：</p>
<p>shouldRasterize（光栅化）<br>masks（遮罩）<br>shadows（阴影）<br>edge antialiasing（抗锯齿）<br>group opacity（不透明）<br>复杂形状设置圆角等<br>渐变</p>
<h5 id="为什么会使用离屏渲染"><a href="#为什么会使用离屏渲染" class="headerlink" title="为什么会使用离屏渲染"></a>为什么会使用离屏渲染</h5><p>当使用圆角，阴影，遮罩的时候，图层属性的混合体被指定为在未预合成之前不能直接在屏幕中绘制，所以就需要屏幕外渲染被唤起。</p>
<p>屏幕外渲染并不意味着软件绘制，但是它意味着图层必须在被显示之前在一个屏幕外上下文中被渲染（不论CPU还是GPU）。</p>
<h5 id="渲染优化理论"><a href="#渲染优化理论" class="headerlink" title="渲染优化理论"></a>渲染优化理论</h5><p>需要注意的是，如果shouldRasterize被设置成YES，在触发离屏绘制的同时，会将光栅化后的内容缓存起来，如果对应的layer及其sublayers没有发生改变，在下一帧的时候可以直接复用。这将在很大程度上提升渲染性能。 </p>
<p>而其它属性如果是开启的，就不会有缓存，离屏绘制会在每一帧都发生。</p>
<p>在开发时需要根据实际情况来选择最优的实现方式，尽量使用On-Screen Rendering。简单的Off-Screen Rendering可以考虑使用Core Graphics让CPU来渲染。</p>
<h3 id="常见的几个问题"><a href="#常见的几个问题" class="headerlink" title="常见的几个问题"></a>常见的几个问题</h3><h4 id="图像多层次的合成—为何设置透明会增加GPU工作量"><a href="#图像多层次的合成—为何设置透明会增加GPU工作量" class="headerlink" title="图像多层次的合成—为何设置透明会增加GPU工作量"></a>图像多层次的合成—为何设置透明会增加GPU工作量</h4><p>所以当源纹理是完全不透明的时候，目标像素就等于源纹理。这可以省下 GPU 很大的工作量，因为可以直接使用最上边的纹理，而不需要计算多个纹理的融合，这也是为什么 CALayer 有一个叫做 opaque 的属性了。如果这个属性为 NO，GPU 将不会做任何合成，而是简单从这个层拷贝，不需要考虑它下方的任何东西(因为都被它遮挡住了)。</p>
<h4 id="关于卡顿的简单原理解释"><a href="#关于卡顿的简单原理解释" class="headerlink" title="关于卡顿的简单原理解释"></a>关于卡顿的简单原理解释</h4><p><img src="/26/2015/iOS中的视图渲染/../../../images/screenshot.png" alt="Text"></p>
<p><img src="/26/2015/iOS中的视图渲染/../../../images/offscreen022.png" alt="Text"></p>
<p>在 VSync 信号到来后，系统图形服务会通过 CADisplayLink 等机制通知 App，App 主线程开始在 CPU 中计算显示内容，比如视图的创建、布局计算、图片解码、文本绘制等。随后 CPU 会将计算好的内容提交到 GPU 去，由 GPU 进行变换、合成、渲染。随后 GPU 会把渲染结果提交到帧缓冲区去，等待下一次 VSync 信号到来时显示到屏幕上。由于垂直同步的机制，如果在一个 VSync 时间内，CPU 或者 GPU 没有完成内容提交，则那一帧就会被丢弃，等待下一次机会再显示，而这时显示屏会保留之前的内容不变。这就是界面卡顿的原因。最直接的理解，当我们拖动屏幕的时候，画面跟不上手指的移动，因为总是需要显示上一个或者上几个画面的内容。</p>
<p>从上面的图中可以看到，CPU 和 GPU 不论哪个阻碍了显示流程，都会造成掉帧现象。所以开发时，也需要分别对 CPU 和 GPU 压力进行评估和优化。</p>
<blockquote>
<p>扩展:</p>
<p>关于缓冲区的优化经历了三个阶段，最开始是单缓冲区，GPU等待屏幕读取完成之后再写入，有一个效率问题，后来发展为双缓冲区，这个时候的问题在于，缓冲区的切换是由GPU控制的，当GPU在缓冲区写入完成之后就会切换指针，这个时候的问题在于屏幕显示了一半A缓冲区间的内容，然后还显示了一半B缓冲区的内容，解决办法是加了一个垂直同步，也就是说GPU写缓存要等着屏幕的命令，当屏幕开始这一次读取的时候，CPU和GPU开始工作，最终写入缓存，当下一次开始读屏幕的时候会去检查B缓存区是不是更新写入了，如果没有写入就不更新指针，这次刷新仍然读取A，然后GPU这个时候还在写入，当写入成功了只能等着下次有机会显示在屏幕上了。这样就将指针指向切换的触发器由GPU写入完成切换为，屏幕读取完成并且写入成功，引入的新的问题是掉帧。</p>
</blockquote>
<h4 id="drawRect导致内存暴增的原理"><a href="#drawRect导致内存暴增的原理" class="headerlink" title="drawRect导致内存暴增的原理"></a>drawRect导致内存暴增的原理</h4><p><a href="http://bihongbo.com/2016/01/03/memoryGhostdrawRect/" target="_blank" rel="external">drawRect恶魔</a></p>
<p>视图的本质是来自于CALayer的contents属性，这是一个CGImage的类型，contents也被称为寄宿图，除了给它赋值CGImage之外，我们也可以直接对它进行绘制，绘制的方法正是这次问题的关键，通过继承UIView并实现-drawRect:方法即可自定义绘制。-drawRect: 方法没有默认的实现，因为对UIView来说，寄宿图并不是必须的，UIView不关心绘制的内容。如果UIView检测到-drawRect:方法被调用了，它就会为视图分配一个寄宿图，这个寄宿图的像素尺寸等于视图大小乘以contentsScale(这个属性与屏幕分辨率有关，我们的画板程序在不同模拟器下呈现的内存用量不同也是因为它)的值</p>
<h4 id="我们经常在drawrect方法里绘制代码，但该方法是谁调用的-何时调用的？"><a href="#我们经常在drawrect方法里绘制代码，但该方法是谁调用的-何时调用的？" class="headerlink" title="我们经常在drawrect方法里绘制代码，但该方法是谁调用的 何时调用的？"></a>我们经常在drawrect方法里绘制代码，但该方法是谁调用的 何时调用的？</h4><p>[self.view addSubview:view]<br>[CALayer drawInContext:]<br>[UIView(CALayerDelegate) drawLayer:inContext:]<br>[ZYYView drawRect:]</p>
<h4 id="drawrect方法内为何第一行代码总要获取图形的上下文"><a href="#drawrect方法内为何第一行代码总要获取图形的上下文" class="headerlink" title="drawrect方法内为何第一行代码总要获取图形的上下文"></a>drawrect方法内为何第一行代码总要获取图形的上下文</h4><p>每一个UIView都有一个layer，每一个layer都有个content，这个content指向的是一块缓存，叫做backing store<br>当UIView被绘制时（从 CA::Transaction::commit:以后），CPU执行drawRect，通过context将数据写入backing store<br>当backing store写完后，通过render server交给GPU去渲染，将backing store中的bitmap数据显示在屏幕上<br>所以在 drawRect 方法中 要首先获取 context</p>
<h4 id="layer的代理必须是view吗，可以是vc吗？为何CALayerDelegate-不能主动遵循？"><a href="#layer的代理必须是view吗，可以是vc吗？为何CALayerDelegate-不能主动遵循？" class="headerlink" title="layer的代理必须是view吗，可以是vc吗？为何CALayerDelegate 不能主动遵循？"></a>layer的代理必须是view吗，可以是vc吗？为何CALayerDelegate 不能主动遵循？</h4><p><img src="/26/2015/iOS中的视图渲染/../../../images/delegate.png" alt="Text"></p>
<p>不能再将某个UIView设置为CALayer的delegate，因为UIView对象已经是它内部根层的delegate，再次设置为其他层的delegate就会出问题。UIViewController是可以的。在设置代理的时候，它并不要求我们遵守协议，说明这个方法为非正式协议，就不需要再额外的显示遵守协议了</p>
<h4 id="iOS-为什么必须在主线程中操作UI"><a href="#iOS-为什么必须在主线程中操作UI" class="headerlink" title="iOS 为什么必须在主线程中操作UI"></a>iOS 为什么必须在主线程中操作UI</h4><p>因为UIKit不是线程安全的。试想下面这几种情况：</p>
<ul>
<li>两个线程同时设置同一个背景图片，那么很有可能因为当前图片被释放了两次而导致应用崩溃。</li>
<li>两个线程同时设置同一个UIView的背景颜色，那么很有可能渲染显示的是颜色A，而此时在UIView逻辑树上的背景颜色属性为B。</li>
<li>两个线程同时操作view的树形结构：在线程A中for循环遍历并操作当前View的所有subView，然后此时线程B中将某个subView直接删除，这就导致了错乱还可能导致应用崩溃。 </li>
</ul>
<p>iOS4之后苹果将大部分绘图的方法和诸如 UIColor 和 UIFont 这样的类改写为了线程安全可用，但是仍然强烈建议讲UI操作保证在主线程中执行。</p>
<h4 id="如何扩大button的惦记范围"><a href="#如何扩大button的惦记范围" class="headerlink" title="如何扩大button的惦记范围"></a>如何扩大button的惦记范围</h4>]]></content>
      
        
        <tags>
            
            <tag> iOS基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OC中的各种变量]]></title>
      <url>/2015/06/10/2015/OC%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<p>首先看一下几个概念分类：</p>
<ul>
<li>成员变量</li>
<li>属性</li>
<li>局部变量</li>
<li>全局变量</li>
<li>静态变量 = 全局变量 + static声明的局部变量<a id="more"></a>
</li>
</ul>
<blockquote>
<p>首先声明：</p>
<ul>
<li>全局变量和静态变量都存在于全局内存区，在app生命周期内只初始化一次</li>
<li>局部变量存在于栈内存区</li>
<li>这里所讨论的是变量，而不是变量的值，这里两个概念<code>int a = 10</code>，a是变量，而10是它的值，这是两个概念</li>
<li>地位内存是全局变量区，高位内存是堆或者栈<code>0x108eae338</code>9位， <code>0x7fff56d52ad4</code>12位</li>
</ul>
</blockquote>
<h2 id="成员变量var"><a href="#成员变量var" class="headerlink" title="成员变量var"></a>成员变量var</h2><blockquote>
<p>定义：变量存活周期跟你定义的该类实体对象一样；作用域是整个实体对象；可以在h文件中声明或者在m文件中@implementation上面添加的</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@interface CustomView1()</div><div class="line">&#123;</div><div class="line">	UIView *_backView1;</div><div class="line">&#125;</div><div class="line">@property (nonatomic, strong) UIView *backView;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>上边的两种写法都是对的，都代表是一个类的成员变量，只不过@property关键字做的事情比较多，上边类名称+()叫做extension，类扩展，如果有括号内加上名字叫做category，是分类。成员变量声明周期与类的对象相同。<br>我们可以通过将一个对象赋值给成员变量来提升他的生命周期。</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>@property关键字标识的变量</p>
<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><blockquote>
<p>全局变量指的是存在于全局内存区，这个app声明周期只初始化一次，在所有的文件中不允许重名，下面的情况均属于全局变量<br>.m文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">int a;</div><div class="line"></div><div class="line">@interface CustomView1()</div><div class="line"></div><div class="line">@end</div><div class="line">int b;</div><div class="line">@implementation CustomView1</div><div class="line">int c;</div><div class="line">CustomView *_backView;</div><div class="line"></div><div class="line">- (instancetype)initWithFrame:(CGRect)frame &#123;</div><div class="line">    if (self = [super initWithFrame:frame]) &#123;</div><div class="line">        [self initSubViews];</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure></p>
<p>说明：a，b，c均为全局变量</p>
</blockquote>
<p>.h文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int d;</div><div class="line">@interface CustomView1</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure></p>
<blockquote>
<p>说明：主要不是在interface关键字与end关键字之间都是全局变量，如果其他文件中有这个名字的变量，那么编译时不能够通过的</p>
</blockquote>
<p>全局变量可以提供全部的外界访问，无论你定义在h文件或者是m文件中，并且无需引入头文件，但是我们需要再重新再定义一下这个变量，否则编译器是不会通过的，他怎么知道你有这个变量呢，你说是吧，所以我们可以像下边这样来使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &quot;CustomView1.h&quot;</div><div class="line"></div><div class="line">typedef void(^MyBlcok)();</div><div class="line">NSString * const waha = @&quot;lalala&quot;;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@property (nonatomic, copy) MyBlcok myBlock;</div><div class="line">@property (nonatomic, strong) UIView *backView;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line"></div><div class="line">#import &quot;AppDelegate.h&quot;</div><div class="line"></div><div class="line">@interface AppDelegate ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation AppDelegate</div><div class="line"></div><div class="line"></div><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">    // Override point for customization after application launch.</div><div class="line">    extern NSString *waha;</div><div class="line"></div><div class="line">    NSLog(@&quot;appdelegate***%@---%p&quot;, waha, &amp;waha);</div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>我们需要再重新定义一下这个变量，否则编译器是通不过的，不过要将这变量变为全局才可以，其实也就是改变一下它的内存位置，将其从栈移动到全局内存中去</p>
</blockquote>
<h3 id="static-全局变量"><a href="#static-全局变量" class="headerlink" title="static + 全局变量"></a>static + 全局变量</h3><p>这种方式的话这个全局变量就会变成这个类所私有的，声明周期与该类相同，允许重名</p>
<h3 id="iOS中使用全局变量的方法"><a href="#iOS中使用全局变量的方法" class="headerlink" title="iOS中使用全局变量的方法"></a>iOS中使用全局变量的方法</h3><ul>
<li>静态变量</li>
<li>单例</li>
<li>在某个现成的单例中增加属性例如:appdelegate</li>
</ul>
<h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>除了全局变量剩下的都是局部变量，内存是在栈上的，如果用关键字static来修饰局部变量那么它就变成了一个静态变量，内存也到了全局变量区，只是生命周期发生了改变，但是作用域并没有发生变化。</p>
<ul>
<li>如果用extern来修饰局部变量，那么它就会直接内存区变为全局区，生命周期和app一样了。如果后边再有其他的同名全局变量，编译器不会报错，但是后边生命的那个不会生效的，不过值还是允许改的。可以打印来验证一下，无论你在后边声明多少个该同名变量，他们的地址总是一样的。</li>
</ul>
<h2 id="常量与const关键字"><a href="#常量与const关键字" class="headerlink" title="常量与const关键字"></a>常量与const关键字</h2><p>顾名思义，常量就是不能被修改的变量，说到这里我就有一个疑问，这个跟宏有啥区别？</p>
<ul>
<li>const简介：之前常用的字符串常量，一般是抽成宏，但是苹果不推荐我们抽成宏，推荐我们使用const常量。</li>
<li>编译时刻:宏是预编译（编译之前处理），const是编译阶段。</li>
<li>编译检查:宏不做检查，不会报编译错误，只是替换，const会编译检查，会报编译错误。</li>
<li>宏的好处:宏能定义一些函数，方法。 const不能。</li>
<li>宏的坏处:使用大量宏，容易造成编译时间久，每次都需要重新替换。</li>
<li>注意:很多Blog都说使用宏，会消耗很多内存，我这验证并不会生成很多内存，宏定义的是常量，常量都放在常量区，只会生成一份内存</li>
</ul>
<p>我们确实可以选择使用宏来定义一个常量，然后给很多地方使用，当我需要改变这个变量的时候，我只要改变这个宏后边的值就可以了，使用的场景比如：</p>
<ul>
<li>项目中的url</li>
<li>项目中的屏幕尺寸</li>
<li>项目中的某些特定颜色和尺寸</li>
</ul>
<p>有些地方宏会体现出它的优势，比如一些代码块的替换，具体来说，比如屏幕的尺寸的获取，比如weakSelf的定义，但是使用常量的情况使用宏是有些问题的，就是因为宏是没有类型判断的，那么如果某个CGFloat的值，我们使用了宏，那么编译阶段就不会警告任何错误，哪怕你定义了一个NSString类型的宏，然后你又把它当做了CGFloat来使用，所以对于某些值得定义，我们要使用类型常量，而不用宏来定义，比如：</p>
<ul>
<li>动画时间</li>
<li>按钮尺寸</li>
<li>文字尺寸</li>
<li>等等</li>
</ul>
<p>具体来讲又可能分为三种情况：</p>
<ul>
<li>全部文件都使用</li>
<li>只给自己使用</li>
</ul>
<p>我们先来看看给自己使用的常量的定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#import &quot;key1.h&quot;</div><div class="line"></div><div class="line">static const NSTimeInterval kAnimationDuration = 0.2;</div><div class="line"></div><div class="line">@interface key1()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation key1</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>要点有两个：</p>
<ul>
<li>要用static和const同时来声明</li>
<li>声明在关键字之外</li>
</ul>
<p>声明在关键字之外那么就是全局变量，又因为是给自己用的，所以要加上static做限制，而const是为了防止这个变量在后边被修改</p>
<p>再来看一下全局使用的常量，此类常量需要放在<code>全局符号表</code>,下面我们来看一下给全局使用的常量是如何来定义的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//In the header file</div><div class="line">extern NSString *const EOCStringConst;//这样的const的位置意味着这个指针是一个常量</div><div class="line"></div><div class="line">//In the implementation file</div><div class="line">NSString *const EOCStringConstant = @&quot;VALUE&quot;;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这种常量一般在头文件中声明，然后在实现文件中定义，注意const的位置，不允许更改指针的指向，另外编译器看到extern关键字，就明白在全局符号表中将会有一个名字叫EOCStringConstant的符号了，</p>
</blockquote>
<h2 id="static和extern"><a href="#static和extern" class="headerlink" title="static和extern"></a>static和extern</h2><blockquote>
<p>static作用：</p>
<ul>
<li>修饰局部变量<ul>
<li>延长局部变量的生命周期</li>
<li>局部变量只会生成一份内存，初始化一次</li>
<li>改变局部变量的作用域</li>
</ul>
</li>
<li>修饰全局变量<ul>
<li>只能在本文件访问，修改全局变量的作用域，生命周期不变</li>
<li>避免重复定义全局变量</li>
</ul>
</li>
</ul>
<p>extern</p>
<ul>
<li>作用：获取全局变量的值，不能用来定义变量</li>
<li>工作原理：现在当前文件查找有木有全局变量，没有的话才去其他文件查找</li>
</ul>
</blockquote>
<h2 id="static和const"><a href="#static和const" class="headerlink" title="static和const"></a>static和const</h2><p>static与const作用:声明一个只读的静态变量</p>
<h2 id="extern与const联合使用"><a href="#extern与const联合使用" class="headerlink" title="extern与const联合使用"></a>extern与const联合使用</h2><ul>
<li><p>开发中使用场景:在多个文件中经常使用的同一个字符串常量，可以使用extern与const组合。</p>
<ul>
<li>原因:static与const组合：在每个文件都需要定义一份静态全局变量。</li>
<li>extern与const组合:只需要定义一份全局变量，多个文件共享。</li>
</ul>
</li>
<li><p>全局常量正规写法:开发中便于管理所有的全局变量，通常搞一个GlobeConst文件，里面专门定义全局变量，统一管理，要不然项目文件多不好找。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">GlobeConst.h</div><div class="line"></div><div class="line">/*******************************首页****************************/</div><div class="line">extern NSString * const nameKey = @&quot;name&quot;;</div><div class="line">/*******************************首页****************************/</div><div class="line"></div><div class="line">GlobeConst.m</div><div class="line"></div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">/*******************************首页****************************/</div><div class="line">NSString * const nameKey = @&quot;name&quot;;</div><div class="line">/*******************************首页****************************/</div></pre></td></tr></table></figure>
<p>我们现在来理解一下上面的代码，其实应该反过来看，首先我们在.m文件中声明并且对nameKey进行了赋值，所以我们在.h文件中才可以通过extern来取到nameKey的值，并且使用，其实我们完全可以在其他地方进行nameKey的取值，比如另外一个不相关的.m文件，只不过这样做会比较繁琐，需要重新声明这个变量，所以我们统一将这些个静态变量以extern的方式声明出来，放在.h文件中，让其他的文件调用，注意，这里是不能进行赋值操作的</p>
<blockquote>
<p>这里做一个辨析：全局变量并不是因为你用extern关键字，全局变量是由你变量声明的位置所决定的，而extern其实是一个取值的操作，同时告诉编译器这个变量无论声明在哪里，我知道这个全局变量是存在的，放心的使用就好，但是如果真的这个全局变量是不存在的，比如说你把它声明定义在了某个函数内部，那么这个时候肯定报错了<br>另外我们使用<code>extern NSString *name = @&quot;名字&quot;</code>这种写法是没有意义的，因为extern是取值操作，这样写编译器也会报错的</p>
</blockquote>
<p>关于extern关键字总结如下：</p>
<ul>
<li><ol>
<li>Declaration can be done any number of times but definition only once.</li>
</ol>
</li>
<li><ol>
<li>“extern” keyword is used to extend the visibility of variables/functions().</li>
</ol>
</li>
<li><ol>
<li>Since functions are visible through out the program by default. The use of extern is not needed in function declaration/definition. Its use is redundant.</li>
</ol>
</li>
<li><ol>
<li>When extern is used with a variable, it’s only declared not defined.</li>
</ol>
</li>
<li><ol>
<li>As an exception, when an extern variable is declared with initialization, it is taken as definition of the variable as well.</li>
</ol>
</li>
</ul>
<h2 id="weak-与-strong"><a href="#weak-与-strong" class="headerlink" title="weak 与 strong"></a><strong>weak 与 </strong>strong</h2><p>当我们定义一个变量的时候<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UIView *view;</div><div class="line">view = [UIView alloc] init];</div></pre></td></tr></table></figure></p>
<p>其实这个view前边默认有一个关键字，那就是__strong，这是因为这个关键字，所以我们的=赋值的时候，是一个强引用，所以alloc创建出来的对象是不会被释放的，又因为view这个变量被定义在栈上，所以当代码执行到一个函数结束的时候，这个view变量会被释放，这样alloc出来的对象就失去了强引用，这部分内存也将被系统所回收。</p>
<p>现在我们来理解一下block的赋值操作，我们知道，当一个block被创建的时候，假如没有捕获变量，那么这个block是定义在全局的，对全局block做一个强引用的赋值操作是不会改变它的存储位置的，如果这个block捕获了一个栈上的变量，那么这个block就会被移动到栈上，这个时候如果我们对这个block做了一个强引用的赋值操作，这个block就被移动到了堆上。内存管理策略就变成了是否有强指针引用</p>
<h2 id="使用常量替换宏定义"><a href="#使用常量替换宏定义" class="headerlink" title="使用常量替换宏定义"></a>使用常量替换宏定义</h2><p>使用宏定义过多的话，随着工程越来越大，编译速度会越来越慢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">static CGFloat const kLogoImageWidth = 100; //logo宽度</div><div class="line">static CGFloat const kLogoImageHeight = 100; //logo宽度static CGFloat const kLogoImageY = 110;</div><div class="line">static CGFloat const kBtnHeight = 40;</div><div class="line">static CGFloat const kPadding = 30;</div><div class="line">static CGFloat const kWeixinTopPadding = 15;</div><div class="line">static CGFloat const kWeiboLoginBottom = 230;</div><div class="line">#define kScaleSpace(designSpace) ((designSpace)(SCREEN_HEIGHT/667.0)) //根据iphone6 的设计稿计算缩放高度</div></pre></td></tr></table></figure></p>
<p>替换完成之后代码的编译速度确实上去了，现在编译快了。希望对正在为编译速度慢感到困惑的您有所帮助</p>
<blockquote>
<p>补充说明：以上的类型常量替换宏的情况，只是适用于单个文件的情况。如果是多个文件共享的常量，苹果推荐的这样的方式：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">UserInfoModelConstants.h</div><div class="line"></div><div class="line">extern NSString *const USER_AGE_KEY ;</div><div class="line">extern NSString *const USER_TELPHONE_KEY ;</div><div class="line">extern NSString *const USER_ADDRESS_KEY ;</div><div class="line">extern NSString *const USER_BRIEF_KEY ;</div><div class="line"></div><div class="line">UserInfoModelConstants.m</div><div class="line"></div><div class="line">NSString *const BKUSER_AGE_KEY = @&quot;XXXXX.userAge&quot;;</div><div class="line">NSString *const BKUSER_TELPHONE_KEY = @&quot;XXXXX.telphoneNO&quot;;</div><div class="line">NSString *const BKUSER_ADDRESS_KEY = @&quot;XXXXX.address&quot;;</div><div class="line">NSString *const BKUSER_BRIEF_KEY = @&quot;XXXXX.brief&quot;;</div></pre></td></tr></table></figure>
<p>在需要使用共享常量的文件中引入UserInfoModelConstants.h即可。</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Block使用总结]]></title>
      <url>/2015/05/02/2015/Block%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>block用来保存一段代码，在需要的时候回调，是对闭包的实现<br><a id="more"></a></p>
<p>所以，切勿将过程代码当做block的实际实现，切记切记！！！</p>
<h2 id="block的声明"><a href="#block的声明" class="headerlink" title="block的声明"></a>block的声明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">//变量</div><div class="line">void (^myBlock)();</div><div class="line">int (^myBlock1)(int, int);</div><div class="line"></div><div class="line">//属性1</div><div class="line">typydef void(^Myblock)();//这样Myblock就代表一个block类型了</div><div class="line">@property (nonatomic, copy) Myblock myblock; </div><div class="line"></div><div class="line">//属性2</div><div class="line">@property (nonatomic, copy) void(^myBlock)(int);//这样仍然是一个block，而且名字就是myBlock</div><div class="line"></div><div class="line">//参数</div><div class="line">- (void) modifyUserInfoWithNickName:(NSString *) nickName</div><div class="line">                           userLogo:(NSString *) userLogo</div><div class="line">                                sex:(NSNumber *) sex</div><div class="line">                           location:(NSString *) location</div><div class="line">                            succeed:(void(^)())successBlock</div><div class="line">                               fail:(void(^)(NSError *error))errorBlock;</div><div class="line">                               //这个时候的格式就变成了(返回+(^)(参数))名字</div><div class="line">                               </div><div class="line">也可以这样</div><div class="line"></div><div class="line">typedef void(^FXSuccessBlock)(id result);</div><div class="line">typedef void(^FXFailBlock)(NSError *error);</div><div class="line"></div><div class="line">- (void)onlyGetLoginUserInfo:(FXSuccessBlock)successHandler</div><div class="line">                 failHandler:(FXFailBlock)failHandler;</div></pre></td></tr></table></figure>
<p>block声明的格式：<code>返回值 + block名字 + 参数</code></p>
<h2 id="block实现"><a href="#block实现" class="headerlink" title="block实现"></a>block实现</h2><p>block实现的格式：<code>^(参数){}</code></p>
<p>注意block实现是要加上变量名字的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">self.loginBlock = ^(BOOL complete) &#123;</div><div class="line">  NSLog(@&quot;登录成功&quot;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>或者有种偷巧的写法，就是利用set方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[self setLoginSucBlock:^(BOOL complete) &#123;</div><div class="line">     NSLog(@&quot;登录成功&quot;);  </div><div class="line"> &#125;];</div></pre></td></tr></table></figure></p>
<h2 id="Block对外部变量的管理"><a href="#Block对外部变量的管理" class="headerlink" title="Block对外部变量的管理"></a>Block对外部变量的管理</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="1、局部变量"><a href="#1、局部变量" class="headerlink" title="1、局部变量"></a>1、局部变量</h4><p>局部自动变量，在Block中只读。Block定义时copy变量的值，在Block中作为常量使用，所以即使变量的值在Block外改变，也不影响他在Block中的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">int base = 100;</div><div class="line">long (^sum)(int, int) = ^ long (int a, int b) &#123;</div><div class="line">     return base + a + b;</div><div class="line">&#125;;</div><div class="line">base = 0;</div><div class="line">PRintf(&quot;%ld\n&quot;,sum(1,2));</div><div class="line">// 这里输出是103，而不是3, 因为块内base为拷贝的常量 100</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>//进入block的是值，而不是地址，因为这个变量是定义在栈内存中的，随时可能被释放，所以我要将它的值copy进来，防止我使用的时候取不到</p>
<h4 id="2、STATIC修饰符的全局变量"><a href="#2、STATIC修饰符的全局变量" class="headerlink" title="2、STATIC修饰符的全局变量"></a>2、STATIC修饰符的全局变量</h4><p>因为全局变量或静态变量在内存中的地址是固定的，Block在读取该变量值的时候是直接从其所在内存读出，获取到的是最新值，而不是在定义时copy的常量。</p>
<p>加入一个变量定义在函数之外，那么这个变量是全局变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">static int a = 10;</div><div class="line">    </div><div class="line">int(^sum)(int) =^(int b) &#123;</div><div class="line">    return a + b;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">a = 0;</div><div class="line"></div><div class="line">NSLog(@&quot;----%d&quot;, sum(2));//2</div></pre></td></tr></table></figure>
<p>//进入block的是地址而不是值，因为static修饰的变量在内存中存在于静态变量区，是不会被回收或者释放的，即使释放了，也会在爱disk中有备份，当我们使用的时候再创建然后赋值给我就好了，所以不用担心被销毁，所以用地址就好了</p>
<h4 id="3-block修饰的变量"><a href="#3-block修饰的变量" class="headerlink" title="3.__block修饰的变量"></a>3.__block修饰的变量</h4><p>被__block修饰的变量称作Block变量。 基本类型的Block变量等效于全局变量、或静态变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> __block int a = 10;</div><div class="line">    </div><div class="line">int(^sum)(int) =^(int b) &#123;</div><div class="line">    return a + b;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">a = 0;</div><div class="line"></div><div class="line">NSLog(@&quot;----%d&quot;, sum(2));//2</div><div class="line">//进入block的是地址而不是值，这个道理与static是一致的</div></pre></td></tr></table></figure>
<p>注意：如果我们用NSString来验证对象的block的内存管理是没有意义的，因为，某几种情况下NSString对象是存放在常量区的，相当于int这种变量</p>
<p><code>补充：</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *name = @&quot;han&quot;;</div><div class="line">NSLog(&quot;%p&quot;, name);//打印的是@&quot;han&quot;的地址</div><div class="line">NSLog(&quot;%p&quot;, &amp;name);//打印的是name这个指针的地址</div></pre></td></tr></table></figure></p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象一定是存在于堆上的，所以决定要不要拷贝指针的关键在于引用的指针<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@implementation ViewController</div><div class="line">UIView *view;</div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    view = [[UIView alloc] init];</div><div class="line"></div><div class="line">    void(^stackBlock)() = ^() &#123;</div><div class="line">        NSLog(@&quot;&amp;&amp;&amp;&amp;&amp;%p&quot;, &amp;view);</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    NSLog(@&quot;****%p&quot;, &amp;view);</div><div class="line">    </div><div class="line">    stackBlock();</div><div class="line">&#125;</div><div class="line">@end</div><div class="line">//2016-07-11 20:47:36.908 block[1906:517460] ****0x1000d1208</div><div class="line">//2016-07-11 20:47:36.909 block[1906:517460] &amp;&amp;&amp;&amp;&amp;0x1000d1208</div></pre></td></tr></table></figure></p>
<p>现在是一个全局变量来引用UIView，我们发现指针直接就是原来的地址，并没有发生变化，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">void(^globalBlock)();</div><div class="line">int a;</div><div class="line">//UIView *view;</div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">     UIView *view = [[UIView alloc] init];</div><div class="line"></div><div class="line">    void(^stackBlock)() = ^() &#123;</div><div class="line">        NSLog(@&quot;&amp;&amp;&amp;&amp;&amp;%p&quot;, &amp;view);</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    NSLog(@&quot;****%p&quot;, &amp;view);</div><div class="line">    </div><div class="line">    stackBlock();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//2016-07-11 21:00:51.055 block[1916:519453] ****0x16fd69f28</div><div class="line">//2016-07-11 21:00:51.056 block[1916:519453] &amp;&amp;&amp;&amp;&amp;0x13563a480</div></pre></td></tr></table></figure>
<p>很明显是两个指针</p>
<p>那如果是一个成员变量会是什么效果呢？经过验证也是同一个指针。<br>一个指针和两个指针有啥区别呢？答案就是，如果是两个指针的话，那么即使你外边的指针释放掉，这个对象也是释放不掉的，如果这个block不释放的话，所以如果这个block是一个全局的block这个对象也就没有释放的可能了。<br>解决的方案就是，传入一个弱引用的指针，这样起码这个被引用的对象是不会因为block而不能释放了。<br>从这个角度来理解，为什么会存在堆，栈，全局block，因为如果我引用了某个变量，而这个变量是在栈上的，那么不能因为被block引用而不释放这个变量，所以解决方案就是直接copy一份这个变量的值进来block结构体，用一个指针去引用，而如果引用了一个全局的变量，那么就不存在释放不掉的问题了，那么就不用再复制一份了。</p>
<blockquote>
<p>一个block值创建的时候是在全局区的</p>
<ul>
<li>如果这个时候给我引用了一个全局的变量，那么我仍然在全局</li>
<li>如果这个时候给我引用一个局部变量，那么这个block就会被移动到栈上，这里要注意的是成员变量与局部变量同等对待，因为它毕竟不在全局变量区，但是捕获成员变量的时候，因为这个变量是不会被轻易释放的，所以不会copy这个指针</li>
<li>这个时候如果你在ARC情况下对这个block做一个赋值操作，如果之前这个block在栈上，那么一个strong引用操作之后这个block就被移动到堆上了</li>
</ul>
</blockquote>
<p>//todo<br>autorelease关键字起作用在arc下，需要这个对象是一个autorelease对象，默认情况下，UIView不是这样的对象，其他的是这样的对象，所以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@autorelease &#123;</div><div class="line">  UIView *view = [UIView alloc] init];//内存会一直增加，不会释放的，以为UIView不会被释放，如果这个换成UIImage或者其他的，那就没有问题</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS中的屏幕旋转]]></title>
      <url>/2015/04/12/2015/iOS%E4%B8%AD%E7%9A%84%E5%B1%8F%E5%B9%95%E6%97%8B%E8%BD%AC/</url>
      <content type="html"><![CDATA[<h3 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h3><ul>
<li>旋转事件只传递给主window</li>
<li>当我们使用webView播放视频的时候，它会创建一个UIViewController，然后创建一个window，让这个控制器成为这个window的根控制器，然后再将视频显示的view添加到这个UIViewController的控制器view上<a id="more"></a></li>
<li>屏幕选中的本质是当前主控制器的view跟随屏幕的旋转而旋转，并且调整大小至当前的宽高，所以我们要做的就是控制当前控制器要不要旋转</li>
<li>再本质一些就是，要对当前keywindon的根控制器进行控制＋对你要旋转的界面进行控制</li>
</ul>
<h3 id="详述"><a href="#详述" class="headerlink" title="详述"></a>详述</h3><h4 id="第一层设置"><a href="#第一层设置" class="headerlink" title="第一层设置"></a>第一层设置</h4><p><img src="/12/2015/iOS中的屏幕旋转/.../../../images/1444701872103.png" alt="Alt text"><br>在这里选择是否支持横竖屏</p>
<h4 id="第二层设置"><a href="#第二层设置" class="headerlink" title="第二层设置"></a>第二层设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (UIInterfaceOrientationMask)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window &#123;  </div><div class="line">    return UIInterfaceOrientationMaskAll;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Appdelegate中进行设置，实现这个方法，在这里返回你要支持的方向，这个设置会覆盖上边在general中的设置</p>
<h4 id="第三层设置"><a href="#第三层设置" class="headerlink" title="第三层设置"></a>第三层设置</h4><p>在window的<code>根控制器</code>中实现这两个方法，来加以控制，是否允许旋转以及支持的方向<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//是否允许旋转</div><div class="line">- (BOOL)shouldAutorotate &#123;</div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line">//旋转的时候支持的方向</div><div class="line">- (UIInterfaceOrientationMask)supportedInterfaceOrientations &#123;</div><div class="line">    </div><div class="line">    return UIInterfaceOrientationMaskAll;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="第四层设置"><a href="#第四层设置" class="headerlink" title="第四层设置"></a>第四层设置</h4><p>在你要控制是否旋转的这个控制里边实现上边的这两个方法</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><blockquote>
<ul>
<li>当屏幕旋转一次就会调用一次这个方法，来询问支持的方向</li>
<li>这里返回的window是Appdelegate这个对象持有的window，也就是说，即使中间你换掉了keywindow这里返回的仍然只是最开始创建的那个window，也就是说，对你最后创建的window这个方法并不能影响</li>
<li>一个控制器到底是否支持横屏，自己说了是不算的，主要看两个东西<ul>
<li>AppDelegate中的这个方法返回支持的方向</li>
<li>window的根控制器中是否允许旋转，以及支持的方向</li>
<li><strong>取交集</strong></li>
</ul>
</li>
</ul>
</blockquote>
<p>上边的的四层设置起作用的情况，我们要分三种情况来说</p>
<blockquote>
<ul>
<li>要控制的控制器间接依附最开始创建的window<ul>
<li>该控制器是通过navigationcontroller管理的/直接添加childcontrollers</li>
<li>present…</li>
</ul>
</li>
<li>要控制的控制器依附于新创建的window</li>
</ul>
</blockquote>
<h5 id="原始window"><a href="#原始window" class="headerlink" title="原始window"></a>原始window</h5><blockquote>
<ul>
<li>受到Appdelegate中的方法的影响</li>
<li>如果控制器是modal出来的，那么该控制器中实现的这两个方法会生效，但是依然遵循交集的原则</li>
<li>如果这个控制器是navigationController管理或者直接添加childcontrollers，该控制器中的方法是没有作用的，它只受到appdelegate和window根控制器的影响</li>
</ul>
</blockquote>
<h5 id="依附于新创建的window"><a href="#依附于新创建的window" class="headerlink" title="依附于新创建的window"></a>依附于新创建的window</h5><blockquote>
<ul>
<li>不受到APPdelegate方法的影响</li>
<li>其它都一样，但是分析的起点就变成了当前window的根控制器<ul>
<li>比如，webView播放视频的时候，它会新创建window，并且以UIViewController为根控制器，所以我们应该在这个控制器中添加控制代码，但是这个是系统的类，我们就只能靠分类来添加代码了</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><h4 id="整体是支持横屏，但是某个界面禁止"><a href="#整体是支持横屏，但是某个界面禁止" class="headerlink" title="整体是支持横屏，但是某个界面禁止"></a>整体是支持横屏，但是某个界面禁止</h4><p>根据上边叙述，我们可以得到以下方案：</p>
<ul>
<li>通过present…来管理控制器</li>
</ul>
<blockquote>
<p>在这个控制器中添加控制器代码，禁止旋转或者只支持竖着<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">  @implementation HSViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">   [super viewDidLoad];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (BOOL)shouldAutorotate &#123;</div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (UIInterfaceOrientationMask)supportedInterfaceOrientations &#123;</div><div class="line">    return UIInterfaceOrientationMaskPortrait;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>不通过present来管理界面<blockquote>
<p>通过在Appdelegate或者根控制器中加判断代码，实现在不同的当前控制器，返回不同的支持的方向</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> - (UIInterfaceOrientationMask)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window &#123;</div><div class="line">    </div><div class="line"></div><div class="line">   HSNavigationContronller *nav = (HSNavigationContronller *)[UIApplication sharedApplication].keyWindow.rootViewController;</div><div class="line">    </div><div class="line">    if ([nav.topViewController isKindOfClass:[HSViewController class]]) &#123;</div><div class="line">        return UIInterfaceOrientationMaskPortrait;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return UIInterfaceOrientationMaskAll;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h4 id="整体是支持竖屏，但是某个界面可以横屏"><a href="#整体是支持竖屏，但是某个界面可以横屏" class="headerlink" title="整体是支持竖屏，但是某个界面可以横屏"></a>整体是支持竖屏，但是某个界面可以横屏</h4><p>这种需求，只能通过加判断代码来做到</p>
<h4 id="控制通过webView加载的视频全屏时的横竖屏"><a href="#控制通过webView加载的视频全屏时的横竖屏" class="headerlink" title="控制通过webView加载的视频全屏时的横竖屏"></a>控制通过webView加载的视频全屏时的横竖屏</h4><p>webView的视频在全屏的时候，会新创建一个window，所以你在Appdelegate或者当前根控制器下的控制代码统统不会生效，并且以UIViewController为根控制器，所以我们要把控制代码加到UIViewController的分类中，又因为其它的控制器全部继承自这个控制器，所以我们要在这个里边加判断<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#import &quot;UIViewController+Extension.h&quot;</div><div class="line"></div><div class="line">@implementation UIViewController (Extension)</div><div class="line"></div><div class="line">#pragma mark - 下面的两个方法主要用于控制webView播放视屏的时候，该是否是否应该横屏</div><div class="line">/**</div><div class="line"> * 如果当前keywindow的rootController类型为UIViewController，就返回YES，否则返回NO</div><div class="line"> *</div><div class="line"> *  @return 返回是否</div><div class="line"> */</div><div class="line">- (BOOL)shouldAutorotate &#123;</div><div class="line">    //拿到当前主窗口的根控制器类型名称</div><div class="line">    NSString *className = NSStringFromClass([[UIApplication sharedApplication].keyWindow.rootViewController class]);</div><div class="line">    //如果是UIViewController就返回YES，让这个控制器view可以跟随屏幕旋转</div><div class="line">    if ([className isEqualToString:@&quot;UIViewController&quot;]) &#123;</div><div class="line">        return YES;</div><div class="line">    &#125; else &#123;</div><div class="line">        return NO;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (UIInterfaceOrientationMask)supportedInterfaceOrientations &#123;</div><div class="line">    </div><div class="line">    return UIInterfaceOrientationMaskAll;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git使用总结]]></title>
      <url>/2015/04/10/2015/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="1-配置："><a href="#1-配置：" class="headerlink" title="1.配置："></a>1.配置：</h3><p><strong>1.设置你的名字与邮箱（可与 git 帐号无关）：</strong></p>
<p><code>git config --global user.name &quot;Your Name&quot;</code><br><code>git config --global user.email your@email.com</code></p>
<p>缓存一段时间的 git 帐号密码（timeout 单位：秒）：</p>
<p><code>git config --global credential.helper &quot;cache --timeout=3600&quot;</code></p>
<p><strong>2.克隆、签出仓库：</strong><br><code>git clone &lt;url&gt;</code></p>
<p>服务器一般会给出两种连接方式</p>
<ul>
<li>一种是SSH:需要SSH加密</li>
<li>一种是HTTP:直接可以用</li>
</ul>
<a id="more"></a>
<p>以上边的地址为例：<br><code>git clone http://10.16.1.16/iOS/gitintro.git</code><br>这样它默认会将文件以gitintro为名，建立在当前文件路径下<br>自定义：<br><code>git clone http://10.16.1.16/iOS/gitintro.git mygit</code><br>这样写它会将文件夹的名字从gitintro改为mygit</p>
<p><strong>另外：</strong>如果该项目使用了，<code>git submodule</code>子模块 技术，那么还需要增加另外两步操作：</p>
<ul>
<li><code>git submodule init</code></li>
<li><code>git submodule update</code></li>
</ul>
<p>或者一步到位<br><code>git clone --recursive http://10.16.1.16/iOS/gitintro.git mygit</code></p>
<p>3.自建仓库<br>只要是一个文件夹，然后进行git初始化就可以<br>利用命令行将当前目录切换到你要做仓库的那个文件夹，<br><code>cd xxx</code><br>然后初始化仓库<br><code>git init</code></p>
<p><strong>3.查看远程服务器：</strong><br><code>git remote -v</code></p>
<p>进阶：<br>关联远程服务器：<br><code>git reomte add &lt;origin&gt; &lt;git-repo-url&gt;</code></p>
<p>查看配置信息，包括 remote、分支关联、本地配置等：<br><code>cat .git/config</code></p>
<h3 id="2-添加、删除、本地提交"><a href="#2-添加、删除、本地提交" class="headerlink" title="2. 添加、删除、本地提交"></a>2. 添加、删除、本地提交</h3><p>添加新文件，确认文件修改：<br><code>git add &lt;file-path&gt;</code></p>
<p>取消添加新文件：<br><code>git reset &lt;file-path&gt;</code></p>
<p>从 git 删除文件（不再在 repo 里管理了）：<br><code>git rm &lt;file-path&gt;</code></p>
<p>查看本地未确认的修改（代码、内容变更）：<br><code>git diff</code></p>
<p>查看本地已确认（但未提交）的修改：<br><code>git diff --cached</code></p>
<p>查看本地修改的文件状态：<br><code>git status</code></p>
<p>本地提交（提交上述 add\rm 确认的修改、操作），生成一个版本：<br><code>git commit -m &quot;short commit message&quot;</code></p>
<p>追加到上一次本地提交：<br><code>git commit --amend</code></p>
<p>查看提交记录：<br><code>git log</code></p>
<p>简化版<br><code>git reflog</code></p>
<p>查看提交的详细修改记录：<br><code>git log -p</code></p>
<p>查看提交修改的文件信息：<br><code>git log --stat</code></p>
<p>其它：<br>让当前修改 AFK 一下，好干点别的事情：<code>git stash</code><br>事情做完，把 AFK 前的修改找回来：<code>git stash pop</code></p>
<h3 id="3-撤消"><a href="#3-撤消" class="headerlink" title="3. 撤消"></a>3. 撤消</h3><p>撤销一个文件的修改：<br><code>git checkout -- &lt;file-path&gt;</code></p>
<p>撤销当前目录的所有修改：<br><code>git checkout -- .</code></p>
<p>删除某个文件<br><code>git rm xxxx</code></p>
<h3 id="4-版本回退"><a href="#4-版本回退" class="headerlink" title="4.版本回退"></a>4.版本回退</h3><p>回退到任意版本，需要拿到commit id<br><code>git reset --hard 3628164</code><br>回退到上一个版本<br> <code>git reset --hard HEAD^</code><br> 回退到上100个版本<br> <code>git reset --hard HEAD~100</code></p>
<p><strong>但是这样简单的操作只能是把本地的工作空间的内容进行回退，那么如果我想要让远程库也回退怎么办呢？</strong></p>
<p>回想一下原理，当你对这个分支进行pull的时候</p>
<ul>
<li>它会去版本库去检查有没有冲突</li>
<li>如果没有那么它直接会覆盖工作空间</li>
<li>如果有冲突它才会提示你解决冲突</li>
</ul>
<p>那么现在，如果我已经到了第五个 commit，但是我想要回到第3个commit的状态，<br><code>git reset --hard 87b6a3b</code><br>你想要把这个状态更新到远程，先要commit，你会发现你commit是无效的，因为你这个commit已经存在了，一摸一样，所以你是不能commit的，现在要自己制造一些修改，然后再commit，就可以了。</p>
<p><strong>所以远程版本回退的根本是制造冲突，然后提交冲突</strong></p>
<p><strong>那么如果是这个文件已经删除了那么这个时候怎么办呢？</strong><br>答案是：</p>
<ul>
<li>本地进行版本回退<code>git reset --hard 76824</code></li>
<li>打开这个又恢复的文件，然后修改一些东西</li>
<li>执行 <code>add commit</code></li>
<li>然后执行pull，最新的修改从远程拉回来，这个时候它会报冲突</li>
</ul>
<p>它说，这个冲突是修改和删除的冲突，也就是说，一个版本库中它已经被删除了，可是在另外一个版本库中它是被修改的，现在你就要解决冲突，怎么解决呢？原来的冲突最多是这个文件中的代码不一致了，这个时候找你打开代码，删删剪剪就好了，可是现在文件直接没有了咋弄？<br>再次git pull<br>它说你可以用git add/rm xxx来决定你是保留冲突中的哪一方</p>
<h3 id="5-分支"><a href="#5-分支" class="headerlink" title="5. 分支"></a>5. 分支</h3><p>创建分支（基于当前分支）：<br><code>git branch &lt;new-branch&gt;</code></p>
<p>基于某个分支创建分支：<br><code>git branch &lt;new-branch&gt; &lt;base-branch&gt;</code></p>
<p>查看本地分支：<br><code>git branch</code></p>
<p>切换分支：<br><code>git checkout &lt;branch&gt;</code></p>
<p>创建新分支并立即切过去：<br><code>git checkout -b &lt;new-branch&gt; [base-branch]</code></p>
<p>合并一个分支到当前分支（删除该分支后不保留commit纪录）：<br><code>git merge &lt;other-branch&gt;</code></p>
<p>合并分支且删除该分支后保留commit纪录<br><code>git merge --no-ff -m&quot;xxx&quot; &lt;other-branch&gt;</code></p>
<p>回滚一个分支的合并：<br><code>git revert -m (1|2) &lt;merge-commit&gt;</code><br>参考： <a href="http://pms.kugou.com/zentao/doc-view-171.html" target="_blank" rel="external">http://pms.kugou.com/zentao/doc-view-171.html</a></p>
<p>rebase 把分支的 commit 在基础分支上重放（与 merge 的区别很重要，请只在本地分支 rebase！！！）：<br><code>git rebase &lt;base-branch&gt;</code></p>
<p>安全删除（已经合并过的）本地分支：<br><code>git branch -d &lt;branch&gt;</code></p>
<p>强行删除本地分支（请先 -d，如果 -d 失败，检查无误后才 -D）：<br><code>git branch -D &lt;branch&gt;</code></p>
<h3 id="6-跟服务器同步："><a href="#6-跟服务器同步：" class="headerlink" title="6. 跟服务器同步："></a>6. 跟服务器同步：</h3><p>查看远程分支：<br><code>git branch -r</code></p>
<p>签出服务器分支工作（会创建本地与服务器分支关联）：<br><code>git checkout &lt;remote-branch-name&gt;</code><br>或<br><code>git checkout -b &lt;local-branch-name&gt; origin/&lt;remote-branch-name&gt;</code></p>
<p>（已存在的）本地分支关联到服务器分支：<br><code>git branch -u origin/&lt;remote-branch&gt; &lt;local-branch&gt;</code><br>或：<br><code>git branch --set-upstream-to=origin/&lt;remote-branch&gt; &lt;local-branch&gt;</code></p>
<p>获取服务器（所有的）更新，并合并当前远程分支的更新：<br><code>git pull</code></p>
<p>使用 rebase 的方式 pull，可能会少产生一条 merge 虚 commit：<br><code>git pull --rebase</code></p>
<p>获取某个远程分支的更新（并且合并到当前分支！！）：<br><code>git pull origin &lt;branch&gt;</code></p>
<p>仅拉取服务器更新，但不合并或 rebase：<br><code>git fetch [origin [&lt;remote-branch-name&gt;]]</code></p>
<p>rebase 当前分支已经 fetch 到本地的服务器更新：<br><code>git rebase</code></p>
<hr>
<p><strong>push</strong><br>push新建的本地分支并且建立连接<br><code>git push --set-upstream origin &lt;local-branch&gt;</code><br><code>git push origin &lt;local-branch&gt;</code><br><code>git push -u origin &lt;local-branch&gt;</code></p>
<p>删除服务器远程分支：<br><code>git push origin :&lt;remote-branch&gt;</code><br>或 git 1.7 以后：<br><code>git push origin --delete &lt;remote-branch&gt;</code></p>
<p>push该分支的内容更新，前提是已经有默认的对应的分支，如果没有就会报错<br><code>git push</code><br><img src="/10/2015/Git使用总结/./1443163940619.png" alt="Alt text"></p>
<p>但是这种方式不需要提前关联，因为你已经指明了，我打算把我这个分支推送给谁：<br><code>git push origin &lt;branch&gt;</code></p>
<p>清除已被删除远程分支的本地残余：<br><code>git remote prune origin</code></p>
<h3 id="7-fork源码之后与源码保持同步"><a href="#7-fork源码之后与源码保持同步" class="headerlink" title="7.fork源码之后与源码保持同步"></a>7.fork源码之后与源码保持同步</h3><p>1.切换到要保持同步的分支</p>
<p>2.添加一个别名，指向ngqa项目的位置<br><code>git remote add ngqa https://github.com/howe/ngqa.git</code></p>
<p>3.pull一下它下边的某个分支，一定要确定一下这个分支是不是有内容<code>git pull ngqa master</code></p>
<p>4.然后在sourcetree解决一下冲突，一般是点一下最下边的那个红色选框</p>
<p>5.然后<code>git push</code></p>
<p>6.如果出现如下问题</p>
<blockquote>
<p> “please enter a commit message to explain why this merge is necessary,especially if it merges an updated upstream into a topic branch</p>
</blockquote>
<p>解决方案：</p>
<blockquote>
<p>1-press “i”<br>2-write your merge message<br>3-press “esc”<br>4-write “:wq” then press enter</p>
</blockquote>
<h3 id="8-配置SSH"><a href="#8-配置SSH" class="headerlink" title="8.配置SSH"></a>8.配置SSH</h3><ul>
<li>查看git用户名<br><code>git config user.name</code></li>
<li>查看git邮箱<br><code>git config user.email</code></li>
<li>修改git用户名和邮箱<br><code>git config --global user.name &quot;username&quot;</code><br><code>git config --global user.email &quot;email&quot;</code></li>
<li>查看是否已经有了ssh密钥：<br><code>cd ~/.ssh</code></li>
<li>生成SSH<br><code>ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code></li>
<li>查看SSH<br><code>cat ~/.ssh/id_rsa.pub</code><br>将下面出现的这些个东西都拷贝到你的SSH面板中</li>
</ul>
<h3 id="9-问题集锦"><a href="#9-问题集锦" class="headerlink" title="9.问题集锦"></a>9.问题集锦</h3><ul>
<li>如果你明明已经有了权限但是还是不能clone代码，那可能是服务器设置了DNS解析，你需要更改本机的DNS解析地址和服务器一致</li>
<li>冲突解决</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[runtime源码下载]]></title>
      <url>/2015/04/02/2015/iOS%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h3 id="runtime源码"><a href="#runtime源码" class="headerlink" title="runtime源码"></a>runtime源码</h3><p>需要了解runtime的实现原理<br><code>https://opensource.apple.com/source/objc4/</code>有各个版本，下载的命令</p>
<p>比如下载680<br><code>wget -c -r -np -k -L -p https://opensource.apple.com/source/objc4/objc4-680/</code></p>
<h3 id="CoreFoundation源码"><a href="#CoreFoundation源码" class="headerlink" title="CoreFoundation源码"></a>CoreFoundation源码</h3><p><code>wget -c -r -np -k -L -p https://opensource.apple.com/source/CF/CF-855.17/</code></p>
<h3 id="gnustep"><a href="#gnustep" class="headerlink" title="gnustep"></a>gnustep</h3><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p><code>https://github.com/Microsoft/WinObjC</code></p>
<p><code>https://github.com/BigZaphod/Chameleon</code></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 配置/使用教程]]></title>
      <url>/2015/03/09/2015/Hexo-%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h3><blockquote>
<p>前提已经安装了node.js和git</p>
</blockquote>
<ul>
<li><code>npm install hexo --no-optional</code></li>
<li><code>hexo init myBlog</code>//创建hexo的文件夹</li>
<li><code>cd myBlog</code></li>
<li><code>npm install</code></li>
<li><p><code>hexo server</code>//打开对应的链接可看到效果 </p>
<a id="more"></a> 
<h3 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h3></li>
<li><p>创建git仓库<code>name/name.github.io</code></p>
</li>
<li>添加信息到配置文件<code>_config.yml</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:xizhengmeng/xizhengmeng.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<ul>
<li>安装插件<code>npm install hexo-deployer-git --save</code></li>
</ul>
<blockquote>
<p>如果要访问这个网站直接<code>xizhengmeng.github.io</code>就好了</p>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>进入博客所在的文件夹，比如我说的是~/myBlog</li>
<li><code>hexo clean</code></li>
<li><code>hexo g</code>//生成</li>
<li><code>hexo d</code>//推送到github服务器</li>
<li><code>hexo new &quot;fileName&quot;</code>创建新的文件，在_post文件中</li>
<li><code>hexo new page fileName</code>创建一个文件夹，然后在其中创建一个index.md文件，比如标签云页面，或者分类页面</li>
</ul>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><ul>
<li>申请域名，直接搜索<code>hexo和github，域名和github绑定的问题</code></li>
<li>生成CNAME文件，并添加到source文件夹下，与post同级目录</li>
<li>更改配置文件–——config.yml<code>url: www.hanson647.com</code></li>
</ul>
<h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><ul>
<li>进入Hexo文件的根目录<code>cd Hexo</code></li>
<li>拉取主题文件，并在本地创建对应的文件<code>git clone https://github.com/kathyqian/crisp-ghost-theme.git themes/gost</code></li>
<li><p>更改配置文件的主题为该主题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: yilia</div></pre></td></tr></table></figure>
</li>
<li><p>重新部署</p>
</li>
</ul>
<blockquote>
<p>主题更新<code>git pull</code></p>
<p>使用了yelee主题，主题使用说明<code>http://moxfive.coding.me/yelee/</code></p>
</blockquote>
<h3 id="搜索功能配置"><a href="#搜索功能配置" class="headerlink" title="搜索功能配置"></a>搜索功能配置</h3><ul>
<li>安装插件<code>npm install --save hexo-generator-search</code></li>
<li><p>设置主题配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search: </div><div class="line">  on: true</div><div class="line">  onload: true</div></pre></td></tr></table></figure>
</li>
<li><p>设置hexo配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div></pre></td></tr></table></figure>
</li>
<li><p>重新生成</p>
</li>
</ul>
<p>最后你会在publick文件中看到一个search.xml文件，最后你会在你的网站中看到你的搜索框</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>在工程的_config文件中，要将url对应的字段设置为/，否则你会发现搜索会自动加上一个前置的url，这样就又错乱了</p>
<h3 id="添加标签以及标签云页面"><a href="#添加标签以及标签云页面" class="headerlink" title="添加标签以及标签云页面"></a>添加标签以及标签云页面</h3><ul>
<li>创建tags页面<code>hexo new page tags</code></li>
<li><p>直接在文章中的tags关键字后边添加对应的标签就好</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tags:</div><div class="line">- 工具</div></pre></td></tr></table></figure>
</li>
<li><p>编辑刚才创建的tags页面，将其类型更改为tags</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">title: tags</div><div class="line">date: </div><div class="line">type: &quot;tags&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>在主题配置文件中，将tags添加到menu中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  archives: /archives</div><div class="line">  tags: /tags</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="创建关于页面"><a href="#创建关于页面" class="headerlink" title="创建关于页面"></a>创建关于页面</h3><p><code>hexo new page about</code></p>
<h3 id="容易出现的问题"><a href="#容易出现的问题" class="headerlink" title="容易出现的问题"></a>容易出现的问题</h3><h4 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h4><ul>
<li><code>Error: ssh_exchange_identification: read: Connection reset by peer</code><br>说明是网关的问题，我是解决了一下网络解决的，一开始连接的是京东的guest网络，出现该问题，切换为access解决</li>
</ul>
<h4 id="md文件格式"><a href="#md文件格式" class="headerlink" title="md文件格式"></a>md文件格式</h4><p>标题中#号要与后边的标题留出间隙，也就是一个空格，否则hexo渲染是不认的</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li>next主题设置<a href="http://theme-next.iissnan.com" target="_blank" rel="external">http://theme-next.iissnan.com</a></li>
<li>hexo官网<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">https://hexo.io/zh-cn/</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS中的空值]]></title>
      <url>/2015/02/15/2015/iOS%E4%B8%AD%E7%9A%84%E7%A9%BA%E5%80%BC/</url>
      <content type="html"><![CDATA[<p>nil和NULL和Nil和NSNull的区别<br><a id="more"></a></p>
<h2 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h2><ul>
<li>nil 是 ObjC 对象的字面空值，对应 id 类型的对象，或者使用 @interface 声明的 ObjC 对象。</li>
<li>例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">NSString *someString = nil;</div><div class="line">NSURL *someURL = nil;</div><div class="line">id someObject = nil;</div><div class="line"></div><div class="line"></div><div class="line">if (anotherObject == nil) // do something</div><div class="line">- 定义：</div><div class="line">?</div><div class="line">// objc.h</div><div class="line">#ifndef nil</div><div class="line"># if __has_feature(cxx_nullptr)</div><div class="line">#  define nil nullptr</div><div class="line"># else</div><div class="line">#  define nil __DARWIN_NULL</div><div class="line"># endif</div><div class="line">#endif</div><div class="line"></div><div class="line"></div><div class="line">// __DARWIN_NULL in _types.h</div><div class="line"></div><div class="line"></div><div class="line">#define __DARWIN_NULL ((void *)0)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Nil"><a href="#Nil" class="headerlink" title="Nil"></a>Nil</h2><ul>
<li>Nil 是 ObjC 类类型的书面空值，对应 Class 类型对象。</li>
<li>例如：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class someClass = Nil;</div><div class="line">Class anotherClass = [NSString class];</div></pre></td></tr></table></figure>
<ul>
<li>定义声明和 nil 是差不多的，值相同：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// objc.h</div><div class="line">#ifndef Nil</div><div class="line"># if __has_feature(cxx_nullptr)</div><div class="line">#  define Nil nullptr</div><div class="line"># else</div><div class="line">#  define Nil __DARWIN_NULL</div><div class="line"># endif</div><div class="line">#endif</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h2><ul>
<li>NULL 是任意的 C 指针空值。</li>
<li>例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">int *pointerToInt = NULL;</div><div class="line"></div><div class="line">- char *pointerToChar = NULL;</div><div class="line">- struct TreeNode *rootNode = NULL;</div><div class="line">- 定义：</div><div class="line">?</div><div class="line">// in stddef.h</div><div class="line"></div><div class="line"></div><div class="line">#define NULL ((void*)0)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="NSNull"><a href="#NSNull" class="headerlink" title="NSNull"></a>NSNull</h2><ul>
<li>NSNull 是一个代表空值的类，是一个 ObjC 对象。实际上它只有一个单例方法：+[NSNull null]，一般用于表示集合中值为空的对象。</li>
<li>注意，这里NSNull是一个单例，也就是说同一个数组中，如果我们要删除这个空对象，那么只要调用一次removeobjec:方法就好了。</li>
<li>例子说明：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 因为 nil 被用来用为集合结束的标志，所以 nil 不能存储在 Foundation 集合里。</div><div class="line">NSArray *array = [NSArray arrayWithObjects:@&quot;one&quot;, @&quot;two&quot;, nil];</div><div class="line"></div><div class="line">-</div><div class="line"></div><div class="line">// 错误的使用</div><div class="line">NSMutableDictionary *dict = [NSMutableDictionary dictionary];</div><div class="line">[dict setObject:nil forKey:@&quot;someKey&quot;];</div><div class="line">-</div><div class="line"></div><div class="line">// 正确的使用</div><div class="line">NSMutableDictionary *dict = [NSMutableDictionary dictionary];</div><div class="line">[dict setObject:[NSNull null] forKey:@&quot;someKey&quot;];</div></pre></td></tr></table></figure>
</li>
</ul>
<p>，对于像NSArray这样的类型，nil或NULL不能做为加到其中的Object，如果定义了一个NSArray，为其分配了内存，又想设置其中的内容为空，则可以用[NSNULL null返回的对对象来初始化NSArray中的内容，我的感觉有点像C语言中malloc一个内存空间，然后用memset初始化这段空间里的值为0。</p>
<p>由于服务器的数据库中有些字段为空，然后以Json形式返回给客户端时就会出现这样的数据：<br>“somevalue”:null ，通过JsonKit 这个第三方库解析出来的数据就成了<br>somevalue=””; 这个数据类型不是nil 也不是 String。 解析成对象之后，如果直接向这个对象发送消息（eg：length，count 等等）就会直接崩溃。提示错误为：<br>-[NSNulllength]:unrecognizedselectorsenttoinstance0x388a4a70 ，这个就是NSNull类型的对象，代表空对象。</p>
<h2 id="NIL-或-NSNil"><a href="#NIL-或-NSNil" class="headerlink" title="NIL 或 NSNil"></a>NIL 或 NSNil</h2><p>ObjC 不存在这两个符号！</p>
<p>小结</p>
<p>虽然 nil, Nil, NULL 的值相同，理解它们之间的书面意义才重要，让代码更加明确，增加可读性。</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS中的定时和延时]]></title>
      <url>/2015/01/23/2015/iOS%E4%B8%AD%E7%9A%84%E5%AE%9A%E6%97%B6%E5%92%8C%E5%BB%B6%E6%97%B6/</url>
      <content type="html"><![CDATA[<p>我们使用延时和定时可以使用以下方法：</p>
<ul>
<li>NSTimer</li>
</ul>
<h2 id="NSTimer"><a href="#NSTimer" class="headerlink" title="NSTimer"></a>NSTimer</h2><h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><p>我们使用一个nstimer的时候，使用一个类方法来创建一个timer，返回一个timer指针，有时需要把tiemr加到runloop，有时系统自己来帮你做，你会发现，即使我并没有去强引用这个指针，timer只要在runloop中，timer就可以自然的回调，这是因为timer被runloop所引用，我们用控制器去引用这个timer，也只是增加了一个引用而已。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">+(id)scheduledTimerWithTimeInterval:(NSTimeInterval)inTimeInterval block:(void (^)())inBlock repeats:(BOOL)inRepeats</div><div class="line">&#123;</div><div class="line">    void (^block)() = [inBlock copy];</div><div class="line">    id ret = [self scheduledTimerWithTimeInterval:inTimeInterval target:self selector:@selector(jdExecuteSimpleBlock:) userInfo:block repeats:inRepeats];</div><div class="line">    [block release];</div><div class="line">    return ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+(id)timerWithTimeInterval:(NSTimeInterval)inTimeInterval block:(void (^)())inBlock repeats:(BOOL)inRepeats</div><div class="line">&#123;</div><div class="line">    void (^block)() = [inBlock copy];</div><div class="line">    id ret = [self timerWithTimeInterval:inTimeInterval target:self selector:@selector(jdExecuteSimpleBlock:) userInfo:block repeats:inRepeats];</div><div class="line">    [block release];</div><div class="line">    return ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+(void)jdExecuteSimpleBlock:(NSTimer *)inTimer;</div><div class="line">&#123;</div><div class="line">    if([inTimer userInfo])</div><div class="line">    &#123;</div><div class="line">        void (^block)() = (void (^)())[inTimer userInfo];</div><div class="line">        block();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这也是Block实现的tiemr不会被释放的原因。</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[流媒体技术概述]]></title>
      <url>/2015/01/17/2015/%E6%B5%81%E5%AA%92%E4%BD%93%E6%8A%80%E6%9C%AF%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<h2 id="什么是流媒体技术"><a href="#什么是流媒体技术" class="headerlink" title="什么是流媒体技术"></a>什么是流媒体技术</h2><p>随着现代技术的发展，网络带给人们形式多样的信息，从第一张图片出现在网络上到如今各种形式的网络视频和三维动画，网络让人们的视听觉得到了很大的满足。然而在流媒体技术出现之前，人们必须要先下载这些多媒体内容到本地计算机，在漫长的等待之后（因为受限于带宽，下载通常要花上较长的时间），才可以看到或听到媒体传达的信息。令人欣慰的是，在流媒体技术出现之后，人们便无需再等待媒体完全下载完成了。<br><a id="more"></a><br>流媒体就是指采用流式传输技术在网络上连续实时播放的媒体格式，如音频、视频或多媒体文件。流媒体技术也称流式媒体技术.所谓流媒体技术就是把连续的影像和声音信息经过压缩处理后放上网站服务器,由视频服务器向用户计算机顺序或实时地传送各个压缩包，让用户一边下载一边观看、收听，而不要等整个压缩文件下载到自己的计算机上才可以观看的网络传输技术。该技术先在使用者端的计算机上创建一个缓冲区，在播放前预先下一段数据作为缓冲，在网路实际连线速度小于播放所耗的速度时，播放程序就会取用一小段缓冲区内的数据，这样可以避免播放的中断，也使得播放品质得以保证。</p>
<h2 id="流媒体技术的应用分类"><a href="#流媒体技术的应用分类" class="headerlink" title="流媒体技术的应用分类"></a>流媒体技术的应用分类</h2><p>流媒体应用形式可以简单分为3类：点播型应用、直播型应用和会议型应用。</p>
<ul>
<li>（1）点播型应用。点播型应用中，一般点播内容存放在服务器上，根据需要进行发布。在同一时间可多点点播相同或不同的节目，即多个终端可在不同的地点、不同的时刻，实时、交互式地点播同一流文件，用户可以通过门户查看和选择内容进行点播。根据用户的需要，点播过程中还可以实现播放、停止、暂停、快进、后退等功能。</li>
<li>（2）直播型应用。直播服务模式下，用户只能观看播放的内容，无法进行控制。</li>
<li>（3）会议型应用。会议型应用类似于直播型应用，但是两者有不同的要求，如双向通信等。这对一般双方都要有包括媒体采集的硬件和软件，还有流传输技术。会议型的应用有时候不需要很高的音/视频质量。</li>
<li>（4）视频广播，是点播的扩展，把节目源组织成频道，以广播的方式提供，用户通过加入频道收看预定好的节目</li>
<li>(5)视频监视</li>
<li>(6)音乐播放/在线电台</li>
<li>(7)电视上网<h2 id="流媒体技术原理"><a href="#流媒体技术原理" class="headerlink" title="流媒体技术原理"></a>流媒体技术原理</h2>如果将文件传输看作是一次接水的过程，过去的传输方式就像是对用户做了一个规定，必须等到一桶水接满才能使用它，这个等待的时间自然要受到水流量大小和桶的大小的影响。而流式传输则是，打开水头龙，等待一小会儿，水就会源源不断地流出来，而且可以随接随用，因此，不管水流量的大小，也不管桶的大小，用户都可以随时用上水。从这个意义上看，流媒体这个词是非常形象的。<br>流式传输技术又分两种，一种是顺序流式传输，另一种是实时流式传输。<h3 id="顺序流式传输"><a href="#顺序流式传输" class="headerlink" title="顺序流式传输"></a>顺序流式传输</h3>顺序流式传输是顺序下载，在下载文件的同时用户可以观看，但是，用户的观看与服务器上的传输并不是同步进行的，用户是在一段延时后才能看到服务器上传出来的信息，或者说用户看到的总是服务器在若干时间以前传出来的信息。在这过程中，用户只能观看已下载的那部分，而不能要求跳到还未下载的部分。顺序流式传输比较适合高质量的短片段，因为它可以较好地保证节目播放的最终质量。它适合于在网站上发布的供用户点播的音视频节目。<br>对通过调制解调器发布的短片段，顺序流式传输很实用，它允许用比调制解调器跟高的数据速率创建视频片段，尽管有延迟毕竟可让你发布高质量的视频片段。<br>顺序流式文件是放在标准HTTP或FTP服务器上，易管理基本上与防火墙无关，顺序流式传播不适合长片段和有随机访问要求的视频，如演讲，演说与演示，它不支持现场广播，严格来说，它是一种点播技术。</li>
</ul>
<h3 id="实时流式传输"><a href="#实时流式传输" class="headerlink" title="实时流式传输"></a>实时流式传输</h3><p>在实时流式传输中，音视频信息可被实时观看到。在观看过程中用户可快进或后退以观看前面或后面的内容，但是在这种传输方式中，如果网络传输状况不理想，则收到的信号效果比较差。<br>实时流式传输必须匹配连接宽带，意味着以调制解调器速度连接时图像质量较差，而且由于出错丢失的信息被忽略掉，网络拥挤或者出现问题时候，视频质量很差，如欲保证视频质量，顺序流式传输也许更好，实时流式传输需要特定的服务器，如QuickTime Streaming Server/Real Server/Windows Media Server这些服务器允许你对媒体发送进行更多级别的控制，因为而系统设置管理比HTTP服务器更复杂，实时流传输还需要特殊的网络协议，比如RTSP(Real time sreming protocol)或MMS(Microsoft Media Server)这些协议在有防火墙的时候会出现问题，导致用户不能看到一些地点的实时内容。</p>
<h2 id="流媒体系统的组成"><a href="#流媒体系统的组成" class="headerlink" title="流媒体系统的组成"></a>流媒体系统的组成</h2><p>通常，组成一个完整的流媒体系统包括以下5个部分：</p>
<p>　　①一种用于创建、捕捉和编辑多媒体数据，形成流媒体格式的编码工具;</p>
<p>　　②流媒体数据;</p>
<p>　　③一个存放和控制流媒体数据的服务器;</p>
<p>　　④要有适合多媒体传输协议甚至是实时传输协议的网络;</p>
<p>　　⑤供客户端浏览流媒体文件的播放器。
　　</p>
<h2 id="流媒体传输的基本原理"><a href="#流媒体传输的基本原理" class="headerlink" title="流媒体传输的基本原理"></a>流媒体传输的基本原理</h2><p>流媒体传输的基本原理  流媒体服务器架设  流媒体技术也称为流式传输技术，是指在网络上按时间先后次序传输和播放的连续音、视频数据流。随着网络速度的提高，以流媒体技术为核心的视频点播、在线电视、远程培训等业务开展得越来越广泛。本章主要介绍流媒体技术的基础知识、流媒体服务器的安装、运行、配置和使用等内容。  23.1  流媒体技术基础  流媒体是指利用流式传输技术传送的音频、视频等连续媒体数据，它的核心是串流（Streaming）技术和数据压缩技术，具有连续性、实时性、时序性3个特点，可以使用顺序流式传输和实时流式传输两种传输方式。本节主要介绍有关流媒体的技术基础。  23.1.1  流媒体传输的基本原理 实现流式传输需要使用缓存机制。因为音频或视频数据在网络中是以包的形式传输的，而网络是动态变化的，各个数据包选择的路由可能不尽相同，到达客户端所需的时间也就不一样，有可能会出现先发的数据包却后到。因此，客户端如果按照包到达的次序播放数据，必然会得到不正确的结果。使用缓存机制就可以解决这个问题，客户端收到数据包后先缓存起来，播放器再从缓存中按次序读取数据。  使用缓存机制还可以解决停顿问题。网络由于某种原因经常会有一些突发流量，此时会造成暂时的拥塞，使流数据不能实时到达客户端，客户端的播放就会出现停顿。如果采用了缓存机制，暂时的网络阻塞并不会影响播放效果，因为播放器可以读取以前缓存的数据。等网络正常后，新的流数据将会继续添加到缓存中。  虽然音频或视频等流数据容量非常大，但播放流数据时所需的缓存容量并不需要很大，因为缓存可以使用环形链表结构来存储数据，已经播放的内容可以马上丢弃，缓存可以腾出空间用于存放后续尚未播放的内容。  当传输流数据时，需要使用合适的传输协议。TCP虽然是一种可靠的传输协议，但由于需要的开销较多，并不适合传输实时性要求很高的流数据。因此，在实际的流式传输方案中，TCP协议一般用来传输控制信息，而实时的音视频数据则是用效率更高的RTP/UDP等协议来传输。流媒体传输的基本原理如图23-1所示。  在图23-1中，Web服务器只是为用户提供了使用流媒体的操作界面。客户机上的用户在浏览器中选中播放某一流媒体资源后，Web服务器把有关这一资源的流媒体服务器地址、资源路径及编码类型等信息提供给客户端，于是客户端就启动了流媒体播放器，与流媒体服务器进行连接。</p>
<p>客户端的流媒体播放器与流媒体服务器之间交换控制信息时使用的是RTSP协议，它是基于TCP协议的一种应用层协议，默认使用的是554端口。RTSP协议提供了有关流媒体播放、快进、快倒、暂停及录制等操作的命令和方法。通过RTSP协议，客户端向服务器提出了播放某一流媒体资源的请求，服务器响应了这个请求后，就可以把流媒体数据传输给客户端了。</p>
<p>需要注意的是，RTSP协议并不具备传输流媒体数据的功能，承担流媒体数据传输任务的是另一种基于UDP的RTP协议，但在RTP协议传输流媒体数据的过程中，RTSP连接是一直存在的，并且控制着流媒体数据的传输。一旦流媒体数据到达了客户端，流媒体播放器就可以播放输出了。流媒体的数据和控制信息使用不同的协议和连接时，还可以带来一个好处，就是播放流媒体的客户机和控制流媒体播放的客户机可以是不同的计算机。</p>
<h3 id="实时流媒体协议RTSP"><a href="#实时流媒体协议RTSP" class="headerlink" title="实时流媒体协议RTSP"></a>实时流媒体协议RTSP</h3><p>RTSP（Real Time Streaming Protocol，实时流媒体协议）是由Real Network和Netscape共同提出的一种应用层协议，它定义了如何在IP网络上有效地传输流媒体数据。RTSP提供了一种机制，使音频、视频等数据可以按照需要进行实时传输，并且可以实施诸如暂停、快进等控制。源数据可以是存储的文件，也可以是现场数据的反馈。RTSP协议本身并不传输数据，数据的传输是通过基于UDP协议的RTP协议来完成的。</p>
<p>RTSP协议与HTTP协议有点类似，通信双方是通过请求消息和回应消息进行交互的。请求消息的格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;请求方法&gt;  &lt;URI&gt;  &lt;RTSP版本&gt; </div><div class="line">[消息头]  </div><div class="line">CR/ LF  </div><div class="line">[消息体]</div></pre></td></tr></table></figure></p>
<p>其中，请求方法包括PLAY、DESCRIBE等，可以通过OPTION方法得到对方所支持的其他方法名称。URI是对方的地址，例如：rtsp://192.168.0.1。”RTSP版本”一般都是RTSP/1.0。每一行的最后都是回车换行符CR/LF，消息头和消息体之间要有一个空行。回应消息格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;RTSP版本&gt; &lt;状态码&gt; &lt;解释&gt; </div><div class="line">[消息头]  </div><div class="line">CR/LF  </div><div class="line">[消息体]</div></pre></td></tr></table></figure></p>
<p>回应消息的格式规定与请求消息类似。其中状态码是一个3位数，后面跟随着解释文本，例如，200表示成功。</p>
<p>HTTP协议是单向的，即只能是客户端提出请求，服务端给予回应，而使用RTSP时，客户机和服务器都可以发出请求，双方都可以对收到的请求进行应答，即RTSP可以是双向的。一个典型的RSTP交互过程如下所示，其中C表示RTSP客户端，S表示RTSP服务端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">C-&gt;S:    OPTION request     //客户端通过OPTION方法询问</div><div class="line">服务端支持哪些方法  </div><div class="line">S-&gt;C:    OPTION response    //服务端进行回应，提供了所支持方法的名称  </div><div class="line"> </div><div class="line">C-&gt;S:    DESCRIBE request   //客户端通过DESCRIBE方法查询服务</div><div class="line">端媒体的初始化描述</div><div class="line">//信息  </div><div class="line">S-&gt;C:    DESCRIBE response  //服务端回应媒体初始化描述信息，</div><div class="line">采用的是sdp会话描述</div><div class="line">//格式  </div><div class="line"> </div><div class="line">C-&gt;S:    SETUP request      //客户端通过SETUP方法设置会话</div><div class="line">的属性、传输模式等参数，</div><div class="line">//并请求建立会话  </div><div class="line">S-&gt;C:    SETUP response         //服务端响应回话请求，与客</div><div class="line">户端建立会话，并返回会话标识</div><div class="line">//符及其他相关信息  </div><div class="line"> </div><div class="line">C-&gt;S:    PLAY request       //客户端通过PLAY方法请求播放某一多媒体资源  </div><div class="line">S-&gt;C:    PLAY response      //服务器回应请求，开始发送流数据  </div><div class="line"> </div><div class="line">S-&gt;C:    …                      //此时，RTSP通过其他协议发送流媒体数据  </div><div class="line"> </div><div class="line">C-&gt;S:    TEARDOWN request   //客户端通过TEARDOWN方法请求关闭会话  </div><div class="line">S-&gt;C:    TEARDOWN response      //服务器回应请求，会话关闭，交互结束</div></pre></td></tr></table></figure></p>
<p>实际应用中，RTCP的交互过程可能和以上过程会有区别，但基本的流程是一样的。</p>
<p>说明：还有一种常见的流媒体协议是由Microsoft公司开发的MMS协议，但Microsoft公司没有公开该协议。</p>
<h2 id="流媒体播放方式"><a href="#流媒体播放方式" class="headerlink" title="流媒体播放方式"></a>流媒体播放方式</h2><p>流媒体服务器可以提供多种播放方式，它可以根据用户的要求，为每个用户独立地传送流数据，实现VOD（Video On Demand）的功能；也可以为多个用户同时传送流数据，实现在线电视或现场直播的功能。下面介绍一下这些播放方式的特点。</p>
<h3 id="单播方式"><a href="#单播方式" class="headerlink" title="单播方式"></a>单播方式</h3><p>当采用单播方式时，每个客户端都与流媒体服务器建立了一个单独的数据通道，从服务器发送的每个数据包都只能传给一台客户机。对用户来说，单播方式可以满足自己的个性化要求，可以根据需要随时使用停止、暂停、快进等控制功能。但对服务器还说，单播方式无疑会带来沉重的负担，因为它必须为每个用户提供单独的查询，向每个用户发送所申请的数据包复制。当用户数很多时，对网络速度、服务器性能的要求都很高。如果这些性能不能满足要求，就会造成播放停顿，甚至停止播放。</p>
<h3 id="广播方式"><a href="#广播方式" class="headerlink" title="广播方式"></a>广播方式</h3><p>承载流数据的网络报文还可以使用广播方式发送给子网上所有的用户，此时，所有的用户同时接受一样的流数据，因此，服务器只需要发送一份数据复制就可以为子网上所有的用户服务，大大减轻了服务器的负担。但此时，客户机只能被动地接受流数据，而不能控制流。也就是说，用户不能暂停、快进或后退所播放的内容，而且，用户也不能对节目进行选择。</p>
<h3 id="组播方式"><a href="#组播方式" class="headerlink" title="组播方式"></a>组播方式</h3><p>单播方式虽然用户提供了最大的灵活性，但网络和服务器的负担很重。广播方式虽然可以减轻服务器的负担，但用户不能选择播放内容，只能被动地接受流数据。组播吸取了上述两种传输方式的长处，可以将数据包复制发送给需要的多个客户，而不是像单播方式那样复制数据包的多个文件到网络上，也不是像广播方式那样将数据包发送给那些不需要的客户，保证数据包占用最小的网络带宽。当然，组播方式需要在具有组播能力的网络上使用。</p>
<h2 id="流媒体关键技术"><a href="#流媒体关键技术" class="headerlink" title="流媒体关键技术"></a>流媒体关键技术</h2><p>流媒体有三个关键技术:数据压缩/解压缩技术，流媒体网络传输和媒体文件在流式传输中的版权保护问题，其中数据压缩和解压缩技术优势重中之重，核心技术。方发送确认嘻嘻，发送发收到确认嘻嘻猴才继续</p>
<h3 id="流媒体制作技术方面解决的问题"><a href="#流媒体制作技术方面解决的问题" class="headerlink" title="流媒体制作技术方面解决的问题"></a>流媒体制作技术方面解决的问题</h3><p>在网络中进行流媒体传输，所传输的文件必须制作成适合流媒体传输的流媒体格式文件，由于通常格式存储的多媒体文件容量十分大，传输比较困难，另外流媒体也不能按流媒体传输的协议进行传输，所以必须对问津进行预处理，将文件压缩成流媒体格式文件，这里要注意两点：1，选用合适的算法在质量与体积之间找到平衡，2，需要向文件中添加流式信息。</p>
<h3 id="流媒体传输方面需要解决的问题"><a href="#流媒体传输方面需要解决的问题" class="headerlink" title="流媒体传输方面需要解决的问题"></a>流媒体传输方面需要解决的问题</h3><p>流媒体传输需要和实施的传输协议，目前文件初三书大部分是建立在TCP协议上的，也有一些以ftp传输协议方式进行传输，但采用这些传输方法都不能实现实时的方式传输，随着流媒体技术的深入研究，目前成熟的流媒体传输一般都采用建立在UDP协议上的RTP/RTSP实时传输协议。<br>之所选择UDP是因为在传输的可靠性上UDP比TCP有很大的有事，TCP协议中包含了专门的数据传送校验机制，当数据接受方收到数据后将自动向发送确认信息，发送方在接收到确认信息后才继续传送数据，否则将一直处于等待状态，而UDP协议则不同，本身并不做任何校验，由此可以看出TCP协议注重传输质量，而UDP注重传输速度，因此对于传输质量要求不是很高，而对速度要求很高的视音频流媒体文件来说，采用UDP更加合适。</p>
<h3 id="流媒体的传说过程中需要缓存的支持"><a href="#流媒体的传说过程中需要缓存的支持" class="headerlink" title="流媒体的传说过程中需要缓存的支持"></a>流媒体的传说过程中需要缓存的支持</h3><p>因为internet是以包为单位进行异步传输的，所以多媒体数据在传输过程中被分解为许多的包，由于网络传输的不稳定性，各个包选择的路由不同，所以到达客户端的时间次序可能发生改变，甚至产生丢包现象，为此，必须采用正确的书序，从而必须使用缓存技术来纠正由于数据到达次序发生改变而产生的混乱的问题，利用缓存对到达的数据包进行正确的排序，从而使音频数据能够连续正确的播放，缓存中存储的是一段时间内的数据，数据在缓存中存放的时间是暂时的，缓存中的数据也是动态的，不断更新的，流媒体在播放时不断的读取缓存中的数据进行播放，播放完后该数据立刻被清楚，新的数据将加入缓存，因此播放流媒体文件的时候并不需要占用太大的缓存空间。</p>
<h2 id="流媒体传输的网络协议"><a href="#流媒体传输的网络协议" class="headerlink" title="流媒体传输的网络协议"></a>流媒体传输的网络协议</h2><p>TCP需要较多的开销，所以不太适合传输实时数据，流式传输一般采用HTTP/TCP(RTCP)传输控制信息，而采用RTP/UDP(RTP)来传输实时声音数据。</p>
<h3 id="实时传输协议RTP"><a href="#实时传输协议RTP" class="headerlink" title="实时传输协议RTP"></a>实时传输协议RTP</h3><p>这种协议在一对一或一对多的传输情况下工作，其目的是提供时间信息和实现流同步，RTP通常使用UDP来传送数据，当引用程序开始一个RTP会话时将使用两个端口，一个给RTP，一个给RTCP，RTP本身并不能为按顺序传送数据包提供可靠的传送机制，也不提供流量控制或拥塞控制，它依靠RTCP提供这些服务，通常RTP算法并不作为一个独立的网络层来实现，而是作为应用程序代码的一部分。</p>
<h3 id="实时传输控制协议RTCP"><a href="#实时传输控制协议RTCP" class="headerlink" title="实时传输控制协议RTCP"></a>实时传输控制协议RTCP</h3><p>实时传输控制协议RTCP和RTP一起提供流量控制和拥塞控制服务，在RTP会话期间各参与者周期性的传送RTCP包，RTCP包中含有 已发送的数据包的数量，丢失的数据包数量等统计资料，因此服务器可以利用这些信息动态的改变传输速率，甚至改变有效载荷类型。<br>RTP和RTCP配合使用，能以有效的反馈和最小的开销使传输效率最佳化，因而特别适合传送网上的实时数据。</p>
<h3 id="实时流协议RTSP"><a href="#实时流协议RTSP" class="headerlink" title="实时流协议RTSP"></a>实时流协议RTSP</h3><p>实时流协议RTSP定义了一对多应用程序如何有效地通过IP网络传送多媒体数据，RTSP的体系结构上位于RTP和RTCP之上，它使用TCP或RTP完成数据传输，HTTP与RTSP相比，HTTP传送HTML超链接文档，而RTSP传送的是多媒体数据，HTTP请求由客户机发出，服务器作出相应，使用RTSP时，客户机与服务器都可以发出请求，即RTSP可以是双向的，点对点的额手机可视通话，必须在手机终端实现RTSP。</p>
<h2 id="流媒体文件格式"><a href="#流媒体文件格式" class="headerlink" title="流媒体文件格式"></a>流媒体文件格式</h2><p>将多媒体信息进行压缩生成一定格式的文件，这就是媒体压缩格式，而要将这些压缩的文件在IP网上进行实时传输，就需要将这些压缩文件进行必要的处理，分割成很多小块，以方便传输，比如rm，rmvb，asf，这就是媒体流格式，要在网上传播还需要将一定的格式告诉用户这就是媒体的发布格式。</p>
<h3 id="流式文件格式"><a href="#流式文件格式" class="headerlink" title="流式文件格式"></a>流式文件格式</h3><p>为了减小用户的播放演示和存储空间，实现边下边播，并保证一定的播放质量，就需要对压缩文件进行特殊的处理，添加一些附属信息，如计时，压缩和版权信息，这就是流式文件格式，常见的有如下集中：</p>
<h4 id="flv"><a href="#flv" class="headerlink" title="flv"></a>flv</h4><p>Flash MX 以前flash中的视频文件导入是一帧一帧变成位图，结果导致文件巨大，限制了它的引用范围，随着Flash MX的退出，macromedia公司开发了属于自己流式视频格式的FLV，这种个试试在sorenson公司的压缩算法的基础上开发出来的，sorenson公司也为MOV格式提供苏犯法。<br>FLV格式不仅可以轻松导入flash中，几百帧的影片两分钟完成导入，同时可以通过rtmp协议从flashcom服务器上流式播出。 </p>
<h3 id="流媒体文件的压缩格式"><a href="#流媒体文件的压缩格式" class="headerlink" title="流媒体文件的压缩格式"></a>流媒体文件的压缩格式</h3><p>数据压缩技术也是流媒体技术的一项重要内容，由于视频数据的容量往往都非常大，如果不经过压缩或压缩得不够，则不仅会增加服务器的负担，更重要的是会占用大量的网络带宽，影响播放效果。因此如何在保证不影响观看效果或对观看效果影响很小的前提下，最大限度地对流数据进行压缩，是流媒体技术研究的一项重要内容。下面介绍一下几种主流的音视频数据压缩格式。</p>
<h4 id="1．AVI格式"><a href="#1．AVI格式" class="headerlink" title="1．AVI格式"></a>1．AVI格式</h4><p>AVI（Audio Video Interleave，音频视频交错）是符合RIFF文件规范的数字音频与视频文件格式，由Microsoft公司开发，目前得到了广泛的支持。AVI格式支持256色和RLE压缩，并允许视频和音频交错在一起同步播放。但AVI文件并未限定压缩算法，只是提供了作为控制界面的标准，用不同压缩算法生成的AVI文件，必须要使用相同的解压缩算法才能解压播放。AVI文件主要应用在多媒体光盘上，用来保存电影、电视等各种影像信息。</p>
<h4 id="2．MPEG格式"><a href="#2．MPEG格式" class="headerlink" title="2．MPEG格式"></a>2．MPEG格式</h4><p>MPEG（Moving Picture Experts Group，动态图像专家组）是运动图像压缩算法的国际标准，已被几乎所有的计算机平台共同支持，它采用有损压缩算法减少运动图像中的冗余信息，同时保证每秒30帧的图像刷新率。MPEG标准包括视频压缩、音频压缩和音视频同步3个部分，MPEG音频最典型的应用就是MP3音频文件，广泛使用的消费类视频产品如VCD、DVD其压缩算法采用的也是MPEG标准。</p>
<p>MPEG压缩算法是针对运动图像而设计的，其基本思路是把视频图像按时间分段，然后采集并保存每一段的第一帧数据，其余各帧只存储相对第一帧发生变化的部分，从而达到了数据压缩的目的。MPEG采用了两个基本的压缩技术：运动补偿技术（预测编码和插补码）实现了时间上的压缩，变换域（离散余弦变换DCT）技术实现了空间上的压缩。MPEG在保证图像和声音质量的前提下，压缩效率非常高，平均压缩比为50∶1，最高可达200∶1。</p>
<h4 id="3．RealVideo格式"><a href="#3．RealVideo格式" class="headerlink" title="3．RealVideo格式"></a>3．RealVideo格式</h4><p>RealVideo格式是由Real Networks公司开发的一种流式视频文件格式，包含在Real Media音频视频压缩规范中，其设计目标是在低速率的广域网上实时传输视频影像。RealVideo可以根据网络的传输速度来决定视频数据的压缩比率，从而提高适应能力，充分利用带宽。本章后面介绍的Real Server软件就是由Real Networks公司提供的，使用的就是Real Video格式的视频文件。</p>
<p>RealVideo格式文件的扩展名有3种，RA是音频文件、RM和RMVB是视频文件。RMVB格式文件具有可变比特率的特性，它在处理较复杂的动态影像时使用较高的采样率，而在处理一般静止画面时则灵活地转换至较低的采样率，从而在不增加文件大小的前提下提高了图像质量。</p>
<h4 id="4．QuickTime格式"><a href="#4．QuickTime格式" class="headerlink" title="4．QuickTime格式"></a>4．QuickTime格式</h4><p>QuickTime是由Apple公司开发的一种音视频数据压缩格式，得到了Mac OS、Microsoft Windows等主流操作系统平台的支持。QuickTime文件格式提供了150多种视频效果，支持25位彩色，支持RLE、JPEG等领先的集成压缩技术。此外，QuickTime还强化了对Internet应用的支持，并采用一种虚拟现实技术，使用户可以通过鼠标或键盘的交互式控制，观察某一地点周围360度的景像，或者从空间的任何角度观察某一物体。QuickTime以其领先的多媒体技术和跨平台特性、较小的存储空间要求、技术细节的独立性以及系统的高度开放性，得到业界的广泛认可。QuickTime格式文件的扩展是MOV或QT。</p>
<h4 id="5．ASF和WMV格式"><a href="#5．ASF和WMV格式" class="headerlink" title="5．ASF和WMV格式"></a>5．ASF和WMV格式</h4><p>ASF（Advanced Streaming Format，高级流格式）和WMV是由Microsoft公司推出的一种在Internet上实时传播多媒体数据的技术标准，提供了本地或网络回放、可扩充的媒体类型、部件下载以及可扩展性等功能。ASF的应用平台是Net Show服务器和Net Show播放器。</p>
<p>WMV也是Microsoft公司推出的一种流媒体格式，它是以ASF为基础，升级扩展后得到的。在同等视频质量下，WMV格式的体积非常小，因此很适合在网上播放和传输。WMV文件一般同时包含视频和音频部分，视频部分使用Windows Media Video编码，而音频部分使用Windows Media Audio编码。音频文件可以独立存在，其扩展名是WMA。</p>
]]></content>
      
        <categories>
            
            <category> 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 流媒体 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS设计模式]]></title>
      <url>/2014/11/18/2014/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>设计模式的功能是在软件设计当中是解决一些重复的公共问题。他们是一些模板来帮助你更容易的书写代码和复用你的代码。他们还可能帮助你创建低耦合的代码，你可以很轻松的修改和替换其中的组件。<br><a id="more"></a></p>
<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>现在可能更流行的是MVVM，首先，你要保证在你的项目中任何一个类都有一个控制器，一个模型，一个视图，一个类中的函数不能有两种作用</p>
</blockquote>
<h2 id="Singleton-–-单例模式"><a href="#Singleton-–-单例模式" class="headerlink" title="Singleton – 单例模式"></a>Singleton – 单例模式</h2><p>单例设计模式确切的说就是一个类只有一个实例，有一个全局的接口来访问这个实例。当第一次载入的时候，它通常使用延时加载的方法创建单一实例。</p>
<p>在一些情况下，一个类只有一个实例是有意义的。例如，这里没有必要有多个登录实例，除非你一次想写入多个日志文件。或者，一个全局的配置类文件：它可以很容易的很安全的执行一个公共资源，这样的一个配置文件，要比同时修改多个配置类文件好很多。</p>
<p>推荐写法，拦截alloc和copy方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">static  MySingleton  *shareSingleton ＝ nil;</div><div class="line"></div><div class="line">+( instancetype ) sharedSingleton  &#123;</div><div class="line"></div><div class="line">   static  dispatch_once  onceToken;</div><div class="line"></div><div class="line">   dispatch_once ( &amp;onceToken, ^ &#123;</div><div class="line"></div><div class="line">   shareSingleton  =  [[super allocWithZone:NULL] init] ;</div><div class="line"></div><div class="line">&#125; );</div><div class="line"></div><div class="line">    return sharedSingleton;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">+(id) allocWithZone:(struct _NSZone *)zone &#123;</div><div class="line"></div><div class="line">   return [Singleton shareInstance] ; </div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">-(id) copyWithZone:(struct _NSZone *)zone &#123;</div><div class="line"></div><div class="line">   return [Singleton shareInstance] ;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Observer-–-观察者模式"><a href="#Observer-–-观察者模式" class="headerlink" title="Observer – 观察者模式"></a>Observer – 观察者模式</h2><p>在观察者模式中，当状态发生改变的时候，一个对象会通知另一个对象。这个对象不需要知道另一个对象发生了什么改变─因此非常鼓励这种分离式的设计。这种模式经常用于，当一个属性发生改变时通知跟它相关的对象。</p>
<p>它通常需要一个观察者(observer)注册跟踪另外一个对象的状态。当状态发生改变的时候，所有的观察对象都会被通知改变。苹果的推送通知服务就是一个这样的例子。</p>
<p>如果你想要一直使用 MVC 模式（你确实需要），你如果想在模型和视图之间，不直接相互引用的情况下还要有通信。这时候就要用到观察者模式了。</p>
<p>Cocoa 有两个常用的方法来执行观察者模式：Notifications 和 Key-Value Observing (KVO)。</p>
<h3 id="通知-Notifications"><a href="#通知-Notifications" class="headerlink" title="通知 Notifications"></a>通知 Notifications</h3><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul>
<li>通知是同步操作，所以再通知的调用方法中做太多的事情是肯定会有问题的，有太多的通知也是有问题的</li>
</ul>
<h3 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h3><h4 id="KVO实现原理"><a href="#KVO实现原理" class="headerlink" title="KVO实现原理"></a>KVO实现原理</h4><p><img src="http://7xrn7f.com1.z0.glb.clouddn.com/16-7-18/9770095.jpg" alt=""></p>
<ul>
<li>KVO是基于runtime机制实现的</li>
<li>当某个类的属性对象第一次被观察时，系统就会在运行期动态地创建该类的一个派生类，在这个派生类中重写基类中任何被观察属性的setter 方法。派生类在被重写的setter方法内实现真正的通知机制</li>
<li>如果原类为Person，那么生成的派生类名为NSKVONotifying_Person</li>
<li>每个类对象中都有一个isa指针指向当前类，当一个类对象的第一次被观察，那么系统会偷偷将isa指针指向动态生成的派生类，从而在给被监控属性赋值时执行的是派生类的setter方法</li>
<li>键值观察通知依赖于NSObject 的两个方法: willChangeValueForKey: 和 didChangevlueForKey:；在一个被观察属性发生改变之前， willChangeValueForKey: 一定会被调用，这就 会记录旧的值。而当改变发生后，didChangeValueForKey: 会被调用，继而 observeValueForKey:ofObject:change:context: 也会被调用。</li>
<li>补充：KVO的这套实现机制中苹果还偷偷重写了class方法，让我们误认为还是使用的当前类，从而达到隐藏生成的派生类</li>
<li>KVO和通知一样，都是同步操作，所以使用的时候要注意</li>
</ul>
<h4 id="手动触发KVO"><a href="#手动触发KVO" class="headerlink" title="手动触发KVO"></a>手动触发KVO</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [super viewDidLoad];</div><div class="line"></div><div class="line">    // “手动触发self.now的KVO”，必写。</div><div class="line">    [self willChangeValueForKey:@&quot;now&quot;];</div><div class="line"></div><div class="line">    // “手动触发self.now的KVO”，必写。</div><div class="line">    [self didChangeValueForKey:@&quot;now&quot;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
